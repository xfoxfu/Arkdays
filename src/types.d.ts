/* eslint-disable */
/**
 * This file is generated by bin/build.ts.
 *
 * DO NOT MANUALLY EDIT ANY CONTENT. IF THIS FILE DOES NOT FIT NEEDS, EDIT bin/build.ts TO FIX IT.
 *
 * @version v1.5.0.1
 */
export namespace System {
  export type AsyncCallback = void;
  export type Boolean = boolean;
  export type Byte = number;
  export type Char = string;
  export type DateTime = Date;
  export type Decimal = number;
  export type Double = number;
  export type Int16 = number;
  export type Int32 = number;
  export type Int64 = number;
  export type Nullable<T> = T | null;
  export type Undefinable<T> = T | undefined;
  export type Object = unknown;
  export type SByte = number;
  export type Single = number;
  export type String = string;
  export type UInt32 = number;
  export type UInt64 = number;
  export namespace Collections {
      export namespace Generic {
          export type List<T> = Array<T>;
          export type IList<T> = Array<T>;
          export type Queue<T> = Array<T>;
          export type HashSet<T> = Set<T>;
          export type Dictionary<K extends string | number, V> = Record<K, V>;
          export type IDictionary<K extends string | number, V> = Record<K, V>;
          export type KeyValuePair<K extends string | number, V> = Record<K, V>;
      }
  }
}
export namespace Newtonsoft {
  export namespace Json {
    export namespace Linq {
      export type JObject = any;
    }
  }
}
export namespace Torappu {
  export interface UpdateFullInspectorRootDirectory {
  }
  export interface GameAnalytics {
    // s_cachedPlatformStr: System.String;
    // s_cachedDeviceIdMap: System.Collections.Generic.Dictionary<System.String,System.String>;
    CHANNEL_OFFICIAL: System.String;
    CURRENCY_TYPE_CNY: System.String;
    // m_channel: System.String;
    // m_subChannel: System.String;
    // m_isInited: System.Boolean;
    // m_currentAccount: TDGAAccount;
    // m_sharedArgs: System.Collections.Generic.Dictionary<System.String,System.Object>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_Init: XLua.DelegateBridge;
    // __Hotfix0_Register: XLua.DelegateBridge;
    // __Hotfix0_LoginAccount: XLua.DelegateBridge;
    // __Hotfix0_LoginGame: XLua.DelegateBridge;
    // __Hotfix0_StopGame: XLua.DelegateBridge;
    // __Hotfix0_OnSyncData: XLua.DelegateBridge;
    // __Hotfix0_NewGuest: XLua.DelegateBridge;
    // __Hotfix0_CreateRole: XLua.DelegateBridge;
    // __Hotfix0_SetLevel: XLua.DelegateBridge;
    // __Hotfix0_OnHotUpdateFinished: XLua.DelegateBridge;
    // __Hotfix0_OnPaySucceed: XLua.DelegateBridge;
    // __Hotfix0_OnConfirmOrder: XLua.DelegateBridge;
    // __Hotfix0_OnCreateOrder: XLua.DelegateBridge;
    // __Hotfix0_OnBattleStart: XLua.DelegateBridge;
    // __Hotfix0_OnBattleEnd: XLua.DelegateBridge;
    // __Hotfix0_OnAdvancedGacha: XLua.DelegateBridge;
    // __Hotfix0_OnNormalGacha: XLua.DelegateBridge;
    // __Hotfix0_OnEvolve: XLua.DelegateBridge;
    // __Hotfix0_OnPotentialBoost: XLua.DelegateBridge;
    // __Hotfix0_OnSkillMainLvlup: XLua.DelegateBridge;
    // __Hotfix0_OnSkillSpecializedUp: XLua.DelegateBridge;
    // __Hotfix0_OnStoryEnd: XLua.DelegateBridge;
    // __Hotfix0_OnRoomUpgraded: XLua.DelegateBridge;
    // __Hotfix0_OnSendFriendRequest: XLua.DelegateBridge;
    // __Hotfix0_OnFetchGpShop: XLua.DelegateBridge;
    // __Hotfix0_OnFetchSkinShop: XLua.DelegateBridge;
    // __Hotfix0_OnFetchCashShop: XLua.DelegateBridge;
    // __Hotfix0_OnPurchaseClicked: XLua.DelegateBridge;
    // __Hotfix0_OnPurchaseCompleted: XLua.DelegateBridge;
    // __Hotfix0_OnApplicationPause: XLua.DelegateBridge;
    // __Hotfix0_OnApplicationQuit: XLua.DelegateBridge;
    // __Hotfix0__CheckIfInited: XLua.DelegateBridge;
    // __Hotfix0__GetChannel: XLua.DelegateBridge;
    // __Hotfix0__GetSubChannel: XLua.DelegateBridge;
    // __Hotfix0__TryGetCharIdByInstId: XLua.DelegateBridge;
    // __Hotfix0_GetDeviceIdMap: XLua.DelegateBridge;
    // __Hotfix0_GetOfficialDeviceId: XLua.DelegateBridge;
    // __Hotfix0__GetPlatformStr: XLua.DelegateBridge;
  }
  export interface AudioManager {
    TIMEEPS: System.Single;
    SNAPSHOT_DEFAULT: System.String;
    CHANNEL_MUSIC: System.String;
    CHANNEL_AUTO: System.String;
    // m_audioOptions: Torappu.Audio.AudioOptions;
    // m_mainMixer: UnityEngine.Audio.AudioMixer;
    // m_audioClipManager: Torappu.Audio.AudioClipManager;
    // m_audioSourcesHolder: UnityEngine.GameObject;
    // m_listener: UnityEngine.AudioListener;
    // m_channelPool: Torappu.ObjectPool.ObjectPool<Torappu.Audio.AudioChannel>;
    // m_channels: System.Collections.Generic.Dictionary<System.String,Torappu.Audio.AudioChannel>;
    // m_allocatedChannelID: System.Int32;
    // m_tempChannelsToRemove: System.Collections.Generic.List<Torappu.Audio.AudioChannel>;
    // m_musicVolume: System.Single;
    // m_fxVolume: System.Single;
    // m_voiceVolume: System.Single;
    // m_currentSnapshotParam: Torappu.AudioManager.SnapshotParam;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_get_musicVolume: XLua.DelegateBridge;
    // __Hotfix0_set_musicVolume: XLua.DelegateBridge;
    // __Hotfix0_get_fxVolume: XLua.DelegateBridge;
    // __Hotfix0_set_fxVolume: XLua.DelegateBridge;
    // __Hotfix0_get_voiceVolume: XLua.DelegateBridge;
    // __Hotfix0_set_voiceVolume: XLua.DelegateBridge;
    // __Hotfix0_get_currentSnapshotParam: XLua.DelegateBridge;
    // __Hotfix0_get_audioClipManager: XLua.DelegateBridge;
    // __Hotfix0_Init: XLua.DelegateBridge;
    // __Hotfix0_PlaySoundFx: XLua.DelegateBridge;
    // __Hotfix0_PlayMusic: XLua.DelegateBridge;
    // __Hotfix0_PlayMusicWithIntro: XLua.DelegateBridge;
    // __Hotfix0_PlayVoice: XLua.DelegateBridge;
    // __Hotfix0_PlayAudio: XLua.DelegateBridge;
    // __Hotfix0_GetChannel: XLua.DelegateBridge;
    // __Hotfix0_GetMusicChannel: XLua.DelegateBridge;
    // __Hotfix0_StopChannel: XLua.DelegateBridge;
    // __Hotfix0_StopMusic: XLua.DelegateBridge;
    // __Hotfix0_PreloadAudioClip: XLua.DelegateBridge;
    // __Hotfix0_UnloadPreloadedAudioClips: XLua.DelegateBridge;
    // __Hotfix0_StopPreloadedAudioClips: XLua.DelegateBridge;
    // __Hotfix0_SetAudioClipMaxInstanceCount: XLua.DelegateBridge;
    // __Hotfix0_TransitionToDefaultSnapshot: XLua.DelegateBridge;
    // __Hotfix0_TransitionToSnapshot: XLua.DelegateBridge;
    // __Hotfix1_TransitionToSnapshot: XLua.DelegateBridge;
    // __Hotfix2_TransitionToSnapshot: XLua.DelegateBridge;
    // __Hotfix0_SetListenerPosition: XLua.DelegateBridge;
    // __Hotfix0_get_channelPool: XLua.DelegateBridge;
    // __Hotfix0_get_channels: XLua.DelegateBridge;
    // __Hotfix0_get__musicVolume: XLua.DelegateBridge;
    // __Hotfix0_set__musicVolume: XLua.DelegateBridge;
    // __Hotfix0_get__fxVolume: XLua.DelegateBridge;
    // __Hotfix0_set__fxVolume: XLua.DelegateBridge;
    // __Hotfix0_get__voiceVolume: XLua.DelegateBridge;
    // __Hotfix0_set__voiceVolume: XLua.DelegateBridge;
    // __Hotfix0__OnSettingChange: XLua.DelegateBridge;
    // __Hotfix0__Init: XLua.DelegateBridge;
    // __Hotfix0__CreateChannel: XLua.DelegateBridge;
    // __Hotfix0__GetMixerParam: XLua.DelegateBridge;
    // __Hotfix0__SetMixerParam: XLua.DelegateBridge;
    // __Hotfix0__PlaySoundFx: XLua.DelegateBridge;
    // __Hotfix0__PlayMusic: XLua.DelegateBridge;
    // __Hotfix0__PlayVoice: XLua.DelegateBridge;
    // __Hotfix0__PlayAudio: XLua.DelegateBridge;
    // __Hotfix1__PlayAudio: XLua.DelegateBridge;
    // __Hotfix0__SetListenerPosition: XLua.DelegateBridge;
    // __Hotfix0__UnloadPreloadedAudioClips: XLua.DelegateBridge;
    // __Hotfix0__StopPreloadedAudioClips: XLua.DelegateBridge;
    // __Hotfix0__StopChannelsWithClips: XLua.DelegateBridge;
    // __Hotfix0__TransitionSnapshots: XLua.DelegateBridge;
    // __Hotfix0__DoTransitionSnapshots: XLua.DelegateBridge;
    // __Hotfix0__RecycleChannel: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0_Update: XLua.DelegateBridge;
  }
  export interface AudioModules {
    BATTLE: System.String;
    UI: System.String;
    SYSTEM: System.String;
  }
  export interface TorappuAudio {
    // m_middleware: Torappu.Audio.Middleware.AudioMiddleware;
    // m_sb: System.Text.StringBuilder;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_PlayBattle: XLua.DelegateBridge;
    // __Hotfix1_PlayBattle: XLua.DelegateBridge;
    // __Hotfix0_PlayUI: XLua.DelegateBridge;
    // __Hotfix0_PlaySystem: XLua.DelegateBridge;
    // __Hotfix0_PlayAndGetAtoms: XLua.DelegateBridge;
    // __Hotfix0_SetListenerPosition: XLua.DelegateBridge;
    // __Hotfix0_PreloadBattle: XLua.DelegateBridge;
    // __Hotfix0_PreloadUI: XLua.DelegateBridge;
    // __Hotfix0_PreloadSystem: XLua.DelegateBridge;
    // __Hotfix0_UnloadPreloadedAssets: XLua.DelegateBridge;
    // __Hotfix0_StopPreloadedEvents: XLua.DelegateBridge;
    // __Hotfix0_Init: XLua.DelegateBridge;
    // __Hotfix0_ReloadBanks: XLua.DelegateBridge;
    // __Hotfix0_StopAll: XLua.DelegateBridge;
    // __Hotfix0__Init: XLua.DelegateBridge;
    // __Hotfix0__ReloadBanks: XLua.DelegateBridge;
    // __Hotfix0__GenerateEventName: XLua.DelegateBridge;
    // __Hotfix0__Play: XLua.DelegateBridge;
    // __Hotfix1__Play: XLua.DelegateBridge;
    // __Hotfix0__Preload: XLua.DelegateBridge;
    // __Hotfix0__UnloadPreloadedAssets: XLua.DelegateBridge;
    // __Hotfix0__StopPreloadedEvents: XLua.DelegateBridge;
    // __Hotfix0__SetListenerPosition: XLua.DelegateBridge;
    // __Hotfix0__StopAll: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0_Update: XLua.DelegateBridge;
  }
  export enum AVGPageKey {
    NONE = "NONE",
    HOME = "HOME",
    SQUAD = "SQUAD",
    CHAR_REPO = "CHAR_REPO",
    CHAR_INFO = "CHAR_INFO",
    HANDBOOK = "HANDBOOK",
    STAGE = "STAGE",
    BUILDING = "BUILDING",
    RECRUIT = "RECRUIT",
    SHOP = "SHOP",
    MISSION = "MISSION",
    FRIEND = "FRIEND",
  }
  export interface AVGTextManager {
    // m_translater: Torappu.AVG.IAVGTextTranslater;
    // <>f__mg$cache0: Torappu.AVG.VariableTranslater.VariableGetterDelegate;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_Translate: XLua.DelegateBridge;
  }
  export interface ActionKV<TKey> {
    key: TKey;
    // value: ActionArray;
  }
  export interface ActionDict<TKey,TPair> {
    _items: System.Collections.Generic.List<TPair>;
  }
  export interface ITweenHandler {
  }
  export interface DOTweenWrapper {
    // m_internalTween: DG.Tweening.Tween;
  }
  export interface BattleTweenMgr {
    // m_tweenPool: Torappu.ObjectPool.ObjectPool<Torappu.BattleTweenMgr.Tween>;
    // m_tweenList: System.Collections.Generic.List<Torappu.BattleTweenMgr.Tween>;
    // <>f__am$cache0: System.Func<Torappu.BattleTweenMgr.Tween>;
  }
  export interface BattleSearchUtils {
  }
  export interface TestLogConsole {
    // area: UnityEngine.Rect;
    // m_itemList: System.Collections.Generic.List<Torappu.TestLogConsole.Item>;
    // m_collasped: System.Boolean;
    // m_scrollPos: UnityEngine.Vector2;
  }
  export interface BuildingBenefits {
  }
  export interface BuildingBuffUtil {
  }
  export interface BuildingRoomInfoModel {
    EMPTY: Torappu.BuildingRoomInfoModel;
    slotId: System.String;
    roomId: Torappu.BuildingData.RoomType;
    name: System.String;
    level: System.Int32;
    phaseData: Torappu.BuildingData.RoomData.PhaseData;
    storeyData: Torappu.BuildingData.LayoutData.StoreyData;
  }
  export interface BuildingVisitContext {
    nextIndex: System.Int32;
    originScene: System.String;
    playerInfo: Torappu.BuildingVisitContext.PlayerInfo;
    sortedFriendList: System.Collections.Generic.List<Torappu.BuildingVisitContext.FriendInfo>;
  }
  export interface BuildingVisitController {
    // <>f__am$cache0: System.Comparison<Torappu.BuildingVisitContext.FriendInfo>;
  }
  export enum BuildingToDoCategory {
    NONE = "NONE",
    NORMAL = "NORMAL",
    EMERGENCY = "EMERGENCY",
  }
  export enum BuildingToDoType {
    NONE = "NONE",
    MANUF_STOP = "MANUF_STOP",
    TRADE_STOP = "TRADE_STOP",
    HIRE_EMPTY = "HIRE_EMPTY",
    MEETING_EMPTY = "MEETING_EMPTY",
    NEW_PRODUCTS = "NEW_PRODUCTS",
    HAS_ORDERS = "HAS_ORDERS",
    CHAR_TIRED = "CHAR_TIRED",
    TRAIN_FINISH = "TRAIN_FINISH",
    HIRE_REFRESHED = "HIRE_REFRESHED",
    NEW_CLUES = "NEW_CLUES",
    NEW_FAVOR = "NEW_FAVOR",
  }
  export interface BuildingToDoNotifyModel {
    // m_notifications: Torappu.ListDict<Torappu.BuildingToDoCategory,System.Collections.Generic.List<Torappu.BuildingToDoNotifyItemModel>>;
    // m_emerCount: System.Int32;
    // m_normalCount: System.Int32;
    // <>f__am$cache0: System.Func<Torappu.BuildingToDoNotifyItemModel>;
    // <>f__am$cache1: System.Func<Torappu.BuildingToDoNotifyModel.NotifyContext>;
    // <>f__am$cache2: System.Func<Torappu.BuildingToDoNotifyItemModel>;
    // <>f__am$cache3: System.Func<Torappu.BuildingToDoNotifyModel.NotifyContext>;
    // <>f__am$cache4: System.Func<Torappu.BuildingToDoNotifyItemModel>;
    // <>f__am$cache5: System.Func<Torappu.BuildingToDoNotifyModel.NotifyContext>;
    // <>f__am$cache6: System.Func<Torappu.BuildingToDoNotifyItemModel>;
    // <>f__am$cache7: System.Func<Torappu.BuildingToDoNotifyModel.NotifyContext>;
    // <>f__mg$cache0: System.Func<Torappu.BuildingToDoNotifyItemModel>;
    // <>f__mg$cache1: System.Func<Torappu.BuildingToDoNotifyModel.NotifyContext>;
    // <>f__am$cache8: System.Func<Torappu.BuildingToDoNotifyItemModel>;
    // <>f__am$cache9: System.Func<Torappu.BuildingToDoNotifyModel.NotifyContext>;
    // <>f__am$cacheA: System.Func<Torappu.BuildingToDoNotifyItemModel>;
    // <>f__am$cacheB: System.Func<Torappu.BuildingToDoNotifyModel.NotifyContext>;
    // <>f__am$cacheC: System.Func<Torappu.BuildingToDoNotifyItemModel>;
    // <>f__am$cacheD: System.Func<Torappu.BuildingToDoNotifyModel.NotifyContext>;
    // <>f__am$cacheE: System.Func<Torappu.BuildingToDoNotifyItemModel>;
    // <>f__am$cacheF: System.Func<Torappu.BuildingToDoNotifyModel.NotifyContext>;
    // <>f__am$cache10: System.Func<Torappu.BuildingToDoNotifyItemModel>;
    // <>f__am$cache11: System.Func<Torappu.BuildingToDoNotifyModel.NotifyContext>;
    // <>f__am$cache12: System.Func<Torappu.BuildingToDoNotifyItemModel>;
    // <>f__am$cache13: System.Func<Torappu.BuildingToDoNotifyModel.NotifyContext>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_GetNotifications: XLua.DelegateBridge;
    // __Hotfix0_CountOfNotifications: XLua.DelegateBridge;
    // __Hotfix0_AdjustSelections: XLua.DelegateBridge;
    // __Hotfix0_LoadData: XLua.DelegateBridge;
    // __Hotfix0__LoadEmergency: XLua.DelegateBridge;
    // __Hotfix0__LoadNormal: XLua.DelegateBridge;
    // __Hotfix0__AddNewProductNormalNotification: XLua.DelegateBridge;
    // __Hotfix0__AddNewOrderNormalNotification: XLua.DelegateBridge;
    // __Hotfix0__AddCharTiredNormalNotification: XLua.DelegateBridge;
    // __Hotfix0__AddHireRefreshCountNormalNotification: XLua.DelegateBridge;
    // __Hotfix0__CreateNotifyIfExists: XLua.DelegateBridge;
    // __Hotfix0__AddToListSecured: XLua.DelegateBridge;
    // __Hotfix0__CreateNewFavorModel: XLua.DelegateBridge;
    // __Hotfix0__NewFavorAddSlots: XLua.DelegateBridge;
  }
  export interface BuildingToDoNotifyItemModel {
    type: Torappu.BuildingToDoType;
    desc: System.String;
    count: System.Int32;
    clickDesc: System.String;
    slots: System.Collections.Generic.List<System.String>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_GetCount4Display: XLua.DelegateBridge;
  }
  export interface BuildingToDoNotifyUtil {
  }
  export interface AttributesCalculator {
    // s_sharedBuffList: System.Collections.Generic.List<Torappu.ExternalBuff>;
  }
  export interface ClearAssets {
    _clearOnAwake: System.Boolean;
    _unloadAll: System.Boolean;
    _forceUnloadEvenUsed: System.Boolean;
    _excludedPrefixes: System.String[];
    // <isClearing>k__BackingField: System.Boolean;
    // <isCleared>k__BackingField: System.Boolean;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_get_isClearing: XLua.DelegateBridge;
    // __Hotfix0_set_isClearing: XLua.DelegateBridge;
    // __Hotfix0_get_isCleared: XLua.DelegateBridge;
    // __Hotfix0_set_isCleared: XLua.DelegateBridge;
    // __Hotfix0_ClearIfExists: XLua.DelegateBridge;
    // __Hotfix0__DoClear: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
  }
  export interface Colors {
    // STEEL_BLUE: UnityEngine.Color;
    // ORANGE: UnityEngine.Color;
    // TRANSPARENT: UnityEngine.Color;
  }
  export interface DynamicPrefab {
    _prefabPath: System.String;
    // m_prefab: UnityEngine.GameObject;
    // m_instance: UnityEngine.GameObject;
  }
  export interface ScreenEffectHolder {
    _enabled: System.Boolean;
    // _effectToLoad: UnityEngine.GameObject;
    // m_effectInst: UnityEngine.GameObject;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_get_isEnabled: XLua.DelegateBridge;
    // __Hotfix0_Awake: XLua.DelegateBridge;
    // __Hotfix0_SetEffectEnable: XLua.DelegateBridge;
    // __Hotfix0__EnableEffect: XLua.DelegateBridge;
    // __Hotfix0__DisableEffect: XLua.DelegateBridge;
  }
  export interface GameDataException {
  }
  export interface ResourceException {
  }
  export interface SecurityException {
  }
  export interface AudioExtensions {
  }
  export interface CollectionExtensions {
  }
  export interface DateTimeExtensions {
    // __Hotfix0_IsEmpty: XLua.DelegateBridge;
    // __Hotfix0_StartOfGameDay: XLua.DelegateBridge;
    // __Hotfix0_EndOfGameDay: XLua.DelegateBridge;
    // __Hotfix0_StartOfGameWeek: XLua.DelegateBridge;
    // __Hotfix0_EndOfGameWeek: XLua.DelegateBridge;
    // __Hotfix0_GameDayOfWeek: XLua.DelegateBridge;
  }
  export interface DOTweenExtensions {
  }
  export interface ObjectExtensions {
  }
  export interface RandomExtensions {
  }
  export interface GameFlowController {
    ASYNC_SCENE_LOAD_MAX_PROGRESS: System.Single;
    LOADING_MODE_MIN_WAITING_TIME: System.Single;
    // m_addingScenes: Torappu.ListSet<System.String>;
    // m_isTransiting: System.Boolean;
    // m_sceneBundle: Torappu.SceneBundle;
    // m_isShowingBlackLoading: System.Boolean;
    // beforeSceneTransition: System.Action<System.String,System.String>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_add_beforeSceneTransition: XLua.DelegateBridge;
    // __Hotfix0_remove_beforeSceneTransition: XLua.DelegateBridge;
    // __Hotfix0_get_isTransiting: XLua.DelegateBridge;
    // __Hotfix0_StartScene: XLua.DelegateBridge;
    // __Hotfix1_StartScene: XLua.DelegateBridge;
    // __Hotfix0_AddScene: XLua.DelegateBridge;
    // __Hotfix0_StartSceneAnyway: XLua.DelegateBridge;
    // __Hotfix1_StartSceneAnyway: XLua.DelegateBridge;
    // __Hotfix0_StartSceneAsync: XLua.DelegateBridge;
    // __Hotfix1_StartSceneAsync: XLua.DelegateBridge;
    // __Hotfix0_get_currentSceneBundle: XLua.DelegateBridge;
    // __Hotfix0_get_currentScene: XLua.DelegateBridge;
    // __Hotfix0__StartScene: XLua.DelegateBridge;
    // __Hotfix1__StartScene: XLua.DelegateBridge;
    // __Hotfix0__StartSceneAnyway: XLua.DelegateBridge;
    // __Hotfix0__StartSceneAsync: XLua.DelegateBridge;
    // __Hotfix0__TransitSceneCoroutine: XLua.DelegateBridge;
    // __Hotfix0__LoadEmptySceneToClear: XLua.DelegateBridge;
    // __Hotfix0__DoCommonClearLogic: XLua.DelegateBridge;
    // __Hotfix0__OnSceneLoaded: XLua.DelegateBridge;
    // __Hotfix0__ShowBlackLoading: XLua.DelegateBridge;
    // __Hotfix0__HideBlackLoading: XLua.DelegateBridge;
    // __Hotfix0__AddScene: XLua.DelegateBridge;
    // __Hotfix0__AddSceneCoroutine: XLua.DelegateBridge;
    // __Hotfix0__MayOverrideNextScene: XLua.DelegateBridge;
    // __Hotfix0__TryHookStoryScene: XLua.DelegateBridge;
    // __Hotfix0__LoadTargetSceneAsync: XLua.DelegateBridge;
    // __Hotfix0__LoadTargetSceneAsyncFastMode: XLua.DelegateBridge;
    // __Hotfix0_CheckIsInBattleScene: XLua.DelegateBridge;
    // __Hotfix0_CheckIsInStoryScene: XLua.DelegateBridge;
  }
  export interface GameFlowListener {
    REGISTER_WAIT_CYCLES: System.Int32;
    // m_listenersRegistered: System.Boolean;
    // m_initListeners: System.Collections.Generic.List<System.Collections.IEnumerator>;
    // m_redirectBundle: Torappu.GameFlowListener.RedirectBundle;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_RegisterInitListener: XLua.DelegateBridge;
    // __Hotfix0_RedirectScene: XLua.DelegateBridge;
    // __Hotfix1_RedirectScene: XLua.DelegateBridge;
    // __Hotfix0_get_configCollectCoroutine: XLua.DelegateBridge;
    // __Hotfix0_get_initialCoroutine: XLua.DelegateBridge;
    // __Hotfix0__RegisterInitListener: XLua.DelegateBridge;
    // __Hotfix0_get_redirectBundle: XLua.DelegateBridge;
  }
  export interface ISceneParam {
  }
  export interface SceneBundle {
    fromScene: System.String;
    toScene: System.String;
    param: Torappu.ISceneParam;
  }
  export interface SceneConsts {
    EMPTY_SCENE: System.String;
    HOME: System.String;
    BATTLE_LOADER: System.String;
    LOGIN: System.String;
    BATTLE_FINISH: System.String;
    UI_EDITOR_SCENE: System.String;
    STORY: System.String;
    GACHA_ANIME: System.String;
    HOT_UPDATE: System.String;
    BUILDING: System.String;
    INIT_SCENE: System.String;
  }
  export interface FileExtensions {
    EXTENSION_ASSETBUNDLE: System.String;
    EXTENSION_MANIFEST: System.String;
    EXTENSION_SCENE: System.String;
    EXTENSION_ASSET: System.String;
    EXTENSION_META: System.String;
    EXTENSION_JSON: System.String;
    EXTENSION_BYTES: System.String;
    EXTENSION_PREFAB: System.String;
    EXTENSION_ZIP: System.String;
    EXTENSION_MODEL: System.String;
    EXTENSION_PNG: System.String;
    EXTENSION_TXT: System.String;
    EXTENSION_RAW_DATA: System.String;
    EXTENSION_LUA: System.String;
    EXTENSION_CSHARP: System.String;
    EXTENSION_MP4: System.String;
    EXTENSION_SHADER: System.String;
    EXTENSION_LUA_ASSET: System.String;
    EXTENSION_OGG: System.String;
  }
  export interface GlobalConsts {
    GAME_NAME: System.String;
    DEFAULT_LAYER: System.String;
    UI_LOWER_LAYER: System.String;
    UI_UPPER_LAYER: System.String;
    UI_SORT_LAYER: System.String;
    UI_LAYER: System.Int32;
    UI_CULL_MASK_LAYER: System.Int32;
    BGM_FADEOUT_TIME: System.Single;
    SE_FADEOUT_TIME: System.Single;
    VOICE_FADEOUT_TIME: System.Single;
    STANDARD_RATIO: System.Single;
    HALF_FIXED_DELTA_TIME: System.Single;
    // SCENE_CAMERA_DEPTH: UnityEngine.RangeInt;
    MAX_RARITY_RANK: System.Int32;
    MAX_EVOLVE_PHASE: System.Int32;
    HOME_ILLUST_IDLE_TIME_FIRST: System.Single;
    HOME_ILLUST_IDLE_TIME_NOT_FIRST: System.Single;
    TOP_RARITY: Torappu.RarityRank;
    FILE_STORAGE_STORE_ORDER_CENTER: System.String;
    GRIDPOS_REGEX: RegExp;
    RECT_REGEX: RegExp;
    FIXED_DELTA_TIME_FP: Torappu.FP;
    HALF_FIXED_DELTA_TIME_FP: Torappu.FP;
    // s_systemMemorySize: System.Nullable<System.Int32>;
    SYSTEM_MEMORY_LIMIT_FOR_UI: System.Int32;
  }
  export interface GlobalDefaults {
    EMPTY_STRINGS: System.String[];
    DB_INITIAL_LIST_CAPACITY: System.Int32;
    // DEFAULT_SHADER_QUALITY: UnityEngine.ShadowQuality;
    // DEFAULT_SHADER_RESOLUTION: UnityEngine.ShadowResolution;
    DEFAULT_SEPARATOR: System.Char[];
    DEFAULT_GROUP_SEPARATOR: System.Char[];
    DEFAULT_TIMESCALE: System.Single;
    DEFAULT_PREDEFINED_ABILITY: System.String;
  }
  export interface GlobalIcons {
    RED_FLAG: System.String;
  }
  export interface DebugConsts {
    MOCK_BATTLE_ID: System.String;
    DUMMY_LEVEL: System.String;
    NULL_DEBUG_STR: System.String;
    DEV_LEVEL_LAUNCHER: System.String;
  }
  export interface CharacterConst {
    MAX_EVOLVEPHASE: Torappu.EvolvePhase;
    NORMAL_SPECIALIZED_STATE: System.Int32;
    LVLUP_SPECIALIZED_STATE: System.Int32;
    OTHER_LEVLUP_SPECIALIZED_STATE: System.Int32;
    SKILL_MAX_NUM: System.Int32;
    SKILL_MAX_LVL: System.Int32;
    SKILL_MAX_SPECIALIZED_LVL: System.Int32;
    AMIYA_ID: System.String;
    PERSISTENT_CHARS: System.String[];
  }
  export interface GlobalBusinessFlags {
    PURCHASED_GOOD_FOR_HOME: System.Int32;
  }
  export interface GlobalShaders {
    UI_ALPHASPLIT: System.String;
    UI_AVG_ALPHASPLIT: System.String;
    UI_AVG_CHAR_ALPHASPLIT: System.String;
    SPINE_GRAPHIC_ALPHASPLIT_SHADER: System.String;
    TINT_COLOR_LOC: System.String;
    ALPHA_TEX_LOC: System.String;
    DYNAMIC_TEX: System.String;
    DYNAMIC_ALPHA_TEX: System.String;
    CHAR_BLACK_START: System.String;
    CHAR_BLACK_END: System.String;
    EMISSION_COLOR_LOC: System.String;
    EMISSION_TEX_LOC: System.String;
    EMISSION_ENABLE_KEYWORD: System.String;
  }
  export interface PlayerPrefKeys {
    TORAPPU_USERNAME: System.String;
    TORAPPU_SDK_TOKEN: System.String;
    TORAPPU_SDK_UID: System.String;
    TORAPPU_LAST_BUNDLE_VERSION: System.String;
    TORAPPU_SDK_LOGIN_GUEST: System.String;
    TORAPPU_SDK_IS_IDENTITY_VERIFIED: System.String;
    TORAPPU_SDK_IS_MINOR: System.String;
    TORAPPU_DEVICE_ID: System.String;
    TORAPPU_UNFINISHED_ORDER_ID: System.String;
    HG_STORE_ORDER_CENTER_CACHE: System.String;
  }
  export interface GlobalTemp {
    // COLLIDERS_ARRAY: UnityEngine.Collider2D[];
    INT_LIST: System.Collections.Generic.List<System.Int32>;
  }
  export interface GlobalTags {
    TUTORIAL_TAG: System.String;
    UNTAGGED_TAG: System.String;
  }
  export interface MemoryPoolGroup {
    BATTLE_LOG: System.String;
  }
  export interface SortingLayers {
    DEFAULT: System.Int32;
    BACKGROUND: System.Int32;
    TOPMOST: System.Int32;
    MAP_TILE: System.Int32;
    MAP_WIDGET: System.Int32;
    MAP_FOREGROUND: System.Int32;
  }
  export interface GlobalFlags {
    ENABLE_PAPER_MARIO: System.Boolean;
    ALLOW_WITHDRAW_GAIN_COST: System.Boolean;
    INCREASE_COST_AFTER_RESPAWN: System.Boolean;
    ENABLE_CHARACTER_LIMIT: System.Boolean;
    PRELOAD_CHARACTER_ILLUSTRATIONS: System.Boolean;
    CHECK_INVALID_INPUT_ON_CLIENT: System.Boolean;
    ENABLE_CAMERA_EFFECT: System.Boolean;
  }
  export interface GlobalInitializerAndUpdater {
    ASYNC_LOADING_SCENES: System.String[];
    // m_isInited: System.Boolean;
    // m_actionsWhenInited: System.Collections.Generic.List<System.Action>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_IsInited: XLua.DelegateBridge;
    // __Hotfix0_WaitForInitCoroutine: XLua.DelegateBridge;
    // __Hotfix0_InvokeWhenInitReadyBeforeWaitingCoroutines: XLua.DelegateBridge;
    // __Hotfix0_Awake: XLua.DelegateBridge;
    // __Hotfix0_Update: XLua.DelegateBridge;
    // __Hotfix0_OnApplicationQuit: XLua.DelegateBridge;
    // __Hotfix0__DoInitInAwake: XLua.DelegateBridge;
    // __Hotfix0__RegisterGlobalListeners: XLua.DelegateBridge;
    // __Hotfix0__InitLuaManagerIfNot: XLua.DelegateBridge;
    // __Hotfix0_DoReloadAll: XLua.DelegateBridge;
    // __Hotfix0_WaitForSceneResReady: XLua.DelegateBridge;
    // __Hotfix0__StartCorotuine: XLua.DelegateBridge;
    // __Hotfix0__EnableAsyncReloadAfterHotupdate: XLua.DelegateBridge;
    // __Hotfix0__UseAsyncDBForCurDevice: XLua.DelegateBridge;
  }
  export interface GlobalOptions {
    devVersion: System.String;
    dynamicConfigPath: System.String;
    crossThisBundleVersionToDeleteAllCachedFiles: System.String;
    // cryptoPubKey: UnityEngine.TextAsset;
    // backupStringMap: UnityEngine.TextAsset;
    expiredRes: Torappu.Resource.ExpiredPersistentRes[];
  }
  export interface GlobalOptionsHolder {
    _globalOptions: Torappu.GlobalOptions;
    _logOptions: Torappu.DLogOptions;
    _resourceOptions: Torappu.Resource.ResourceOptions;
    _dbOptions: Torappu.DB.DBOptions;
    _audioOptions: Torappu.Audio.AudioOptions;
    _networkOptions: Torappu.Network.NetworkOptions;
    _sdkOptions: Torappu.SDK.SDKOptions;
    _luaOptions: Torappu.Lua.LuaOptions;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_OnDuplicated: XLua.DelegateBridge;
  }
  export interface CameraAim {
    // aimTarget: UnityEngine.Transform;
    // source: UnityEngine.Transform;
    // m_oriSourceUp: UnityEngine.Vector3;
  }
  export interface RaycastCalculator {
    // planePoint: UnityEngine.Transform;
    // planeNormal: UnityEngine.Vector3;
    // source: UnityEngine.Transform;
  }
  export interface EnemyIconHub {
  }
  export interface PortraitHub {
  }
  export interface SkillIconHub {
  }
  export interface ISpriteHub {
  }
  export interface MonoISpriteHub {
  }
  export interface SpriteHub {
    _caseSensitive: System.Boolean;
    // _sprites: UnityEngine.Sprite[];
    // m_spriteHub: System.Collections.Generic.Dictionary<System.String,UnityEngine.Sprite>;
  }
  export interface IOnPrefabUpdated {
  }
  export interface ReflectMethodAttribute {
  }
  export interface IPtrObject {
  }
  export interface IReusableObject {
  }
  export interface ObjectPtr<T> {
    obj: T;
    cachedUid: System.UInt32;
  }
  export interface RendererSortingLayersSetter {
    _sortingLayerID: System.Int32;
    _sortingOrder: System.Int32;
    // m_renderer: UnityEngine.Renderer;
  }
  export interface ColorRes {
    // HILIGHT_ORANGE: UnityEngine.Color;
    // HILIGHT_YELLOW: UnityEngine.Color;
    // COMMON_BLUE: UnityEngine.Color;
    // COMMON_GREEN: UnityEngine.Color;
    // COMMON_BLACK: UnityEngine.Color;
    // LIGHT_GRAY: UnityEngine.Color;
    // GRAY: UnityEngine.Color;
    // DARK_GRAY: UnityEngine.Color;
    // TEXT_GRAY: UnityEngine.Color;
    // DARK_BLUE: UnityEngine.Color;
    // COLOR_FOR_ENEMY_HP: UnityEngine.Color;
    // COLOR_FOR_ALLY_HP: UnityEngine.Color;
    // LOGO_GRAY: UnityEngine.Color;
    // COLOR_FOR_CONFLICT_LINE: UnityEngine.Color;
    HILIGHT_YELLOW_STRING: System.String;
    HILIGHT_ORANGE_STRING: System.String;
    COMMON_GREEN_STRING: System.String;
    GRAY_STRING: System.String;
    DARK_GRAY_STRING: System.String;
    BLUE_STRING: System.String;
    SQUAD_ASSIST_CHAR_ALREADY_EXIST_COLOR: System.String;
    SQUAD_ASSIST_CHAR_INVALID_COLOR: System.String;
    SQUAD_ASSIST_CHAR_REQUIRED_COLOR: System.String;
  }
  export interface StringRes {
    GREEK: System.String[];
    // __Hotfix0_get_DIALOG_RELOGIN: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_SERVICE_TIMEOUT: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_INTERNAL_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_NETWORK_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_BANNED_USER: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_INVALID_CLIENT: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_VERSION_ID_OUT_OF_DATE: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_DOWNLOAD_DATA_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_LOGIN_DATA_VERSION_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_INVALID_FORMAT: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_HOT_UPDATED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_STORY_COMMIT_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_AERLT_SYNC_STATUS_CROSS_DAY_SUCCEED: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_SYNC_STATUS_CROSS_DAY_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_SYNC_STATUS_NEED_CROSS_DAY: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_SYNC_STATUS_CROSS_DAY_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_EXCEL_VALIDATION_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_NETWORK_AUTH_TIMEOUT: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_SETTING_RESET: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_HTTP_TIMEOUT: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_HTTP_NO_RESPONSE: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_HTTP_WITH_CODE: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_NETWORK_SECURE_INIT_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_FETCH_URLS_TIMEOUT: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_FETCH_URLS_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_FETCH_URLS_INVALID_CONTENT: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_FETCH_REMOTE_CONFIG_TIMEOUT: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_FETCH_REMOTE_CONFIG_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_INIT_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_SERVICE_TIMEOUT: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_GET_PRODUCT_LIST_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_AUTH_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_CAPTCHA_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_CAPTCHA_DISABLED_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_AUTH_REJECTED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_AUTH_ACCOUNT_FORBIDDEN: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_AUTH_CAPTCHA_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_INTERNAL_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_CREATE_ORDER_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_CONFIRM_ORDER_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_GUEST_UPGRADE_SERVICE_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_GUEST_UPGRADE_NOT_GUEST: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_GUEST_UPGRADE_INVALID_UID: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_GUEST_UPGRADE_ALREADY_BINDED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_VERIFY_ACCOUNT_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_THIRD_PARTY_PAY_PENDING: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_INVALID_ORDER_DURING_PAY: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_U8SDK_CONFIRM_ORDER_TIMEOUT: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_HGSDK_JUDGE_MINOR_POLICY: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_HGSDK_IDENTITY_VERIFY_POLICY: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_SDKLOGIN_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_LOGIN_SDK_UNKOWN_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_LOGIN_TOKEN_TIMEOUT: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_LOGIN_SERVICE_FAILED_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_LOGIN_NETWORK_VERSION_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_LOGIN_SERVER_TIME_BACK_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_LOGIN_SYNC_PLAYER_DATA: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_NICKNAME_EMPTY: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_LOGIN_NICKNAME_LENGTH_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_LOGIN_NICKNAME_CHAR_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_LOGIN_NICKNAME_CONTENT_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_LOGIN_NICKNAME_UNKONW_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_LOGIN_HINT_CONNECTING: XLua.DelegateBridge;
    // __Hotfix0_get_LOGIN_HINT_NICKNAME: XLua.DelegateBridge;
    // __Hotfix0_get_LOGIN_HINT_NICKNAME_RULE: XLua.DelegateBridge;
    // __Hotfix0_get_LOGIN_HINT_PLACEHOLDER: XLua.DelegateBridge;
    // __Hotfix0_get_LOGIN_HINT_CONFIRM: XLua.DelegateBridge;
    // __Hotfix0_get_CANNOT_USE_EMPTY_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_LOGOUT_CONFIRM: XLua.DelegateBridge;
    // __Hotfix0_get_LOGIN_HINT_PREANNOUNCE_CONFIRM: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_JUDGE_DOWNLOAD_NOT_CONNECT_WIFI: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_CLIENT_VERSION_OUT_UP_DATE: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_DOWNLOAD_HOTUPDATE_INFO_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_LOAD_HOTUPDATE_INFO_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_DOWNLOAD_HOTUPDATE_RES_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_UNZIP_RES_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_UPDATE_RES_INFO_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_RELOAD_RES_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_SILENT_MAX_RETRY_EXCEEDED: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_EXCEPTION_DURING_REWRITE_UPDATELIST: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_IO_EXCEPTION_DURING_HOT_UPDATE: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_DELETE_HOTUPDATE_INFO_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_FAILED_CALC_UPDATE_RES_LIST: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_FOUND_HOTUPDATE_INCONSISTENCY: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_START_BATTLE_INVALID_SIGN: XLua.DelegateBridge;
    // __Hotfix0_get_HOT_UPDATE_FULL_RES_OPTION: XLua.DelegateBridge;
    // __Hotfix0_get_HOT_UPDATE_BASE_RES_OPTION: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_DOWNLOAD_RESOURCE: XLua.DelegateBridge;
    // __Hotfix0_get_DOWNLOAD_RESOURCE_CONFIRM: XLua.DelegateBridge;
    // __Hotfix0_get_DOWNLOAD_RESOURCE_RETURN: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_MISSING_RESOURCE: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_ADDITIONAL_RES: XLua.DelegateBridge;
    // __Hotfix0_get_HOT_UPDATE_RES_TYPE_VOICE: XLua.DelegateBridge;
    // __Hotfix0_get_HOT_UPDATE_RES_TYPE_VIDEO: XLua.DelegateBridge;
    // __Hotfix0_get_HOT_UPDATE_RES_TYPE_DYN_ILLUST: XLua.DelegateBridge;
    // __Hotfix0_get_USE_ITEM_NOT_ENOUGH_WARNING: XLua.DelegateBridge;
    // __Hotfix0_get_DAILY_STRING_WILL_OPEN: XLua.DelegateBridge;
    // __Hotfix0_get_NAME_WEEKLY_ZONE_IN_DROP_INFO: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_ZONE_LOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_AP_NOT_ENOUGH: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_AP_ITEM_USE_COUNT: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_PT_NOT_ENOUGH: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_ZONE_MORE_STAGE_UNLOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_STAGE_HARD_MODE_UNLOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_STAGE_PREDEFINED_HARD_MODE_UNLOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_ZONE_NOT_FOUND: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BATTLE_START_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BATTLE_REPLAY_NOT_FOUND: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_GET_BATTLE_LOG_SERVICE_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BATTLE_REPLAY_DECOMPRESS_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_CANNOT_AUTO_BATTLE: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_CANNOT_REPLAY_STORY: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_WEEKLY_ALWAY_UNLOCK: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_WEEKLY_UNLOCK_DESC_SPTR: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_WEEKLY_UNLOCK_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_WEEKLY_MON: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_WEEKLY_TUES: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_WEEKLY_WED: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_WEEKLY_THUR: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_WEEKLY_FRI: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_WEEKLY_SAT: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_WEEKLY_SUN: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_WEEKLY_ZONE_NOT_OPEN: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_STAGE_NOT_AVAILABLE_UNKOWN: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_STAGE_VALID_TIME_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_ACTIVITY_TIME_FORMAT_WITH_DAY: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_ACTIVITY_TIME_FORMAT_WITHOUT_DAY: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_ACTIVITY_REMAIN: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_RETRO_COIN_HAVE: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_RETRO_COIN_DONT_HAVE: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_RETRO_UNLOCK: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_RETRO_UNLOCK_SUCCESS: XLua.DelegateBridge;
    // __Hotfix0_get_CAMPAIGN_BREAK_PROGRESS_FORMAT: XLua.DelegateBridge;
    // __Hotfix0_get_CAMPAIGN_BREAK_DESCRIPTION: XLua.DelegateBridge;
    // __Hotfix0_get_CAMPAIGN_COMMON_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_CAMPAIGN_ROTATE: XLua.DelegateBridge;
    // __Hotfix0_get_CAMPAIGN_COMMON: XLua.DelegateBridge;
    // __Hotfix0_get_CAMPAIGN_TRAIN: XLua.DelegateBridge;
    // __Hotfix0_get_CAMPAIGN_BRIEF_SEPARATOR: XLua.DelegateBridge;
    // __Hotfix0_get_CAMPAIGN_RULE_TIP_1: XLua.DelegateBridge;
    // __Hotfix0_get_CAMPAIGN_RULE_TIP_2: XLua.DelegateBridge;
    // __Hotfix0_get_CAMPAIGN_LADDER_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_PASS_PREV_TRAINING_TO_UNLOCK: XLua.DelegateBridge;
    // __Hotfix0_get_MAINLINE_CHAPTER_LOCK: XLua.DelegateBridge;
    // __Hotfix0_get_MAINLINE_STAGE_LOCK: XLua.DelegateBridge;
    // __Hotfix0_get_MAINLINE_PREPOSED_HINT: XLua.DelegateBridge;
    // __Hotfix0_get_ZONE_HOME_ACTSTAGE_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_ZONE_HOME_MAINLINE_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_ZONE_HOME_CAMPAIGN_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_WEEKLY_COMMON_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_ET_NOT_ENOUGH: XLua.DelegateBridge;
    // __Hotfix0_get_CHAR_SELECT_DEFAULT_NO_CHAR: XLua.DelegateBridge;
    // __Hotfix0_get_TAG_SKILL_SP_WITH_TIME: XLua.DelegateBridge;
    // __Hotfix0_get_TAG_SKILL_SP_WITH_ATTACK: XLua.DelegateBridge;
    // __Hotfix0_get_TAG_SKILL_SP_TAKEN_DAMAGE: XLua.DelegateBridge;
    // __Hotfix0_get_TAG_SKILL_TRIGGER_AUTO: XLua.DelegateBridge;
    // __Hotfix0_get_TAG_SKILL_TRIGGER_MANUAL: XLua.DelegateBridge;
    // __Hotfix0_get_TAG_SKILL_TRIGGER_PASSIVE: XLua.DelegateBridge;
    // __Hotfix0_get_TAG_SKILL_DURATION_FORMAT: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_SKILL_LOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_SKILL_DATA_INVALID: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_BUILD_IN_CHAR_CANNOT_MODIFY_LOCK: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_EVOLVE_ATTR_UP: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_EVOLVE_NEW_SKILL_TITLE: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_EVOLVE_NEW_TALENT_TITLE: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_CANNOT_TRANS_SINCE_TRAINING: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_CANNOT_TRANS_SINCE_CURRENT: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_EVOLVE_CONFIRM_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_EVOLVE_MAX_LEVEL: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_EVOLVE_NOT_ENOUGH_GOLD: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_EVOLVE_NOT_ENOUGH_LEVEL_TEMPLATE: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_EVOLVE_NOT_ENOUGH_ITEM_TEMPLATE: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_NOT_ENOUGH: XLua.DelegateBridge;
    // __Hotfix0_get_EVOLVE_NEW_TALENT_REMAIN: XLua.DelegateBridge;
    // __Hotfix0_get_EVOLVE_NEW_TRAIT: XLua.DelegateBridge;
    // __Hotfix0_get_EVOLVE_NEW_TALENT: XLua.DelegateBridge;
    // __Hotfix0_get_EVOLVE_NEW_SKILL: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_UPLEVEL_NOT_ENOUGH_GOLD: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_CONDITION_EVOLVED: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_CONDITION_FIRST_EVOLVED: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_CONDITION_SECOND_EVOLVED: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_CONDITION_EVOLVED_DETAIL: XLua.DelegateBridge;
    // __Hotfix0_get_LVL_SKILL_NOT_ENOUGH_LEVEL_TEMPLATE: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_CONDITION_LEVEL: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_CONDITION_LEVEL_SHORT: XLua.DelegateBridge;
    // __Hotfix0_get_CANNOT_SPECIALIZED: XLua.DelegateBridge;
    // __Hotfix0_get_SKILL_LEVEL_UP: XLua.DelegateBridge;
    // __Hotfix0_get_SKILL_LVLUP_END: XLua.DelegateBridge;
    // __Hotfix0_get_SKILL_UNLOCK_COND: XLua.DelegateBridge;
    // __Hotfix0_get_SKILL_LVLUP_CONFIRM: XLua.DelegateBridge;
    // __Hotfix0_get_POTENTIAL_FAIL: XLua.DelegateBridge;
    // __Hotfix0_get_POTENTIAL_SUCC: XLua.DelegateBridge;
    // __Hotfix0_get_TOAST_SPECIALIZED_START_CONFIRMED: XLua.DelegateBridge;
    // __Hotfix0_get_TOAST_SPECIALIZED_OTHER_UPGRADING: XLua.DelegateBridge;
    // __Hotfix0_get_TOAST_SPECIALIZED_NEED_HIGHER_TRAINING_ROOM: XLua.DelegateBridge;
    // __Hotfix0_get_ATTR_MAX_HP: XLua.DelegateBridge;
    // __Hotfix0_get_ATTR_ATK: XLua.DelegateBridge;
    // __Hotfix0_get_ATTR_DEF: XLua.DelegateBridge;
    // __Hotfix0_get_ATTR_MAGIC_RES: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_ATTR_VALUE_ADD: XLua.DelegateBridge;
    // __Hotfix0_get_NOTIFY_CHAR_LEVELUP: XLua.DelegateBridge;
    // __Hotfix0_get_NOTIFY_BUILDING_BUFF_UNLOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_NOTIFY_BUILDING_BUFF_UPGRADE: XLua.DelegateBridge;
    // __Hotfix0_get_NOTIFY_BUILDING_MANUFACT_SUPPLEMENT: XLua.DelegateBridge;
    // __Hotfix0_get_NOTIFY_TALENT_UNLOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_NOTIFY_SKILL_UNLOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_UPLEVEL_EXPUP: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_UPLEVEL_LEVELUP: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_UPLEVEL_SKILL_UNLOCK: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_UPLEVEL_TALENT_UNLOCK: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_CHAR_TALENT_UNLOCK: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_CHAR_TALENT_UPDATE: XLua.DelegateBridge;
    // __Hotfix0_get_CANNOT_OPEN_ENEMY_HANDBOOK: XLua.DelegateBridge;
    // __Hotfix0_get_HANDBOOK_SIMULA: XLua.DelegateBridge;
    // __Hotfix0_get_HANDBOOK_INFO_UNLOCK_LEVEL: XLua.DelegateBridge;
    // __Hotfix0_get_HANDBOOK_INFO_UNLOCK_FAVOR: XLua.DelegateBridge;
    // __Hotfix0_get_HANDBOOK_MISSION_GET: XLua.DelegateBridge;
    // __Hotfix0_get_HANDBOOK_MISSION_AVAIL: XLua.DelegateBridge;
    // __Hotfix0_get_HANDBOOK_UNLOCK_EVOLVE: XLua.DelegateBridge;
    // __Hotfix0_get_HANDBOOK_UNLOCK_FAVOUR: XLua.DelegateBridge;
    // __Hotfix0_get_HANDBOOK_UNLOCK_ITEM: XLua.DelegateBridge;
    // __Hotfix0_get_HANDBOOK_FORCE_LOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_CHAR_STORY_UNLOCK_TIP: XLua.DelegateBridge;
    // __Hotfix0_get_UP_CONST_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_MIDDLE_CONST_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_DOWN_CONST_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_CHAR_ATK_SPEED_VERY_FAST: XLua.DelegateBridge;
    // __Hotfix0_get_CHAR_ATK_SPEED_FAST: XLua.DelegateBridge;
    // __Hotfix0_get_CHAR_ATK_SPEED_MEDI: XLua.DelegateBridge;
    // __Hotfix0_get_CHAR_ATK_SPEED_SLOW: XLua.DelegateBridge;
    // __Hotfix0_get_CHAR_ATK_SPEED_VERY_SLOW: XLua.DelegateBridge;
    // __Hotfix0_get_CHAR_RESPAWNTIME_FAST: XLua.DelegateBridge;
    // __Hotfix0_get_CHAR_RESPAWNTIME_MEDIUM: XLua.DelegateBridge;
    // __Hotfix0_get_CHAR_RESPAWNTIME_SLOW: XLua.DelegateBridge;
    // __Hotfix0_get_CHAR_RESPAWNTIME_VERY_SLOW: XLua.DelegateBridge;
    // __Hotfix0_get_TOAST_CHAR_TMPL_UNLOCK_AMIYA: XLua.DelegateBridge;
    // __Hotfix0_get_NAME_SQUAD: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_SQUAD_SAME_FRIEND_ASSIST: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_SQUAD_SHOULD_HAVE_MEMBER: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_PREDEFINED_SQUAD_NOT_EDITABLE: XLua.DelegateBridge;
    // __Hotfix0_get_TOAST_SQUAD_SERVICE_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_SQUAD_MEMBER_INVALID: XLua.DelegateBridge;
    // __Hotfix0_get_SQUAD_ASSIST_INVALID: XLua.DelegateBridge;
    // __Hotfix0_get_SQUAD_RENAME_EMPTY: XLua.DelegateBridge;
    // __Hotfix0_get_SQUAD_RENAME_TO_LONG: XLua.DelegateBridge;
    // __Hotfix0_get_SQUAD_RENAME_INVALID: XLua.DelegateBridge;
    // __Hotfix0_get_SQUAD_RENAME_EMPTY_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_SQUAD_LEVEL_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_SQUAD_HARD_STAGE_LOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_SQUAD_PREDEFINE_HARD_STAGE_LOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_SQUAD_ASSIST_REFRESH: XLua.DelegateBridge;
    // __Hotfix0_get_SQUAD_ASSIST_NO_REMAIN_TIMES: XLua.DelegateBridge;
    // __Hotfix0_get_SQUAD_CONFIRM_CLEAR_FORMATION: XLua.DelegateBridge;
    // __Hotfix0_get_SQUAD_DENIED_SQUAD_NUM_EXCEED: XLua.DelegateBridge;
    // __Hotfix0_get_SQUAD_ASSIST_CHAR_ALREADY_EXIST: XLua.DelegateBridge;
    // __Hotfix0_get_SQUAD_ASSIST_EXCLUSIVE_CHAR_ALREADY_EXIST: XLua.DelegateBridge;
    // __Hotfix0_get_SQUAD_ASSIST_CHAR_REQUIRED: XLua.DelegateBridge;
    // __Hotfix0_get_SQUAD_ASSIST_CHAR_BANNED_BY_RUNE: XLua.DelegateBridge;
    // __Hotfix0_get_SQUAD_SELECT_CHAR_BANNED_BY_RUNE: XLua.DelegateBridge;
    // __Hotfix0_get_SQUAD_REQUIRED_CHAR_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_SQUAD_REQUIRED_CHAR_EVOLVE: XLua.DelegateBridge;
    // __Hotfix0_get_SQUAD_ASSIST_TODAY: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_RECRUIT_BUILD_TIME_NOT_SYNC: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_RECRUIT_FAST_FINISH_NO_GOLD: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_RECRUIT_BUILD_SLOT_LOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_RECRUIT_CONFIRM_FAST_BUILD: XLua.DelegateBridge;
    // __Hotfix0_get_BTN_RECRUIT_CONFIRM_FAST_BUILD: XLua.DelegateBridge;
    // __Hotfix0_get_BTN_RECRUIT_CANCEL_FAST_BUILD: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_RECRUIT_CONFIRM_STOP_BUILD: XLua.DelegateBridge;
    // __Hotfix0_get_BTN_RECRUIT_CONTINUE_BUILD: XLua.DelegateBridge;
    // __Hotfix0_get_BTN_RECRUIT_STOP_BUILD: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_RECRUIT_STOP_BUILD_SUCCEED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_RECRUIT_BUILD_RESOURCE_NOT_ENOUGH: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_RECRUIT_BUILD_ALREADY_FINISH_FAST_BUILD: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_RECRUIT_BUILD_ALREAY_FINISH_STOP_BUILD: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_RECRUIT_TARGET_CHAR_UNKNOWN: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_RECRUIT_CACHA_COST: XLua.DelegateBridge;
    // __Hotfix0_get_GACHA_ITEM_GET_NEW: XLua.DelegateBridge;
    // __Hotfix0_get_GACHA_ITEM_GET_OLD: XLua.DelegateBridge;
    // __Hotfix0_get_GACHA_ITEM_GET_LMTGS_COIN: XLua.DelegateBridge;
    // __Hotfix0_get_GACHA_FAST_BUY_COST: XLua.DelegateBridge;
    // __Hotfix0_get_GACHA_FAST_BUY_CRYSTAL_COST: XLua.DelegateBridge;
    // __Hotfix0_get_GACHA_BUY_DIAMOND_SHARD: XLua.DelegateBridge;
    // __Hotfix0_get_GACHA_USE_FAST_FINISH: XLua.DelegateBridge;
    // __Hotfix0_get_GACHA_FAST_BUY_COST_NOT_ENOUGH: XLua.DelegateBridge;
    // __Hotfix0_get_GACHA_NEWBEE_REOPENTIME: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_GACHA_POOL_BANNED: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_GACHA_DISPLAY_INTERNAL: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_GACHA_DIAMOND_EXCHANGE_NOT_ENOUGHT: XLua.DelegateBridge;
    // __Hotfix0_get_RECRUIT_BUILD_HIRE_OFFICE_POS: XLua.DelegateBridge;
    // __Hotfix0_get_RECRUIT_GACHA_TK: XLua.DelegateBridge;
    // __Hotfix0_get_RECRUIT_DIAMOND_SH: XLua.DelegateBridge;
    // __Hotfix0_get_RECRUIT_UNLOCK_BUILD_SLOT: XLua.DelegateBridge;
    // __Hotfix0_get_RECRUIT_SPECIAL_TAG: XLua.DelegateBridge;
    // __Hotfix0_get_RECRUIT_STAR: XLua.DelegateBridge;
    // __Hotfix0_get_RECRUIT_INSTANT_NOT_ENOUGH: XLua.DelegateBridge;
    // __Hotfix0_get_BUILD_SLOT_UNLOCK_SUCC: XLua.DelegateBridge;
    // __Hotfix0_get_RECRUIT_REFRESH_CONFIRM: XLua.DelegateBridge;
    // __Hotfix0_get_RECRUIT_TIME_OUT: XLua.DelegateBridge;
    // __Hotfix0_get_GACHA_DETAIL_PER_AVAIL: XLua.DelegateBridge;
    // __Hotfix0_get_GACHA_DETAIL_UP_AVAIL: XLua.DelegateBridge;
    // __Hotfix0_get_GACHA_DETAIL_CHAR_LIMITED: XLua.DelegateBridge;
    // __Hotfix0_get_GACHA_DETAIL_WEIGHT_UP: XLua.DelegateBridge;
    // __Hotfix0_get_TOAST_RECRUIT_REFRESH_TAG_SUC: XLua.DelegateBridge;
    // __Hotfix0_get_LIMIT_FREE_GACHA_CONFIRM: XLua.DelegateBridge;
    // __Hotfix0_get_LIMIT_FREE_GACHA_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_SKIN_MODEL: XLua.DelegateBridge;
    // __Hotfix0_get_SKIN_DRAWER: XLua.DelegateBridge;
    // __Hotfix0_get_SKIN_ILLUST_0_TEXT_GREEK: XLua.DelegateBridge;
    // __Hotfix0_get_SKIN_ILLUST_1_TEXT_GREEK: XLua.DelegateBridge;
    // __Hotfix0_get_SKIN_ILLUST_2_TEXT_GREEK: XLua.DelegateBridge;
    // __Hotfix0_get_SKIN_TMPL_ENSURE: XLua.DelegateBridge;
    // __Hotfix0_get_SKIN_TMPL_NO_MATCH: XLua.DelegateBridge;
    // __Hotfix0_get_BUY_SUCCESS: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_BUY_FAIL: XLua.DelegateBridge;
    // __Hotfix0_get_BUY_SKIN_ENSURE: XLua.DelegateBridge;
    // __Hotfix0_get_BUY_SKIN_ENSURE_2: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_TIME_OUT_WARNING: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_MONTHLY_SUB_REMAIN_TIME: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_CHAR_FORMAT: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_NO_MONTHLY_SUB: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_SKIN_CHAR_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_GROUP_COUNT: XLua.DelegateBridge;
    // __Hotfix0_get_CASH_SHOP_PLUS_DIAMOND: XLua.DelegateBridge;
    // __Hotfix0_get_CASH_PRICE_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_CONST_COUNT: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_REMAIN_COUNT: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_REMAIN_UNLIMIT: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_CHAR_COMMON: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_DETAIL_CHAR_COMMON: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_AVAIL_COUNT: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_FURN_AVAIL_COUNT: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_AVAIL_UNLIMIT: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_FURN_AVAIL_UNLIMIT: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_CURRENT_COUNT: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_DETAIL_FURN_THEME_COMMON: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_UNLIMIT_SYMBOL: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_LEVEL_LIMIT: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_CANNONT_AFFORD: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_CANNONT_AFFORD_COMMON: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_MONTHLY_SUB_START: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_MONTHLY_SUB_PERDAY: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_NOT_HAVE_MONTHLY_SUB: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_REMAIN_DAY: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_REFRESH_TIME: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_BUY_SKIN: XLua.DelegateBridge;
    // __Hotfix0_get_TEXT_BUY_SKIN_WITH_VOUCHER: XLua.DelegateBridge;
    // __Hotfix0_get_TEXT_VOUCHER_GET_SKIN_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_CHOOSE_SHOP_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_DONT_SELECT: XLua.DelegateBridge;
    // __Hotfix0_get_TOAST_NO_POTENTIAL_ITEM_TO_CONVERT: XLua.DelegateBridge;
    // __Hotfix0_get_TOAST_NO_SOCIAL_RECEIVE: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_ERROR_MONTHLY_SUB_TIME_EXCEED: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_ERROR_INVALID_CASH_PRODUCT: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_ERROR_CASH_NOTHING_RECEIVED: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_ERROR_CREATE_ORDER_TIMEOUT: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_ERROR_CREATE_ORDER_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_RECEIVE_ITEM_FROM_UNFINISH_ORDER: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_ERROR_UNFINISHED_ORDERS_NOT_CONFIRMED: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_ROUTE_TO_CASH_SHOP: XLua.DelegateBridge;
    // __Hotfix0_get_SHOP_ALERT_MINOR_USER_PAYMENT: XLua.DelegateBridge;
    // __Hotfix0_get_TEMPLATE_SHOP_CLOSE: XLua.DelegateBridge;
    // __Hotfix0_get_TEMPLATE_SHOP_REPLICATE: XLua.DelegateBridge;
    // __Hotfix0_get_NAME_MAIL_SENDER_UNKOWN: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_MAIL_RECEIVED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_NO_MAIL_NEED_RECEIVE: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_NO_MAIL_NEED_DELETE: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_AP_RECOVER_COUNT_DOWN: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_CRYSTAL_NOT_ENOUGH_TO_BUY_AP: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_AP_ALREADY_FULL: XLua.DelegateBridge;
    // __Hotfix0_get_AP_BUY_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_AP_BUY_TEXT_WITHOUT_REMAINTIMES: XLua.DelegateBridge;
    // __Hotfix0_get_AP_BUY_REMAIN_TIMES: XLua.DelegateBridge;
    // __Hotfix0_get_AP_BUY_COST_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_AP_LIMIT_OUT_NOTIFACTY: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_AP_BUY_SUCCESS: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_HOME_ALL_STAGE_COMPELTE: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_DAILY_REAUTH_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_EXCHANGE_DIAMOND_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_EXCHANGE_DIAMOND_SUCC: XLua.DelegateBridge;
    // __Hotfix0_get_CHECK_IN_DATE: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_HOME_SETTING_APPLIED: XLua.DelegateBridge;
    // __Hotfix0_get_CHECK_IN_REMAIN_DATE: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_NO_ANNOUNCE: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_ANNOUNE_ACTIVITY_NOT_OPEN: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_ANNOUNE_SHOP_NOT_OPEN: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_START_BATTLE_STAGE_IS_LOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_START_BATTLE_COST_NOT_ENOUGH: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_START_BATTLE_UNKNOWN_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_BATTLE_RES_CORRUPTED_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_BATTLE_SERVICE_RETRY: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_FINISH_BATTLE_SERVICE_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_BLOCK_ANY_ROUTES: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_CANCEL_DIRECTION_SELECTION_IN_TUTORIAL: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BATTLE_JOURNAL_SAVE_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BATTLE_JOURNAL_INVALID: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_CONFIRM_EXIT_AUTO_BATTLE: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_JUDGE_TWOSTAR_AUTO_BATTLE: XLua.DelegateBridge;
    // __Hotfix0_get_ADD_FRIEND_STRING: XLua.DelegateBridge;
    // __Hotfix0_get_JUDGE_DELETE_FRIEND: XLua.DelegateBridge;
    // __Hotfix0_get_APPLY_ASSIST_STRING: XLua.DelegateBridge;
    // __Hotfix0_get_FRIEND_SEND: XLua.DelegateBridge;
    // __Hotfix0_get_FRIEND_ADDED: XLua.DelegateBridge;
    // __Hotfix0_get_FRIEND_ALREADY_SEND: XLua.DelegateBridge;
    // __Hotfix0_get_TOAST_FRIEND_SEARCH_RESULT_EMPTY: XLua.DelegateBridge;
    // __Hotfix0_get_TOAST_FRIEND_SEARCH_INPUT_EMPTY: XLua.DelegateBridge;
    // __Hotfix0_get_BATTLE_BTNTEXT_GIVEUP: XLua.DelegateBridge;
    // __Hotfix0_get_BATTLE_BTNTEXT_CONT_SETTLE: XLua.DelegateBridge;
    // __Hotfix0_get_BATTLE_BTNTEXT_RETURN: XLua.DelegateBridge;
    // __Hotfix0_get_CANNOT_AUTO_BATTLE_DEFAULT: XLua.DelegateBridge;
    // __Hotfix0_get_CANNOT_AUTO_BATTLE_CAMPAIGN: XLua.DelegateBridge;
    // __Hotfix0_get_BEFORE_BATTLE_TRIGGER: XLua.DelegateBridge;
    // __Hotfix0_get_AFTER_BATTLE_TRIGGER: XLua.DelegateBridge;
    // __Hotfix0_get_BATTLE_FINISH_REWARD: XLua.DelegateBridge;
    // __Hotfix0_get_BATTLE_FINISH_AP_UP: XLua.DelegateBridge;
    // __Hotfix0_get_BUY_AP_OUT_OF_LIMIT: XLua.DelegateBridge;
    // __Hotfix0_get_INVENTORY_BUY_AP_OUT_OF_LIMIT: XLua.DelegateBridge;
    // __Hotfix0_get_BATTLE_FINISH_FAIL_REWARD: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_FRIEND_VISIT_BUILDING_LOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_FRIEND_FULL_CANNOT_SEND: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_FRIEND_FULL_CANNOT_DEAL: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_FRIEND_REQUESTED_FULL_CANNOT_DEAL: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_FRIEND_REUQEST_DEAL_SUC: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_FRIEND_OUT_OF_DATE_CANNOT_DEAL: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_FRIEND_EMPTY_ALIAS: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_FRIEND_INVALID_ALIAS: XLua.DelegateBridge;
    // __Hotfix0_get_FRIEND_EMPTY_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_FRIEND_DIY_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_RESUME_TOO_LONG: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_RESUME_ILLEGAL_CHAR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_RESUME_ILLEGAL_WORD: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_NAME_CARD_RESUME_TOO_LONG: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_NAME_CARD_RESUME_ILLEGAL_CHAR: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_NAME_CARD_RESUME_ILLEGAL_WORD: XLua.DelegateBridge;
    // __Hotfix0_get_NO_RESUME_SELF: XLua.DelegateBridge;
    // __Hotfix0_get_NO_RESUME_NOT_SELF: XLua.DelegateBridge;
    // __Hotfix0_get_FRIEND_RARITY_LEVEL_LIMIT: XLua.DelegateBridge;
    // __Hotfix0_get_FRIEND_RARITY_TOAST: XLua.DelegateBridge;
    // __Hotfix0_get_FRIEND_RARITY_LEVEL_NO_LIMIT: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_FRIEND_ALREADY_REQUEST: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_POWER_PROVIDE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_POWER_COST: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_PRODUCT_SPEED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_PRODUCT_CAPACITY: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_SHOP_COUNT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_SHOP_SPEED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_SHOP_CAPACITY: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_HIRE_ECON_RATE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_HIRE_SLOT_PVD: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_DORM_MP_REC: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_DORM_WEIGHT_LIM: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_MEETING_FRD_SLOT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_MEETING_VISITOR_NUM: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_LVL_UP_TIME: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_ROOM_MAX_LVL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_DIY_LVL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_COMFORT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_FURNI_COUNT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_CHAR_STATION: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_ORDER_NUM: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_ORDER_QUALITY: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_WS_MP_COST_RATE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_SPEC_LVL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_HIRE_SPEED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_NEW_FORMULA_COUNT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVEL_INFO_COMFORT_LIMIT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_CATEGORY_CUSTOM: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_CATEGORY_OUTPUT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_CATEGORY_FUNC: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_FUNCTIONAL_ROOM_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_HIRE_IDLE_STATE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_HIRE_STOP_STATE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_HIRE_WORK_STATE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_HIRE_FINISH_STATE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_DORM_IDLE_STATE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_DORM_REST_STATE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_POWER_STATE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_MANUF_WORK: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_MANUF_IDLE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_MANUF_STOP: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_SHOP_WORK: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_SHOP_IDLE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_SHOP_STOP: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_TRADING_WORK: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_TRADING_IDEL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_TRADING_FULL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_TRAINING_WORK: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_TRAINING_IDLE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_TRAINING_FINISH: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_TRAINING_STATE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_DIY_RESET: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_DIY_CLEAR: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_DIY_FURNITURE_INTERSECT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_DIY_QUIT_NOT_SAVED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_DIY_SAVE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BROOM_DIY_SAVED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_COMFORT_RULE_HINT_FORMAT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_OVERVIEW_STOREY_LVL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_OVERVIEW_STOREY_LOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_CHAR_IDLE_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_CHAR_WORK_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_CHAR_REST_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_CHAR_TIRED_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_CHAR_TRAINING_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_CHAR_MP_FULL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_CHAR_MP_HALF: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_CHAR_MP_EMPTY: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_FORMULA_UNLOCK_ROOM_AND_STAGE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_FORMULA_UNLOCK_ROOM: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_FORMULA_UNLOCK_STAGE: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BUILDING_WORKSHOP_FORMULA_COST_NOT_ENOUGH: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BUILDING_MANUFACT_FORMULA_COST_NOT_ENOUGH: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BUILDING_WORKSHOP_FORMULA_GOLD_LIMIT: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BUILDING_WORKSHOP_FORMULA_INGREDIENT_LIMIT: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BUILDING_SHOP_FORMULA_COST_NOT_ENOUGH: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BUILDING_MANUFACT_OUTPUT_FULL: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BUILDING_MANUFACT_ALL_EMPTY: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_BUILDING_MANUFACT_EDIT_NOT_APPLY: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_BUILDING_MANUFACT_EDIT_CONFIRM: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_ARCHITECTURE_BUILD_CONDITION_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_ARCHITECTURE_LACK_OF_POWER_BUILD: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_ARCHITECTURE_LACK_OF_POWER_LEVELUP: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_ARCHITECTURE_LEVELUP_CONDITION_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_EMPTY_ROOM: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_UNCLEANED_ROOM: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_UNCLEANED_ROOM_CANNOT_CLEAN: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BUILDING_SHOP_OUTPUT_FULL: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BUILDING_SHOP_STOCK_CHAR_EMPTY: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BUILDING_SHOP_STOCK_CHAR_TIRED: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_BUILDING_SHOP_EDIT_CONFIRM: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_BUILDING_CHAR_BUSY: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVELUP_START: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVELUP_COMPLETE: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BUILDING_LEVELUP_UNCOMPLETE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVELDOWN_COMPLETE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_CLEAN_COMPLETE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_COST_NOT_ENOUGH: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LABOR_NOT_ENOUGH: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LABOR_SYNC_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BUILD_COMPLETE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MAX_LEVEL_ALREADY: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_CANNOT_LEVELDOWN: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LEVELDOWN_ELECT_EXCEED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_DIY_CANNOT_LEVELUP: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_DIY_NO_MODIFIER: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_DIY_LEVELUP_COMPLETE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_DIY_FURNITURE_BUY_OUT_OF_LIMIT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_DIY_FURNITURE_BUY_ZERO: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_DIY_FURNITURE_MULTI_BUY: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_DIY_FURNITURE_OUT_OF_TIME_RANGE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_ROOM_COUNT_LIMIT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_DIY_MAX_LEVEL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_DIY_SHOP_FURNITURE_COUNT_FORMAT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_DIY_NEED_APPLY_PRESET: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_DIY_PRESET_LOAD_FAILED_INSUFFICIENT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_DIY_PRESET_LOAD_FAILED_NOT_EXIST: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_DIY_PRESET_SAVE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_DIY_NO_PRESET: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_DIY_PRESET_SAVED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_DIY_PRESET_APPLIED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_PRESET_RENAME_INVALID: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_PRESET_RENAME_TOOLONG: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_DIY_DEFAULT_PRESET_NAME_PREFIX: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_DIY_PRESET_APPLY: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_CANNOT_LEVELDOWN_SINCE_DEPENDENCY: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_CANNOT_LEVELDOWN_SINCE_UNABLE_TO_REBUILD: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MANUFACT_WORK_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MANUFACT_IDLE_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MANUFACT_STOP_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MANUFACT_OUTPUT_OVERLOADED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MANUFACT_CAN_NOT_EXECUTE_LABOR_ACCEL: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BUILDING_TEARDOWN_BUSY: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BUILDING_HIRE_RECRUIT_SLOT_BUSY: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BUILDING_LEVELUP_BUSY: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_BUILDING_STATION_WHILE_LEVELUP: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_CONFIRM_EXIT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_CONFIRM_BACK_TO_SELF: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_CONFIRM_BACK_TO_FRIEND_LIST: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_VISIT_SOCIAL_PT_ADDED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_VISIT_SOCIAL_PT_DUPLICATE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_VISIT_SOCIAL_PT_FULL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_RECEIVE_SOCIAL_PT_ALREADY: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_RECEIVE_SOCIAL_PT_ZERO: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TRADING_LABOR_ACCEL_TITLE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MANUFACT_LABOR_ACCEL_TITLE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MANUFACT_INVALID_LABOR_ACCEL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_HIRE_WORK_LIMIT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_HIRE_REQUIRE_ROOM: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_REST_TIME_FORMAT_WITH_DAY: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_REST_TIME_FORMAT_WITHOUT_DAY: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_NO_CLUE_HINT_ALL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_NO_CLUE_HINT_RECEIVED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_NO_CLUE_HINT_OWN: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TRAIN_FINISH_CONST: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TRAIN_FINISH: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TRAIN_FINISH_FULL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TRAIN_SELECT_NO_CHAR: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TRAIN_SELECT_SKILL_LEVEL_MAX: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TRAIN_SELECT_SKILL_LEVEL_LOW_LEVEL_ROOM_LEVEL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TRAIN_TRAINEE_SLOT_LABEL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TRAIN_TRAINER_SLOT_LABEL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TRAIN_TRAINEE_BUSY_TO_CHANGE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_FLOAT_STATION_TEXT_NORMAL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_FLOAT_STATION_TEXT_TRAINER: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_FLOAT_STATION_TEXT_TRAINEE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_HIRING_NO_HIRING: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_HIRING_HIRING_NOT_ENOUGH: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TRADING_ORDER_TYPE_COMPOUND: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TRADING_ORDER_TYPE_GOLD: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TRADING_ORDER_TYPE_DIAMOND: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TRADING_STRATEGY_LOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BUY_LABOR: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LABOR_DETAIL_RECOVER_BUFF: XLua.DelegateBridge;
    // __Hotfix0_get_JUDGE_BUILDING_TRADING_DELETE_COMPLETE_ORDER: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_BUILDING_LABOR_ACCEL_WASTE_TIME: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_BUILDING_TRADING_ACCEL_INVALID_ORDER: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_BUILDING_TRADING_ACCEL_SUC: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_BUILDING_MANUFACT_ACCEL_SUC: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_BUILDING_LABOR_ACCEL_LOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LABOR_ACCEL_RESULT_MANUF_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_LABOR_ACCEL_RESULT_MANUF_UNIT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BUFF_UNLOCK_EVOLVE_PHASE: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BUFF_UNLOCK_LEVEL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BUFF_UNLOCK_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BUFF_IMPROVE_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_ENTRY_LOCKED_TOAST: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_STATION_SLOT_UNLOCK_COND: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_STATION_SELECT_NO_CHAR: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_STATION_SELECT_PASSIVE_CHANGED_ROOM_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_WORKSHOP_GAIN_EXTRA_ITEM: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_WORKSHOP_RECOVER_MOOD: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_ROOM_LEVELDOWN_RETURN: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BUY_LABOR_LOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BUY_LABOR_FULL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_ASSIST_UNLOCK: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_ASSIST_ROOM_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BUY_LABOR_NO_AP: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_BUY_LABOR_SUCCESS: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_AP_LABOR_UNLOCK: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MEETING_CLUE_NOT_SELECTED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MEETING_CLUE_SEND_CLUE_BONUS: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MEETING_CLUE_GAIN_GOLD_BONUS: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MEETING_CLUE_LOCAL_STORAGE_FULL: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MEETING_CLUE_OBTAINED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MEETING_SEND_CLUE_HINT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MEETING_COLLECT_CLUE_HINT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MEETING_RECEIVE_CLUE_HINT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MEETING_COMMUNICATE_CLUE_HINT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MEETING_EXPIRE_CLUE_HINT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MEETING_NO_DUPLICATE_REWARD_HINT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MEETING_OVER_LIMIT_REWARD_HINT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_MEETING_OVER_LIMIT_REWARD_HINT_SUB: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_GET_RECENT_VISITOR_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_FRIENDS_MEETING_TITLE: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_BUILDING_CANT_SELECT_TRAINING_CHAR: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TODO_MANUFACT_STOP: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TODO_TRADING_STOP: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TODO_MEETING_EMPTY: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TODO_HIRE_EMPTY: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TODO_NEW_PRODUCT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TODO_HAS_ORDERS: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TODO_CHAR_TIRED: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TODO_NEW_FAVOR: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TODO_TRAIN_FINISH: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TODO_HIRE_REFRESH: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TODO_NEW_CLUES: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TODO_CLICK_MANUFACT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TODO_CLICK_FAVOR: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_TODO_CLICK_ORDERS: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_NOTIFY_MANUF_PRODUCT: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_NOTIFY_NON_ASSIST_FAVOR: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_NOTIFY_ASSIST_FAVOR: XLua.DelegateBridge;
    // __Hotfix0_get_BUILDING_NOTIFY_TRADING_DELIVERY: XLua.DelegateBridge;
    // __Hotfix0_get_HOT_UPDATE_STATE: XLua.DelegateBridge;
    // __Hotfix0_get_HOT_UPDATE_PERCENT: XLua.DelegateBridge;
    // __Hotfix0_get_MIGRATE_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_TEXT_RECOVER_PERSIST_INFO: XLua.DelegateBridge;
    // __Hotfix0_get_JUDGE_DELETE_CACHED_FILES: XLua.DelegateBridge;
    // __Hotfix0_get_JUDGE_TRY_FIX_LOCAL_RES: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_DELETE_CACHED_FILES_OK: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_DELETE_CACHED_FILES_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_ALERT_DELETE_CACHED_FILED_IO_EXCEPTION: XLua.DelegateBridge;
    // __Hotfix0_get_GAINITEM_TITLE_DEFAULT: XLua.DelegateBridge;
    // __Hotfix0_get_GAINITEM_TITLE_DAILY_SUPPLY: XLua.DelegateBridge;
    // __Hotfix0_get_CHAR_ITEM_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_ITEM_REPO_CHOOSE_CHAR_ENSURE: XLua.DelegateBridge;
    // __Hotfix0_get_ERROR_RENAMING_CARD_BANNED: XLua.DelegateBridge;
    // __Hotfix0_get_ITEM_VOUCHER_USE_ENSURE: XLua.DelegateBridge;
    // __Hotfix0_get_ITEM_VOUCHER_CURRENT_COUNT: XLua.DelegateBridge;
    // __Hotfix0_get_COMMON_LOCK_BY_STAGE_COLORED: XLua.DelegateBridge;
    // __Hotfix0_get_COMMON_LOCK_BY_STAGE: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_NOT_OPEN_REASON_UNKNOW: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_ZONE_TIME_LOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_ZONE_TIME_OUT: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_SHOP_BUY_FAIL_SOLD_OUT: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_SHOP_BUY_FAIL_ACTIVITY: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_REMAIN_TEXT_NO_STAGE: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_REMAIN_TEXT_STAGE: XLua.DelegateBridge;
    // __Hotfix0_get_INFO_WARDROBE_UNLOCK: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_OPEN_TIME: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_MISSION_STATE: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_DAY_PAST: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_ACT_STAGE_LOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_3D5_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_3D5_NEED_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_3D5_POINT_TITLE: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_3D5_HELP_BTN_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_3D5_TIME_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_3D5_HELP_DAILY_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_3D5_HELP_DAILY_ITEM_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_3D5_HELP_STATUS_DESC0: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_3D5_HELP_STATUS_DESC1: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_3D5_POINT_SIMPLE_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_3D0_ZONE_TIMEOUT: XLua.DelegateBridge;
    // __Hotfix0_get_ACTIVITY_3D0_ZONE_TIME_LOCK_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_ACT_ROGUELIKE_REOPEN_COOLDOWN: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_CONTRACT_NO_SEASON_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_TAB_TIME_FORMAT_WITH_DAY: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_TAB_TIME_FORMAT_WITHOUT_DAY: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_TRAIN_SEASON_TITLE: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_REFRESH_INFO: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_STAGE_EASY_MODE_ALERT: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_STAGE_HARD_MODE_ALERT: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_RUNE_DETAIL_LEVEL: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_CHALLENGE_LEVEL_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_MAP_RANK_NOT_ABLE_TO_GET: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_DATA_NEED_RESYNC_ALERT: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_DATA_RESYNC_SUC: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_TRAINING_MAP_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_ITEM_NOT_ENOUGH: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_MAP_RANK: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_SEASON_END_TIME: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_UNLOCK_TITLE: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_UNLOCK_TOTAL_GET: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_MAPRANK_INFO_0: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_MAPRANK_INFO: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_MAPRANK_DETAIL: XLua.DelegateBridge;
    // __Hotfix0_get_CRISIS_MAPRANK_UNLOCK: XLua.DelegateBridge;
    // __Hotfix0_get_GUIDE_UNLOCK_TOAST_TEMPLATE: XLua.DelegateBridge;
    // __Hotfix0_get_LUA_SCRIPTS_VALIDATION_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_LUA_INIT_ERROR_TIPS: XLua.DelegateBridge;
    // __Hotfix0_get_NO_TIME_HH_MM_SS: XLua.DelegateBridge;
    // __Hotfix0_get_TIME_MAIL_PASS_AND_EXPIRE: XLua.DelegateBridge;
    // __Hotfix0_get_TIME_MAIL_PASS: XLua.DelegateBridge;
    // __Hotfix0_get_EXPIRE_TIME: XLua.DelegateBridge;
    // __Hotfix0_get_DATE_YESTERDAY: XLua.DelegateBridge;
    // __Hotfix0_get_DATE_DAYBEFOREYES: XLua.DelegateBridge;
    // __Hotfix0_get_WEEK_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_DAY_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_HOUR_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_MIN_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_COLOR_DAY_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_COLOR_HOUR_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_COLOR_MIN_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_USE_CHANGE_NAME_CARD: XLua.DelegateBridge;
    // __Hotfix0_get_DATE_FORMAT_MM: XLua.DelegateBridge;
    // __Hotfix0_get_DATE_FORMAT_MM_DD: XLua.DelegateBridge;
    // __Hotfix0_get_DATE_FORMAT_DD_HH_MM: XLua.DelegateBridge;
    // __Hotfix0_get_DATE_FORMAT_HH_MM_SS: XLua.DelegateBridge;
    // __Hotfix0_get_DATE_FORMAT_DD_HH_MM_SS: XLua.DelegateBridge;
    // __Hotfix0_get_DATE_FORMAT_MM_DD_HH_TT: XLua.DelegateBridge;
    // __Hotfix0_get_DATE_FORMAT_MM_DD_TINY: XLua.DelegateBridge;
    // __Hotfix0_get_DATE_FORMAT_YYYY_MM_DD_HH_MM: XLua.DelegateBridge;
    // __Hotfix0_get_DATE_FORMAT_YYYY_MM_DD: XLua.DelegateBridge;
    // __Hotfix0_get_ACT3D0_GACHA_TIMES: XLua.DelegateBridge;
    // __Hotfix0_get_ACT3D0_MILE_STONE_GET_INFO: XLua.DelegateBridge;
    // __Hotfix0_get_ACT3D0_GET_NEW_INFO: XLua.DelegateBridge;
    // __Hotfix0_get_ACT3D0_UNLOCK_CLUE_COUNT: XLua.DelegateBridge;
    // __Hotfix0_get_ACT3D0_TEXT_IN_TIME: XLua.DelegateBridge;
    // __Hotfix0_get_ACT3D0_TEXT_OUT_TIME: XLua.DelegateBridge;
    // __Hotfix0_get_ACT3D0_REMAIN_TIME: XLua.DelegateBridge;
    // __Hotfix0_get_ACT3D0_WITH_PERCENT: XLua.DelegateBridge;
    // __Hotfix0_get_ACT3D0_UNLOCK_NEW_GACHABOX: XLua.DelegateBridge;
    // __Hotfix0_get_ACT4D0_END_TIME: XLua.DelegateBridge;
    // __Hotfix0_get_ACT4D0_START_TIME: XLua.DelegateBridge;
    // __Hotfix0_get_ACT4D0_MILE_STONE_GET_CHAR: XLua.DelegateBridge;
    // __Hotfix0_get_ACT4D0_MILE_STONE_GET_SKIN: XLua.DelegateBridge;
    // __Hotfix0_get_ACT4D0_DETAIL_INFO: XLua.DelegateBridge;
    // __Hotfix0_get_ACT4D0_AP_REMAIN: XLua.DelegateBridge;
    // __Hotfix0_get_ACT4D0_MILE_STONE_GET: XLua.DelegateBridge;
    // __Hotfix0_get_ACT4D0_ABLE_TO_UNLOCK: XLua.DelegateBridge;
    // __Hotfix0_get_ACT4D0_ABLE_TO_GET: XLua.DelegateBridge;
    // __Hotfix0_get_ACT5D0_MISSION_PASS_RATE: XLua.DelegateBridge;
    // __Hotfix0_get_COMMON_ACT_TIME_WITH_START_TIME: XLua.DelegateBridge;
    // __Hotfix0_get_COMMON_LEFT_TIME: XLua.DelegateBridge;
    // __Hotfix0_get_ACT5D0_DETAIL_INFO: XLua.DelegateBridge;
    // __Hotfix0_get_ACT5D0_MILESTONE_GAP: XLua.DelegateBridge;
    // __Hotfix0_get_ACT5D0_MILESTONE_GET: XLua.DelegateBridge;
    // __Hotfix0_get_ACT5D0_ZONE_TIME_LOCK_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_ACT5D0_BONUS_AWARD_COND: XLua.DelegateBridge;
    // __Hotfix0_get_ACT5D1_REFRESH_INFO: XLua.DelegateBridge;
    // __Hotfix0_get_ACT5D1_RUNE_UNLOCK: XLua.DelegateBridge;
    // __Hotfix0_get_MEDAL_ITEM_REWARD: XLua.DelegateBridge;
    // __Hotfix0_get_MEDAL_NEED_PRE: XLua.DelegateBridge;
    // __Hotfix0_get_DESC_MEDAL_TOAST_COUNT: XLua.DelegateBridge;
    // __Hotfix0_get_TOAST_MEDAL_DIY_SAVE_SUC: XLua.DelegateBridge;
    // __Hotfix0_get_TOAST_MEDAL_DIY_UPDATE_TO_DATE: XLua.DelegateBridge;
    // __Hotfix0_get_JUDGE_MEDAL_DIY_RESET: XLua.DelegateBridge;
    // __Hotfix0_get_TOAST_MEDAL_SELECT_MAX_COUNT: XLua.DelegateBridge;
    // __Hotfix0_get_JUDGE_MEDAL_DIY_NOT_SAVE_EXIT: XLua.DelegateBridge;
    // __Hotfix0_get_MEDAL_DIY_SELECTED_COUNT: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_ACTIVITY_AP_ITEM: XLua.DelegateBridge;
    // __Hotfix0_get_UNLIMIT_TIMES: XLua.DelegateBridge;
    // __Hotfix0_get_STR_ERROR_CODE_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_CONFIRM_SKIPSTORY: XLua.DelegateBridge;
    // __Hotfix0_get_ACT12D6_UPGRADE_BUFF_CONFIRM: XLua.DelegateBridge;
    // __Hotfix0_get_ACT12D6_INSUFFICIENT_BUFF_TOKEN: XLua.DelegateBridge;
    // __Hotfix0_get_ACT12D6_BUFF_MAX_LEVEL: XLua.DelegateBridge;
    // __Hotfix0_get_ACT12D6_UNLOCK_RELIC_COUNT: XLua.DelegateBridge;
    // __Hotfix0_get_ACT12D6_UNLOCK: XLua.DelegateBridge;
    // __Hotfix0_get_ACT12D6_NO_NODE: XLua.DelegateBridge;
    // __Hotfix0_get_ACT12D6_RELIC_PROGRESS: XLua.DelegateBridge;
    // __Hotfix0_get_ACT12D6_CHOOSE_RELIC: XLua.DelegateBridge;
    // __Hotfix0_get_ACT12D6_RELIC_NOT_GOT: XLua.DelegateBridge;
    // __Hotfix0_get_ACT12D6_MILE_STONE_GET: XLua.DelegateBridge;
    // __Hotfix0_get_ACT12D6_MODE_LOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_ACT12D6_RELIC_COUNT: XLua.DelegateBridge;
    // __Hotfix0_get_ACT17D1_CREATE_ROOM_TIPS: XLua.DelegateBridge;
    // __Hotfix0_get_ACT17D1_CREATE_ROOM_TIP_MAP: XLua.DelegateBridge;
    // __Hotfix0_get_ACT17D1_CREATE_ROOM_TIP_DIFFICULTY: XLua.DelegateBridge;
    // __Hotfix0_get_ACT17D1_CREATE_ROOM_TIP_POS: XLua.DelegateBridge;
    // __Hotfix0_get_ACT17D1_STAGE_ENTRY_SQUAD_NOT_SET: XLua.DelegateBridge;
    // __Hotfix0_get_ACT17D1_STAGE_ENTRY_BANNED: XLua.DelegateBridge;
    // __Hotfix0_get_ACT17D1_STAGE_ENTRY_MATCH_FROZEN: XLua.DelegateBridge;
    // __Hotfix0_get_ACT17D1_STAGE_ENTRY_SERVICE_CLOSED: XLua.DelegateBridge;
    // __Hotfix0_get_ACT17D1_CREATE_ROOM_SQUAD_NOT_SET: XLua.DelegateBridge;
    // __Hotfix0_get_CHECK_IN_V2_SHOW_ITEM_NOT_GOT: XLua.DelegateBridge;
    // __Hotfix0_get_CHECK_IN_V2_SHOW_ITEM_VALID: XLua.DelegateBridge;
    // __Hotfix0_get_CHECK_IN_V2_SHOW_ITEM_GOT: XLua.DelegateBridge;
    // __Hotfix0_get_BATTLE_SYSMENU_DESCRIPTION_AP_FORMAT: XLua.DelegateBridge;
    // __Hotfix0_get_BATTLE_SYSMENU_DESCRIPTION_AP_RETURNALL_FORMAT: XLua.DelegateBridge;
    // __Hotfix0_get_BATTLE_SYSMENU_AP_RETURN_PROTECTED: XLua.DelegateBridge;
    // __Hotfix0_get_BATTLE_SYSMENU_AP_RETURN_NO_PROTECTION: XLua.DelegateBridge;
    // __Hotfix0_get_BATTLE_SYSMENU_ET_RETURN: XLua.DelegateBridge;
    // __Hotfix0_get_BATTLE_SYSMENU_DESCRIPTION_ET_FORMAT: XLua.DelegateBridge;
    // __Hotfix0_get_BATTLE_SYSMENU_DESCRIPTION_ET_RETURNALL_FORMAT: XLua.DelegateBridge;
    // __Hotfix0_get_HOT_UPDATE_CHECK_COMPLETE: XLua.DelegateBridge;
    // __Hotfix0_get_HOT_UPDATE_EXTRACTING_FILE: XLua.DelegateBridge;
    // __Hotfix0_get_HOT_UPDATE_FETCHING_PATCH: XLua.DelegateBridge;
    // __Hotfix0_get_HOT_UPDATE_LOADING_NETWORK_SETTING: XLua.DelegateBridge;
    // __Hotfix0_get_HOT_UPDATE_DOWNLOADING_PATCH: XLua.DelegateBridge;
    // __Hotfix0_get_CHARACTER_DEPLOY_POSITION_MELEE: XLua.DelegateBridge;
    // __Hotfix0_get_CHARACTER_DEPLOY_POSITION_RANGE: XLua.DelegateBridge;
    // __Hotfix0_get_RECRUIT_NOT_OPEN: XLua.DelegateBridge;
    // __Hotfix0_get_GOOD_RARITY1: XLua.DelegateBridge;
    // __Hotfix0_get_GOOD_RARITY2: XLua.DelegateBridge;
    // __Hotfix0_get_GOOD_RARITY3: XLua.DelegateBridge;
    // __Hotfix0_get_AVG_PLAYBACK_OPTION_NORMAL: XLua.DelegateBridge;
    // __Hotfix0_get_AVG_PLAYBACK_OPTION_HIGHLIGHT: XLua.DelegateBridge;
    // __Hotfix0_get_DIALOG_JUDGE_EXIT_GAME: XLua.DelegateBridge;
    // __Hotfix0_get_TIP_CHAR_SKILL_LOCK: XLua.DelegateBridge;
    // __Hotfix0_get_NO_VIDEO_MESSAGE: XLua.DelegateBridge;
    // __Hotfix0_get_TOAST_QUICK_PLAY_GUIDE: XLua.DelegateBridge;
    // __Hotfix0_get_TOAST_QUICK_PLAY_GUIDE_BTN: XLua.DelegateBridge;
    // __Hotfix0_get_GRID_GACHA_NO_REWARD: XLua.DelegateBridge;
    // __Hotfix0_get_STORY_REVIEW_UNLOCK_COIN_CONDITION: XLua.DelegateBridge;
    // __Hotfix0_get_STORY_REVIEW_UNLOCK_STAGE_CONDITION: XLua.DelegateBridge;
    // __Hotfix0_get_STORY_REVIEW_ITEM_NOT_ENOUGH: XLua.DelegateBridge;
    // __Hotfix0_get_STORY_REVIEW_UNLOCK_STORY: XLua.DelegateBridge;
    // __Hotfix0_get_STORY_REVIEW_UNLOCK_STAGE_CONDITION_PLAYED: XLua.DelegateBridge;
    // __Hotfix0_get_STORY_REVIEW_UNLOCK_STAGE_CONDITION_UNLOCKED: XLua.DelegateBridge;
    // __Hotfix0_get_STORY_REVIEW_UNLOCK_STAGE_CONDITION_PASS: XLua.DelegateBridge;
    // __Hotfix0_get_STORY_REVIEW_UNLOCK_STAGE_CONDITION_DEFAULT: XLua.DelegateBridge;
    // __Hotfix0_get_STORY_REVIEW_NON_UNLOCK_DESC_INTIME: XLua.DelegateBridge;
    // __Hotfix0_get_STORY_REVIEW_NON_UNLOCK_DESC_OUT_OF_TIME: XLua.DelegateBridge;
    // __Hotfix0_get_STORY_BRIEF_CHAPTER_TITLE: XLua.DelegateBridge;
    // __Hotfix0_get_STORY_REVIEW_CHAR_STORY_CHAPTER_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_ZONE_FOG_UNLOCK_TIP: XLua.DelegateBridge;
    // __Hotfix0_get_ZONE_FOG_UNLOCK_ITEM: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_FOG_UNLOCK_ITEM: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_FOG_UNLOCK_ITEM_USE: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_FOG_UNLOCK_STAGE_PASS: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_FOG_ZONE_UNLOCK_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_FOG_STAGE_UNLOCK_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_STAGE_FOG_ITEM_NOT_ENOUGH: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_RT_SELECT: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_RELIC_SELECT: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_UPGRADABLE_CHARACTER: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_RECRUIT_SIMILAR_CHARACTER: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_NOT_ENOUGH_ITEM: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_DISCARD_RECRUIT_TICKET: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_DISCARD_UPGRADE_TICKET: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_NEXT_LEVEL: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_NEXT_LEVEL_MAX: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_POP_ADD_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_SQUAD_ADD_TEXT: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_UPGARDE: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_DISABLE_SKILL: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_RECRUIT: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_GET: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_GAIN_ITEM: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_GIVE_UP_REWARD: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_EXIT_SHOP: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_START_BATTLE_WITH_NO_CHARACTER: XLua.DelegateBridge;
    // __Hotfix0_get_ROGUELIKE_GIVE_UP_BATTLE: XLua.DelegateBridge;
    // __Hotfix0_get_SP_CHAR_NAME_SEPARATOR: XLua.DelegateBridge;
    // __Hotfix0_get_SP_CHAR_MISSION_COMMON_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_SP_CHAR_MISSION_LOCKED_DESC: XLua.DelegateBridge;
    // __Hotfix0_get_SP_CHAR_MISSION_COND_EVOLVE_PHASE: XLua.DelegateBridge;
    // __Hotfix0_get_JUDGE_HOME_ILLUST_EDIT_EXIT: XLua.DelegateBridge;
    // __Hotfix0_GetErrorCodeDesc: XLua.DelegateBridge;
    // __Hotfix0_get_TEXT_TITLE_STARTMISSION: XLua.DelegateBridge;
    // __Hotfix0_get_TEXT_TITLE_DAILYMISSION: XLua.DelegateBridge;
    // __Hotfix0_get_TEXT_TITLE_WEEKLYMISSION: XLua.DelegateBridge;
    // __Hotfix0_get_TEXT_TITLE_MAINMISSION: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_FIND_ROOM_ID_ERROR: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_FIND_ROOM_NONE: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_READY: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_READY_CANCEL: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_COPY_SUCCESS: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_ROOM_PING: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_ROOM_CD: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_ROOM_CD_IN_BATTLE: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_ROOM_KICK_DISBAND: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_ROOM_KICK_DISLIKE: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_ROOM_LEAVE_JUDGE: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_ROOM_MASTER_LEAVE_JUDGE: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_ROOM_KICK_JUDGE: XLua.DelegateBridge;
    // __Hotfix0_MULTI_RET_CODE_TIP: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_BATTLE_START_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_BATTLE_JOIN_FAILED: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_DIFFICULTY_EASY: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_DIFFICULTY_NORMAL: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_DIFFICULTY_HARD: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_MATCHING_COUNTDOWN: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_NO_HARD_AVAIL: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_MATCHING_NO_SELECT: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_ABLE_TO_MATCH: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_NOT_ABLE_TO_HARD: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_POS_UP: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_POS_DOWN: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_COMMON_TEAM_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_CHANGE_TEAM_NAME: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_JOIN_ROOM_FULL: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_JOIN_ROOM_ON_BATTLE: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_NO_FRIEND_ROOM_FOUND: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_CREATE_TOO_MANY_PEOPLE: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_CANNOT_KICK_IN_BATTLE_PLAYER: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_CLICK_TOO_FAST: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_BATTLE_LAG: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_BATTLE_HINT_PAUSE: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_BATTLE_HINT_RESUME: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_BATTLE_HINT_REQUEST_PAUSE: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_BATTLE_HINT_REFUSE_PAUSE: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_BATTLE_HINT_IGNORE_PAUSE: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_BATTLE_HINT_PLAYER_OFFLINE: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_BATTLE_HINT_PLAYER_RECOVER: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_BATTLE_HINT_PLAYER_CANCEL: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_BATTLE_HINT_MARK_MAX: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_WAIT_FOR_ENTRY: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_WAIT_FOR_ENTRY_DETAIL: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_MATCH_WAIT: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_MATCH_WAIT_DETAIL: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_CREATE_ROOM_BACK_TO_OUT: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_JOIN_ROOM_BACK_TO_OUT: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_JOIN_ROOM_WORD: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_MATCH_BACK_TO_OUT: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_FIND_ROOM_BACK_TO_OUT: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_ENTER_ROOM_BACK_TO_OUT: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_TOO_MANY_PEOPLE: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_UNKNOWN_WRONG: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_MATCH_NO_TEAM: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_NEED_TEAM: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_NEED_HARD: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_POS_UP_TEAM: XLua.DelegateBridge;
    // __Hotfix0_get_MULTI_POS_DOWN_TEAM: XLua.DelegateBridge;
    // __Hotfix0_MULTI_BATTLE_ERROR_TIP: XLua.DelegateBridge;
  }
  export interface GlobalResCache {
    // m_assetLoader: Torappu.Resource.CachedAssetLoader;
    // m_compCaches: System.Collections.Generic.Dictionary<System.String,Torappu.GlobalResCache.CompCache>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_GetOrCreateGameObject: XLua.DelegateBridge;
    // __Hotfix1_GetOrCreateGameObject: XLua.DelegateBridge;
    // __Hotfix0__LoadGameObject: XLua.DelegateBridge;
    // __Hotfix0__ClearAll: XLua.DelegateBridge;
    // __Hotfix0_Dispose: XLua.DelegateBridge;
  }
  export interface SafeRect {
    EMPTY: Torappu.SafeRect;
    left: System.Int32;
    right: System.Int32;
    top: System.Int32;
    bottom: System.Int32;
  }
  export interface ISafeAreaListener {
  }
  export interface SafeAreaController {
    MAX_NOTCH_PADDING: System.Int32;
    SAFE_PADDING_PREF_KEY: System.String;
    // s_impl: Torappu.SafeArea.Core.SafeAreaImpl;
    // s_safeRect: Torappu.SafeRect;
    // s_isInited: System.Boolean;
    // s_isIniting: System.Boolean;
    // s_safeRectListeners: System.Collections.Generic.List<Torappu.ISafeAreaListener>;
    // s_cachedScreenWidth: System.Int32;
    // s_cachedScreenHeight: System.Int32;
  }
  export enum SafeAreaMaskCond {
    NONE = "NONE",
    STORY = "STORY",
  }
  export interface UISafeAreaMask {
    // _panelLeft: UnityEngine.RectTransform;
    // _panelRight: UnityEngine.RectTransform;
    // _scaler: UnityEngine.UI.CanvasScaler;
    // _canvas: UnityEngine.Canvas;
    // _camera: UnityEngine.Camera;
    // m_isShown: System.Boolean;
    // m_hideCondSet: Torappu.ListSet<Torappu.SafeAreaMaskCond>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_Start: XLua.DelegateBridge;
    // __Hotfix0_OnDestroy: XLua.DelegateBridge;
    // __Hotfix0_Update: XLua.DelegateBridge;
    // __Hotfix0_OnSafeRectUpdated: XLua.DelegateBridge;
    // __Hotfix0_Display: XLua.DelegateBridge;
    // __Hotfix0_ShowIfNeeded: XLua.DelegateBridge;
    // __Hotfix0__ShowIfNeeded: XLua.DelegateBridge;
    // __Hotfix0__UpdateLayout: XLua.DelegateBridge;
    // __Hotfix0__UpdateDisplayStatus: XLua.DelegateBridge;
    // __Hotfix0__EnableCoreComponents: XLua.DelegateBridge;
  }
  export interface PersistentSingleton<T> {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_DestroyMe: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0_OnDuplicated: XLua.DelegateBridge;
  }
  export interface ISingletonNotAutoCreate {
  }
  export interface SingletonMonoBehaviour<T> {
    // s_instance: T;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_get_instance: XLua.DelegateBridge;
    // __Hotfix0_get_instanceOrNull: XLua.DelegateBridge;
    // __Hotfix0_get_hasInstance: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0_OnDuplicated: XLua.DelegateBridge;
    // __Hotfix0_Awake: XLua.DelegateBridge;
    // __Hotfix0_OnDestroy: XLua.DelegateBridge;
  }
  export interface SingletonScriptableObject<T> {
    // s_instance: T;
  }
  export interface SortingLayerWrapper {
    sortingLayerId: System.Int32;
  }
  export interface ArrayDict<TKey,TValue> {
    _items: Torappu.ArrayDict.SerializableKV<TKey,TValue>[];
    _test: TValue[];
  }
  export interface CountDownTask {
    DEFAULT_INTERVAL: System.Int64;
    // m_timer: Torappu.TaskTimer<Torappu.CountDownTask.TickValue>;
    // overrideUpdateTickValue: System.Func<Torappu.TaskTimer.Context<Torappu.CountDownTask.TickValue>,Torappu.CountDownTask.TickValue>;
    // onTimeTick: System.Action<Torappu.CountDownTask.TickValue>;
    // onTimeout: System.Action;
  }
  export interface DataBundle {
    // m_storage: Torappu.ListDict<System.String,System.Object>;
  }
  export interface DFLogger {
    FILE_NAME_FORMAT: System.String;
    // s_instance: Torappu.FileLogger;
  }
  export interface DoubleBufferedList<T> {
    // m_internalList: System.Collections.Generic.List<T>;
    // m_cachedBuffer: System.Collections.Generic.List<T>;
    // m_eCounter: System.UInt16;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // _c__Hotfix1_ctor: XLua.DelegateBridge;
    // __Hotfix0_get_count: XLua.DelegateBridge;
    // __Hotfix0_get_isEmpty: XLua.DelegateBridge;
    // __Hotfix0_Add: XLua.DelegateBridge;
    // __Hotfix0_Remove: XLua.DelegateBridge;
    // __Hotfix0_Clear: XLua.DelegateBridge;
    // __Hotfix0_GetEnumerator: XLua.DelegateBridge;
    // __Hotfix0_GetInversedEnumerator: XLua.DelegateBridge;
    // __Hotfix0_System.Collections.IEnumerable.GetEnumerator: XLua.DelegateBridge;
    // __Hotfix0__DecEnumeratorCounter: XLua.DelegateBridge;
  }
  export interface DragCancellableClickHandler {
    onClicked: Torappu.DragCancellableClickHandler.ClickEvent;
    // m_hasDragDetacted: System.Boolean;
  }
  export interface DynamicPrefabInstHolder {
    // _prefabContainer: UnityEngine.Transform;
    // m_instance: UnityEngine.GameObject;
    // m_onAchieveInstOnce: System.Action<UnityEngine.GameObject>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_get_prefabContainer: XLua.DelegateBridge;
    // __Hotfix0_set_achieveInst: XLua.DelegateBridge;
    // __Hotfix0_Start: XLua.DelegateBridge;
  }
  export interface EasyMeshGenerator {
    // DEFAULT_COLOR: UnityEngine.Color;
    // m_vertices: System.Collections.Generic.List<UnityEngine.Vector3>;
    // m_uvs: System.Collections.Generic.List<UnityEngine.Vector2>;
    // m_colors: System.Collections.Generic.List<UnityEngine.Color>;
    // m_indices: System.Collections.Generic.List<System.Int32>;
  }
  export interface EventPool<TEnum> {
    // m_eventsMap: System.Collections.Generic.Dictionary<TEnum,Torappu.EventPool.AddOrRemoveSafeCallbackSet<TEnum>>;
    // m_onceEventsMap: System.Collections.Generic.Dictionary<TEnum,Torappu.EventPool.AddOrRemoveSafeCallbackSet<TEnum>>;
  }
  export interface FastActionDetector {
    // m_latestInvoke: System.Single;
    FAST_THRESHOLD: System.Single;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_IsFastAction: XLua.DelegateBridge;
  }
  export interface FileLogger {
    // m_options: Torappu.FileLogger.Options;
    // m_streamWriter: System.IO.StreamWriter;
    // <path>k__BackingField: System.String;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_Dispose: XLua.DelegateBridge;
    // __Hotfix0_Log: XLua.DelegateBridge;
    // __Hotfix0_CheckLogLevel: XLua.DelegateBridge;
    // __Hotfix0_get_path: XLua.DelegateBridge;
    // __Hotfix0_set_path: XLua.DelegateBridge;
    // __Hotfix0__OnCatchLog: XLua.DelegateBridge;
    // __Hotfix0__GenFilePath: XLua.DelegateBridge;
    // __Hotfix0_GetLogDirPath: XLua.DelegateBridge;
  }
  export interface Follower2D {
    // _moveThreshold: UnityEngine.Vector2;
    _inactiveWhenUnFollow: System.Boolean;
    // _targetOnStart: UnityEngine.Transform;
    // m_target: UnityEngine.Transform;
    // m_offset: UnityEngine.Vector2;
    // m_lastPos: UnityEngine.Vector2;
  }
  export interface Follower3D {
    // _moveThreshold: UnityEngine.Vector3;
    _inactiveWhenUnFollow: System.Boolean;
    // m_target: UnityEngine.Transform;
    // m_offset: UnityEngine.Vector3;
    // m_lastPos: UnityEngine.Vector3;
  }
  export interface GameObjectArrayCountControl {
    // _gameObjectArray: UnityEngine.GameObject[];
  }
  export interface GameObjectHub {
    // _objects: UnityEngine.GameObject[];
  }
  export interface HashCodeBuilder {
    FLOAT_MULTIPLIER: System.Single;
    // m_curHash: System.UInt32;
  }
  export interface Heap<T> {
    // m_list: System.Collections.Generic.List<Torappu.Heap.InternalHeapNode<T>>;
    // m_dataMap: System.Collections.Generic.Dictionary<T,Torappu.Heap.InternalHeapNode<T>>;
  }
  export interface ListCounterPool<TItem> {
  }
  export interface ListPool<T> {
    // m_options: Torappu.ListPool.Options<T>;
    // m_objectPool: Torappu.ObjectPool.ObjectPool<Torappu.ReusableList<T>>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_get_allLoadedCnt: XLua.DelegateBridge;
    // __Hotfix0_get_availableUnusedCnt: XLua.DelegateBridge;
    // __Hotfix0_Allocate: XLua.DelegateBridge;
    // __Hotfix0_Recycle: XLua.DelegateBridge;
    // __Hotfix0_Reset: XLua.DelegateBridge;
    // __Hotfix0_ClearUsingLinksOnly: XLua.DelegateBridge;
    // __Hotfix0__NewList: XLua.DelegateBridge;
  }
  export interface ReusableList<T> {
    // m_parentPool: Torappu.ListPool<T>;
  }
  export interface ListSet<TItem> {
    // m_items: System.Collections.Generic.List<TItem>;
  }
  export interface LRUCache<K,V> {
    // m_capacity: System.Int32;
    // m_cacheMap: System.Collections.Generic.Dictionary<K,System.Collections.Generic.LinkedListNode<System.Collections.Generic.KeyValuePair<K,V>>>;
    // m_lruQueue: System.Collections.Generic.LinkedList<System.Collections.Generic.KeyValuePair<K,V>>;
  }
  export interface MeshColorizer {
    // _color: UnityEngine.Color;
  }
  export interface IPeriodicTicker {
  }
  export interface PeriodicTicker {
    // m_tickPeriod: System.Int32;
    // m_tickCount: System.Int32;
  }
  export interface PeriodicTimer {
    // m_periodTime: Torappu.FP;
    // m_remainingTime: Torappu.FP;
  }
  export interface PrecisePeriodicTimer {
  }
  export interface TimeSyncPeriodicTimer {
    // m_periodTime: Torappu.FP;
    // m_getTimeFunc: System.Func<Torappu.FP>;
    // m_lastSyncCnt: System.Int32;
  }
  export interface PersistentFileStorage {
    MAX_RETRY_COUNT: System.Int32;
    BUFFER_SIZE: System.Int32;
    // s_workingStorages: System.Collections.Generic.Dictionary<System.String,Torappu.PersistentFileStorage>;
    // m_isDisposed: System.Boolean;
    // m_fileName: System.String;
    // m_fileFolder: System.String;
  }
  export interface PerspectiveCameraScaler {
    STANDARD_RATIO_THRESHOLD: System.Single;
  }
  export interface IPlayerDataListener {
  }
  export interface PlayerDataTracker {
    // m_listeners: System.Collections.Generic.List<Torappu.IPlayerDataListener>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_Register: XLua.DelegateBridge;
    // __Hotfix0_Unregister: XLua.DelegateBridge;
    // __Hotfix0_PlayerDataOnlyNotifyDataChanged: XLua.DelegateBridge;
  }
  export interface PlayerPrefsWrapper {
    USER_DOMAIN_KEY: System.String;
  }
  export interface PrefabInstHolder {
    // _prefabContainer: UnityEngine.Transform;
    // _prefab: UnityEngine.GameObject;
    // m_instance: UnityEngine.GameObject;
    // m_onAchieveInstOnce: System.Action<UnityEngine.GameObject>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_get_prefabContainer: XLua.DelegateBridge;
    // __Hotfix0_set_achieveInst: XLua.DelegateBridge;
    // __Hotfix0_Start: XLua.DelegateBridge;
  }
  export interface PriorityQueue<T> {
    // m_list: System.Collections.Generic.List<T>;
  }
  export interface ProfessionSpriteHub {
    _sprites: Torappu.ProfessionSpriteHub.DataPair[];
    // m_spriteHub: System.Collections.Generic.Dictionary<Torappu.ProfessionCategory,UnityEngine.Sprite>;
  }
  export interface IRefCountInstance {
  }
  export interface RefCountReference {
    // m_signature: System.Int64;
    // m_selfRefCount: System.Int32;
  }
  export interface SafeParentComponent {
    // m_cachedChildren: Torappu.ListDict<System.Int32,Torappu.SafeParentComponent.Wrapper>;
  }
  export interface SceneFontHolder {
    // _fontSel: Torappu.UI.FontSelect;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_TryGetFont: XLua.DelegateBridge;
  }
  export interface ShallowEqualArray<T> {
    // m_content: T[];
  }
  export interface SpineOutline {
    OUTLINE_SHADER_NAME: System.String;
    OFFSET_Z: System.Single;
    // _shader: UnityEngine.Shader;
    _outlineSize: System.Single;
    // _outlineColor: UnityEngine.Color;
    _useEightWays: System.Boolean;
    // m_material: UnityEngine.Material;
    // m_meshRenderer: UnityEngine.MeshRenderer;
    // m_meshFilter: UnityEngine.MeshFilter;
  }
  export interface SplashController {
    _initialFadeTime: System.Single;
    _regularFadeTime: System.Single;
    _showTime: System.Single;
    // _blackCoverImage: UnityEngine.UI.Image;
    // _splashImage: UnityEngine.UI.Image;
    // _splashSprites: UnityEngine.Sprite[];
    _performanceTest: Torappu.PerformanceTest;
    // _warningDialog: UnityEngine.GameObject;
    // _textResourceLoading: UnityEngine.UI.Text;
    // _textConnectUs: UnityEngine.UI.Text;
    // _textConfirm: UnityEngine.UI.Text;
    // m_tween: DG.Tweening.Sequence;
  }
  export interface TaskTimer<Value> {
    // m_startTime: System.Int64;
    // m_endTime: System.Int64;
    options: Torappu.TaskTimer.Options<Value>;
    startTime: System.Int64;
    endTime: System.Int64;
    // m_isInited: System.Boolean;
    // m_lastUpdateTime: System.Int64;
    // m_lastValue: Value;
    // m_isTaskEnd: System.Boolean;
  }
  export interface TextureHub {
    // _default: UnityEngine.Texture;
    // _textures: UnityEngine.Texture[];
    // m_textureHub: System.Collections.Generic.Dictionary<System.String,UnityEngine.Texture>;
  }
  export interface ThreadSafeQueue<T> {
    // m_syncObj: System.Object;
    // m_queue: System.Collections.Generic.Queue<T>;
  }
  export interface ITimeWatcher {
  }
  export interface TimeTracer {
    DEFAULT_GROUP: System.Int32;
    INVALID_GROUP: System.Int32;
    _timeScale: System.Single;
    // m_timeWatcherGroup: Torappu.ListDict<System.Int32,Torappu.TimeTracer.TimeWatcherGroup>;
    // m_groupIdTail: System.Int32;
    // m_watchersBuffer: System.Collections.Generic.List<Torappu.ITimeWatcher>;
    // m_timeTasks: System.Collections.Generic.List<Torappu.TimeTracer.TimeTask>;
    // <>f__am$cache0: System.Predicate<Torappu.ITimeWatcher>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_Watch: XLua.DelegateBridge;
    // __Hotfix0_UnWatch: XLua.DelegateBridge;
    // __Hotfix0_RegisterGroup: XLua.DelegateBridge;
    // __Hotfix0_UnregisterGroup: XLua.DelegateBridge;
    // __Hotfix0_PauseGroup: XLua.DelegateBridge;
    // __Hotfix0_ResumeGroup: XLua.DelegateBridge;
    // __Hotfix0_StartTimeTask: XLua.DelegateBridge;
    // __Hotfix0_IsValidGroup: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0_Update: XLua.DelegateBridge;
    // __Hotfix0__RegisterGroup: XLua.DelegateBridge;
    // __Hotfix0__UnregisterGroup: XLua.DelegateBridge;
    // __Hotfix0__SetGroupActive: XLua.DelegateBridge;
    // __Hotfix0__WatchOnGroup: XLua.DelegateBridge;
    // __Hotfix0__UnWatchOnGroup: XLua.DelegateBridge;
  }
  export interface TopMenuDynamicPrefabInstHolder {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_GetPrefab: XLua.DelegateBridge;
  }
  export interface TorappuMemoryPool {
    DEFAULT_CAPACITY: System.Int32;
    // m_globalFlags: Torappu.ListSet<System.Int32>;
    // m_cacheGroup: Torappu.ListDict<System.String,Torappu.LRUCache<System.String,Torappu.TorappuMemoryPool.Value>>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_RequestGroup: XLua.DelegateBridge;
    // __Hotfix0_DeleteGroup: XLua.DelegateBridge;
    // __Hotfix0_MarkGlobalFlag: XLua.DelegateBridge;
    // __Hotfix0_ConsumeGlobalFlag: XLua.DelegateBridge;
  }
  export interface UnorderedArray<T> {
    // m_items: T[];
    // m_itemMap: System.Collections.Generic.Dictionary<T,System.Int32>;
    // <count>k__BackingField: System.Int32;
  }
  export interface BasicTween<ValueType> {
    _from: ValueType;
    _to: ValueType;
    _startByFrom: System.Boolean;
    _duration: System.Single;
    _delay: System.Single;
    // _easeType: DG.Tweening.Ease;
    _loop: System.Int32;
    // _loopType: DG.Tweening.LoopType;
    _playWhenStart: System.Boolean;
    _ignoreTimeScale: System.Boolean;
    // m_tweener: DG.Tweening.Tweener;
  }
  export interface TweenRotate {
    // m_transform: UnityEngine.Transform;
  }
  export interface AdapterUtil {
  }
  export interface ArrayUtil {
  }
  export interface EffectUtil {
  }
  export interface FileUtil {
    SIZE_SUFFIXS: System.String[];
    DEFAULT_PRETTY_SIZE_FORMAT_STR: System.String;
    IO_RETRY_COUNT: System.Int32;
  }
  export enum TimeFormat {
    MM_SS = "MM_SS",
    HH_MM_SS = "HH_MM_SS",
  }
  export interface FormatUtil {
    NUMBER_MONEY_SIZE: System.Int64;
    NUMBER_MONEY_MAX: System.String;
    NUMBER_UNIT_SIZE: System.Int64;
    NUMBER_UNIT_MAX: System.String;
    NON_BREAKING_SPACE: System.Char;
    ARABIC_NUM: System.Int32[];
    ROMAN_NUM: System.String[];
    CLICKABLE_RICH_TEXT_TAG: System.String;
    CLICKABLE_RICH_TEXT_RANGE_TAG: System.String;
    // s_sharedIdCardNum: System.Collections.Generic.List<System.Int32>;
    ID_CARD_WEIGHT: System.Int32[];
    ID_CARD_VALIDATE: System.Int32[];
    // <>f__mg$cache0: Torappu.FormatUtil.RichTextTagHandler;
    // <>f__mg$cache1: Torappu.FormatUtil.RichTextTagHandler;
    // <>f__mg$cache2: Torappu.FormatUtil.RichTextTagHandler;
    // __Hotfix0_FormatNumberWithUnit: XLua.DelegateBridge;
    // __Hotfix0_FormatNameCardNumber: XLua.DelegateBridge;
    // __Hotfix0_FormatNumber: XLua.DelegateBridge;
    // __Hotfix0_FormatGetRomanNumerals: XLua.DelegateBridge;
    // __Hotfix0_FormatMultiLineTextFromData: XLua.DelegateBridge;
    // __Hotfix0_FormatToNonBreakingSpace: XLua.DelegateBridge;
    // __Hotfix0_FormatRichTextFromData: XLua.DelegateBridge;
    // __Hotfix0_RemoveRichTextFromString: XLua.DelegateBridge;
    // __Hotfix0__FormatRichTextTag: XLua.DelegateBridge;
    // __Hotfix0__CheckIfStartTag: XLua.DelegateBridge;
    // __Hotfix0__RichTextConvertTagsHandler: XLua.DelegateBridge;
    // __Hotfix0__RichTextIgnoreTagsHandler: XLua.DelegateBridge;
    // __Hotfix0_FormatClickableRichTextFromData: XLua.DelegateBridge;
    // __Hotfix0__FormatClickableRichTextTag: XLua.DelegateBridge;
    // __Hotfix0__PushCommentedTextIndex: XLua.DelegateBridge;
    // __Hotfix0__CountRichTextPrefixLength: XLua.DelegateBridge;
    // __Hotfix0__CheckIfUGUIRichTextTag: XLua.DelegateBridge;
    // __Hotfix0__HandleClickableRichTextTags: XLua.DelegateBridge;
    // __Hotfix0_FormatParamedText: XLua.DelegateBridge;
    // __Hotfix0_FormatTimeDelta: XLua.DelegateBridge;
    // __Hotfix0_FormatDateTimeyyyyMMddHHmm: XLua.DelegateBridge;
    // __Hotfix0_FormatDateTimeyyyyMMddHHmmss: XLua.DelegateBridge;
    // __Hotfix0__FormatParamedItem: XLua.DelegateBridge;
    // __Hotfix0_FormatClockTimeFromMillsec: XLua.DelegateBridge;
    // __Hotfix0_FormatClockTimeFromSecond: XLua.DelegateBridge;
    // __Hotfix1_FormatClockTimeFromSecond: XLua.DelegateBridge;
    // __Hotfix0_ParseTimeByDay: XLua.DelegateBridge;
    // __Hotfix0_ParseTimeHHmmSS: XLua.DelegateBridge;
    // __Hotfix0_ParseTimemmSS: XLua.DelegateBridge;
    // __Hotfix0_BinaryToHexString: XLua.DelegateBridge;
    // __Hotfix0_HexToString: XLua.DelegateBridge;
    // __Hotfix0_HexStringToBinary: XLua.DelegateBridge;
    // __Hotfix0_BinaryToBase64: XLua.DelegateBridge;
    // __Hotfix0_Base64ToBinary: XLua.DelegateBridge;
    // __Hotfix0_FormatColorFromData: XLua.DelegateBridge;
    // __Hotfix0_FormatSmallFloat: XLua.DelegateBridge;
    // __Hotfix0_FormatCommonLogTraceForInvestigation: XLua.DelegateBridge;
    // __Hotfix0_HilightTimeContent: XLua.DelegateBridge;
    // __Hotfix0_GetFriendLastLoginString: XLua.DelegateBridge;
    // __Hotfix0_GetCharacterBuildableTypePositionName: XLua.DelegateBridge;
    // __Hotfix0_ComputeHash: XLua.DelegateBridge;
    // __Hotfix0_ComputeHashByte: XLua.DelegateBridge;
    // __Hotfix0_ComputeELFHash: XLua.DelegateBridge;
    // __Hotfix0_GenRandomCharsAndNums: XLua.DelegateBridge;
    // __Hotfix0_ValidateIdCardNum: XLua.DelegateBridge;
    // __Hotfix0_IDCardInputTextValidater: XLua.DelegateBridge;
    // __Hotfix0__ValidateCardGen1: XLua.DelegateBridge;
    // __Hotfix0__ValidateCardGen2: XLua.DelegateBridge;
  }
  export interface FpsController {
    MAX_TARGET_FPS: System.Int32;
    TARGET_FPS_PER_MODE: System.Int32[];
    _lockTargetFps: System.Boolean;
    _makeNeverSleep: System.Boolean;
    _targetFpsMode: Torappu.FpsController.FpsMode;
    _periodToProfile: System.Single;
    _fpsFontSize: System.Int32;
    // _fpsFontColor: UnityEngine.Color;
    // _fpsRect: UnityEngine.Rect;
    // m_fpsCountTime: System.Single;
    // m_frameCnt: System.Int32;
    // m_lastFps: System.Single;
    // m_originTargetFps: System.Int32;
    // m_originVSync: System.Int32;
  }
  export interface GameObjectUtil {
  }
  export interface GraphicUtil {
    // s_corners: UnityEngine.Vector3[];
    // <>f__am$cache0: System.Comparison<UnityEngine.Camera>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_Blur: XLua.DelegateBridge;
    // __Hotfix0_ShotBlurredCamera: XLua.DelegateBridge;
    // __Hotfix1_ShotBlurredCamera: XLua.DelegateBridge;
    // __Hotfix0__CalcBlurSize: XLua.DelegateBridge;
    // __Hotfix0_CalcBoundOfRectTransform: XLua.DelegateBridge;
    // __Hotfix0_CalcWorldCenter: XLua.DelegateBridge;
    // __Hotfix0_ConvertAnchoredPosToOtherRectTrans: XLua.DelegateBridge;
    // __Hotfix0_StartFromLeftBottom: XLua.DelegateBridge;
    // __Hotfix0_CalcWorldBoundOfRectTransform: XLua.DelegateBridge;
    // __Hotfix0_CaptureTextureThumbFromCamera: XLua.DelegateBridge;
    // __Hotfix0_CaptureSpriteThumbFromCamera: XLua.DelegateBridge;
    // __Hotfix0_Encapsulate2DBounds: XLua.DelegateBridge;
    // __Hotfix0_ClearRTSprite: XLua.DelegateBridge;
    // __Hotfix0_WorldToRectLocalPoint: XLua.DelegateBridge;
    // __Hotfix0_ConvertScreenToCanvasLogic: XLua.DelegateBridge;
  }
  export interface GUIUtils {
  }
  export interface InputUtil {
  }
  export interface LogUtil {
  }
  export interface MathUtil {
    LARGE_EPS: System.Single;
    HUGE_EPS: System.Single;
    SIN30: System.Double;
    COS30: System.Double;
    FP_LARGE_EPS: Torappu.FP;
    FP_HUGE_EPS: Torappu.FP;
    // <>f__mg$cache0: System.Func<System.Single,System.Single,System.Boolean>;
    // <>f__mg$cache1: System.Func<System.Single,System.Single,System.Boolean>;
    // <>f__mg$cache2: System.Func<System.Single,System.Single,System.Boolean>;
    // <>f__mg$cache3: System.Func<System.Single,System.Single,System.Boolean>;
    // <>f__mg$cache4: System.Func<System.Single,System.Single,System.Boolean>;
    // <>f__mg$cache5: System.Func<Torappu.FP,Torappu.FP,System.Boolean>;
    // <>f__mg$cache6: System.Func<Torappu.FP,Torappu.FP,System.Boolean>;
    // <>f__mg$cache7: System.Func<Torappu.FP,Torappu.FP,System.Boolean>;
    // <>f__mg$cache8: System.Func<Torappu.FP,Torappu.FP,System.Boolean>;
    // <>f__mg$cache9: System.Func<Torappu.FP,Torappu.FP,System.Boolean>;
  }
  export interface Misc {
  }
  export interface NativeUtil {
    // m_bundleIdentifier: System.String;
  }
  export interface RandomFactory {
  }
  export interface RandomUtil {
  }
  export interface ResourceUrls {
    CHR_ILLUST_PATH: System.String;
    CHR_DYN_ILLUST_PATH: System.String;
    NPC_ILLUST_PATH: System.String;
    SKILL_ICON_PATH: System.String;
    ITEM_ICON_HUB_PATH: System.String;
    ITEM_ICON_NO_TINY_HUB: System.String;
    ITEM_ICON_STACK_PATH: System.String;
    VOUCHER_ITEM_BACK_HUB: System.String;
    ENEMY_ICON_HUB_PATH: System.String;
    PROFESSION_ICON_PATH: System.String;
    TEAM_ICON_PATH: System.String;
    BRAND_ICON_PATH: System.String;
    SKIN_KV_HUB_PATH: System.String;
    PROFESSION_TEXT_PATH: System.String;
    CHAR_AVATAR_HUB_PATH: System.String;
    CHAR_PORTRAIT_HUB_PATH: System.String;
    RARITY_HUB_PATH: System.String;
    CLUE_HUB_PATH: System.String;
    FURNITURE_ICON_HUB_PATH: System.String;
    FURNITURE_THEME_HUB_PATH: System.String;
    CASH_HUB_PATH: System.String;
    ZONE_MAP_PATH: System.String;
    ZONE_BACK_MAP_PATH: System.String;
    ZONE_PAGE_MAP_PATH: System.String;
    ZONE_WEEKLY_ITEM_IMAGE: System.String;
    ACTIVITY_ROOT: System.String;
    ACTIVITY_MISSION_PATH: System.String;
    TIMELY_DROP_PATH: System.String;
    MAP_COMMON_REOUSRCE_PATH: System.String;
    HANDBOOK_BATTLE_PATH: System.String;
    HANDBOOK_GROUP_VIEW: System.String;
    CAMPAIGN_STAGE_BTN: System.String;
    RETRO_TITLE_PREFAB: System.String;
    RETRO_VIEW_PREFAB: System.String;
    RETRO_MAP_DECRO_PREFAB: System.String;
    RETRO_BACK_HUB: System.String;
    MAIL_SENDER_CONFIG: System.String;
    MAIL_UI_BACK_HUB: System.String;
    START_BATTLE_BUTTON_HUB: System.String;
    STAGE_MAINLINE_ZONE_BG_PATH: System.String;
    STAGE_WEEKLY_GROUP_ZONE_PATH: System.String;
    STAGE_MAP_PREVIEW_PATH: System.String;
    STAGE_CAMPAIGNRULE_PATH: System.String;
    LOGO_HUB_PATH: System.String;
    OPEN_SERVER_CHAIN_LOGIN_PATH: System.String;
    ELITE_HUB_PATH: System.String;
    POTENTIAL_HUB_PATH: System.String;
    PROFESSION_LARGE_HUB_PATH: System.String;
    PROFESSION_NO_SHADOW_HUB_PATH: System.String;
    NUMBER_HUB_PATH: System.String;
    SPECIALIZED_HUB_PATH: System.String;
    GACHA_POOL_PATH: System.String;
    ANNOUNCE_POOL_PATH: System.String;
    SKIN_PREFAB_PATH: System.String;
    SHOP_RECOMMEND_PATH: System.String;
    SHOP_IMAGE_HUB_PATH: System.String;
    SHOP_FURN_HUB_PATH: System.String;
    SHOP_LMTGS_RES_PATH: System.String;
    SHOP_LMTGS_SHOP_BTNS_PATH: System.String;
    TEMPLATE_SHOP_RARITY_HUB_PATH: System.String;
    GIFT_PACKAGE_HUB_PATH: System.String;
    GACHA_DETAIL_HUB_PATH: System.String;
    LOADING_ILLUSTS_PATH: System.String;
    WORLD_TIPS_PATH: System.String;
    GUIDEBOOK_PAGES_PATH: System.String;
    GUIDEBOOK_TRIGGERS_PATH: System.String;
    VOICE_PATH: System.String;
    BUILDING_BUFF_ICON_PATH: System.String;
    BUILDING_BUFF_IMAGE_CONFIG_PATH: System.String;
    BUILDING_BUFF_SKILL_ICON_PATH: System.String;
    BUILDING_ARCH_ICON_HUB_PATH: System.String;
    BUILDING_STATION_ICON_BKG_HUB_PATH: System.String;
    SHOP_KEEPER_GRAPHIC_PATH: System.String;
    MISSION_TAB_PATH: System.String;
    STAGE_START_BATTLE_BUTTON_STYLE: System.String;
    STAGE_ET_ITEM_ICON_HUB_PATH: System.String;
    BUILDING_REFLECT_CONFIG_PATH: System.String;
    HG_REFLECTION_SHADER_PROFILE_PATH: System.String;
    STAGE_ZONE_HOME_ENTRY_HUB_PATH: System.String;
    STAGE_ZONE_WEEKLY_HUB_PATH: System.String;
    STAGE_ZONE_MAINLINE_BG_HUB_PATH: System.String;
    STAGE_ZONE_MAINLINE_ITEM_BG_HUB_PATH: System.String;
    BUY_DIAMOND_SHARD_PANEL: System.String;
    STAGE_ZONE_GROUP_HOLDER: System.String;
    STAGE_ITEM_USE_CONFIRM_PANEL: System.String;
    CRISIS_ENTRY_PICK_HUB_PATH: System.String;
    CRISIS_RUNE_ICON_HUB_PATH: System.String;
    CRISIS_SHOP_BACK_HUB_PATH: System.String;
    CRISIS_SHOP_SEASON_BACK_HUB_PATH: System.String;
    CRISIS_APPRAISE_ICON_HUB_PATH: System.String;
    CRISIS_LEVEL_BACK_HUB_PATH: System.String;
    CRISIS_RUNE_DETAIL_BG_HUB_PATH: System.String;
    CRISIS_STAGE_LOGO_HUB_PATH: System.String;
    CRISIS_SEASON_STAGE_RES_PATH: System.String;
    CRISIS_SEASON_ENTRY_RES_PATH: System.String;
    CRISIS_SEASON_MISC_RES_PATH: System.String;
    CRISIS_MAP_RULE_IMG_PATH: System.String;
    STORY_REVIEW_ACTIVITY_IMG_HUB_PATH: System.String;
    STORY_REVIEW_MINI_ACTIVITY_IMG_HUB_PATH: System.String;
    STORY_REVIEW_MINI_STORY_DETAIL_IMG_HUB_PATH: System.String;
    STORY_REVIEW_MINI_STORY_CHAR_IMG_HUB_PATH: System.String;
    HOME_BANNER_ZONE_HUB: System.String;
    HOME_BANNER_SHOP_HUB: System.String;
    HOME_BANNER_GACHA_HUB: System.String;
    MEDAL_ICON_HUB_PATH: System.String;
    MEDAL_TITLE_HUB_PATH: System.String;
    MEDAL_DIY_FRAME_PATH: System.String;
    MEDAl_GROUP_FRAME_PATH: System.String;
    MEDAL_SUIT_BKG_HUB: System.String;
    MEDAL_GROUP_VIEW_OBJ: System.String;
    ROGUELIKE_ITEM_HUB_PATH: System.String;
    ROGUELIKE_CHOICE_HUB_PATH: System.String;
    ROGUELIKE_DIALOGBG_HUB_PATH: System.String;
    ROGUELIKE_PROFESSION_ICON_HUB_PATH: System.String;
    ROGUELIKE_INIT_RELIC_ICON_HUB_PATH: System.String;
    ROGUELIKE_INIT_RELIC_BG_HUB_PATH: System.String;
    ROGUELIKE_LEVEL_BG_HUB_PATH: System.String;
    ROGUELIKE_LEVEL_ICON_HUB_PATH: System.String;
    CAMPAIGN_WORLD_MAP_PIECE_HUB_PATH: System.String;
    CAMPAIGN_ZONE_ICON_HUB_PATH: System.String;
    CAMPAIGN_STAGE_ZONE_PATH: System.String;
    CAMPAIGN_STAGE_ZONE_STAGE_HUB_PATH: System.String;
    ACTIVITY_ASSET_MAP_PATH: System.String;
    BATTLE_CHARACTER_PATH: System.String;
    BATTLE_SKIN_CHARACTER_PATH: System.String;
    BUILDING_CHARACTER_PATH: System.String;
    DYNAMIC_PAGE_HUB_PATH: System.String;
    DYNAMIC_STATE_HUB_PATH: System.String;
    UI_EFFECT_ROOT_PATH: System.String;
    ACTIVITY_NEWS_CONTENT_PATH: System.String;
    ACTIVITY_NEWS_TITLE_PATH: System.String;
    ACTIVITY_NEWS_LOGO_PATH: System.String;
    ACTIVITY_NEWS_LOGO_LARGE_PATH: System.String;
    HANDBOOK_BATTLE_FINISH_VIEW_PATH: System.String;
    DATA_VERSION_FILE: System.String;
    HANDBOOK_POS_DB: System.String;
    HANDBOOK_FORCE_MAP_DB: System.String;
    PLAYER_AVATAR_HUB_PATH: System.String;
    PlAYER_AVATAR_VIEW_PATH: System.String;
    FRIEND_ASSIST_PROFESSION_HUB_PATH: System.String;
    UI_COMMENTED_TEXT_PREFAB: System.String;
    UI_TERM_DESCRIPTION_VIEW_PREFAB: System.String;
    // __Hotfix0__GetVoicePath: XLua.DelegateBridge;
    // __Hotfix0__GetChrIllustResPath: XLua.DelegateBridge;
    // __Hotfix0__GetNpcIllustResPath: XLua.DelegateBridge;
    // __Hotfix0_BattleOnlyChrIllustResPath: XLua.DelegateBridge;
    // __Hotfix0_BattleFinishOnlyChrIllustResPath: XLua.DelegateBridge;
    // __Hotfix0_GachaOnlyChrIllustResPath: XLua.DelegateBridge;
    // __Hotfix0_IllustLoaderOnlyChrIllustResPath: XLua.DelegateBridge;
    // __Hotfix0_IllustLoaderOnlyNpcIllustPath: XLua.DelegateBridge;
    // __Hotfix0_DynIllustResPath: XLua.DelegateBridge;
    // __Hotfix0_GetVoicePath: XLua.DelegateBridge;
    // __Hotfix0_GetSkillIconHubPath: XLua.DelegateBridge;
    // __Hotfix0_ItemUtilOnlyItemIconHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetBrandIconHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetSkinKvHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetVoucherItemBackHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetItemIconNoTinyPath: XLua.DelegateBridge;
    // __Hotfix0_GetItemIconStackPath: XLua.DelegateBridge;
    // __Hotfix0_GetStageStartBattleButtonStylePath: XLua.DelegateBridge;
    // __Hotfix0_ItemUtilOnlyStageETHubPath: XLua.DelegateBridge;
    // __Hotfix0_BattleMenuOnlyStageETHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetEnemyIconHubPath: XLua.DelegateBridge;
    // __Hotfix0_CharUtilOnlyCharPortraitHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetProfessionIconHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetRarityHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetCashHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetTeamIconHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetSpecializedHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetStageZoneMapPath: XLua.DelegateBridge;
    // __Hotfix0_GetRetroMapPath: XLua.DelegateBridge;
    // __Hotfix0_GetWeeklyGroupZoneSpritePath: XLua.DelegateBridge;
    // __Hotfix0_GetStageZonePageImage: XLua.DelegateBridge;
    // __Hotfix0_GetStageZoneBackImage: XLua.DelegateBridge;
    // __Hotfix0_GetBuyDiamondShardPanel: XLua.DelegateBridge;
    // __Hotfix0_GetStageCampaginZonePrefabPath: XLua.DelegateBridge;
    // __Hotfix0_GetStageCampaginZoneStageHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetCampaginStageBtnPath: XLua.DelegateBridge;
    // __Hotfix0_GetRetroTitlePath: XLua.DelegateBridge;
    // __Hotfix0_GetRetroMapDecroPath: XLua.DelegateBridge;
    // __Hotfix0_GetRetroBackHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetRetroViewPath: XLua.DelegateBridge;
    // __Hotfix0_GetStageCampaginRule: XLua.DelegateBridge;
    // __Hotfix0_GetNumberPath: XLua.DelegateBridge;
    // __Hotfix0_GetCharAvatarHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetClueHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetFurnitureGroupDetailHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetFurnitureIconHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetMailUIBackHub: XLua.DelegateBridge;
    // __Hotfix0_GetStartBattleButton: XLua.DelegateBridge;
    // __Hotfix0_GetFurnitureThemeHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetMailSenderConfigPath: XLua.DelegateBridge;
    // __Hotfix0_GetStageMapPreviewPath: XLua.DelegateBridge;
    // __Hotfix0_GetLogoHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetChainLoginPath: XLua.DelegateBridge;
    // __Hotfix0_GetProfessionTextPath: XLua.DelegateBridge;
    // __Hotfix0_GetEliteHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetPotentialHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetProfessionLargeHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetFriendAssistProfessionHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetProfessionNoShadowHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetGachaDetailHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetMapCommonResource: XLua.DelegateBridge;
    // __Hotfix0_GetHandBookBattleMapHub: XLua.DelegateBridge;
    // __Hotfix0_GetHandBookGroupView: XLua.DelegateBridge;
    // __Hotfix0_GetGachaPath: XLua.DelegateBridge;
    // __Hotfix0_GetShopRecommendHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetGiftPackageHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetLMTGSResPath: XLua.DelegateBridge;
    // __Hotfix0_GetShopRecommendPath: XLua.DelegateBridge;
    // __Hotfix0_GetAnnouncePath: XLua.DelegateBridge;
    // __Hotfix0_GetSkinGroupPath: XLua.DelegateBridge;
    // __Hotfix0_GetZoneWeeklyItemImage: XLua.DelegateBridge;
    // __Hotfix0_GetLoadingIllustPath: XLua.DelegateBridge;
    // __Hotfix0_GetWorldTipsPath: XLua.DelegateBridge;
    // __Hotfix0_GetGuidebookPagePath: XLua.DelegateBridge;
    // __Hotfix0_GetGuidebookTriggerPath: XLua.DelegateBridge;
    // __Hotfix0_GetBuildingBuffIconPath: XLua.DelegateBridge;
    // __Hotfix0_GetBuildingBuffImageConfigPath: XLua.DelegateBridge;
    // __Hotfix0_GetBuildingBuffSkillIconPath: XLua.DelegateBridge;
    // __Hotfix0_GetBuildingArchIconHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetBuildingReflectConfigPath: XLua.DelegateBridge;
    // __Hotfix0_GetHGReflectionShaderProfilePath: XLua.DelegateBridge;
    // __Hotfix0_GetBuildingStationRoomIconBkgHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetActivityStagePath: XLua.DelegateBridge;
    // __Hotfix0_GetActivityResHolderPath: XLua.DelegateBridge;
    // __Hotfix0_GetActivityPath: XLua.DelegateBridge;
    // __Hotfix0_GetActivityResMissionPrefab: XLua.DelegateBridge;
    // __Hotfix0_GetTimelyDropPrefab: XLua.DelegateBridge;
    // __Hotfix0_GetShopKeeperGraphicPath: XLua.DelegateBridge;
    // __Hotfix0_GetHomeBannerZoneHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetHomeBannerGachaHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetHomeBannerShopHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetMissionDailyTabPath: XLua.DelegateBridge;
    // __Hotfix0_GetUIEffectPath: XLua.DelegateBridge;
    // __Hotfix0_GetMedalIconPicHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetMedalTitlePicHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetCrisisStageEntryPicHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetCrisisLevelBackHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetCrisisRuneIconHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetCrisisAppraiseIconHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetRuneDetailBgHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetCrisisShopBackHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetCrisisShopSeasonBackHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetCrisisStageLogoHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetCrisisStageSeasonResHolderPath: XLua.DelegateBridge;
    // __Hotfix0_GetCrisisEntrySeasonResHolderPath: XLua.DelegateBridge;
    // __Hotfix0_GetCrisisSeasonMiscResHolderPath: XLua.DelegateBridge;
    // __Hotfix0_GetActivityAssetMapPath: XLua.DelegateBridge;
    // __Hotfix0_GetCrisisMapRuleImgPath: XLua.DelegateBridge;
    // __Hotfix0_UIPageControllerGetDynamicPageHubPath: XLua.DelegateBridge;
    // __Hotfix0_StateEngineGetDynStateHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetDataVersionFilePath: XLua.DelegateBridge;
    // __Hotfix0_GetLMTGShopDetailPrefabPath: XLua.DelegateBridge;
    // __Hotfix0_GetLMTGSShopButtonHub: XLua.DelegateBridge;
    // __Hotfix0_GetTemplateShopRareBgHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetStoryReviewActivityImageHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetStoryReviewMiniActivityImageHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetStoryReviewMiniStoryDetailImageHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetStoryReviewMiniStoryCharImageHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetMedalDIYFramePath: XLua.DelegateBridge;
    // __Hotfix0_GetMedalGroupFramePath: XLua.DelegateBridge;
    // __Hotfix0_GetMedalSuitBkgHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetMedalGroupViewPath: XLua.DelegateBridge;
    // __Hotfix0_GetRoguelikeItemHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetRoguelikeChoiceHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetRoguelikeDialogBackgroundHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetRoguelikeProfHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetRoguelikeInitRelicIconHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetRoguelikeInitRelicBGHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetRoguelikeLevelBGHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetRoguelikeLevelIconHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetCampaignWorldMapPieceHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetCampaignZoneIconHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetActivityNewsContentPath: XLua.DelegateBridge;
    // __Hotfix0_GetActivityNewsTitlePath: XLua.DelegateBridge;
    // __Hotfix0_GetActivityNewsLogoPath: XLua.DelegateBridge;
    // __Hotfix0_GetActivityNewsLogoLargePath: XLua.DelegateBridge;
    // __Hotfix0_GetHandBookBattleFinishViewPath: XLua.DelegateBridge;
    // __Hotfix0_GetPlayerAvatarPicHubPath: XLua.DelegateBridge;
    // __Hotfix0_GetPlayerAvatarViewPath: XLua.DelegateBridge;
    // __Hotfix0_GetUICommentedTextPrefabResPath: XLua.DelegateBridge;
    // __Hotfix0_GetStageZoneHomeEntryHub: XLua.DelegateBridge;
    // __Hotfix0_GetStageZoneWeeklyHub: XLua.DelegateBridge;
    // __Hotfix0_GetStageZoneMainlineItemBgHub: XLua.DelegateBridge;
    // __Hotfix0_GetStageZoneMainlineBgHub: XLua.DelegateBridge;
    // __Hotfix0_GetStageZoneGroupHolder: XLua.DelegateBridge;
    // __Hotfix0_GetStageItemUseConfirmPanel: XLua.DelegateBridge;
    // __Hotfix0_GetTermDesciptionPrefabResPath: XLua.DelegateBridge;
  }
  export interface SpineUtil {
  }
  export interface StringUtil {
    // CHINESE_CULTURE: System.Globalization.CultureInfo;
  }
  export interface UnityUtils {
  }
  export interface ZipUtils {
    BUFFER_LENGTH: System.Int32;
    DEFAULT_ENTRY: System.String;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_Decompress: XLua.DelegateBridge;
    // __Hotfix1_Decompress: XLua.DelegateBridge;
    // __Hotfix2_Decompress: XLua.DelegateBridge;
    // __Hotfix0_Compress: XLua.DelegateBridge;
    // __Hotfix0_CompressToZipBytes: XLua.DelegateBridge;
    // __Hotfix0_DecompressFromZipBytes: XLua.DelegateBridge;
    // __Hotfix0_CompressStrToBase64: XLua.DelegateBridge;
    // __Hotfix0_DecompressStrFromBase64: XLua.DelegateBridge;
  }
  export interface CoroutineOnEnable {
    // m_options: Torappu.CoroutineOnEnable.Options;
    // m_isEnabled: System.Boolean;
    // m_coroutineLock: System.Boolean;
    // m_startCoroutine: System.Func<System.Collections.IEnumerator,UnityEngine.Coroutine>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_InvokeOnEnable: XLua.DelegateBridge;
    // __Hotfix0_InvokeOnDisable: XLua.DelegateBridge;
    // __Hotfix0__TryStartCoroutine: XLua.DelegateBridge;
    // __Hotfix0__TaskWrapper: XLua.DelegateBridge;
  }
  export interface WaitWhile {
    // m_predicate: System.Func<System.Boolean>;
  }
  export interface WaitWhileForSeconds {
    // m_endTime: System.Single;
    // m_predicate: System.Func<System.Boolean>;
  }
  export interface WaitForAsyncTask<Result> {
    // m_result: Result;
    // m_isFinished: System.Boolean;
    // m_exception: System.Exception;
  }
  export interface YieldSemaphore<Param> {
    DEFAULT_TIMEOUT_FRAME_CNT: System.Int32;
    // m_waitingTasks: System.Collections.Generic.List<Torappu.YieldSemaphore.WaitTask<Param>>;
  }
  export interface ActivityDB {
    // m_activityTimePoints: System.Collections.Generic.List<System.Int64>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0_HasEventDuringTime: XLua.DelegateBridge;
    // __Hotfix0_GetActivityTimePoints: XLua.DelegateBridge;
  }
  export interface BuildingDB {
    _obstacleTemplateConfig: Torappu.DB.TableConfig;
    // m_beans: System.Collections.Generic.Dictionary<Torappu.BuildingData.RoomType,Torappu.BuildingData.IRoomBean>;
    // m_obstacleTemplates: System.Collections.Generic.Dictionary<System.String,Torappu.BuildingData.ObstacleData>;
    // m_furnitureNames: System.String[];
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0_TryGetRoom: XLua.DelegateBridge;
    // __Hotfix0_TryGetRoomData: XLua.DelegateBridge;
    // __Hotfix1_TryGetRoomData: XLua.DelegateBridge;
    // __Hotfix0_TryGetRoomPrefab: XLua.DelegateBridge;
    // __Hotfix0_TryGetFurnitureData: XLua.DelegateBridge;
    // __Hotfix0_GetAllFurnitureNames: XLua.DelegateBridge;
    // __Hotfix0_GetFurnitureTypeDisplayName: XLua.DelegateBridge;
    // __Hotfix0_QueryRoomDataByCategoryAndSize: XLua.DelegateBridge;
    // __Hotfix0_GetRoomBean: XLua.DelegateBridge;
    // __Hotfix0_TryGetLayout: XLua.DelegateBridge;
    // __Hotfix0_TryGetStorey: XLua.DelegateBridge;
    // __Hotfix0_GetObstacleDataOrDefault: XLua.DelegateBridge;
    // __Hotfix0_get_obstacleTemplates: XLua.DelegateBridge;
    // __Hotfix0__LoadObstacleTemplate: XLua.DelegateBridge;
    // __Hotfix0__LoadRoomBeans: XLua.DelegateBridge;
    // __Hotfix0__LoadAllFurnitureNames: XLua.DelegateBridge;
  }
  export interface CampaignDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_BattleOnly_TryGetCampaign: XLua.DelegateBridge;
    // __Hotfix0_SDCOnly_TryGetCampaign: XLua.DelegateBridge;
    // __Hotfix0_SDCOnly_TryGetCampaignGroup: XLua.DelegateBridge;
    // __Hotfix0_GetCampaignData: XLua.DelegateBridge;
    // __Hotfix0_GetZoneData: XLua.DelegateBridge;
    // __Hotfix0_GetRegionData: XLua.DelegateBridge;
    // __Hotfix0_GetRotateGroup: XLua.DelegateBridge;
    // __Hotfix0_GetPreviousRotateGroup: XLua.DelegateBridge;
    // __Hotfix0_GetTrainingGroup: XLua.DelegateBridge;
    // __Hotfix0_GetTrainingAllOpenGroup: XLua.DelegateBridge;
    // __Hotfix0_TryGetNextTrainingGroupOrAllOpenGroup: XLua.DelegateBridge;
    // __Hotfix0_TryGetNextTrainingGroup: XLua.DelegateBridge;
    // __Hotfix0_CalcTrainingGroupEndTs: XLua.DelegateBridge;
  }
  export interface ChapterDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
  }
  export interface CharacterDB {
    // m_allCharacterIds: System.Collections.Generic.List<System.String>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_get_allCharacterIds: XLua.DelegateBridge;
    // __Hotfix0_ContainsKey: XLua.DelegateBridge;
    // __Hotfix0_CharUtilOnlyTryGetValue: XLua.DelegateBridge;
    // __Hotfix0_EditorTryGetValue: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0_TryGetValue: XLua.DelegateBridge;
    // __Hotfix0_GetValueOrDefault: XLua.DelegateBridge;
    // __Hotfix0_GetValues: XLua.DelegateBridge;
  }
  export interface CharMetaDB {
    // m_spCharGroupMap: System.Collections.Generic.Dictionary<System.String,System.String>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0__InitSpCharInfo: XLua.DelegateBridge;
    // __Hotfix0_GetSpCharGroupByCharId: XLua.DelegateBridge;
    // __Hotfix0_GetSpCharIdsByCharId: XLua.DelegateBridge;
  }
  export interface CharPatchDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
  }
  export interface CharWordDB {
    // m_showTypeSeachTable: System.Collections.Generic.Dictionary<System.String,Torappu.ListDict<Torappu.CharWordShowType,System.Collections.Generic.List<Torappu.CharWordData>>>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0_FliterCharWordData: XLua.DelegateBridge;
    // __Hotfix0__FilterAllTypesOfCharWordData: XLua.DelegateBridge;
    // __Hotfix0_FilterCharWordData: XLua.DelegateBridge;
    // __Hotfix0_ShowTypeSearchTable: XLua.DelegateBridge;
  }
  export interface CheckInDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_GetCurrentMonthlyItem: XLua.DelegateBridge;
  }
  export interface ClueDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
  }
  export interface CrisisDB {
    META_KEY: System.String;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0_FindSeasonInfo: XLua.DelegateBridge;
    // __Hotfix0_EditorLoadMeta: XLua.DelegateBridge;
  }
  export interface EnemyDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_TryGet: XLua.DelegateBridge;
    // __Hotfix1_TryGet: XLua.DelegateBridge;
  }
  export interface EnemyHandBookDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
  }
  export interface FavorDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_GetFavorData: XLua.DelegateBridge;
    // __Hotfix0_GetFavorBattlePhase: XLua.DelegateBridge;
    // __Hotfix0_CalculateFavorPointByBattlePhaseRoughly: XLua.DelegateBridge;
  }
  export interface GachaDB {
    // m_recruitBuildTimeMap: System.Collections.Generic.Dictionary<System.Int32,Torappu.RecruitPool.RecruitTime>;
    // m_freeLimitGachaMap: System.Collections.Generic.Dictionary<System.String,Torappu.GachaData.FreeLimitGachaData>;
    // m_poolMap: System.Collections.Generic.Dictionary<System.String,Torappu.GachaPoolClientData>;
    // m_poolTimeList: Torappu.GachaDB.TimeList<Torappu.GachaPoolClientData>;
    // m_limitTktTimeList: Torappu.GachaDB.TimeList<Torappu.GachaData.LimitTenGachaTkt>;
    // m_linkageTktTimeList: Torappu.GachaDB.TimeList<Torappu.GachaData.LinkageTenGachaTkt>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_get_recruitBuildTimeMap: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0__InitFreeLimitGachaMap: XLua.DelegateBridge;
    // __Hotfix0__InitPoolSearchTable: XLua.DelegateBridge;
    // __Hotfix0_GetGachaPool: XLua.DelegateBridge;
    // __Hotfix0_GetSpecialRecruitPool: XLua.DelegateBridge;
    // __Hotfix0_CheckFreeGachaLastRefresh: XLua.DelegateBridge;
    // __Hotfix0_GetValidPoolsEnumerator: XLua.DelegateBridge;
    // __Hotfix0_GetValidLimitTenGachaTktEnumerator: XLua.DelegateBridge;
    // __Hotfix0_GetValidLinkageTenGachaTktEnumerator: XLua.DelegateBridge;
  }
  export interface GameDataConstsDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
  }
  export interface HandbookInfoDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_TryGetName: XLua.DelegateBridge;
    // __Hotfix0_CheckCharAvailable: XLua.DelegateBridge;
  }
  export interface HandbookTeamDB {
    DEFAULT_POWER_ID: System.String;
    RHODES_ID: System.String;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_TryGetTeamSort: XLua.DelegateBridge;
    // __Hotfix0_IsTeamIconRaw: XLua.DelegateBridge;
    // __Hotfix0_GetColor: XLua.DelegateBridge;
  }
  export interface ItemDB {
    // m_specialTypesInItemRepo: System.Collections.Generic.List<Torappu.ItemType>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0_get_specialTypesInItemRepo: XLua.DelegateBridge;
    // __Hotfix0_TryGetPotentionItemId: XLua.DelegateBridge;
  }
  export interface MedalDB {
    // m_medalDataMap: System.Collections.Generic.Dictionary<System.String,Torappu.MedalPerData>;
    // m_medalGroupMap: System.Collections.Generic.Dictionary<System.String,Torappu.MedalGroupData>;
    // m_advMedalToNormal: System.Collections.Generic.Dictionary<System.String,System.String>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0_GetMedalDataById: XLua.DelegateBridge;
    // __Hotfix0_GetMedalGroupById: XLua.DelegateBridge;
    // __Hotfix0_CheckIfAdvancedMedal: XLua.DelegateBridge;
  }
  export interface MissionDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_GetCurrentDailyMissionState: XLua.DelegateBridge;
  }
  export interface OpenServerDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_GetCurrentOpenServerData: XLua.DelegateBridge;
    // __Hotfix0_GetCurrentOpenServerGroupData: XLua.DelegateBridge;
  }
  export interface PlayerAvatarDB {
    // m_avatarDataMap: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerAvatarPerData>;
    // m_avatarGroupMap: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerAvatarGroupData>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0_GetAvatarDataById: XLua.DelegateBridge;
    // __Hotfix0_GetAvatarGroupDataByType: XLua.DelegateBridge;
  }
  export interface RangeDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
  }
  export interface ReplicateDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
  }
  export interface RetroDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0_GetRetroIdByZoneId: XLua.DelegateBridge;
    // __Hotfix0_GetActInfoNullable: XLua.DelegateBridge;
    // __Hotfix0__FlushLevelsToDefault: XLua.DelegateBridge;
  }
  export interface RoguelikeDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
  }
  export interface ShopClientDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
  }
  export interface SkillDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_GetSkillOrDefault: XLua.DelegateBridge;
    // __Hotfix0_TryGetSkill: XLua.DelegateBridge;
    // __Hotfix1_TryGetSkill: XLua.DelegateBridge;
    // __Hotfix0__TryGetSkill: XLua.DelegateBridge;
    // __Hotfix0_TryGetSkillBundle: XLua.DelegateBridge;
  }
  export interface SkinDB {
    // s_sharedSet: Torappu.ListSet<System.String>;
    // <>f__am$cache0: System.Comparison<System.Collections.Generic.KeyValuePair<System.Int32,System.String>>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0_TryGetCharSkin: XLua.DelegateBridge;
    // __Hotfix0_ContainsCharSkin: XLua.DelegateBridge;
    // __Hotfix0_TryPickBestBuildinSkinId: XLua.DelegateBridge;
    // __Hotfix0__TryPickPatchSkin: XLua.DelegateBridge;
    // __Hotfix0_TryGetEvolveSkin: XLua.DelegateBridge;
    // __Hotfix0_GetSelectableSkinsWithPatch: XLua.DelegateBridge;
    // __Hotfix0__FlushSkinsToDefault: XLua.DelegateBridge;
    // __Hotfix0__RevertToDefaultIfNecessary: XLua.DelegateBridge;
    // __Hotfix0_EditorGetAllNonDefaultSkinList: XLua.DelegateBridge;
  }
  export interface StageDB {
    AUDIT_ZONE_WHITE_LIST: System.Collections.Generic.HashSet<System.String>;
    AUDIT_DEFAULT_LEVEL: System.String;
    // m_hardToNormalMap: System.Collections.Generic.Dictionary<System.String,System.String>;
    // m_stageEvents: System.Collections.Generic.List<System.Int64>;
    // m_campaignStages: System.Collections.Generic.List<Torappu.StageData>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0_GetStageEventList: XLua.DelegateBridge;
    // __Hotfix0_GetNormalStageId: XLua.DelegateBridge;
    // __Hotfix0_TryGetTileAppendInfo: XLua.DelegateBridge;
    // __Hotfix0_TryGetStageFogInfoByStageId: XLua.DelegateBridge;
    // __Hotfix0_TryGetStageFogInfoByFogId: XLua.DelegateBridge;
    // __Hotfix0_GetCampaignStages: XLua.DelegateBridge;
    // __Hotfix0__FlushLevelsToDefault: XLua.DelegateBridge;
  }
  export interface StoryDB {
    KEY_SEPARATOR: System.Char;
    // m_triggerToStories: System.Collections.Generic.Dictionary<Torappu.StoryData.Trigger,System.Collections.Generic.List<Torappu.StoryData>>;
    // m_regexStories: System.Collections.Generic.List<Torappu.StoryData>[];
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0_GetFirstStoryToTrig: XLua.DelegateBridge;
    // __Hotfix0_GetFirstStoryForResPreference: XLua.DelegateBridge;
    // __Hotfix0_GetFirstStoryOnPageLoaded: XLua.DelegateBridge;
    // __Hotfix0_GetAllStoryToTrig: XLua.DelegateBridge;
    // __Hotfix0_CheckStoryWithoutConsiderTrigger: XLua.DelegateBridge;
    // __Hotfix0__AddTrigger: XLua.DelegateBridge;
    // __Hotfix0__TryGetCandidates: XLua.DelegateBridge;
  }
  export interface StoryReviewDB {
    // m_groupedStoryDict: System.Collections.Generic.Dictionary<System.String,Torappu.StoryReviewGroupClientData>;
    // m_storyBriefDict: System.Collections.Generic.Dictionary<System.String,Torappu.StoryReviewBriefData>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_OnInit: XLua.DelegateBridge;
    // __Hotfix0__GenerateStoryBrief: XLua.DelegateBridge;
    // __Hotfix0_GetGroupedStoryReviewDict: XLua.DelegateBridge;
    // __Hotfix0_FindActivityStoryData: XLua.DelegateBridge;
    // __Hotfix0_GetStoryBriefByStoryId: XLua.DelegateBridge;
  }
  export interface TipDB {
    INITIAL_CAPACITY: System.Int32;
    // m_list: System.Collections.Generic.List<Torappu.TipData>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_PickTip: XLua.DelegateBridge;
    // __Hotfix1_PickTip: XLua.DelegateBridge;
    // __Hotfix0_PickTips: XLua.DelegateBridge;
    // __Hotfix1_PickTips: XLua.DelegateBridge;
    // __Hotfix0_PickWorldViewTip: XLua.DelegateBridge;
  }
  export interface TokenDB {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_TryGetName: XLua.DelegateBridge;
  }
  export interface ZoneDB {
    MAINLINE_EMPTY_BG: System.String;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_TryGetChapterId: XLua.DelegateBridge;
    // __Hotfix0_TryGetMainlineBgName: XLua.DelegateBridge;
  }
  export interface IHotfixable {
  }
  export interface ILuaCallCSharp {
  }
  export interface ICSharpCallLua {
  }
  export interface PerformanceTest {
    // _mat: UnityEngine.Material;
    // _buttomLeft: UnityEngine.Vector2;
    // _buttomRight: UnityEngine.Vector2;
    // _topLeft: UnityEngine.Vector2;
    // _topRight: UnityEngine.Vector2;
    _sampleCount: System.Int32;
    _drawCountPerFrame: System.Int32;
    _standerdScore: System.Single;
    _maxRenderTime: System.Single;
    // m_state: Torappu.PerformanceTest.PerformanceTestState;
    // m_frameCount: System.Int32;
    // m_totalDrawMilliseconds: System.Single;
    // m_startTimestemp: System.Single;
    // m_scoreList: System.Collections.Generic.List<System.Single>;
    // m_width: System.Single;
    // m_height: System.Single;
    // m_onTestComplete: System.Action;
    // <deviceLevel>k__BackingField: Torappu.PerformanceTest.DeviceLevel;
  }
  export enum LifeType {
    IMMEDIATELY = "IMMEDIATELY",
    LIMITED = "LIMITED",
    INFINITY = "INFINITY",
  }
  export enum AttributeType {
    MAX_HP = "MAX_HP",
    ATK = "ATK",
    DEF = "DEF",
    MAGIC_RESISTANCE = "MAGIC_RESISTANCE",
    COST = "COST",
    BLOCK_CNT = "BLOCK_CNT",
    MOVE_SPEED = "MOVE_SPEED",
    ATTACK_SPEED = "ATTACK_SPEED",
    BASE_ATTACK_TIME = "BASE_ATTACK_TIME",
    RESERVED_0 = "RESERVED_0",
    RESERVED_1 = "RESERVED_1",
    RESERVED_2 = "RESERVED_2",
    RESERVED_3 = "RESERVED_3",
    HP_RECOVERY_PER_SEC = "HP_RECOVERY_PER_SEC",
    SP_RECOVERY_PER_SEC = "SP_RECOVERY_PER_SEC",
    ABILITY_RANGE_FORWARD_EXTEND = "ABILITY_RANGE_FORWARD_EXTEND",
    MAX_DEPLOY_COUNT = "MAX_DEPLOY_COUNT",
    DEF_PENETRATE = "DEF_PENETRATE",
    MAGIC_RESIST_PENETRATE = "MAGIC_RESIST_PENETRATE",
    HP_RECOVERY_PER_SEC_BY_MAX_HP_RATIO = "HP_RECOVERY_PER_SEC_BY_MAX_HP_RATIO",
    TAUNT_LEVEL = "TAUNT_LEVEL",
    RESPAWN_TIME = "RESPAWN_TIME",
    MAX_DECK_STACK_CNT = "MAX_DECK_STACK_CNT",
    MASS_LEVEL = "MASS_LEVEL",
    BASE_FORCE_LEVEL = "BASE_FORCE_LEVEL",
    DEF_PENETRATE_FIXED = "DEF_PENETRATE_FIXED",
    ONE_MINUS_STATUS_RESISTANCE = "ONE_MINUS_STATUS_RESISTANCE",
    MAGIC_RESIST_PENETRATE_FIXED = "MAGIC_RESIST_PENETRATE_FIXED",
    MAX_EP = "MAX_EP",
    EP_RECOVERY_PER_SEC = "EP_RECOVERY_PER_SEC",
    E_NUM = "E_NUM",
  }
  export enum AbnormalFlag {
    STUNNED = "STUNNED",
    SP_RECOVER_STOPPED = "SP_RECOVER_STOPPED",
    TARGET_FREE = "TARGET_FREE",
    BLOCK_FREE = "BLOCK_FREE",
    HIDDEN = "HIDDEN",
    INVINCIBLE = "INVINCIBLE",
    UNDEADABLE = "UNDEADABLE",
    HEAL_FREE = "HEAL_FREE",
    UNBALANCE_IMMUNE = "UNBALANCE_IMMUNE",
    INVISIBLE = "INVISIBLE",
    UNUSED_PLACEHOLDER_2 = "UNUSED_PLACEHOLDER_2",
    ALLY_TARGET_FREE = "ALLY_TARGET_FREE",
    UNUSED_PLACEHOLDER_1 = "UNUSED_PLACEHOLDER_1",
    DISARMED = "DISARMED",
    SILENCED = "SILENCED",
    UNMOVABLE = "UNMOVABLE",
    FROZEN = "FROZEN",
    CAMOUFLAGE = "CAMOUFLAGE",
    FORCE_DISARMED = "FORCE_DISARMED",
    STUNNED_NO_AMPLIFY_DAMAGE = "STUNNED_NO_AMPLIFY_DAMAGE",
    DISABLE_COMBAT = "DISABLE_COMBAT",
    ELEMENT_FREE_ALL = "ELEMENT_FREE_ALL",
    E_NUM = "E_NUM",
  }
  export enum AbnormalCombo {
    SLEEPING = "SLEEPING",
    SHELTERING = "SHELTERING",
    E_NUM = "E_NUM",
  }
  export enum BuildableType {
    NONE = "NONE",
    MELEE = "MELEE",
    RANGED = "RANGED",
    ALL = "ALL",
  }
  export enum PlayerSide {
    INVALID = "INVALID",
    DEFAULT = "DEFAULT",
    SIDE_A = "SIDE_A",
    SIDE_B = "SIDE_B",
    E_NUM = "E_NUM",
  }
  export interface PlayerSideEquality {
  }
  export enum PlayerSideMask {
    ALL = "ALL",
    SIDE_A = "SIDE_A",
    SIDE_B = "SIDE_B",
    NONE = "NONE",
  }
  export interface PlayerSideCategories {
  }
  export enum MotionMode {
    WALK = "WALK",
    FLY = "FLY",
    E_NUM = "E_NUM",
  }
  export enum MotionMask {
    NONE = "NONE",
    WALK_ONLY = "WALK_ONLY",
    FLY_ONLY = "FLY_ONLY",
    ALL = "ALL",
  }
  export enum MapLayer {
    NONE = "NONE",
    LAYER_A = "LAYER_A",
    LAYER_B = "LAYER_B",
    E_NUM = "E_NUM",
  }
  export enum SpTypeIndex {
    INCREASE_WITH_TIME = "INCREASE_WITH_TIME",
    INCREASE_WHEN_ATTACK = "INCREASE_WHEN_ATTACK",
    INCREASE_WHEN_TAKEN_DAMAGE = "INCREASE_WHEN_TAKEN_DAMAGE",
    E_NUM = "E_NUM",
  }
  export enum SpType {
    NONE = "NONE",
    INCREASE_WITH_TIME = "INCREASE_WITH_TIME",
    INCREASE_WHEN_ATTACK = "INCREASE_WHEN_ATTACK",
    INCREASE_WHEN_TAKEN_DAMAGE = "INCREASE_WHEN_TAKEN_DAMAGE",
    ATTACK_OR_DAMAGE = "ATTACK_OR_DAMAGE",
    ALL = "ALL",
  }
  export enum RangeIdUsageIndex {
    TALENT = "TALENT",
    ATTACK_AND_COMBAT = "ATTACK_AND_COMBAT",
    GENERAL_ABILITY = "GENERAL_ABILITY",
    ENUM = "ENUM",
  }
  export enum RangeIdUsage {
    NONE = "NONE",
    TALENT = "TALENT",
    ATTACK_OR_COMBAT = "ATTACK_OR_COMBAT",
    GENERAL_ABILITY = "GENERAL_ABILITY",
    ALL = "ALL",
  }
  export enum SkillType {
    PASSIVE = "PASSIVE",
    MANUAL = "MANUAL",
    AUTO = "AUTO",
  }
  export enum StageType {
    MAIN = "MAIN",
    DAILY = "DAILY",
    TRAINING = "TRAINING",
    ACTIVITY = "ACTIVITY",
    GUIDE = "GUIDE",
    SUB = "SUB",
    CAMPAIGN = "CAMPAIGN",
    SPECIAL_STORY = "SPECIAL_STORY",
    HANDBOOK_BATTLE = "HANDBOOK_BATTLE",
    ENUM = "ENUM",
  }
  export enum PlayerStageState {
    UNLOCKED = "UNLOCKED",
    PLAYED = "PLAYED",
    PASS = "PASS",
    COMPLETE = "COMPLETE",
  }
  export enum PlayerBattleRank {
    FAIL = "FAIL",
    PASS = "PASS",
    COMPLETE = "COMPLETE",
  }
  export enum RecruitBuildSlotState {
    EMPTY = "EMPTY",
    BUILDING = "BUILDING",
    FINISH = "FINISH",
    LOCKED = "LOCKED",
    TOBUY = "TOBUY",
  }
  export enum BattleFunctionDisableMask {
    NONE = "NONE",
    CARD_LIST = "CARD_LIST",
    CHARACTER_MENU = "CHARACTER_MENU",
    CHARACTER_INFO = "CHARACTER_INFO",
    SYSTEM_MENU = "SYSTEM_MENU",
    PAUSE_BUTTON = "PAUSE_BUTTON",
    SPEED_SWITCHER_BUTTON = "SPEED_SWITCHER_BUTTON",
    BATTLE_STATUS = "BATTLE_STATUS",
    COST_PANEL = "COST_PANEL",
    SLOW_MOTION = "SLOW_MOTION",
    ALL = "ALL",
  }
  export enum CompareType {
    LT = "LT",
    LE = "LE",
    GT = "GT",
    GE = "GE",
    EQUALS = "EQUALS",
  }
  export enum PlayerRoomSlotState {
    EMPTY = "EMPTY",
    UPGRADING = "UPGRADING",
    BUILT = "BUILT",
  }
  export enum PlayerRoomState {
    STOP = "STOP",
    RUN = "RUN",
  }
  export enum GameDayOfWeek {
    NONE = "NONE",
    MONDAY = "MONDAY",
    TUESDAY = "TUESDAY",
    WEDNESDAY = "WEDNESDAY",
    THURSDAY = "THURSDAY",
    FRIDAY = "FRIDAY",
    SATURDAY = "SATURDAY",
    SUNDAY = "SUNDAY",
  }
  export enum PlatformKey {
    NONE = "NONE",
    IOS = "IOS",
    ANDROID = "ANDROID",
  }
  export enum SDKType {
    TORAPPU = "TORAPPU",
  }
  export interface ServiceAlertStruct {
    text: System.String;
    param: System.String[];
  }
  export interface SharedConsts {
    ATTRIBUTES_NUM: System.Int32;
    ABNORMAL_FLAGS_NUM: System.Int32;
    ABNORMAL_COMBO_NUM: System.Int32;
    MOTION_MODE_NUM: System.Int32;
    MAX_MAIN_SKILL_LEVEL: System.Int32;
    MAX_SPECIALIZE_SKILL_LEVEL: System.Int32;
    INITIAL_MAIN_SKILL_LEVEL: System.Int32;
    MAX_POTENTIAL_RANK: System.Int32;
    GAME_DAY_DIVISION_HOUR: System.Int32;
    EMPTY_BUFF_TEMPLATE_KEY: System.String;
    MIN_ONE_MINUS_STATUS_RESISTANCE: System.Single;
    MAX_ONE_MINUS_STATUS_RESISTANCE: System.Single;
    DIRECTIONS_NUM: System.Int32;
    ALL_DIRECTION_PASSABLE_MASK: System.Int32;
    REVERSE_FOUR_WAYS: Torappu.SharedConsts.Direction[];
    // LEFT: UnityEngine.Vector2;
    // RIGHT: UnityEngine.Vector2;
    // UP: UnityEngine.Vector2;
    // DOWN: UnityEngine.Vector2;
    // UP_LEFT: UnityEngine.Vector2;
    // UP_RIGHT: UnityEngine.Vector2;
    // DOWN_LEFT: UnityEngine.Vector2;
    // DOWN_RIGHT: UnityEngine.Vector2;
    // FOUR_WAYS: UnityEngine.Vector2[];
    // FOUR_DIAGONAL_WAYS: UnityEngine.Vector2[];
    // EIGHT_WAYS: UnityEngine.Vector2[];
    GRID_ZERO: Torappu.GridPosition;
    GRID_LEFT: Torappu.GridPosition;
    GRID_RIGHT: Torappu.GridPosition;
    GRID_UP: Torappu.GridPosition;
    GRID_DOWN: Torappu.GridPosition;
    GRID_UP_LEFT: Torappu.GridPosition;
    GRID_UP_RIGHT: Torappu.GridPosition;
    GRID_DOWN_LEFT: Torappu.GridPosition;
    GRID_DOWN_RIGHT: Torappu.GridPosition;
    GRID_FOUR_WAYS: Torappu.GridPosition[];
    GRID_EIGHT_WAYS: Torappu.GridPosition[];
    DEFAULT_CHARACTER_LIMIT: System.Int32;
    DEFAULT_MAX_LIFE_POINT: System.Int32;
    DEFAULT_MAX_COST: System.Int32;
    DEFAULT_INITIAL_COST: System.Int32;
    DEFAULT_COST_INCREASE_TIME: System.Single;
    DEFAULT_MOVE_MULTIPLIER: System.Single;
    DEFAULT_SP_RECOVERY_DELTA: System.Int32;
    // DEFAULT_UNIT_COLOR: UnityEngine.Color;
    // BUILDABLE_COLOR: UnityEngine.Color;
    DEFAULT_MAP_EFFECT_DIRECTION: Torappu.SharedConsts.Direction;
    RELIC_STABLE_UNLOCK_GAIN_RES: System.String;
    RELIC_STABLE_UNLOCK_RECRUIT: System.String;
    RELIC_STABLE_UNLOCK_UPGRADE: System.String;
    RELIC_STABLE_UNLOCK_INTO_NODE_NO_BATTLE: System.String;
    RELIC_STABLE_UNLOCK_COMPLETE_BATTLE: System.String;
    RELIC_STABLE_UNLOCK_COST_GOLD: System.String;
    RELIC_STABLE_UNLOCK_COST_HP: System.String;
    RELIC_STABLE_UNLOCK_SCENE_COUNT: System.String;
    RELIC_STABLE_UNLOCK_ENEMY_KILL: System.String;
    RELIC_STABLE_UNLOCK_STABLE_CHOICE: System.String;
  }
  export interface SharedUtils {
  }
  export interface BlackboardKeys {
    DURATION: System.String;
    DISTANCE: System.String;
    ATK_SCALE: System.String;
    ATK_SCALE_2: System.String;
    HEAL_SCALE: System.String;
    HEAL_SCALE_2: System.String;
    DAMAGE_SCALE: System.String;
    DAMAGE_RESISTANCE: System.String;
    TALENT_SCALE: System.String;
    SCALE_DELTA_TO_ONE: System.String;
    RANGE_SCALE: System.String;
    RANGE_ID: System.String;
    COMMON_SCALE: System.String;
    DELAY: System.String;
    TIMES: System.String;
    COUNT: System.String;
    INTERVAL: System.String;
    HIT_INTERVAL: System.String;
    HIT_TIMES: System.String;
    HIT_DURATION: System.String;
    MAX_COUNT: System.String;
    MAX_TARGET: System.String;
    MODE: System.String;
    CATEGORY: System.String;
    SP_COST_PER_SEC: System.String;
    PROBABILITY: System.String;
    VALUE: System.String;
    COST: System.String;
    RESPAWN_TIME: System.String;
    SP: System.String;
    SP_RATIO: System.String;
    BUFF_PROB: System.String;
    DYNAMIC_VAR: System.String;
    DYNAMIC_SPEED: System.String;
    HP: System.String;
    HP_RATIO: System.String;
    FORCE: System.String;
    DELTA_FORCE: System.String;
    PROJECTILE: System.String;
    PROJECTILE_RANGE: System.String;
    RANGE_RADIUS: System.String;
    TRIGGER_CNT: System.String;
    MAX_STACK_CNT: System.String;
    MAX_VALID_STACK_CNT: System.String;
    STUN: System.String;
    FREEZE: System.String;
    EFFECT: System.String;
    SKILL: System.String;
    ENEMY: System.String;
    CHARACTER: System.String;
    TILE: System.String;
    MOVE_SPEED: System.String;
    TAG: System.String;
    BRANCH_ID: System.String;
    PROFESSION: System.String;
    BUILDABLE: System.String;
    COMMON_KEY: System.String;
    LOCATION: System.String;
    AVOID_DUPLICATE_TRIGGER_LOCK: System.String;
    CACHED_VALUE: System.String;
    BGM: System.String;
    CHNAGEABLE_COOLDOWN_PREFIX: System.String;
    RUNTIME_COST: System.String;
    DIRECTION: System.String;
    EP_DAMAGE_RATIO: System.String;
    EP_BREAK_DURTION: System.String;
    ATTACK_BLACKBOARD_PREFIX: System.String;
    SKILL_BLACKBOARD_PREFIX: System.String;
    TALENT_BLACKBOARD_PREFIX: System.String;
    DYNAMIC_VAR_PREFIX: System.String;
    TRIGGER_TIME_COUNT: System.String;
    INCLUDE_PREDEFINED: System.String;
    ABILITY_NAME: System.String;
    SKILL_NAME: System.String;
    SP_SCALE_CNT: System.String;
    SKILL_MAX_TRIGGER_TIME: System.String;
    PROJECTILE_DELAY_TIME: System.String;
    TALENT_RANGE_FLAG: System.String;
    HP_RATIO_DROP: System.String;
    MIN_HP_RATIO: System.String;
    MAX_HP_RATIO: System.String;
    INIT_ATK_SCALE: System.String;
    DELTA_ATK_SCALE: System.String;
    MAX_ATK_SCALE: System.String;
    APPEND_ATK_SCALE: System.String;
    ENVIRONMENT_DAMAGE_FLAG: System.String;
    MOTION: System.String;
    TOKEN_KEY: System.String;
    PLAYER_SIDE_KEY: System.String;
    ENEMY_KEY: System.String;
    OFFSET_BOUND: System.String;
    HIT_WALL_FLAG: System.String;
    BUFF_KEY: System.String;
    MIN_ATTRIBUTE_FORMAT: System.String;
    MAX_ATTRIBUTE_FORMAT: System.String;
    TILE_BIND_KEY: System.String;
    EXCEPT_BLACKBOARD_KEYS_FROM_SCALE: System.String[];
  }
  export interface IItemWithWeight {
  }
  export interface ISharedItemModel {
  }
  export interface SpineFormatConst {
    SPINE_FRONT_PREFAB_NAME: System.String;
    SPINE_BACK_PREFAB_NAME: System.String;
    FRONT_PREFIX: System.String;
    BACK_PREFIX: System.String;
  }
  export interface GridPosition {
    ZERO: Torappu.GridPosition;
    ONE: Torappu.GridPosition;
    row: System.Int32;
    col: System.Int32;
  }
  export interface ActivityItemModel {
    type: Torappu.ItemType;
    id: System.String;
    charGet: Torappu.GachaResult;
    count: System.Int32;
  }
  export interface GetOpenServerCheckInRewardRequest {
    index: System.Int32;
  }
  export interface GetOpenServerCheckInRewardResponse {
    reward: Torappu.ActivityItemModel;
  }
  export interface GetChainLogInRewardRequest {
    index: System.Int32;
  }
  export interface GetChainLogInRewardResponse {
    reward: Torappu.ActivityItemModel;
  }
  export interface GetChainLogInFinalRewardsRequest {
  }
  export interface GetChainLogInFinalRewardsResponse {
    rewards: System.Collections.Generic.List<Torappu.ActivityItemModel>;
  }
  export interface SDKLoginRequest {
    account: System.String;
    password: System.String;
    deviceId: System.String;
    platform: Torappu.PlatformKey;
    sdk: Torappu.SDKType;
  }
  export interface SDKLoginResponse {
    result: System.Int32;
    uid: System.String;
    role: System.Int32;
    token: System.String;
    issuedAt: System.DateTime;
    expiresIn: System.DateTime;
  }
  export interface SDKAuthRequest {
    token: System.String;
  }
  export interface SDKAuthResponse {
    uid: System.String;
  }
  export interface PlayerDeltaResponse {
    playerDataDelta: Torappu.PlayerDataDelta;
    pushMessage: System.Collections.Generic.List<Torappu.PlayerPushMessage>;
  }
  export interface PlayerInitResponse {
    user: Newtonsoft.Json.Linq.JObject;
  }
  export interface PlayerRawJsonResponse {
    content: Newtonsoft.Json.Linq.JObject;
  }
  export interface IAlertResponse {
  }
  export interface PlayerPushMessage {
    path: System.String;
    payload: Newtonsoft.Json.Linq.JObject;
  }
  export interface SaveBattleReplayRequest {
    battleId: System.String;
    battleReplay: System.String;
  }
  export interface SaveBattleReplayResponse {
    result: System.Int32;
  }
  export interface LoadBattleReplayRequest {
    stageId: System.String;
  }
  export interface LoadBattleReplayReponse {
    battleReplay: System.String;
  }
  export interface BindNickNameRequest {
    nickName: System.String;
  }
  export interface BindNickNameResponse {
    result: System.Int32;
  }
  export interface BuildingRequest {
  }
  export interface BuildingSyncRequest {
  }
  export interface BuildingSyncResponse {
    ts: System.Int64;
  }
  export interface BuildingUpgradeRoomRequest {
    roomSlotId: System.String;
    targetLevel: System.Int32;
  }
  export interface BuildingUpgradeRoomResponse {
    result: System.Int32;
  }
  export interface BuildingDegradeRoomRequest {
    roomSlotId: System.String;
    targetLevel: System.Int32;
  }
  export interface BuildingDegradeRoomResponse {
    payback: System.Collections.Generic.List<Torappu.ItemBundle>;
  }
  export interface BuildingCleanRoomRequest {
    roomSlotId: System.String;
  }
  export interface BuildingCleanRoomResponse {
    result: System.Int32;
  }
  export interface BuildingBuildRoomRequest {
    roomSlotId: System.String;
    roomId: System.String;
  }
  export interface BuildingBuildRoomResponse {
    result: System.Int32;
    alert: System.Collections.Generic.List<Torappu.ServiceAlertStruct>;
  }
  export interface BuildingUpgradeCompleteRoomRequest {
    roomSlotId: System.String;
    targetLevel: System.Int32;
  }
  export interface BuildingUpgradeCompleteRoomResponse {
    result: System.Int32;
    alert: System.Collections.Generic.List<Torappu.ServiceAlertStruct>;
  }
  export interface BuildingDIYChangeDIYSolutionRequest {
    roomSlotId: System.String;
    solution: Torappu.PlayerBuildingDIYSolution;
  }
  export interface BuildingDIYChangeDIYResponse {
  }
  export interface BuildingDIYSavePresetSolutionRequest {
    solutionId: System.Int32;
    name: System.String;
    solution: Torappu.PlayerBuildingDIYSolution;
    thumbnail: System.String;
  }
  export interface BuildingDIYSavePresetSolutionResponse {
    result: System.Int32;
  }
  export interface BuildingDIYRenamePresetSolutionRequest {
    solutionId: System.Int32;
    name: System.String;
  }
  export interface BuildingDIYRenamePresetSolutionResponse {
    result: System.Int32;
  }
  export interface BuildingDIYGetPresetThumbnailUrlRequest {
    solutionId: System.Collections.Generic.List<System.Int32>;
  }
  export interface BuildingDIYGetPresetThumbnailUrlResponse {
    url: System.Collections.Generic.List<System.String>;
  }
  export interface BuildingGetFurnitureGoodListRequest {
  }
  export interface BuildingGetFurnitureGoodListResponse {
    goods: System.Collections.Generic.List<Torappu.BuildingGetFurnitureGoodListResponse.Good>;
    groups: System.Collections.Generic.List<Torappu.BuildingGetFurnitureGoodListResponse.Group>;
  }
  export interface BuildingBuyFurnitureGoodRequest {
    goodId: System.String;
    buyCount: System.Int32;
    costType: Torappu.BuildingBuyFurnitureGoodRequest.CostType;
  }
  export interface BuildingBuyFurnitureGoodResponse {
  }
  export interface BuildingSettleManufactRequest {
    roomSlotIdList: System.Collections.Generic.List<System.String>;
    supplement: System.Int32;
  }
  export interface BuildingSettleManufactResponse {
    supplement: System.Int32;
  }
  export interface BuildingSettleSaleRequest {
    roomSlotIdList: System.Collections.Generic.List<System.String>;
  }
  export interface BuildingSettleSaleResponse {
  }
  export interface BuildingChangeManufactRequest {
    roomSlotId: System.String;
    targetFormulaId: System.String;
    solutionCount: System.Int32;
  }
  export interface BuildingChangeManufactResponse {
    change: System.Boolean;
  }
  export interface BuildingChangeShopRequest {
    roomSlotId: System.String;
    stockIndex: System.Int32;
    targetFormulaId: System.String;
    solutionCount: System.Int32;
  }
  export interface BuildingChangeShopResponse {
    change: System.Boolean;
  }
  export interface BuildingAssignCharRequest {
    roomSlotId: System.String;
    charInstIdList: System.Collections.Generic.List<System.Int32>;
  }
  export interface BuildingAssignCharResponse {
  }
  export interface CharBuildIncIntimacyRequest {
    charInstId: System.Int32;
  }
  export interface CharBuildIncIntimacyResponse {
  }
  export interface CharBuildIncAssistIntimacyRequest {
    charInstId: System.Int32;
  }
  export interface CharBuildIncAssistIntimacyResponse {
  }
  export interface UpdateSpecializationRequest {
    skillIndex: System.Int32;
  }
  export interface UpdateSpecializationResponse {
  }
  export interface CompleteUpgradeSpecializationRequest {
  }
  export interface CompleteUpgradeSpecializationResponse {
  }
  export interface BuildingWorkshopSynthesisRequest {
    formulaId: System.String;
    times: System.Int32;
  }
  export interface BuildingWorkshopSynthesisResponse {
    results: Torappu.ItemBundle;
    additional: System.Collections.Generic.List<Torappu.ItemBundle>;
    recoverCost: System.Int64;
  }
  export interface BuildingWorkshopDecompositionRequest {
    furniId: System.String;
    times: System.Int32;
  }
  export interface BuildingWorkshopDecompositionResponse {
    results: Torappu.ItemBundle;
  }
  export interface BuildingTradingDeliveryRequest {
    slotId: System.String;
    orderId: System.Int64;
  }
  export interface BuildingTradingDeliveryResponse {
  }
  export interface BuildingTradingChangeStrategyRequest {
    slotId: System.String;
    strategy: Torappu.BuildingData.OrderType;
  }
  export interface BuildingTradingChangeStrategyResponse {
  }
  export interface BuildingTradingDeleteOrderRequest {
    slotId: System.String;
    orderId: System.Int64;
  }
  export interface BuildingTradingDeleteOrderResponse {
  }
  export interface BuildingTradingLaborAccelRequest {
    slotId: System.String;
    orderId: System.Int64;
    cost: System.Int32;
  }
  export interface BuildingTradingLaborAccelResponse {
    result: System.Int32;
  }
  export interface BuildingManufactLaborAccelRequest {
    slotId: System.String;
    cost: System.Int32;
  }
  export interface BuildingManufactLaborAccelResponse {
  }
  export interface BuildingBuyLaborRequest {
    costAp: System.Int32;
    ts: System.Int64;
  }
  export interface BuildingBuyLaborResponse {
  }
  export interface BuildingGainAllIntimacyRequest {
  }
  export interface BuildingGainAllIntimacyResponse {
    normal: System.Int32;
    assist: System.Int32;
  }
  export interface BuildingDeliveryBatchOrderRequest {
    slotList: System.Collections.Generic.List<System.String>;
  }
  export interface BuildingDeliveryBatchOrderResponse {
    delivered: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<Torappu.ItemBundle>>;
  }
  export interface BuildingAssistReportRequest {
  }
  export interface BuildingManuFactureItemReport {
    count: System.Int32;
    time: System.Int32;
  }
  export interface BuildingTradingReport {
    count: System.Int32;
    order: System.Int32;
  }
  export interface BuildingDormReport {
    comf: System.Int32;
    max: System.Int32;
  }
  export interface BuildingDailyReport {
    ts: System.Int64;
    manufacture: System.Collections.Generic.Dictionary<System.String,Torappu.BuildingManuFactureItemReport>;
    trading: System.Collections.Generic.Dictionary<System.String,Torappu.BuildingTradingReport>;
    dormitory: System.Collections.Generic.Dictionary<System.String,Torappu.BuildingDormReport>;
  }
  export interface BuildingAssistReportResponse {
    reports: System.Collections.Generic.List<Torappu.BuildingDailyReport>;
  }
  export interface BuildingSetAssistRequest {
    type: System.Int32;
    charInstId: System.Int32;
  }
  export interface BuildingSetAssistResponse {
  }
  export interface BuildingMeetingClueDeleteOwnClueRequest {
    clueId: System.String;
  }
  export interface BuildingMeetingClueDeleteOwnClueResponse {
  }
  export interface BuildingMeetingClueDeleteReceiveClueRequest {
    clueId: System.String;
  }
  export interface BuildingMeetingClueDeleteReceiveClueResponse {
  }
  export interface BuildingMeetingCluePutClueToTheBoardRequest {
    clueId: System.String;
  }
  export interface BuildingMeetingCluePutClueToTheBoardResponse {
  }
  export interface BuildingMeetingClueSendClueRequest {
    friendId: System.String;
    clueId: System.String;
  }
  export interface BuildingMeetingClueSendClueResponse {
  }
  export interface BuildingMeetingClueGetMeetingRoomRewardRequest {
    type: System.Collections.Generic.List<System.Int32>;
  }
  export interface BuildingMeetingClueGetMeetingRoomRewardResponse {
    rewards: System.Collections.Generic.List<Torappu.ItemBundle>;
  }
  export interface BuildingMeetingClueUpdateWaitingClueRequest {
  }
  export interface BuildingMeetingClueUpdateWaitingClueResponse {
    box: System.Collections.Generic.List<Torappu.BuildingMeetingClueUpdateWaitingClueResponse.Clue>;
  }
  export interface BuildingMeetingClueReceiveClueToStockRequest {
    clues: System.Collections.Generic.List<System.String>;
  }
  export interface BuildingMeetingClueReceiveClueToStockResponse {
  }
  export interface BuildingMeetingClueStartInfoShareRequest {
  }
  export interface BuildingMeetingClueStartInfoShareResponse {
  }
  export interface BuildingMeetingClueTakeClueFromBoardRequest {
    type: System.String;
  }
  export interface BuildingMeetingClueTakeClueFromBoardResponse {
  }
  export interface BuildingMeetingClueGetInfoShareVisitorsRequest {
  }
  export interface BuildingMeetingClueGetInfoShareVisitorsResponse {
    num: System.Int32;
  }
  export interface BuildingMeetingClueReceiveInfoShareRewardRequest {
  }
  export interface BuildingMeetingClueReceiveInfoShareRewardResponse {
    list: System.Collections.Generic.List<Torappu.BuildingMeetingClueReceiveInfoShareRewardResponse.VisitorInfo>;
  }
  export interface BuildingGetRecentVisitorsRequest {
  }
  export interface BuildingGetRecentVisitorsResponse {
    visitors: System.Collections.Generic.List<Torappu.BuildingGetRecentVisitorsResponse.Visitor>;
  }
  export interface BuildingMeetingClueGetDailyClueRequest {
  }
  export interface BuildingMeetingClueGetDailyClueResponse {
  }
  export interface CampaignConfirmBreakRewardRequest {
    stageId: System.String;
    index: System.Int32;
  }
  export interface CampaignConfirmBreakRewardResponse {
    feeAdd: System.Int32;
    items: System.Collections.Generic.List<Torappu.CampaignConfirmBreakRewardResponse.RewardItem>;
  }
  export interface CampaignGetCommonMissionRewardRequest {
    id: System.String;
  }
  export interface CampaignGetCommonMissionRewardResponse {
  }
  export interface CampaignStartBattleRequest {
  }
  export interface CampaignStartBattleResponse {
  }
  export interface CampaignFinishBattleRequest {
  }
  export interface CampaignFinishBattleResponse {
    currentFeeBefore: System.Int32;
    currentFeeAfter: System.Int32;
    unlockStages: System.String[];
    alert: System.Collections.Generic.List<Torappu.ServiceAlertStruct>;
  }
  export interface BoostPotentialRequest {
    charInstId: System.Int32;
    itemId: System.String;
    targetRank: System.Int32;
  }
  export interface BoostPotentialResponse {
    resultOneSuc: System.Int32;
  }
  export interface UpgradeSkillRequest {
    charInstId: System.Int32;
    targetLevel: System.Int32;
  }
  export interface UpgradeSkillResponse {
  }
  export interface UpgradeSpecializationRequest {
    charInstId: System.Int32;
    skillIndex: System.Int32;
    targetLevel: System.Int32;
  }
  export interface UpgradeSpecializationResponse {
  }
  export interface ChangeCharSkinRequest {
    charInstId: System.Int32;
    skinId: System.String;
  }
  export interface ChangeCharSkinResponse {
  }
  export interface ChangeCharTemplateRequest {
    charInstId: System.Int32;
    templateId: System.String;
  }
  export interface ChangeCharTemplateResponse {
  }
  export interface GetSpCharMissionRewardRequest {
    charId: System.String;
    missionId: System.String;
  }
  export interface GetSpCharMissionRewardResponse {
    items: System.Collections.Generic.List<Torappu.ItemGet>;
  }
  export interface CheatRequest {
    cmd: System.String;
  }
  export interface CheatResponse {
  }
  export interface CrisisStartBattleRequest {
    stageId: System.String;
    stageType: Torappu.CrisisStageType;
    squad: Torappu.CommonStartBattleRequest.SquadModel;
    assistFriend: Torappu.SquadFriendData;
    startTs: System.Int64;
    rune: System.Collections.Generic.List<System.String>;
    seed: System.String;
  }
  export interface CrisisStartBattleResponse {
    sign: System.String;
  }
  export interface CrisisFinishBattleRequest {
    battleLog: System.String;
  }
  export interface CrisisFinishBattleResponse {
    score: System.Int32;
    updateInfo: Torappu.CrisisFinishBattleResponse.UpdateInfo;
    ts: System.Int64;
  }
  export interface CrisisGetInfoRequest {
    keys: System.Collections.Generic.List<System.String>;
  }
  export interface CrisisGetInfoResponse {
    ts: System.Int64;
    data: Torappu.CrisisServerData;
  }
  export interface CrisisGetShopDataRequest {
  }
  export enum CrisisShopTitleType {
    SEASON = "SEASON",
    REMASTERED = "REMASTERED",
    NONE = "NONE",
  }
  export interface CrisisCommonShopItemData {
    goodId: System.String;
    displayName: System.String;
    item: Torappu.ItemBundle;
    progressGoodId: System.String;
    price: System.Int32;
    availCount: System.Int32;
  }
  export interface CrisisLongTermShopItemData {
    isSingle: System.Int32;
    slotId1: System.Int32;
    slotId2: System.Int32;
    seasonId: System.String;
    title: Torappu.CrisisShopTitleType;
  }
  export interface CrisisSeasonShopItemData {
    slotId: System.Int32;
    rarity: System.String;
  }
  export interface CrisisProgressShopItemViewModel {
    item: Torappu.ItemBundle;
    displayName: System.String;
    order: System.Int32;
    price: System.Int32;
  }
  export interface CrisisGetShopDataResponse {
    permanent: System.Collections.Generic.List<Torappu.CrisisLongTermShopItemData>;
    season: System.Collections.Generic.List<Torappu.CrisisSeasonShopItemData>;
    progressGoodList: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<Torappu.CrisisProgressShopItemViewModel>>;
  }
  export interface CrisisBuyShopRequest {
    goodId: System.String;
    count: System.Int32;
    perm: System.Int32;
  }
  export interface CrisisBuyShopResponse {
    items: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface CrisisChallengeRewardPointRequest {
    cType: Torappu.CrisisStageType;
    point: System.Int32;
  }
  export interface CrisisChallengeRewardPointResponse {
    point: System.Int32;
    items: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface CrisisChallengeRewardTaskRequest {
    cType: Torappu.CrisisStageType;
    taskId: System.String;
  }
  export interface CrisisChallengeRewardTaskResponse {
    taskId: System.String;
    items: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface CrisisChallengeGetAllRewardRequest {
    cType: Torappu.CrisisStageType;
  }
  export interface CrisisChallengeGetAllRewardResponse {
    items: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface CrisisUnlockMapRewardRequest {
    mapId: System.String;
    lv: System.Int32;
  }
  export interface CrisisUnlockMapRewardResponse {
    items: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface CrisisUnlockRuneRequest {
    seasonId: System.String;
    stageId: System.String;
    runeId: System.Collections.Generic.List<System.String>;
  }
  export interface CrisisUnlockRuneResponse {
  }
  export interface CrisisSeasonGetAllItemsRequest {
  }
  export interface CrisisSeasonGetAllItemsResponse {
    items: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface EvolveCharRequest {
    charInstId: System.Int32;
    destEvolvePhase: Torappu.EvolvePhase;
  }
  export interface EvolveCharResponse {
  }
  export interface CommonFinishBattleRequest {
    data: System.String;
    battleData: Torappu.CommonFinishBattleRequest.BattleDataInRequest;
  }
  export interface IFinishBattleWithLog {
  }
  export interface IStartBattleReqWithSign {
  }
  export interface IStartBattleRespWithSign {
  }
  export interface CommonFinishBattleResponse {
    result: System.Int32;
    apFailReturn: System.Int32;
    rewards: System.Collections.Generic.List<Torappu.CommonFinishBattleResponse.RewardModel>;
    unusualRewards: System.Collections.Generic.List<Torappu.CommonFinishBattleResponse.RewardModel>;
    additionalRewards: System.Collections.Generic.List<Torappu.CommonFinishBattleResponse.RewardModel>;
    diamondMaterialRewards: System.Collections.Generic.List<Torappu.CommonFinishBattleResponse.RewardModel>;
    furnitureRewards: System.Collections.Generic.List<Torappu.CommonFinishBattleResponse.RewardModel>;
  }
  export interface DefaultFinishBattleRequest {
  }
  export interface DefaultFinishBattleResponse {
    goldScale: System.Single;
    expScale: System.Single;
    firstRewards: System.Collections.Generic.List<Torappu.CommonFinishBattleResponse.RewardModel>;
    unlockStages: System.String[];
    alert: System.Collections.Generic.List<Torappu.ServiceAlertStruct>;
    suggestFriend: System.Boolean;
  }
  export interface FinishStoryRequest {
    storyId: System.String;
  }
  export interface FinishStoryResponse {
  }
  export enum FriendServiceType {
    SEARCH_FRIEND = "SEARCH_FRIEND",
    GET_FRIEND_LIST = "GET_FRIEND_LIST",
    GET_FRIEND_REQUEST = "GET_FRIEND_REQUEST",
  }
  export enum FriendStatus {
    NORMAL = "NORMAL",
    ALREADY_SEND = "ALREADY_SEND",
    ALREADY_ADD = "ALREADY_ADD",
  }
  export enum FriendDealEnum {
    ACCEPT = "ACCEPT",
    REFUSE = "REFUSE",
  }
  export interface DeleteFriendRequest {
    friendId: System.String;
  }
  export interface DeleteFriendResponse {
  }
  export interface SendFriendRequest {
    friendId: System.String;
    afterBattle: System.Int32;
  }
  export interface SendFriendResponse {
    result: System.Int32;
  }
  export interface ProcessFriendRequest {
    friendId: System.String;
    action: Torappu.FriendDealEnum;
  }
  export interface ProcessFriendResponse {
    result: System.Int32;
  }
  export interface GetSortListInfoRequest {
    type: Torappu.FriendServiceType;
    sortKeyList: System.Collections.Generic.List<System.String>;
    param: System.Collections.Generic.Dictionary<System.String,System.String>;
  }
  export interface GetSortListInfoResponse {
    // result: System.Collections.Generic.List<Torappu.UI.Friend.FriendSortViewModel>;
  }
  export interface SearchPlayerRequest {
    idList: System.Collections.Generic.List<System.String>;
  }
  export interface SearchPlayerResponse {
    players: System.Collections.Generic.List<Torappu.FriendData>;
    friendStatusList: System.Collections.Generic.List<Torappu.FriendStatus>;
    resultIdList: System.Collections.Generic.List<System.String>;
  }
  export interface GetFriendListRequest {
    idList: System.Collections.Generic.List<System.String>;
  }
  export interface GetFriendListResponse {
    friends: System.Collections.Generic.List<Torappu.FriendDataWithNameCard>;
    friendAlias: System.Collections.Generic.List<System.String>;
    resultIdList: System.Collections.Generic.List<System.String>;
  }
  export interface GetFriendRequestListRequest {
    idList: System.Collections.Generic.List<System.String>;
  }
  export interface GetFriendRequestResponse {
    requestList: System.Collections.Generic.List<Torappu.FriendData>;
    resultIdList: System.Collections.Generic.List<System.String>;
  }
  export interface SetAssistCharListRequest {
    assistCharList: System.Collections.Generic.List<Torappu.RequestAssistChar>;
  }
  export interface SetAssistCharListResponse {
  }
  export interface SetFriendAliasRequest {
    friendId: System.String;
    alias: System.String;
  }
  export interface SetAssistAliasResponse {
    result: System.Int32;
  }
  export interface ChangeResumeRequest {
    resume: System.String;
  }
  export interface ChangeResumeResponse {
    result: System.Int32;
  }
  export interface SetCardShowMedalRequest {
    type: Torappu.NameCardMedalType;
    customIndex: System.String;
    templateGroup: System.String;
  }
  export interface SetCardShowMedalResponse {
  }
  export interface CancelNormalGachaRequest {
    slotId: System.Int32;
  }
  export interface CancelNormalGachaResponse {
    result: System.Int32;
  }
  export interface RefreshTagsGachaRequest {
    slotId: System.Int32;
  }
  export interface RefreshTagsGachaResponse {
  }
  export interface SyncNormalGachaRequest {
  }
  export interface SyncNormalGachaResponse {
  }
  export interface BuyRecruitSlotRequest {
    slotId: System.Int32;
  }
  export interface BuyRecruitSlotResponse {
  }
  export interface NormalGachaRequest {
    slotId: System.Int32;
    tagList: System.Int32[];
    specialTagId: System.Int32;
    duration: System.Int64;
  }
  export interface NormalGachaResponse {
  }
  export interface FinishNormalGachaRequest {
    slotId: System.Int32;
  }
  export interface FinishNormalGachaResponse {
    result: System.Int32;
    charGet: Torappu.GachaResult;
  }
  export interface BoostNormalGachaRequest {
    slotId: System.Int32;
    buy: System.Int32;
  }
  export interface BoostNormalGachaResponse {
    result: System.Int32;
  }
  export interface GachaResult {
    charInstId: System.Int32;
    charId: System.String;
    isNew: System.Boolean;
    itemGet: Torappu.ItemBundle[];
  }
  export interface IGachaResultHolder {
  }
  export interface AdvancedGachaRequest {
    poolId: System.String;
    useTkt: Torappu.GachaType;
  }
  export enum GachaType {
    None = "None",
    Diamond = "Diamond",
    SingleTicket = "SingleTicket",
    TenTicket = "TenTicket",
    LimitSingle = "LimitSingle",
    LimitTen = "LimitTen",
  }
  export interface AdvancedGachaResponse {
    result: System.Int32;
    charGet: Torappu.GachaResult;
  }
  export interface TenAdvancedGachaRequest {
    poolId: System.String;
    useTkt: Torappu.GachaType;
    itemId: System.String;
  }
  export interface TenAdvancedGachaResponse {
    result: System.Int32;
    gachaResultList: Torappu.GachaResult[];
  }
  export interface GetDetailGachaRequest {
    poolId: System.String;
  }
  export interface GetDetailGachaResponse {
    detailInfo: Torappu.GachaDetailData;
  }
  export interface HandBookMissionReward {
    type: Torappu.ItemType;
    id: System.String;
    charGet: Torappu.GachaResult;
    count: System.Int32;
  }
  export interface ReceiveTeamCollectionRewardRequest {
    rewardId: System.String;
  }
  export interface ReceiveTeamCollectionRewardResponse {
    items: System.Collections.Generic.List<Torappu.HandBookMissionReward>;
  }
  export interface HandBookUnlockStoryCharBuildRequest {
    charId: System.String;
    storyId: System.String;
  }
  export interface HandBookUnlockStoryCharBuildResponse {
    rewards: System.Collections.Generic.List<Torappu.HandBookMissionReward>;
  }
  export interface HandBookAddonStageBattleStartRequest {
    charId: System.String;
    stageId: System.String;
    squad: Torappu.CommonStartBattleRequest.SquadModel;
    stageType: Torappu.StageType;
  }
  export interface HandBookAddonStageBattleStartResponse {
  }
  export interface HandBookAddonStageBattleFinishRequest {
  }
  export interface HandBookAddonStageBattleFinishResponse {
    firstRewards: System.Collections.Generic.List<Torappu.CommonFinishBattleResponse.RewardModel>;
  }
  export interface BuyApRequest {
  }
  export interface BuyApResponse {
    result: System.Int32;
  }
  export interface ExchangeDiamondShardRequest {
    count: System.Int32;
  }
  export interface ExchangeDiamondShardResponse {
  }
  export interface CheckInRequest {
  }
  export interface CheckInResponse {
    signInRewards: Torappu.CheckInResponse.ItemModel[];
    subscriptionRewards: Torappu.CheckInResponse.ItemModel[];
  }
  export enum PlayerSyncModuleMask {
    NONE = "NONE",
    UNREAD_MAILS = "UNREAD_MAILS",
    FRIEND_REQ = "FRIEND_REQ",
    ANNOUNCE_VER = "ANNOUNCE_VER",
    REFRESH_USER_CARD = "REFRESH_USER_CARD",
    GOOD_PURCHASE_STATE = "GOOD_PURCHASE_STATE",
    CASH_PURCHASE_STATE = "CASH_PURCHASE_STATE",
    CLUE_STATE = "CLUE_STATE",
    SYNC_BUILDING = "SYNC_BUILDING",
    SYNC_CRISIS = "SYNC_CRISIS",
    SYNC_ACTIVITY = "SYNC_ACTIVITY",
    SYNC_MEDAL = "SYNC_MEDAL",
  }
  export interface PlayerSyncStatusRequest {
    modules: System.Int64;
    paramDict: System.Collections.Generic.Dictionary<System.Int64,Torappu.PlayerSyncParam>;
  }
  export interface PlayerSyncStatusResponse {
    ts: System.Int64;
    result: System.Collections.Generic.Dictionary<System.Int64,Newtonsoft.Json.Linq.JObject>;
  }
  export interface PlayerSyncParam {
  }
  export interface PlayerSyncGoodPurchaseParam {
    goodIdMap: Torappu.ShopPurchaseState;
  }
  export interface PlayerSyncResult {
  }
  export interface PlayerSyncAnnounceVersionResult {
    announcementPopUpVersion: System.String;
    announcementVersion: System.String;
  }
  export interface PlayerSyncGoodPurchaseResult {
    goodPurchaseState: Torappu.GetGoodPurchaseStateResponse;
  }
  export enum GachaVoucherType {
    PickUpVoucherWith6 = "PickUpVoucherWith6",
    PickUpVoucherWith56 = "PickUpVoucherWith56",
    AdvancedVoucher = "AdvancedVoucher",
  }
  export interface CharGachaVoucherData {
    voucherId: System.String;
    pickNum: System.Int32;
    hasSecurity: System.Boolean;
    securityRarity: System.Int32;
    startTime: System.Int64;
    endTime: System.Int64;
    voucherType: Torappu.GachaVoucherType;
    rarityRateList: System.Collections.Generic.List<Torappu.RarityRate>;
    pool: System.Collections.Generic.List<Torappu.CharGachaVoucherPool>;
    detailData: Torappu.GachaDetailData;
  }
  export interface CharGachaVoucherPool {
    charId: System.String;
    charName: System.String;
    rarity: System.Int32;
    professionName: System.String;
    weight: System.Int32;
    dedicatedRate: System.Single;
    rateLockRatio: System.Single;
    computedRate: System.Single;
  }
  export interface RarityRate {
    rarity: System.Int32;
    rate: System.Single;
  }
  export interface ItemVoucherData {
    voucherId: System.String;
    pickNum: System.Int32;
    picId: System.String;
    startTime: System.Int64;
    endTime: System.Int64;
    pool: System.Collections.Generic.List<Torappu.ItemVoucherPool>;
    // <>f__am$cache0: System.Comparison<Torappu.ItemVoucherViewModel>;
    // <>f__am$cache1: System.Comparison<Torappu.ItemVoucherPool>;
  }
  export interface ItemVoucherViewModel {
    itemList: System.Collections.Generic.List<Torappu.ItemVoucherPool>;
    groupId: System.String;
  }
  export interface ItemVoucherPool {
    itemId: System.String;
    itemType: Torappu.ItemType;
    itemNum: System.Int32;
    weight: System.Int32;
    groupId: System.String;
    sortId: System.Int32;
  }
  export interface UseItemRequest {
    instId: System.Int32;
    itemId: System.String;
    cnt: System.Int32;
  }
  export interface UseItemsRequest {
    items: System.Collections.Generic.List<Torappu.UseItemsRequest.Item>;
  }
  export interface ItemGet {
    type: Torappu.ItemType;
    id: System.String;
    charGet: Torappu.GachaResult;
    count: System.Int32;
  }
  export interface UseItemResponse {
    items: System.Collections.Generic.List<Torappu.ItemGet>;
  }
  export interface UseRenameCardRequest {
    itemId: System.String;
    instId: System.Int32;
    nickName: System.String;
  }
  export interface UseRenameCardResponse {
    result: System.Int32;
  }
  export interface GetVoucherDetailRequest {
    instId: System.String;
    itemId: System.String;
  }
  export interface GetVoucherDetailResponse {
    charList: System.Collections.Generic.List<Torappu.ItemBundle>;
  }
  export interface VoucherGachaDetailRequest {
    instId: System.String;
    itemId: System.String;
    charId: System.String;
  }
  export interface VoucherGachaDetailResponse {
    items: System.Collections.Generic.List<Torappu.ItemGet>;
  }
  export interface VoucherCharDetailRequest {
    itemId: System.String;
  }
  export interface VoucherCharDetailResponse {
    info: Torappu.CharGachaVoucherData;
  }
  export interface VoucherItemDetailRequest {
    itemId: System.String;
  }
  export interface VoucherItemDetailResponse {
    info: Torappu.ItemVoucherData;
  }
  export interface UseMaterialVoucherRequest {
    instId: System.String;
    itemId: System.String;
    count: System.Int32;
  }
  export interface UseMaterialVoucherResponse {
    itemGet: System.Collections.Generic.List<Torappu.ItemGet>;
  }
  export interface useCharGachaVoucherRequest {
    instId: System.String;
    itemId: System.String;
  }
  export interface useCharGachaVoucherResponse {
    charGet: System.Collections.Generic.List<Torappu.GachaResult>;
  }
  export interface LoginRequest {
    uid: System.String;
    token: System.String;
    assetsVersion: System.String;
    clientVersion: System.String;
    platform: Torappu.PlatformKey;
    deviceId: System.String;
    deviceId2: System.String;
    deviceId3: System.String;
  }
  export interface LoginRequestV002 {
    networkVersion: System.String;
  }
  export interface LoginResponse {
    result: System.Int32;
    uid: System.String;
    secret: System.String;
    serviceLicenseVersion: System.Int32;
    playerDataDelta: Torappu.PlayerDataDelta;
  }
  export interface ListMailBoxCommonRequest {
    mailIdList: System.Collections.Generic.List<System.Int64>;
  }
  export interface ListMailBoxRequest {
    sysMailIdList: System.Collections.Generic.List<System.Int64>;
  }
  export enum MailState {
    NotRecieve = "NotRecieve",
    Recieved = "Recieved",
  }
  export enum MailFromInfo {
    FROM_PERSON = "FROM_PERSON",
    FROM_SYSTEM = "FROM_SYSTEM",
  }
  export interface MailMetaInfo {
    mailId: System.Int64;
    state: Torappu.MailState;
    createTime: System.DateTime;
    hasItem: System.Boolean;
    type: Torappu.MailFromInfo;
  }
  export interface MailGet {
    type: Torappu.ItemType;
    id: System.String;
    charGet: Torappu.GachaResult;
    count: System.Int32;
  }
  export interface ListMailBoxResponse {
    mailList: System.Collections.Generic.List<Torappu.ListMailBoxResponse.MailItem>;
  }
  export interface ReceiveCommonMailRequest {
    mailId: System.Int64;
  }
  export interface ReceiveMailRequest {
    type: Torappu.MailFromInfo;
  }
  export interface ReceiveMailResponse {
    result: System.Int32;
    items: System.Collections.Generic.List<Torappu.MailGet>;
  }
  export interface RemoveAllCommonRecievedMailRequest {
    mailIdList: System.Collections.Generic.List<System.Int64>;
  }
  export interface RemoveAllRecievedMailRequest {
    sysMailIdList: System.Collections.Generic.List<System.Int64>;
  }
  export interface RemoveAllRecievedMailResponse {
  }
  export interface ReceiveAllCommonMailRequest {
    mailIdList: System.Collections.Generic.List<System.Int64>;
  }
  export interface ReceiveAllMailResponse {
    items: System.Collections.Generic.List<Torappu.MailGet>;
  }
  export interface ReceiveAllMailRequest {
    sysMailIdList: System.Collections.Generic.List<System.Int64>;
  }
  export interface GetMetaInfoListRequest {
    from: System.Int64;
  }
  export interface GetMetaInfoListResponse {
    result: System.Collections.Generic.List<Torappu.MailMetaInfo>;
  }
  export interface GetMailServiceUtil {
  }
  export interface MarkStoryAcceKnownRequest {
  }
  export interface MarkStoryAcceKnownResponce {
  }
  export interface ConfirmMissionRequest {
    missionId: System.String;
  }
  export interface ConfirmMissionResponse {
  }
  export interface ExchangeMissionRewardsRequest {
    targetRewardsId: System.String;
  }
  export interface ExchangeMissionRewardsResponse {
  }
  export interface ConfirmMissionGroupRequest {
    missionGroupId: System.String;
  }
  export interface ConfirmMissionGroupResponse {
  }
  export interface ChangeAvatarRequest {
    type: System.String;
    id: System.String;
  }
  export interface ChangeAvatarResponse {
  }
  export interface RetroUnlockRetroBlockRequest {
    retroId: System.String;
  }
  export interface RetroUnlockRetroBlockResponse {
    result: System.Int32;
  }
  export interface IRoguelikeStartBattleResponse {
  }
  export interface RoguelikeSelectInitialRelicRequest {
    select: System.String;
  }
  export interface RoguelikeSelectInitialRelicResponse {
    items: System.Collections.Generic.List<Torappu.RoguelikeItemBundle>;
  }
  export interface RoguelikeSelectInitialChoiceRequest {
    choiceId: System.String;
  }
  export interface RoguelikeSelectInitialChoiceResponse {
    items: System.Collections.Generic.List<Torappu.RoguelikeItemBundle>;
  }
  export interface RoguelikeSelectInitialRecruitRequest {
    select: System.String;
  }
  export interface RoguelikeSelectInitialRecruitResponse {
    items: System.Collections.Generic.List<Torappu.RoguelikeItemBundle>;
  }
  export interface RoguelikeMoveToRequest {
    to: Torappu.RoguelikeNodePosition;
  }
  export interface RoguelikeMoveToResponse {
  }
  export interface RoguelikeFinishNodeRequest {
  }
  export interface RoguelikeFinishNodeResponse {
  }
  export interface RoguelikeBuyGoodsRequest {
    select: System.Collections.Generic.List<System.String>;
  }
  export interface RoguelikeBuyGoodsResponse {
    items: System.Collections.Generic.List<Torappu.RoguelikeItemBundle>;
  }
  export interface RoguelikeSelectRewardRequest {
    select: System.Collections.Generic.List<Torappu.RoguelikeSelectRewardRequest.SelectParam>;
  }
  export interface RoguelikeSelectRewardResponse {
    items: System.Collections.Generic.List<Torappu.RoguelikeItemBundle>;
  }
  export interface RoguelikeSelectChoiceRequest {
    choice: System.String;
  }
  export interface RoguelikeSelectChoiceResponse {
    items: System.Collections.Generic.List<Torappu.RoguelikeItemBundle>;
  }
  export interface RoguelikeActivateTicketRequest {
    ticketIndex: System.String;
  }
  export interface RoguelikeActivateTicketResponse {
  }
  export interface RoguelikeRecruitCharRequest {
    ticketIndex: System.String;
    instId: System.String;
  }
  export interface RoguelikeRecruitCharResponse {
    chars: System.Collections.Generic.List<Torappu.PlayerRoguelikeCharacter>;
  }
  export interface RoguelikeUpgradeCharRequest {
    ticketIndex: System.String;
    instId: System.String;
  }
  export interface RoguelikeUpgradeCharResponse {
    chars: System.Collections.Generic.List<Torappu.PlayerRoguelikeCharacter>;
  }
  export interface RoguelikeStartBattleRequest {
    to: Torappu.RoguelikeNodePosition;
    stageId: System.String;
    squad: Torappu.CommonStartBattleRequest.SquadModel;
  }
  export interface RoguelikeStartBattleResponse {
    chestEnemy: System.Int32;
  }
  export interface RoguelikeFinishBattleRequest {
    battleLog: System.String;
  }
  export interface RoguelikeFinishBattleResponse {
  }
  export interface RuneStartBattleRequest {
    rune: System.Collections.Generic.List<System.String>;
    isPractice: System.Boolean;
  }
  export interface RuneStartBattleResponse {
  }
  export interface RuneFinishBattleRequest {
    battleLog: System.String;
  }
  export interface RuneFinishBattleResponse {
    score: System.Int32;
    from: System.Int32;
    to: System.Int32;
  }
  export interface ChangeSecretaryRequest {
    charInstId: System.Int32;
    skinId: System.String;
  }
  export interface ChangeSecretaryResponse {
  }
  export interface SellCharRequest {
    charInstIdList: System.Int32[];
  }
  export interface SellCharResponse {
  }
  export interface SetDefaultSkillRequest {
    charInstId: System.Int32;
    defaultSkillIndex: System.Int32;
  }
  export interface SetDefaultSkillResponse {
  }
  export interface BuyCashGoodRequest {
    goodId: System.String;
  }
  export interface BuyCashGoodResponse {
    items: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface BuySkinGoodRequest {
    goodId: System.String;
  }
  export interface BuySkinGoodRepsonse {
  }
  export interface BuyFurnGroupRequest {
    groupId: System.String;
    goods: System.Collections.Generic.List<Torappu.BuyFurnGroupRequest.FurnItemInfo>;
    costType: Torappu.BuyFurnGroupRequest.CostType;
  }
  export interface BuyFurnGroupResponse {
    items: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface BuyGPGoodRequest {
    goodId: System.String;
  }
  export interface BuyGPGoodResponse {
    items: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface BuyLowGoodRequest {
    goodId: System.String;
    count: System.Int32;
  }
  export interface BuyLowGoodResponse {
    items: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface BuyExtraGoodRequest {
    goodId: System.String;
    count: System.Int32;
  }
  export interface BuyExtraGoodResponse {
    items: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface BuyHighGoodRequest {
    goodId: System.String;
    count: System.Int32;
  }
  export interface BuyHighGoodResponse {
    items: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface BuyLMTGSGoodRequest {
    goodId: System.String;
    count: System.Int32;
  }
  export interface BuyLMTGSGoodResponse {
    items: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface BuyEPGSGoodRequest {
    goodId: System.String;
    count: System.Int32;
  }
  export interface BuyEPGSGoodResponse {
    items: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface BuyREPGoodRequest {
    goodId: System.String;
    count: System.Int32;
  }
  export interface BuyREPGoodResponse {
    items: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface BuySocialGoodRequest {
    goodId: System.String;
    count: System.Int32;
  }
  export interface BuySocialGoodResponse {
    items: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface DecomposePotentialItemRequest {
    charInstIdList: System.Collections.Generic.List<System.String>;
  }
  export interface DecomposePotentialItemResponse {
    items: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface IShopGetResposne {
  }
  export interface ShopSlot {
    price: System.Int32;
    displayName: System.String;
    item: Torappu.ItemBundle;
  }
  export interface CommonShopData {
    goodId: System.String;
    goodType: System.String;
    availCount: System.Int32;
    slotItem: Torappu.ShopSlot;
    discount: System.Single;
    originPrice: System.Int32;
  }
  export interface RewardItemModel {
    type: Torappu.ItemType;
    id: System.String;
    charGet: Torappu.GachaResult;
    count: System.Int32;
  }
  export interface ShopSkinItemViewModel {
    goodId: System.String;
    slotId: System.Int32;
    skinId: System.String;
    originPrice: System.Int32;
    price: System.Int32;
    discount: System.Single;
    skinName: System.String;
    currencyUnit: Torappu.ShopCurrencyUnit;
    startDateTime: System.Int64;
    endDateTime: System.Int64;
  }
  export interface GetSkinGoodListRequest {
    charIdList: System.Collections.Generic.List<System.String>;
  }
  export interface GetSkinGoodListResponse {
    goodList: System.Collections.Generic.List<Torappu.ShopSkinItemViewModel>;
  }
  export enum ShopQCGoodType {
    NORMAL = "NORMAL",
    PROGRESS = "PROGRESS",
  }
  export interface QCObject {
    goodId: System.String;
    item: Torappu.ItemBundle;
    progressGoodId: System.String;
    displayName: System.String;
    slotId: System.Int32;
    originPrice: System.Int32;
    price: System.Int32;
    availCount: System.Int32;
    discount: System.Single;
    priority: System.Int32;
    number: System.Int32;
    groupId: System.String;
    goodStartTime: System.Int64;
    goodEndTime: System.Int64;
    goodType: Torappu.ShopQCGoodType;
  }
  export interface QCProgressGoodItem {
    order: System.Int32;
    price: System.Int32;
    displayName: System.String;
    item: Torappu.ItemBundle;
  }
  export interface CashShopObject {
    goodId: System.String;
    slotId: System.Int32;
    price: System.Int32;
    doubleCount: System.Int32;
    diamondNum: System.Int32;
    plusNum: System.Int32;
    desc: System.String;
  }
  export interface GetCashGoodListRequest {
  }
  export interface GetCashGoodListResponse {
    goodList: System.Collections.Generic.List<Torappu.CashShopObject>;
  }
  export interface GetHighGoodListRequest {
  }
  export interface GetHighGoodListResponse {
    goodList: System.Collections.Generic.List<Torappu.QCObject>;
    progressGoodList: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<Torappu.QCProgressGoodItem>>;
  }
  export interface GetExtraGoodListRequest {
  }
  export interface GetExtraGoodListResponse {
    goodList: System.Collections.Generic.List<Torappu.QCObject>;
    shopEndTime: System.Int64;
  }
  export interface GetLowGoodListRequest {
  }
  export interface GetLowGoodListResponse {
    goodList: System.Collections.Generic.List<Torappu.QCObject>;
    groups: System.Collections.Generic.List<System.String>;
    shopEndTime: System.Int64;
  }
  export interface LMTGSGood {
    goodId: System.String;
    startTime: System.Int64;
    endTime: System.Int64;
    availCount: System.Int32;
    item: Torappu.ItemBundle;
    price: Torappu.ItemBundle;
    sortId: System.Int32;
  }
  export interface GetLMTGSGoodListRequest {
  }
  export interface GetLMTGSGoodListResponse {
    goodList: System.Collections.Generic.List<Torappu.LMTGSGood>;
  }
  export interface EPGSGood {
    goodId: System.String;
    startTime: System.Int64;
    endTime: System.Int64;
    availCount: System.Int32;
    item: Torappu.ItemBundle;
    price: System.Int32;
    sortId: System.Int32;
  }
  export interface GetEPGSGoodListRequest {
  }
  export interface GetEPGSGoodListResponse {
    goodList: System.Collections.Generic.List<Torappu.EPGSGood>;
  }
  export interface REPGood {
    goodId: System.String;
    startTime: System.Int64;
    endTime: System.Int64;
    availCount: System.Int32;
    item: Torappu.ItemBundle;
    price: System.Int32;
    sortId: System.Int32;
  }
  export interface GetREPGoodListRequest {
  }
  export interface GetREPGoodListResponse {
    goodList: System.Collections.Generic.List<Torappu.EPGSGood>;
  }
  export interface SocialShopData {
    goodId: System.String;
    displayName: System.String;
    item: Torappu.ItemBundle;
    price: System.Int32;
    availCount: System.Int32;
    slotItem: Torappu.ShopSlot;
    discount: System.Single;
    originPrice: System.Int32;
  }
  export interface GetSocialGoodListRequest {
  }
  export interface GetSocialGoodListResponse {
    goodList: System.Collections.Generic.List<Torappu.SocialShopData>;
    charPurchase: System.Collections.Generic.Dictionary<System.String,System.Int32>;
    costSocialPoint: System.Int32;
    creditGroup: System.String;
  }
  export interface ShopCashGoodPurchaseRequest {
  }
  export interface ShopCashGoodPurchaseResponse {
    receiveCashGoodResult: System.Collections.Generic.List<Torappu.ShopCashGoodPurchaseResponse.Good>;
  }
  export interface PayCreateOrderRequest {
    storeId: System.Int32;
    goodId: System.String;
  }
  export interface PayCreateOrderResponse {
    result: System.Int32;
    orderId: System.String;
    extension: System.String;
    orderIdList: System.Collections.Generic.List<System.String>;
    alertMinor: System.Boolean;
    errMsg: System.String;
  }
  export interface PayGetUnConfirmedOrderListRequest {
  }
  export interface PayGetUnconfirmedOrderListResponse {
    orderIdList: System.Collections.Generic.List<System.String>;
  }
  export interface PayConfirmOrderRequest {
    orderId: System.String;
  }
  export interface PayConfirmOrderResponse {
    result: System.Int32;
    goodId: System.String;
    receiveItems: Torappu.PayConfirmOrderResponse.Good;
  }
  export interface MonthlySubItem {
    cardId: System.String;
    dailyBonus: Torappu.ItemBundle[];
  }
  export interface LevelGPItem {
    playerLevel: System.Int32;
  }
  export interface ChooseGPItem {
    options: System.Collections.Generic.List<Torappu.ChooseGiftPackageShopOption>;
    desc: System.String;
    itemDisplayDesc: System.String;
    itemDisplayNum: System.Int32;
  }
  export interface ChooseGiftPackageShopOption {
    goodId: System.String;
    OptionId: System.String;
    orderNum: System.Int32;
    item: Torappu.ItemBundle;
  }
  export interface NormalGPItem {
    goodId: System.String;
    giftPackageId: System.String;
    priority: System.Int32;
    displayName: System.String;
    currencyUnit: Torappu.ShopCurrencyUnit;
    availCount: System.Int32;
    price: System.Int32;
    originPrice: System.Int32;
    discount: System.Single;
    items: Torappu.ItemBundle[];
    startDateTime: System.Int64;
    endDateTime: System.Int64;
  }
  export interface PeriodicityGPItem {
    groupId: System.String;
  }
  export interface PeriodicityGroup {
    groupId: System.String;
    startDateTime: System.Int64;
    endDateTime: System.Int64;
    packages: System.Collections.Generic.Dictionary<System.String,Torappu.PeriodicityGPItem>;
  }
  export interface GetGPGoodListRequest {
  }
  export interface GetGPGoodListResponse {
    weeklyGroup: Torappu.PeriodicityGroup;
    monthlyGroup: Torappu.PeriodicityGroup;
    monthlySub: System.Collections.Generic.List<Torappu.MonthlySubItem>;
    levelGP: System.Collections.Generic.List<Torappu.LevelGPItem>;
    oneTimeGP: System.Collections.Generic.List<Torappu.NormalGPItem>;
    chooseGroup: System.Collections.Generic.List<Torappu.ChooseGPItem>;
  }
  export interface ShopPurchaseState {
    lowQCShop: System.Collections.Generic.List<System.String>;
    highQCShop: System.Collections.Generic.List<System.String>;
    extraQCShop: System.Collections.Generic.List<System.String>;
    furnShop: System.Collections.Generic.List<System.String>;
    giftShop: System.Collections.Generic.List<System.String>;
    socialShop: System.Collections.Generic.List<System.String>;
  }
  export interface GetGoodPurchaseStateRequest {
    goodIdMap: Torappu.ShopPurchaseState;
  }
  export interface GetGoodPurchaseStateResponse {
    result: System.Collections.Generic.Dictionary<System.String,System.Int32>;
  }
  export interface ReceiveSocialPointRequest {
  }
  export interface ReceiveSocialPointResponse {
    reward: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface SpecialStoryStageRewardRequest {
    stageId: System.String;
  }
  export interface SpecialStoryStageRewardResponse {
    rewards: System.Collections.Generic.List<Torappu.ItemBundle>;
  }
  export interface RequestSquadSlot {
    charInstId: System.Int32;
    S_skillIndex: System.Int32;
    S_currentTmpl: System.String;
    S_tmpl: Torappu.ListDict<System.String,Torappu.RequestSquadSlot.Patch>;
  }
  export interface SquadFormationRequest {
    squadId: System.String;
    slots: Torappu.RequestSquadSlot[];
    changeSkill: System.Boolean;
  }
  export interface SquadFormationResponse {
  }
  export interface SquadRenameRequest {
    squadId: System.String;
    name: System.String;
  }
  export interface SquadRenameResponse {
    result: System.Int32;
  }
  export interface SquadFriendData {
    assistChar: Torappu.SharedCharData;
    assistSlotIndex: System.Int32;
  }
  export interface SquadAssistData {
    assistSlotIndex: System.Int32;
    aliasName: System.String;
    assistCharList: Torappu.SharedCharData[];
    isFriend: System.Boolean;
    canRequestFriend: System.Boolean;
  }
  export interface GetFriendAssistCharListResponse {
    allowAskTs: System.DateTime;
    assistList: Torappu.SquadAssistData[];
  }
  export interface GetFriendAssistCharListRequest {
    profession: System.String;
    askRefresh: System.Boolean;
    currSquadId: System.String;
  }
  export interface UnlockStageFog {
    stageId: System.String;
  }
  export interface UnlockStageFogResponse {
  }
  export interface CommonStartBattleRequest {
    usePracticeTicket: System.Boolean;
    stageId: System.String;
    squad: Torappu.CommonStartBattleRequest.SquadModel;
    assistFriend: Torappu.SquadFriendData;
    isReplay: System.Boolean;
    startTs: System.Int64;
  }
  export interface CommonStartBattleResponse {
    result: System.Int32;
    battleId: System.String;
  }
  export interface DefaultStartBattleRequest {
    isRetro: System.Boolean;
  }
  export interface DefaultStartBattleResponse {
    isApProtect: System.Boolean;
    apFailReturn: System.Int32;
    notifyPowerScoreNotEnoughIfFailed: System.Boolean;
  }
  export interface StoryOnlyStartBattleRequest {
    stageId: System.String;
  }
  export interface StoryOnlyStartBattleResponse {
    result: System.Int32;
    rewards: System.Collections.Generic.List<Torappu.CommonFinishBattleResponse.RewardModel>;
    unlockStages: System.String[];
    alert: System.Collections.Generic.List<Torappu.ServiceAlertStruct>;
  }
  export interface UnlockReviewByCoinRequest {
    storyId: System.String;
  }
  export interface UnlockReviewByCoinResponse {
    unlockTs: System.Int64;
  }
  export interface ReadStoryRequest {
    storyId: System.String;
  }
  export interface ReadStoryResponse {
    readCount: System.Int32;
  }
  export interface StoryReviewRewardRequest {
    groupId: System.String;
  }
  export interface StoryReviewRewardResponse {
    items: System.Collections.Generic.List<Torappu.RewardItemModel>;
  }
  export interface SyncDataRequest {
    platform: Torappu.PlatformKey;
  }
  export interface SyncDataResponse {
    result: System.Int32;
    ts: System.Int64;
  }
  export interface UpgradeCharRequest {
    charInstId: System.Int32;
    expMats: Torappu.UpgradeCharRequest.ExpMat[];
  }
  export interface UpgradeCharResponse {
  }
  export interface VisitBuildingRequest {
    friendId: System.String;
  }
  export interface VisitBuildingResponse {
    snapshot: Torappu.VisitBuildingResponse.Snapshot;
    visitorList: System.Collections.Generic.List<Torappu.VisitBuildingResponse.VisitorInfo>;
    rewards: Torappu.ItemBundle[];
    notice: System.Int32;
  }
  export interface EvolveCharUseItemRequest {
    charInstId: System.Int32;
    itemId: System.String;
    instId: System.Int32;
  }
  export interface EvolveCharUseItemResponse {
  }
  export interface VoucherSkinGetGoodListRequest {
  }
  export interface VoucherSkinGetGoodListResponse {
    goodList: System.Collections.Generic.List<Torappu.ShopSkinItemViewModel>;
  }
  export interface VoucherSkinUseRequest {
    goodId: System.String;
    itemId: System.String;
    instId: System.Int32;
  }
  export interface VoucherSkinUseResponse {
  }
  export interface PlayerStatus {
    nickName: System.String;
    nickNumber: System.String;
    serverName: System.String;
    ap: System.Int32;
    lastApAddTime: System.DateTime;
    lastRefreshTs: System.DateTime;
    level: System.Int32;
    exp: System.Int32;
    maxAp: System.Int32;
    practiceTicket: System.Int32;
    gold: System.Int64;
    diamondShard: System.Int32;
    recruitLicense: System.Int32;
    gachaTicket: System.Int32;
    tenGachaTicket: System.Int32;
    instantFinishTicket: System.Int32;
    hggShard: System.Int32;
    lggShard: System.Int32;
    socialPoint: System.Int32;
    buyApRemainTimes: System.Int32;
    apLimitUpFlag: System.Boolean;
    registerTs: System.Int64;
    secretary: System.String;
    secretarySkinId: System.String;
    resume: System.String;
    monthlySubscriptionEndTime: System.DateTime;
    monthlySubscriptionStartTime: System.DateTime;
    progress: System.Int32;
    mainStageProgress: System.String;
    avatar: Torappu.AvatarInfo;
    iosDiamond: System.Int32;
    androidDiamond: System.Int32;
    payDiamond: System.Int32;
    freeDiamond: System.Int32;
    flags: System.Collections.Generic.Dictionary<System.String,System.Boolean>;
    friendAssist: System.Collections.Generic.List<Torappu.PlayerFriendAssist>;
  }
  export interface AvatarInfo {
    type: System.String;
    id: System.String;
  }
  export interface PlayerSquadTmpl {
    skillIndex: System.Int32;
  }
  export interface ISquadMemberTmplInfo {
  }
  export interface PlayerSquadMemberProto {
    charInstId: System.Int32;
    // m_skillIndex: System.Int32;
    currentTmpl: System.String;
    tmpl: Torappu.ListDict<System.String,Torappu.PlayerSquadTmpl>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_GetSkillIndex: XLua.DelegateBridge;
    // __Hotfix0_InternalSkillIndex: XLua.DelegateBridge;
    // __Hotfix0_ExtraTmplSkillInfo: XLua.DelegateBridge;
  }
  export interface PlayerSquadItem {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
  }
  export interface PlayerFriendAssist {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
  }
  export interface PlayerSquad {
    squadId: System.Int32;
    name: System.String;
    slots: Torappu.PlayerSquadItem[];
  }
  export interface PlayerCarousel {
    furnitureShop: Torappu.PlayerCarousel.PlayerCarouselFurnitureShopData;
  }
  export interface PlayerCheckIn {
    canCheckIn: System.Boolean;
    checkInGroupId: System.String;
    checkInRewardIndex: System.Int32;
    checkInHistory: System.Collections.Generic.List<System.Boolean>;
  }
  export interface PlayerMonthlySubPer {
    monthlySubscriptionEndTime: System.Int64;
    monthlySubscriptionStartTime: System.Int64;
  }
  export interface PlayerCharSkill {
    unlock: System.Boolean;
    skillId: System.String;
    specializeLevel: System.Int32;
  }
  export interface PlayerCharacter {
    instId: System.Int32;
    charId: System.String;
    level: System.Int32;
    exp: System.Int32;
    evolvePhase: Torappu.EvolvePhase;
    potentialRank: System.Int32;
    favorPoint: System.Int32;
    mainSkillLvl: System.Int32;
    gainTime: System.Int64;
    currentTmpl: System.String;
    tmpl: Torappu.ListDict<System.String,Torappu.PlayerCharPatch>;
    // m_skills: Torappu.PlayerCharSkill[];
    // m_defaultSkillIndex: System.Int32;
    // m_skinId: System.String;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_GetFinalSkillLvl: XLua.DelegateBridge;
    // __Hotfix0_SafeTmpl: XLua.DelegateBridge;
    // __Hotfix0_GetCurSkills: XLua.DelegateBridge;
    // __Hotfix0_GetSkills: XLua.DelegateBridge;
    // __Hotfix0_GetDefaultSkillIndex: XLua.DelegateBridge;
    // __Hotfix0_GetSkinId: XLua.DelegateBridge;
    // __Hotfix0_IsTmplUnlocked: XLua.DelegateBridge;
    // __Hotfix0_HasMultiTmpls: XLua.DelegateBridge;
    // __Hotfix0_ShallowClone: XLua.DelegateBridge;
  }
  export interface PlayerCharPatch {
    skinId: System.String;
    defaultSkillIndex: System.Int32;
    skills: Torappu.PlayerCharSkill[];
  }
  export interface MileStonePlayerInfo {
    points: System.Collections.Generic.Dictionary<System.String,System.Int32>;
    rewards: System.Collections.Generic.Dictionary<System.String,Torappu.MileStonePlayerInfo.MileStoneRewardTicketItem>;
  }
  export interface PlayerOpenServer {
    chainLogin: Torappu.OpenServerChainLogin;
    checkIn: Torappu.OpenServerCheckIn;
  }
  export interface PlayerHandBookAddon {
    stage: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerHandBookAddon.GetInfo>;
    story: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerHandBookAddon.GetInfo>;
  }
  export interface PlayerActivity {
    defaultActivityList: Torappu.ListDict<System.String,Torappu.PlayerActivity.PlayerDefaultActivity>;
    missionOnlyActivityList: Torappu.ListDict<System.String,Torappu.PlayerActivity.PlayerMissionOnlyTypeActivity>;
    checkinOnlyActivityList: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerActivity.PlayerCheckinOnlyTypeActivity>;
    collectionActivityList: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerActivity.PlayerCollectionTypeActivity>;
    avgOnlyActivityList: Torappu.ListDict<System.String,Torappu.PlayerActivity.PlayerAVGOnlyTypeActivity>;
    loginOnlyActivityList: Torappu.ListDict<System.String,Torappu.PlayerActivity.PlayerLoginOnlyTypeActivity>;
    miniStoryActivityList: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerActivity.PlayerMiniStoryActivity>;
    roguelikeActivityList: Torappu.ListDict<System.String,Torappu.PlayerActivity.PlayerRoguelikeActivity>;
    prayOnlyActivityList: Torappu.ListDict<System.String,Torappu.PlayerActivity.PlayerPrayOnlyActivity>;
    multiplayActivityList: Torappu.ListDict<System.String,Torappu.PlayerActivity.PlayerMultiplayActivity>;
    act3D0ActivityList: Torappu.ListDict<System.String,Torappu.PlayerActivity.PlayerAct3D0Activity>;
    act4D0ActivityList: Torappu.ListDict<System.String,Torappu.PlayerActivity.PlayerAct4D0Activity>;
    act5D0ActivityList: Torappu.ListDict<System.String,Torappu.PlayerActivity.PlayerAct5D0Activity>;
    act5D1ActivityList: Torappu.ListDict<System.String,Torappu.PlayerActivity.PlayerAct5D1Activity>;
    act9D0ActivityList: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerActivity.PlayerAct9D0Activity>;
    act17D7ActivityList: Torappu.ListDict<System.String,Torappu.PlayerActivity.PlayerAct17D7Activity>;
    gridGachaActivityList: Torappu.ListDict<System.String,Torappu.PlayerActivity.PlayerGridGachaActivity>;
  }
  export interface OpenServerChainLogin {
    isAvailable: System.Boolean;
    nowIndex: System.Int32;
    history: System.Collections.Generic.List<System.Boolean>;
  }
  export interface OpenServerCheckIn {
    isAvailable: System.Boolean;
    history: System.Collections.Generic.List<System.Boolean>;
  }
  export interface PlayerDungeon {
    stages: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerStage>;
    zones: Torappu.ListDict<System.String,Torappu.PlayerZone>;
    cowLevel: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerSpecialStage>;
  }
  export interface PlayerSpecialStage {
    id: System.String;
    unlockTs: System.Int64;
    rewardTs: System.Int64;
  }
  export interface PlayerZone {
    completeTimes: System.Int32;
  }
  export interface PlayerStage {
    stageId: System.String;
    completeTimes: System.Int32;
    state: Torappu.PlayerStageState;
    hasBattleReplay: System.Boolean;
    noCostCnt: System.Int32;
  }
  export interface PlayerCampaign {
    campaignCurrentFee: System.Int32;
    campaignTotalFee: System.Int32;
    activeGroupId: System.String;
    open: Torappu.PlayerCampaign.StageOpenInfo;
    missions: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerCampaign.MissionState>;
    instances: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerCampaign.Stage>;
  }
  export interface PlayerRecruit {
    normal: Torappu.PlayerRecruit.NormalModel;
  }
  export interface PlayerGacha {
    newbee: Torappu.PlayerGacha.PlayerNewbeeGachaPool;
    normal: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerGacha.PlayerGachaPool>;
    limit: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerGacha.PlayerFreeLimitGacha>;
    linkage: System.Collections.Generic.Dictionary<System.String,Torappu.ListDict<System.String,Newtonsoft.Json.Linq.JObject>>;
  }
  export enum NameCardMedalType {
    EMPTY = "EMPTY",
    CUSTOM = "CUSTOM",
    TEMPLATE = "TEMPLATE",
  }
  export interface PlayerMedalBoard {
    type: Torappu.NameCardMedalType;
    customIndex: System.String;
    templateGroupId: System.String;
  }
  export interface PlayerSocialReward {
    canReceive: System.Boolean;
    first: System.Int32;
    assistAmount: System.Int32;
    comfortAmount: System.Int32;
  }
  export interface PlayerSocial {
    yesterdayCrisisSeasonId: System.String;
    assistCharList: System.Collections.Generic.List<Torappu.PlayerFriendAssist>;
    yesterdayReward: Torappu.PlayerSocialReward;
    medalBoard: Torappu.PlayerMedalBoard;
  }
  export interface PlayerTroop {
    troopCapacity: System.Int32;
    curSquadCount: System.Int32;
    curCharInstCount: System.Int32;
    squads: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerSquad>;
    chars: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerCharacter>;
    addon: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerHandBookAddon>;
    charMission: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.Dictionary<System.String,Torappu.PlayerTroop.CharMissionState>>;
  }
  export interface PlayerGoodItemData {
    id: System.String;
    count: System.Int32;
  }
  export interface PlayerGoodProgressData {
    count: System.Int32;
    order: System.Int32;
  }
  export interface PlayerCommonShopProgressData {
    curShopId: System.String;
    info: System.Collections.Generic.List<Torappu.PlayerGoodItemData>;
  }
  export interface PlayerLowQCShopProgressData {
    curGroupId: System.String;
  }
  export interface PlayerHighQCShopProgressData {
    info: System.Collections.Generic.List<Torappu.PlayerGoodItemData>;
    progressInfo: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerGoodProgressData>;
  }
  export interface PlayerLMTGSProgressData {
    info: System.Collections.Generic.List<Torappu.PlayerGoodItemData>;
  }
  export interface PlayerEPGSProgressData {
    info: System.Collections.Generic.List<Torappu.PlayerGoodItemData>;
  }
  export interface PlayerCashProgressData {
    info: System.Collections.Generic.List<Torappu.PlayerGoodItemData>;
  }
  export interface PlayerGiftProgressPerData {
    info: System.Collections.Generic.List<Torappu.PlayerGoodItemData>;
  }
  export interface PlayerSocialShopData {
    info: System.Collections.Generic.List<Torappu.PlayerGoodItemData>;
  }
  export interface PlayerFurnitureShopData {
    info: System.Collections.Generic.List<Torappu.PlayerGoodItemData>;
    groupInfo: System.Collections.Generic.Dictionary<System.String,System.Int32>;
  }
  export interface PlayerGiftProgressData {
    oneTime: Torappu.PlayerGiftProgressPerData;
    level: Torappu.PlayerGiftProgressPerData;
    weekly: Torappu.PlayerGiftProgressPerData;
    monthly: Torappu.PlayerGiftProgressPerData;
    choose: Torappu.PlayerGiftProgressPerData;
  }
  export interface PlayerTemplateShop {
    coin: System.Int32;
    info: System.Collections.Generic.List<Torappu.PlayerGoodItemData>;
    progressInfo: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerGoodProgressData>;
  }
  export interface PlayerShop {
    lowQCShop: Torappu.PlayerLowQCShopProgressData;
    highQCShop: Torappu.PlayerHighQCShopProgressData;
    extraQCShop: Torappu.PlayerCommonShopProgressData;
    lmtgsQCShop: Torappu.PlayerLMTGSProgressData;
    epgsQCShop: Torappu.PlayerEPGSProgressData;
    repQCShop: Torappu.PlayerEPGSProgressData;
    cashShop: Torappu.PlayerCashProgressData;
    giftShop: Torappu.PlayerGiftProgressData;
    socialShop: Torappu.PlayerSocialShopData;
    furnitureShop: Torappu.PlayerFurnitureShopData;
  }
  export interface PlayerConsumableItem {
    ts: System.Int64;
    count: System.Int32;
  }
  export interface PlayerTicketItem {
    ts: System.Int64;
    count: System.Int32;
  }
  export interface PlayerPushFlags {
    hasGifts: System.Boolean;
    hasFriendRequest: System.Boolean;
    hasClues: System.Boolean;
    hasFreeLevelGP: System.Boolean;
    status: System.Int64;
  }
  export interface PlayerEvents {
    building: System.DateTime;
    status: System.Int64;
  }
  export interface PlayerBuildingLabor {
    buffSpeed: System.Single;
    value: System.Int32;
    maxValue: System.Int32;
    lastUpdateTime: System.DateTime;
    processPoint: System.Double;
  }
  export interface PlayerBuildingStatus {
    labor: Torappu.PlayerBuildingLabor;
  }
  export interface PlayerBuildingCharBubble {
    add: System.Int32;
  }
  export interface PlayerBuildingChar {
    charId: System.String;
    lastApAddTime: System.DateTime;
    ap: System.Int64;
    roomSlotId: System.String;
    index: System.Int32;
    changeScale: System.Int32;
    bubble: Torappu.PlayerBuildingChar.BubbleContainer;
    skinIdInVisit: System.String;
  }
  export interface PlayerBuildingRoomSlot {
    level: System.Int32;
    state: Torappu.PlayerRoomSlotState;
    roomId: Torappu.BuildingData.RoomType;
    charInstIds: System.Int32[];
    completeConstructTime: System.DateTime;
  }
  export interface PlayerBuildingFurnitureInfo {
    count: System.Int32;
    inUse: System.Int32;
  }
  export interface PlayerEnemyHandBook {
    enemies: System.Collections.Generic.Dictionary<System.String,System.Int32>;
    stage: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<System.String>>;
  }
  export interface PlayerFormulaUnlockRecord {
    manufacture: System.Collections.Generic.Dictionary<System.String,System.Int32>;
    workshop: System.Collections.Generic.Dictionary<System.String,System.Int32>;
  }
  export interface PlayerDexNav {
    enemy: Torappu.PlayerEnemyHandBook;
    formula: Torappu.PlayerFormulaUnlockRecord;
  }
  export interface PlayerSkins {
    characterSkins: Torappu.ListDict<System.String,System.Int32>;
    skinTs: Torappu.ListDict<System.String,System.Int64>;
  }
  export interface PlayerPerMedal {
    id: System.String;
    val: System.Collections.Generic.List<System.Int32[]>;
    fts: System.Int64;
    rts: System.Int64;
    reward: System.String;
  }
  export interface PlayerMedalCustomLayoutItem {
    id: System.String;
    pos: System.Int32[];
  }
  export interface PlayerMedalCustomLayout {
    layout: System.Collections.Generic.List<Torappu.PlayerMedalCustomLayoutItem>;
  }
  export interface PlayerMedalCustom {
    currentIndex: System.String;
    customs: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerMedalCustomLayout>;
  }
  export interface PlayerMedal {
    medals: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerPerMedal>;
    custom: Torappu.PlayerMedalCustom;
  }
  export interface PlayerRetro {
    coin: System.Int32;
    supplement: System.Boolean;
    block: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerRetroBlock>;
  }
  export interface PlayerRetroBlock {
    locked: System.Boolean;
    open: System.Boolean;
  }
  export interface PlayerCollection {
    team: System.Collections.Generic.Dictionary<System.String,System.Int32>;
  }
  export interface PlayerBuildingManufactureBuff {
    speed: System.Single;
    capacity: System.Int32;
  }
  export interface PlayerBuildingManufacture {
    buff: Torappu.PlayerBuildingManufactureBuff;
    state: Torappu.PlayerRoomState;
    formulaId: System.String;
    remainSolutionCnt: System.Int32;
    outputSolutionCnt: System.Int32;
    lastUpdateTime: System.DateTime;
    processPoint: System.Double;
    saveTime: System.Int64;
    completeWorkTime: System.DateTime;
    capacity: System.Int32;
    apCost: System.Int32;
    display: Torappu.BuildingBuffDisplay;
  }
  export interface BuildingBuffDisplay {
    baseBuff: System.Int32;
    buff: System.Int32;
  }
  export interface PlayerBuildingShopStock {
    buffSpeed: System.Single;
    state: Torappu.PlayerRoomState;
    formulaId: System.String;
    itemCnt: System.Int32;
    processPoint: System.Double;
    lastUpdateTime: System.DateTime;
    saveTime: System.Int64;
    completeWorkTime: System.DateTime;
  }
  export interface PlayerBuildingShopOutputItem {
    type: Torappu.ItemType;
    count: System.Int32;
  }
  export interface PlayerBuildingShop {
    stock: Torappu.PlayerBuildingShopStock[];
    outputItem: System.Collections.Generic.List<Torappu.PlayerBuildingShopOutputItem>;
  }
  export interface PlayerBuildingPowerBuff {
    laborSpeed: System.Single;
  }
  export interface PlayerBuildingPower {
    buff: Torappu.PlayerBuildingPowerBuff;
  }
  export interface PlayerBuildingControlBuff {
    global: Torappu.PlayerBuildingControlBuff.Global;
  }
  export interface PlayerBuildingControl {
    buff: Torappu.PlayerBuildingControlBuff;
    apCost: System.Int32;
  }
  export interface PlayerBuildingWorkshopBuff {
    rate: Torappu.ListDict<System.String,System.Single>;
    frate: System.Collections.Generic.List<Torappu.PlayerBuildingWorkshopBuff.Frate>;
    goldFree: Torappu.ListDict<System.String,System.Int32>;
    cost: Torappu.PlayerBuildingWorkshopBuff.Cost;
    costRe: Torappu.PlayerBuildingWorkshopBuff.CostRe;
    costForce: Torappu.PlayerBuildingWorkshopBuff.CostForce;
  }
  export interface PlayerBuildingWorkshop {
    buff: Torappu.PlayerBuildingWorkshopBuff;
  }
  export interface PlayerBuildingMeetingClueChar {
    charId: System.String;
    level: System.Int32;
    evolvePhase: System.Int32;
  }
  export interface PlayerBuildingMeetingClue {
    id: System.String;
    type: System.String;
    number: System.Int32;
    uid: System.Int32;
    nickNum: System.Int32;
    name: System.String;
    chars: System.Collections.Generic.List<Torappu.PlayerBuildingMeetingClueChar>;
    inUse: System.Int32;
    ts: System.Int64;
  }
  export interface PlayerBuildingMeetingSocialReward {
    daily: System.Boolean;
    search: System.Boolean;
  }
  export interface PlayerBuildingMeetingInfoShareState {
    ts: System.Int64;
    reward: System.Int32;
  }
  export interface PlayerBuildingMeetingBuff {
    speed: System.Single;
  }
  export interface PlayerBuildingMeeting {
    visitedUser: System.Collections.Generic.List<System.String>;
    buff: Torappu.PlayerBuildingMeetingBuff;
    state: System.Int32;
    processPoint: System.Int32;
    speed: System.Single;
    ownStock: System.Collections.Generic.List<Torappu.PlayerBuildingMeetingClue>;
    receiveStock: System.Collections.Generic.List<Torappu.PlayerBuildingMeetingClue>;
    board: System.Collections.Generic.Dictionary<System.String,System.String>;
    socialReward: Torappu.PlayerBuildingMeetingSocialReward;
    received: System.Int32;
    infoShare: Torappu.PlayerBuildingMeetingInfoShareState;
    lastUpdateTime: System.DateTime;
    dailyReward: Torappu.PlayerBuildingMeetingClue;
  }
  export enum PlayerBuildingHiringState {
    EMPTY = "EMPTY",
    HIRING = "HIRING",
  }
  export interface PlayerBuildingHireBuff {
    speed: System.Single;
  }
  export interface PlayerBuildingHire {
    buff: Torappu.PlayerBuildingHireBuff;
    recruitSlotId: System.Int32;
    state: Torappu.PlayerBuildingHiringState;
    processPoint: System.Double;
    speed: System.Single;
    lastUpdateTime: System.DateTime;
    refreshCount: System.Int32;
    completeWorkTime: System.DateTime;
  }
  export interface PlayerBuildingTradingOrder {
    instId: System.Int64;
    type: Torappu.BuildingData.OrderType;
    delivery: Torappu.ItemBundle[];
    gain: Torappu.ItemBundle;
  }
  export interface PlayerBuildingTradingBuff {
    speed: System.Single;
    limit: System.Int32;
  }
  export interface PlayerBuildingTradingNext {
    order: System.Int64;
    processPoint: System.Double;
    speed: System.Double;
    maxPoint: System.Int32;
  }
  export interface PlayerBuildingTrading {
    buff: Torappu.PlayerBuildingTradingBuff;
    state: Torappu.PlayerRoomState;
    lastUpdateTime: System.DateTime;
    strategy: Torappu.BuildingData.OrderType;
    stockLimit: System.Int32;
    apCost: System.Int32;
    stock: System.Collections.Generic.List<Torappu.PlayerBuildingTradingOrder>;
    next: Torappu.PlayerBuildingTradingNext;
    display: Torappu.BuildingBuffDisplay;
  }
  export interface PlayerBuildingGridPosition {
    x: System.Int32;
    y: System.Int32;
  }
  export interface PlayerBuildingFurniturePositionInfo {
    id: System.String;
    coordinate: Torappu.PlayerBuildingGridPosition;
  }
  export interface PlayerBuildingDIYSolution {
    wallPaper: System.String;
    floor: System.String;
    carpet: System.Collections.Generic.List<Torappu.PlayerBuildingFurniturePositionInfo>;
    other: System.Collections.Generic.List<Torappu.PlayerBuildingFurniturePositionInfo>;
  }
  export interface PlayerBuildingDIYPreset {
    name: System.String;
    solution: Torappu.PlayerBuildingDIYSolution;
    thumbnail: System.String;
  }
  export interface PlayerBuildingDormitory {
    buff: Torappu.PlayerBuildingDormitory.Buff;
    comfort: System.Int32;
    diySolution: Torappu.PlayerBuildingDIYSolution;
  }
  export enum PlayerBuildingTrainerState {
    EMPTY = "EMPTY",
    TRAINING = "TRAINING",
    FINISH = "FINISH",
    WAITING = "WAITING",
  }
  export enum PlayerBuildingTraineeState {
    EMPTY = "EMPTY",
    TRAINING = "TRAINING",
    OUTOFDATE = "OUTOFDATE",
    WAITING = "WAITING",
  }
  export interface PlayerBuildingTrainer {
    state: Torappu.PlayerBuildingTrainerState;
    charInstId: System.Int32;
  }
  export interface PlayerBuildingTrainee {
    state: Torappu.PlayerBuildingTraineeState;
    charInstId: System.Int32;
    processPoint: System.Double;
    speed: System.Single;
    targetSkill: System.Int32;
  }
  export interface PlayerBuildingTrainingBuff {
    speed: System.Single;
  }
  export interface PlayerBuildingTraining {
    buff: Torappu.PlayerBuildingTrainingBuff;
    lastUpdateTime: System.DateTime;
    trainer: Torappu.PlayerBuildingTrainer;
    trainee: Torappu.PlayerBuildingTrainee;
    completeWorkTime: System.DateTime;
  }
  export interface PlayerBuildingRoom {
    manufact: Torappu.ListDict<System.String,Torappu.PlayerBuildingManufacture>;
    shop: Torappu.ListDict<System.String,Torappu.PlayerBuildingShop>;
    power: Torappu.ListDict<System.String,Torappu.PlayerBuildingPower>;
    control: Torappu.ListDict<System.String,Torappu.PlayerBuildingControl>;
    meeting: Torappu.ListDict<System.String,Torappu.PlayerBuildingMeeting>;
    hire: Torappu.ListDict<System.String,Torappu.PlayerBuildingHire>;
    dorm: Torappu.ListDict<System.String,Torappu.PlayerBuildingDormitory>;
    training: Torappu.ListDict<System.String,Torappu.PlayerBuildingTraining>;
    workshop: Torappu.ListDict<System.String,Torappu.PlayerBuildingWorkshop>;
    trading: Torappu.ListDict<System.String,Torappu.PlayerBuildingTrading>;
  }
  export interface PlayerBuilding {
    status: Torappu.PlayerBuildingStatus;
    chars: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerBuildingChar>;
    assist: System.Collections.Generic.List<System.Int32>;
    roomSlots: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerBuildingRoomSlot>;
    rooms: Torappu.PlayerBuildingRoom;
    furniture: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerBuildingFurnitureInfo>;
    diyPresetSolutions: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerBuildingDIYPreset>;
  }
  export interface MissionCalcState {
    target: System.Int32;
    value: System.Int32;
    compare: System.String;
  }
  export enum MissionHoldingState {
    NOT_OPEN = "NOT_OPEN",
    IN_EFFECT = "IN_EFFECT",
    CONFIRMED = "CONFIRMED",
    FINISHED = "FINISHED",
  }
  export interface MissionPlayerState {
    state: Torappu.MissionHoldingState;
    progress: System.Collections.Generic.List<Torappu.MissionCalcState>;
  }
  export interface MissionDailyRewards {
    dailyPoint: System.Int32;
    weeklyPoint: System.Int32;
    rewards: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.Dictionary<System.String,System.Int32>>;
  }
  export interface MissionPlayerDataGroup {
  }
  export interface MissionPlayerData {
    missions: Torappu.MissionPlayerDataGroup;
    missionRewards: Torappu.MissionDailyRewards;
    missionGroups: System.Collections.Generic.Dictionary<System.String,Torappu.MissionPlayerData.MissionGroupState>;
  }
  export interface PlayerCrisisMap {
    rank: System.Int32;
    confirmed: System.Int32;
  }
  export interface PlayerCrisisShop {
    coin: System.Int32;
    info: System.Collections.Generic.List<Torappu.PlayerGoodItemData>;
    progressInfo: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerGoodProgressData>;
  }
  export interface PlayerCrisisTrainingStage {
    point: System.Int32;
  }
  export interface PlayerCrisisTraining {
    currentStage: System.Collections.Generic.List<System.String>;
    stage: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerCrisisTrainingStage>;
    nextSyncTs: System.Int64;
  }
  export interface PlayerCrisisSeason {
    coin: System.Int32;
    tCoin: System.Int32;
    permanent: Torappu.PlayerCrisisPermanent;
    temporary: Torappu.PlayerCrisisTemporary;
    sInfo: Torappu.PlayerCrisisSocialInfo;
  }
  export interface PlayerCrisisSocialInfo {
    assistCnt: System.Int32;
    maxPnt: System.Int32;
    chars: System.Collections.Generic.List<Torappu.PlayerCrisisSocialInfo.AssistChar>;
  }
  export interface PlayerCrisisChallengeTask {
    finishTs: System.Int64;
    rewardTs: System.Int64;
  }
  export interface PlayerCrisisChallenge {
    pointList: System.Collections.Generic.Dictionary<System.Int32,System.Int64>;
    taskList: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerCrisisChallenge.PlayerChallengeTask>;
    topPoint: System.Int32;
  }
  export interface PlayerCrisisPermanent {
    rune: System.Collections.Generic.Dictionary<System.String,System.Int32>;
    challenge: Torappu.PlayerCrisisChallenge;
    point: System.Int32;
    nextSyncTs: System.Int64;
  }
  export interface PlayerCrisisTemporary {
    schedule: System.String;
    challenge: Torappu.PlayerCrisisChallenge;
    point: System.Int32;
    nextSyncTs: System.Int64;
  }
  export interface PlayerCrisis {
    currentSeason: System.String;
    map: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerCrisisMap>;
    shop: Torappu.PlayerCrisisShop;
    training: Torappu.PlayerCrisisTraining;
    season: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerCrisisSeason>;
    lastSyncTs: System.Int64;
    nextSyncTs: System.Int64;
    box: System.Collections.Generic.List<Torappu.PlayerCrisis.BoxItem>;
  }
  export interface PlayerStoryReview {
    groups: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerStoryReviewUnlockInfo>;
    tags: System.Collections.Generic.Dictionary<System.String,System.Int32>;
  }
  export interface PlayerStoryReviewUnlockInfo {
    rts: System.Int64;
    stories: System.Collections.Generic.List<Torappu.StoryReviewUnlockInfo>;
  }
  export interface StoryReviewUnlockInfo {
    id: System.String;
    uts: System.Int64;
    rc: System.Int32;
  }
  export enum PlayerRoguelikeState {
    NONE = "NONE",
    GAME_REWARD_RELIC = "GAME_REWARD_RELIC",
    GAME_REWARD_SCENE = "GAME_REWARD_SCENE",
    GAME_REWARD_RECRUIT = "GAME_REWARD_RECRUIT",
    MOVE_WAIT = "MOVE_WAIT",
    BUY_WAIT = "BUY_WAIT",
    CHOICE_WAIT = "CHOICE_WAIT",
    REWARD_WAIT = "REWARD_WAIT",
    BATTLE_WAIT_START = "BATTLE_WAIT_START",
    BATTLE_WAIT_END = "BATTLE_WAIT_END",
    GAME_END = "GAME_END",
  }
  export interface PlayerRoguelikeInitialReward {
    relic: Torappu.RoguelikeReward;
    scene: Torappu.RoguelikeChoiceScene;
    recruit: Torappu.RoguelikeReward;
  }
  export interface PlayerRoguelikeCursor {
    zoneIndex: System.Int32;
    position: Torappu.RoguelikeNodePosition;
    state: Torappu.PlayerRoguelikeState;
  }
  export interface PlayerRoguelikeStatus {
    uuid: System.String;
    level: System.Int32;
    exp: System.Int32;
    hp: System.Int32;
    gold: System.Int32;
    squadCapacity: System.Int32;
    populationCost: System.Int32;
    populationMax: System.Int32;
    cursor: Torappu.PlayerRoguelikeCursor;
    perfectWinStreak: System.Int32;
    mode: System.String;
    ending: System.String;
    showBattleCharInstId: System.Int32;
    startTime: System.Int64;
    endTime: System.Int64;
  }
  export interface PlayerRoguelikeItem {
    instId: System.String;
    id: System.String;
    count: System.Int32;
    ts: System.Int64;
    recruit: System.Collections.Generic.List<Torappu.RoguelikeRecruitUpgradeCharacter>;
    upgrade: System.Collections.Generic.List<Torappu.RoguelikeRecruitUpgradeCharacter>;
  }
  export interface PlayerRoguelikeCharacter {
    upgradePhase: System.Int32;
    upgradeLimited: System.Boolean;
    isAddition: System.Int32;
    isElite: System.Int32;
    isFree: System.Int32;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
  }
  export interface PlayerRoguelikeNode {
    pos: Torappu.RoguelikeNodePosition;
    next: System.Collections.Generic.List<Torappu.RoguelikeNodePosition>;
    type: Torappu.RoguelikeEventType;
    fts: System.Int64;
    shop: Torappu.RoguelikeShop;
    scenes: System.Collections.Generic.List<Torappu.RoguelikeChoiceScene>;
    stageId: System.String;
    battleReward: System.Collections.Generic.List<Torappu.RoguelikeReward>;
    earn: Torappu.RoguelikeStageEarn;
  }
  export interface PlayerRoguelikeZone {
    zoneId: System.String;
    nodes: System.Collections.Generic.Dictionary<System.Int32,Torappu.PlayerRoguelikeNode>;
  }
  export interface PlayerRoguelikeDungeon {
    zones: System.Collections.Generic.Dictionary<System.Int32,Torappu.PlayerRoguelikeZone>;
  }
  export interface PlayerRoguelikeRecord {
    passedZone: System.Int32;
    moveTimes: System.Int32;
    battleNormalTimes: System.Int32;
    battleEliteTimes: System.Int32;
    battleBossTimes: System.Int32;
    holdRelicCount: System.Int32;
    recruitChars: System.Int32;
    initialRelic: System.String;
    totalSeconds: System.Int32;
    ending: System.String;
    isDead: System.Boolean;
    totalScore: System.Int32;
    unlockRelic: System.Collections.Generic.List<System.String>;
    unlockMode: System.Collections.Generic.List<System.String>;
  }
  export interface PlayerRoguelike {
    current: Torappu.PlayerRoguelike.CurrentData;
    stable: Torappu.PlayerRoguelike.StableData;
  }
  export interface PlayerDataModel {
    events: Torappu.PlayerEvents;
    pushFlags: Torappu.PlayerPushFlags;
    status: Torappu.PlayerStatus;
    monthlySub: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerMonthlySubPer>;
    troop: Torappu.PlayerTroop;
    dungeon: Torappu.PlayerDungeon;
    checkIn: Torappu.PlayerCheckIn;
    openServer: Torappu.PlayerOpenServer;
    activity: Torappu.PlayerActivity;
    retro: Torappu.PlayerRetro;
    dexNav: Torappu.PlayerDexNav;
    skin: Torappu.PlayerSkins;
    medal: Torappu.PlayerMedal;
    collectionReward: Torappu.PlayerCollection;
    inventory: System.Collections.Generic.Dictionary<System.String,System.Int32>;
    consumable: System.Collections.Generic.Dictionary<System.String,Torappu.ListDict<System.Int32,Torappu.PlayerConsumableItem>>;
    ticket: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerTicketItem>;
    shop: Torappu.PlayerShop;
    tshop: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerTemplateShop>;
    recruit: Torappu.PlayerRecruit;
    carousel: Torappu.PlayerCarousel;
    gacha: Torappu.PlayerGacha;
    social: Torappu.PlayerSocial;
    mission: Torappu.MissionPlayerData;
    building: Torappu.PlayerBuilding;
    crisis: Torappu.PlayerCrisis;
    storyreview: Torappu.PlayerStoryReview;
    roguelike: Torappu.PlayerRoguelike;
    campaign: Torappu.PlayerCampaign;
  }
  export interface ILuaPlayerData {
  }
  export interface PlayerData {
    FAKE_CHAR_INST_ID_ROOT: System.Int32;
    FAKE_CHAR_INST_ID_OFFSET: System.Int32;
    // m_logToken: System.String;
    // m_accessToken: System.String;
    // m_chatMask: System.String;
    // m_data: Torappu.PlayerDataModel;
    // m_rawData: Newtonsoft.Json.Linq.JObject;
    // m_charIdInstMap: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerCharacter>;
    // m_jsonSettings: Newtonsoft.Json.JsonSerializerSettings;
    // m_luaPlayerData: Torappu.ILuaPlayerData;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_get_serializeSetting: XLua.DelegateBridge;
    // __Hotfix0_get_logToken: XLua.DelegateBridge;
    // __Hotfix0_get_accessToken: XLua.DelegateBridge;
    // __Hotfix0_get_chatMask: XLua.DelegateBridge;
    // __Hotfix0_Init: XLua.DelegateBridge;
    // __Hotfix0_NotifyDataChanged: XLua.DelegateBridge;
    // __Hotfix0_LuaOnlyBindListener: XLua.DelegateBridge;
    // __Hotfix0__SyncDataToLua: XLua.DelegateBridge;
    // __Hotfix0_get_data: XLua.DelegateBridge;
    // __Hotfix0_NetworkerOnlyRawData: XLua.DelegateBridge;
    // __Hotfix0_GetCharInstById: XLua.DelegateBridge;
    // __Hotfix0_GenerateFakeValidCharInstId: XLua.DelegateBridge;
    // __Hotfix0_IsValidPlayerChar: XLua.DelegateBridge;
    // __Hotfix0_OnPlayerDataChanged: XLua.DelegateBridge;
  }
  export interface PlayerDataDelta {
    DELTA_FIELD: System.String;
    MODIFY_FIELD: System.String;
    DELETED_FIELD: System.String;
    modified: Newtonsoft.Json.Linq.JObject;
    deleted: Newtonsoft.Json.Linq.JObject;
  }
  export interface Act3D0Data {
    campBasicInfo: Torappu.ListDict<System.String,Torappu.Act3D0Data.CampBasicInfo>;
    limitedPoolList: System.Collections.Generic.Dictionary<System.String,Torappu.Act3D0Data.LimitedPoolDetailInfo>;
    infinitePoolList: System.Collections.Generic.Dictionary<System.String,Torappu.Act3D0Data.InfinitePoolDetailInfo>;
    infinitePercent: System.Collections.Generic.Dictionary<System.String,Torappu.Act3D0Data.InfinitePoolPercent>;
    campItemMapInfo: System.Collections.Generic.Dictionary<System.String,Torappu.Act3D0Data.CampItemMapInfo>;
    clueInfo: System.Collections.Generic.Dictionary<System.String,Torappu.Act3D0Data.ClueInfo>;
    mileStoneInfo: System.Collections.Generic.List<Torappu.Act3D0Data.MileStoneInfo>;
    mileStoneTokenId: System.String;
    coinTokenId: System.String;
    etTokenId: System.String;
    gachaBoxInfo: System.Collections.Generic.List<Torappu.Act3D0Data.GachaBoxInfo>;
    campInfo: System.Collections.Generic.Dictionary<System.String,Torappu.Act3D0Data.CampInfo>;
    zoneDesc: Torappu.ListDict<System.String,Torappu.Act3D0Data.ZoneDescInfo>;
    favorUpList: Torappu.ListDict<System.String,Torappu.CommonFavorUpInfo>;
  }
  export interface Act4D0Data {
    mileStoneItemList: System.Collections.Generic.List<Torappu.Act4D0Data.MileStoneItemInfo>;
    mileStoneStoryList: System.Collections.Generic.List<Torappu.Act4D0Data.MileStoneStoryInfo>;
    storyInfoList: System.Collections.Generic.List<Torappu.Act4D0Data.StoryInfo>;
    stageInfo: System.Collections.Generic.List<Torappu.Act4D0Data.StageJumpInfo>;
    tokenItem: Torappu.ItemBundle;
    charStoneId: System.String;
    apSupplyOutOfDateDict: System.Collections.Generic.Dictionary<System.String,System.Int64>;
    extraDropZones: System.Collections.Generic.List<System.String>;
  }
  export interface Act5D0Data {
    mileStoneInfo: System.Collections.Generic.List<Torappu.MileStoneInfo>;
    mileStoneTokenId: System.String;
    zoneDesc: Torappu.ListDict<System.String,Torappu.Act5D0Data.ZoneDescInfo>;
    missionExtraList: Torappu.ListDict<System.String,Torappu.Act5D0Data.MissionExtraInfo>;
    spReward: System.String;
  }
  export interface MileStoneInfo {
    mileStoneId: System.String;
    orderId: System.Int32;
    tokenNum: System.Int32;
    mileStoneType: Torappu.MileStoneInfo.GoodType;
    normalItem: Torappu.ItemBundle;
    IsBonus: System.Int32;
  }
  export interface Act5D1Data {
    stageCommonData: System.Collections.Generic.List<Torappu.Act5D1Data.RuneStageData>;
    runeStageData: System.Collections.Generic.List<Torappu.Act5D1Data.RuneRecurrentStateData>;
    runeUnlockDict: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<Torappu.Act5D1Data.RuneUnlockData>>;
    runeReleaseData: System.Collections.Generic.List<Torappu.Act5D1Data.RuneReleaseData>;
    missionData: System.Collections.Generic.List<Torappu.MissionData>;
    missionGroup: System.Collections.Generic.List<Torappu.MissionGroup>;
    useBenefitMissionDict: System.Collections.Generic.Dictionary<System.String,System.Boolean>;
    shopData: Torappu.Act5D1Data.ShopData;
    coinItemId: System.String;
    ptItemId: System.String;
    stageRune: System.Collections.Generic.List<Torappu.RuneTable.RuneStageExtraData>;
    showRuneMissionList: System.Collections.Generic.List<System.String>;
  }
  export interface Act9D0Data {
    tokenItemId: System.String;
    keyItemId: System.String;
    zoneDescList: Torappu.ListDict<System.String,Torappu.Act9D0Data.ZoneDescInfo>;
    favorUpList: Torappu.ListDict<System.String,Torappu.Act9D0Data.FavorUpInfo>;
    subMissionInfo: System.Collections.Generic.Dictionary<System.String,Torappu.Act9D0Data.SubMissionInfo>;
    hasSubMission: System.Boolean;
    apSupplyOutOfDateDict: System.Collections.Generic.Dictionary<System.String,System.Int64>;
    newsInfoList: System.Collections.Generic.Dictionary<System.String,Torappu.Act9D0Data.ActivityNewsInfo>;
    newsServerInfoList: System.Collections.Generic.Dictionary<System.String,Torappu.Act9D0Data.ActivityNewsServerInfo>;
    miscHub: System.Collections.Generic.Dictionary<System.String,System.String>;
  }
  export interface DefaultCheckInData {
    checkInList: System.Collections.Generic.Dictionary<System.Int32,Torappu.DefaultCheckInData.CheckInDailyInfo>;
    apSupplyOutOfDateDict: System.Collections.Generic.Dictionary<System.String,System.Int64>;
  }
  export interface ActivityCollectionData {
    collections: System.Collections.Generic.List<Torappu.ActivityCollectionData.CollectionInfo>;
    apSupplyOutOfDateDict: System.Collections.Generic.Dictionary<System.String,System.Int64>;
  }
  export interface DefaultShopData {
    goodId: System.String;
    slotId: System.Int32;
    price: System.Int32;
    availCount: System.Int32;
    overrideName: System.String;
    item: Torappu.ItemBundle;
  }
  export interface DefaultZoneData {
    zoneId: System.String;
    zoneIndex: System.String;
    zoneName: System.String;
    zoneDesc: System.String;
    itemDropList: System.Collections.Generic.List<System.String>;
  }
  export interface DefaultFirstData {
    zoneList: System.Collections.Generic.List<Torappu.DefaultZoneData>;
    shopList: System.Collections.Generic.List<Torappu.DefaultShopData>;
  }
  export interface ActivityLoginData {
    description: System.String;
    itemList: System.Collections.Generic.List<Torappu.ItemBundle>;
    apSupplyOutOfDateDict: System.Collections.Generic.Dictionary<System.String,System.Int64>;
  }
  export interface ActivityMiniStoryData {
    tokenItemId: System.String;
    zoneDescList: Torappu.ListDict<System.String,Torappu.ActivityMiniStoryData.ZoneDescInfo>;
    favorUpList: Torappu.ListDict<System.String,Torappu.ActivityMiniStoryData.FavorUpInfo>;
    extraDropZoneList: System.Collections.Generic.List<System.String>;
  }
  export interface ActivityMultiplayData {
    stages: System.Collections.Generic.Dictionary<System.String,Torappu.ActivityMultiplayData.StageData>;
    stageGroups: System.Collections.Generic.Dictionary<System.String,Torappu.ActivityMultiplayData.StageGroupData>;
    missionExtras: System.Collections.Generic.Dictionary<System.String,Torappu.ActivityMultiplayData.MissionExtraData>;
    roomMessages: System.Collections.Generic.List<Torappu.ActivityMultiplayData.RoomMessageData>;
    constData: Torappu.ActivityMultiplayData.ConstData;
    unlockConds: System.Collections.Generic.List<Torappu.ActivityTable.CustomUnlockCond>;
  }
  export interface ActivityRoguelikeData {
    outBuffInfos: Torappu.ListDict<System.String,Torappu.ActivityRoguelikeData.OuterBuffUnlockInfoData>;
    apSupplyOutOfDateDict: System.Collections.Generic.Dictionary<System.String,System.Int64>;
    outerBuffToken: System.String;
    shopToken: System.String;
    relicUnlockTime: System.Int64;
    milestoneTokenRatio: System.Single;
    outerBuffTokenRatio: System.Single;
    relicTokenRatio: System.Single;
    relicOuterBuffTokenRatio: System.Single;
    reOpenCoolDown: System.Int32;
    tokenItem: Torappu.ItemBundle;
    charStoneId: System.String;
    milestone: System.Collections.Generic.List<Torappu.ActivityRoguelikeData.MileStoneItemInfo>;
    unlockConds: System.Collections.Generic.List<Torappu.ActivityTable.CustomUnlockCond>;
  }
  export enum ActivityType {
    DEFAULT = "DEFAULT",
    MISSION_ONLY = "MISSION_ONLY",
    CHECKIN_ONLY = "CHECKIN_ONLY",
    TYPE_ACT3D0 = "TYPE_ACT3D0",
    TYPE_ACT4D0 = "TYPE_ACT4D0",
    TYPE_ACT5D0 = "TYPE_ACT5D0",
    TYPE_ACT5D1 = "TYPE_ACT5D1",
    COLLECTION = "COLLECTION",
    AVG_ONLY = "AVG_ONLY",
    TYPE_ACT9D0 = "TYPE_ACT9D0",
    LOGIN_ONLY = "LOGIN_ONLY",
    MINISTORY = "MINISTORY",
    ROGUELIKE = "ROGUELIKE",
    PRAY_ONLY = "PRAY_ONLY",
    MULTIPLAY = "MULTIPLAY",
    TYPE_ACT17D7 = "TYPE_ACT17D7",
    GRID_GACHA = "GRID_GACHA",
    ENUM = "ENUM",
  }
  export enum ActivityDisplayType {
    NONE = "NONE",
    SIDESTORY = "SIDESTORY",
    BRANCHLINE = "BRANCHLINE",
    MINISTORY = "MINISTORY",
  }
  export interface ActivityTypeString {
    DEFAULT: System.String;
    MISSION_ONLY: System.String;
    CHECKIN_ONLY: System.String;
    TYPE_ACT3D0: System.String;
    TYPE_ACT4D0: System.String;
    TYPE_ACT5D0: System.String;
    TYPE_ACT5D1: System.String;
    COLLECTION: System.String;
    AVG_ONLY: System.String;
    TYPE_ACT9D0: System.String;
    LOGIN_ONLY: System.String;
    MINISTORY: System.String;
    ROGUELIKE: System.String;
    PRAY_ONLY: System.String;
    MULTIPLAY: System.String;
    TYPE_ACT17D7: System.String;
    GRID_GACHA: System.String;
  }
  export interface CommonFavorUpInfo {
    charId: System.String;
    displayStartTime: System.Int64;
    displayEndTime: System.Int64;
  }
  export interface ActivityTable {
    basicInfo: Torappu.ListDict<System.String,Torappu.ActivityTable.BasicData>;
    zoneToActivity: Torappu.ListDict<System.String,System.String>;
    missionData: System.Collections.Generic.List<Torappu.MissionData>;
    missionGroup: System.Collections.Generic.List<Torappu.MissionGroup>;
    activity: Torappu.ActivityTable.ActivityDetailTable;
    activityItems: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<System.String>>;
    syncPoints: Torappu.ListDict<System.String,System.Collections.Generic.List<System.Int64>>;
    dynActs: System.Collections.Generic.Dictionary<System.String,Newtonsoft.Json.Linq.JObject>;
  }
  export enum AnnounceGroup {
    ACTIVITY = "ACTIVITY",
    SYSTEM = "SYSTEM",
    ENUM = "ENUM",
  }
  export interface PreAnnounceData {
    preAnnounceId: System.String;
    preAnnounceType: Torappu.PreAnnounceData.PreAnnounceType;
    preAnnounceUrl: System.String;
  }
  export interface AnnounceData {
    announceList: System.Collections.Generic.List<Torappu.AnnounceSinglePageData>;
    focusAnnounceId: System.String;
  }
  export interface AnnounceSinglePageData {
    announceId: System.String;
    title: System.String;
    isWebUrl: System.Boolean;
    group: Torappu.AnnounceGroup;
    webUrl: System.String;
    day: System.Int32;
    month: System.Int32;
  }
  export interface AttributeMetaAttribute {
    Attribute: Torappu.AttributeType;
    KeepLowerValue: System.Boolean;
    // m_min: System.Single;
    // m_max: System.Single;
    // m_hasMin: System.Boolean;
    // m_hasMax: System.Boolean;
  }
  export interface AbnormalImmuneMetaAttribute {
    AbnormalFlag: Torappu.AbnormalFlag;
  }
  export interface AbnormalComboImmuneMetaAttribute {
    AbnormalCombo: Torappu.AbnormalCombo;
  }
  export interface AttributesData {
    ZERO: Torappu.AttributesData;
    // maxHp: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
    // atk: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
    // def: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
    // magicResistance: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
    // cost: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
    // blockCnt: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
    // moveSpeed: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
    // attackSpeed: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
    // baseAttackTime: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
    // respawnTime: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
    // hpRecoveryPerSec: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
    // spRecoveryPerSec: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
    // maxDeployCount: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
    // maxDeckStackCnt: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
    // tauntLevel: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
    // massLevel: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
    // baseForceLevel: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
    // abilityRangeForwardExtend: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
    // defPenetrate: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
    // magicResistPenetrate: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
    // hpRecoveryPerSecByMaxHpRatio: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
    // defPenetrateFixed: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
    // oneMinusStatusResistance: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
    // magicResistPenetrateFixed: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
    // maxEp: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
    // epRecoveryPerSec: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
    stunImmune: System.Boolean;
    silenceImmune: System.Boolean;
    sleepImmune: System.Boolean;
  }
  export interface AttributesDeltaData {
  }
  export interface AttributeModifierData {
    abnormalFlags: System.Collections.Generic.List<Torappu.AbnormalFlag>;
    abnormalImmunes: System.Collections.Generic.List<Torappu.AbnormalFlag>;
    abnormalAntis: System.Collections.Generic.List<Torappu.AbnormalFlag>;
    abnormalCombos: System.Collections.Generic.List<Torappu.AbnormalCombo>;
    abnormalComboImmunes: System.Collections.Generic.List<Torappu.AbnormalCombo>;
    attributeModifiers: Torappu.AttributeModifierData.AttributeModifier[];
  }
  export interface Blackboard {
  }
  export interface BuffData {
    attributes: Torappu.AttributeModifierData;
    buffKey: System.String;
    loadFromDB: System.Boolean;
    isSilenceable: System.Boolean;
    isStunnable: System.Boolean;
    statusResistable: Torappu.BuffData.StatusResistable;
    templateKey: System.String;
    disableOverride: System.Boolean;
    overrideKey: System.String;
    overrideType: Torappu.BuffData.OverrideType;
    maxStackCnt: System.Int32;
    maxValidStackCnt: System.Int32;
    overrideEffectKey: System.String;
    overrideOnEventPriority: System.Boolean;
    onEventPriority: Torappu.BuffData.OnEventPriority;
    audioSignal: System.String;
    lifeTimeType: Torappu.LifeType;
    takeSnapshotWhenExtend: System.Boolean;
    durationKey: System.String;
    lifeTime: System.Single;
    triggerLifeType: Torappu.LifeType;
    triggerCnt: System.Int32;
    triggerInterval: System.Single;
    waitFirstTriggerInterval: System.Boolean;
    firstTriggerInterval: System.Single;
    priority: System.Int32;
    priorityBBKeys: System.String[];
    stripBlackboardParamsWithBuffKey: System.Boolean;
    blackboard: System.Collections.Generic.List<Torappu.Blackboard.DataPair>;
  }
  export interface BuildingData {
    CONTROL_STOREY_ID: System.String;
    controlSlotId: System.String;
    meetingSlotId: System.String;
    initMaxLabor: System.Int32;
    laborRecoverTime: System.Int32;
    manufactInputCapacity: System.Int32;
    shopCounterCapacity: System.Int32;
    comfortLimit: System.Int32;
    creditInitiativeLimit: System.Int32;
    creditPassiveLimit: System.Int32;
    creditComfortFactor: System.Int32;
    creditGuaranteed: System.Int32;
    creditCeiling: System.Int32;
    manufactUnlockTips: System.String;
    shopUnlockTips: System.String;
    manufactStationBuff: System.Single;
    comfortManpowerRecoverFactor: System.Int32;
    manpowerDisplayFactor: System.Int32;
    shopOutputRatio: Torappu.ListDict<System.String,System.Int32>;
    shopStackRatio: Torappu.ListDict<System.String,System.Int32>;
    basicFavorPerDay: System.Int32;
    humanResourceLimit: System.Int32;
    tiredApThreshold: System.Int64;
    processedCountRatio: System.Int32;
    tradingStrategyUnlockLevel: System.Int32;
    tradingReduceTimeUnit: System.Int32;
    tradingLaborCostUnit: System.Int32;
    manufactReduceTimeUnit: System.Int32;
    manufactLaborCostUnit: System.Int32;
    laborAssistUnlockLevel: System.Int32;
    apToLaborUnlockLevel: System.Int32;
    apToLaborRatio: System.Int32;
    socialResourceLimit: System.Int32;
    socialSlotNum: System.Int32;
    furniDuplicationLimit: System.Int32;
    manufactManpowerCostByNum: System.Int32[];
    tradingManpowerCostByNum: System.Int32[];
    roomUnlockConds: System.Collections.Generic.Dictionary<System.String,Torappu.BuildingData.RoomUnlockCond>;
    rooms: System.Collections.Generic.Dictionary<System.String,Torappu.BuildingData.RoomData>;
    layouts: System.Collections.Generic.Dictionary<System.String,Torappu.BuildingData.LayoutData>;
    prefabs: System.Collections.Generic.Dictionary<System.String,Torappu.BuildingData.PrefabInfo>;
    controlData: Torappu.BuildingData.ControlRoomBean;
    manufactData: Torappu.BuildingData.ManufactRoomBean;
    shopData: Torappu.BuildingData.RoomBean<Torappu.BuildingData.ShopPhase>;
    hireData: Torappu.BuildingData.HireRoomBean;
    dormData: Torappu.BuildingData.RoomBean<Torappu.BuildingData.DormPhase>;
    meetingData: Torappu.BuildingData.MeetingRoomBean;
    tradingData: Torappu.BuildingData.TradingRoomBean;
    workshopData: Torappu.BuildingData.RoomBean<Torappu.BuildingData.WorkshopPhase>;
    trainingData: Torappu.BuildingData.TrainingBean;
    powerData: Torappu.BuildingData.PowerRoomBean;
    chars: System.Collections.Generic.Dictionary<System.String,Torappu.BuildingData.BuildingCharacter>;
    buffs: System.Collections.Generic.Dictionary<System.String,Torappu.BuildingData.BuildingBuff>;
    customData: Torappu.BuildingData.CustomData;
    manufactFormulas: System.Collections.Generic.Dictionary<System.String,Torappu.BuildingData.ManufactFormula>;
    shopFormulas: System.Collections.Generic.Dictionary<System.String,Torappu.BuildingData.ShopFormula>;
    workshopFormulas: System.Collections.Generic.Dictionary<System.String,Torappu.BuildingData.WorkshopFormula>;
    creditFormula: Torappu.BuildingData.CreditFormula;
    goldItems: System.Collections.Generic.Dictionary<System.String,System.Int32>;
    assistantUnlock: System.Collections.Generic.List<System.Int32>;
  }
  export enum CampaignStageType {
    NONE = "NONE",
    PERMANENT = "PERMANENT",
    ROTATE = "ROTATE",
    TRAINING = "TRAINING",
  }
  export interface CampaignData {
    stageId: System.String;
    isSmallScale: System.Int32;
    breakLadders: System.Collections.Generic.List<Torappu.CampaignData.BreakRewardLadder>;
    isCustomized: System.Boolean;
    dropGains: System.Collections.Generic.Dictionary<Torappu.CampaignStageType,Torappu.CampaignData.DropGainInfo>;
  }
  export interface CampaignGroupData {
    groupId: System.String;
    activeCamps: System.String[];
    startTs: System.Int64;
    endTs: System.Int64;
  }
  export interface CampaignRegionData {
    id: System.String;
    isUnknwon: System.Int32;
  }
  export interface CampaignZoneData {
    id: System.String;
    name: System.String;
    regionId: System.String;
    templateId: System.String;
  }
  export interface CampaignRotateOpenTimeData {
    groupId: System.String;
    stageId: System.String;
    mapId: System.String;
    unknownRegions: System.Collections.Generic.List<System.String>;
    duration: System.Int32;
    startTs: System.Int64;
    endTs: System.Int64;
  }
  export interface CampaignTrainingOpenTimeData {
    groupId: System.String;
    stages: System.Collections.Generic.List<System.String>;
    startTs: System.Int64;
    endTs: System.Int64;
  }
  export interface CampaignTrainingAllOpenTimeData {
    groupId: System.String;
    startTs: System.Int64;
    endTs: System.Int64;
  }
  export interface CampaignMissionData {
    id: System.String;
    sortId: System.Int32;
    param: System.String[];
    description: System.String;
    breakFeeAdd: System.Int32;
  }
  export interface CampaignConstTable {
    systemPreposedStage: System.String;
    rotateStartTime: System.Int64;
    rotatePreposedStage: System.String;
    zoneUnlockStage: System.String;
    firstRotateRegion: System.String;
  }
  export interface CampaignTable {
    campaigns: System.Collections.Generic.Dictionary<System.String,Torappu.CampaignData>;
    campaignGroups: System.Collections.Generic.Dictionary<System.String,Torappu.CampaignGroupData>;
    campaignRegions: System.Collections.Generic.Dictionary<System.String,Torappu.CampaignRegionData>;
    campaignZones: System.Collections.Generic.Dictionary<System.String,Torappu.CampaignZoneData>;
    campaignMissions: System.Collections.Generic.Dictionary<System.String,Torappu.CampaignMissionData>;
    stageIndexInZoneMap: System.Collections.Generic.Dictionary<System.String,System.Int32>;
    campaignConstTable: Torappu.CampaignConstTable;
    campaignRotateStageOpenTimes: System.Collections.Generic.List<Torappu.CampaignRotateOpenTimeData>;
    campaignTrainingStageOpenTimes: System.Collections.Generic.List<Torappu.CampaignTrainingOpenTimeData>;
    campaignTrainingAllOpenTimes: System.Collections.Generic.List<Torappu.CampaignTrainingAllOpenTimeData>;
  }
  export interface ChapterData {
    chapterId: System.String;
    chapterName: System.String;
    chapterName2: System.String;
    chapterIndex: System.Int32;
    preposedChapterId: System.String;
    startZoneId: System.String;
    endZoneId: System.String;
  }
  export enum RarityRank {
    TIER_1 = "TIER_1",
    TIER_2 = "TIER_2",
    TIER_3 = "TIER_3",
    TIER_4 = "TIER_4",
    TIER_5 = "TIER_5",
    TIER_6 = "TIER_6",
    E_NUM = "E_NUM",
  }
  export enum RarityRankMask {
    NONE = "NONE",
    TIER_1 = "TIER_1",
    TIER_2 = "TIER_2",
    TIER_3 = "TIER_3",
    TIER_4 = "TIER_4",
    TIER_5 = "TIER_5",
    TIER_6 = "TIER_6",
    ALL = "ALL",
  }
  export enum EvolvePhase {
    PHASE_0 = "PHASE_0",
    PHASE_1 = "PHASE_1",
    PHASE_2 = "PHASE_2",
    PHASE_3 = "PHASE_3",
    E_NUM = "E_NUM",
  }
  export enum HandBookRank {
    PHASE_SMALL = "PHASE_SMALL",
    PHASE_MIDDLE = "PHASE_MIDDLE",
    PHASE_LARGE = "PHASE_LARGE",
  }
  export enum ProfessionID {
    WARRIOR = "WARRIOR",
    SNIPER = "SNIPER",
    TANK = "TANK",
    MEDIC = "MEDIC",
    SUPPORT = "SUPPORT",
    CASTER = "CASTER",
    SPECIAL = "SPECIAL",
    PIONEER = "PIONEER",
    TOKEN = "TOKEN",
    TRAP = "TRAP",
  }
  export enum ProfessionCategory {
    NONE = "NONE",
    WARRIOR = "WARRIOR",
    SNIPER = "SNIPER",
    TANK = "TANK",
    MEDIC = "MEDIC",
    SUPPORT = "SUPPORT",
    CASTER = "CASTER",
    SPECIAL = "SPECIAL",
    TOKEN = "TOKEN",
    TRAP = "TRAP",
    PIONEER = "PIONEER",
  }
  export interface ProfessionCategories {
    ALL: Torappu.ProfessionCategory;
    CHARACTER: Torappu.ProfessionCategory;
  }
  export interface CharacterData {
    name: System.String;
    description: System.String;
    canUseGeneralPotentialItem: System.Boolean;
    potentialItemId: System.String;
    nationId: System.String;
    groupId: System.String;
    teamId: System.String;
    displayNumber: System.String;
    tokenKey: System.String;
    appellation: System.String;
    position: Torappu.BuildableType;
    tagList: System.String[];
    itemUsage: System.String;
    itemDesc: System.String;
    itemObtainApproach: System.String;
    isNotObtainable: System.Boolean;
    isSpChar: System.Boolean;
    maxPotentialLevel: System.Int32;
    rarity: Torappu.RarityRank;
    profession: Torappu.ProfessionCategory;
    trait: Torappu.CharacterData.TraitDataBundle;
    phases: Torappu.CharacterData.PhaseData[];
    skills: Torappu.CharacterData.MainSkill[];
    talents: Torappu.CharacterData.TalentDataBundle[];
    potentialRanks: Torappu.CharacterData.PotentialRank[];
    favorKeyFrames: Torappu.CharacterData.AttributesDeltaKeyFrame;
    allSkillLvlup: Torappu.CharacterData.SkillLevelCost[];
  }
  export interface CharacterInst {
    inst: Torappu.CharacterInst.Metadata;
    skillIndex: System.Int32;
    mainSkillLvl: System.Int32;
    skinId: System.String;
    tmplId: System.String;
    overrideSkillBlackboard: Torappu.Blackboard;
  }
  export enum SpCharMissionCondType {
    NONE = "NONE",
    EVOLVE_PHASE = "EVOLVE_PHASE",
  }
  export interface SpCharMissionData {
    charId: System.String;
    missionId: System.String;
    sortId: System.Int32;
    condType: Torappu.SpCharMissionCondType;
    param: System.Collections.Generic.List<System.String>;
    rewards: System.Collections.Generic.List<Torappu.ItemBundle>;
  }
  export interface CharMetaTable {
    spCharGroups: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<System.String>>;
    spCharMissions: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.Dictionary<System.String,Torappu.SpCharMissionData>>;
    spCharLaunchTimes: System.Collections.Generic.Dictionary<System.String,System.Int64>;
  }
  export interface CharPatchData {
    infos: System.Collections.Generic.Dictionary<System.String,Torappu.CharPatchData.PatchInfo>;
    patchChars: System.Collections.Generic.Dictionary<System.String,Torappu.CharacterData>;
    unlockConds: System.Collections.Generic.Dictionary<System.String,Torappu.CharPatchData.UnlockCond>;
    patchDetailInfoList: System.Collections.Generic.Dictionary<System.String,Torappu.CharPatchData.PatchDetailInfo>;
  }
  export interface CharVoucherInfo {
    charList: System.Collections.Generic.List<Torappu.ItemBundle>;
    vaildTimeInfo: Torappu.CharVoucherValidInfo;
  }
  export interface CharVoucherValidInfo {
    startTs: System.Int64;
    endTs: System.Int64;
  }
  export interface CharVoucherData {
    charVoucherInfo: System.Collections.Generic.Dictionary<System.String,Torappu.CharVoucherInfo>;
  }
  export interface CharWordData {
    ILLUST_SHOW_TYPES: System.Collections.Generic.HashSet<Torappu.CharWordShowType>;
    charWordId: System.String;
    wordKey: System.String;
    charId: System.String;
    voiceId: System.String;
    voiceText: System.String;
    voiceTitle: System.String;
    voiceIndex: System.Int32;
    voiceType: Torappu.CharWordVoiceType;
    unlockType: Torappu.DataUnlockType;
    unlockParam: System.Collections.Generic.List<Torappu.CharWordUnlockParam>;
    lockDescription: System.String;
    placeType: Torappu.CharWordShowType;
    voiceAsset: System.String;
  }
  export enum CharWordShowType {
    HOME_SHOW = "HOME_SHOW",
    HOME_PLACE = "HOME_PLACE",
    HOME_WAIT = "HOME_WAIT",
    GACHA = "GACHA",
    EVOLVE_ONE = "EVOLVE_ONE",
    EVOLVE_TWO = "EVOLVE_TWO",
    FOUR_STAR = "FOUR_STAR",
    THREE_STAR = "THREE_STAR",
    TWO_STAR = "TWO_STAR",
    LOSE = "LOSE",
    LEVEL_UP = "LEVEL_UP",
    SQUAD = "SQUAD",
    SQUAD_FIRST = "SQUAD_FIRST",
    BATTLE_START = "BATTLE_START",
    BATTLE_FACE_ENEMY = "BATTLE_FACE_ENEMY",
    BATTLE_SELECT = "BATTLE_SELECT",
    BATTLE_PLACE = "BATTLE_PLACE",
    BATTLE_SKILL_1 = "BATTLE_SKILL_1",
    BATTLE_SKILL_2 = "BATTLE_SKILL_2",
    BATTLE_SKILL_3 = "BATTLE_SKILL_3",
    BATTLE_SKILL_4 = "BATTLE_SKILL_4",
    BUILDING_PLACE = "BUILDING_PLACE",
    BUILDING_DRAGGING = "BUILDING_DRAGGING",
    BUILDING_FAVOR_BUBBLE = "BUILDING_FAVOR_BUBBLE",
    BUILDING_TOUCHING = "BUILDING_TOUCHING",
    LOADING_PANEL = "LOADING_PANEL",
    BIRTHDAY = "BIRTHDAY",
    NEW_YEAR = "NEW_YEAR",
    VALENT_DAY = "VALENT_DAY",
    DRAGON_BOAT_FESTIVAL = "DRAGON_BOAT_FESTIVAL",
    HALLOWEEN_DAY = "HALLOWEEN_DAY",
    CHRISMATS_DAY = "CHRISMATS_DAY",
    GREETING = "GREETING",
    UNUSED = "UNUSED",
    E_ALL = "E_ALL",
  }
  export enum CharWordVoiceType {
    ONLY_TEXT = "ONLY_TEXT",
    HAVE_CV = "HAVE_CV",
    ENUM = "ENUM",
  }
  export interface CharWordUnlockParam {
    valueStr: System.String;
    valueInt: System.Int32;
  }
  export interface BattleVoiceOption {
    INVALID: Torappu.BattleVoiceOption;
    voiceType: Torappu.BattleVoiceOption.BattleVoiceType;
    priority: System.Int32;
    overlapIfSamePriority: System.Boolean;
    cooldown: System.Single;
    delay: System.Single;
  }
  export interface BattleVoiceData {
    crossfade: System.Single;
    minTimeDeltaForEnemyEncounter: System.Single;
    minSpCostForImportantPassiveSkill: System.Int32;
    voiceTypeOptions: System.Collections.Generic.List<Torappu.BattleVoiceOption>;
  }
  export interface MonthlySignInData {
    itemId: System.String;
    itemType: Torappu.ItemType;
    count: System.Int32;
  }
  export interface MonthlySignInGroupData {
    groupId: System.String;
    title: System.String;
    description: System.String;
    signStartTime: System.Int64;
    signEndTime: System.Int64;
    items: System.Collections.Generic.List<Torappu.MonthlySignInData>;
  }
  export interface CheckInTable {
    groups: System.Collections.Generic.Dictionary<System.String,Torappu.MonthlySignInGroupData>;
    MonthlySubItem: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<Torappu.ItemBundle>>;
    currentMonthlySubId: System.String;
  }
  export interface KeyFrames<TInput,TOutput> {
  }
  export interface IntKeyFrames {
  }
  export interface FloatKeyFrames {
  }
  export interface StringKeyFrames {
  }
  export interface ITimeValidInfo {
  }
  export interface CommonDataUtil {
  }
  export interface CrisisServerData {
    runeInfoList: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<Torappu.CrisisRuneData>>;
    seasonInfo: System.Collections.Generic.List<Torappu.CrisisServerData.SeasonInfo>;
    trainingInfo: Torappu.CrisisServerData.TrainingInfo;
    stageRune: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.Dictionary<System.String,Torappu.RuneTable.PackedRuneData>>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_GetSeasonInfo: XLua.DelegateBridge;
  }
  export enum CrisisStageType {
    TEMPORARY = "TEMPORARY",
    PERMANENT = "PERMANENT",
    TRAINING = "TRAINING",
  }
  export interface CrisisStageData {
    stageId: System.String;
    levelId: System.String;
    mapId: System.String;
    code: System.String;
    name: System.String;
    loadingPicId: System.String;
    description: System.String;
    picId: System.String;
    logoPicId: System.String;
    slotId: System.Int32;
    type: Torappu.CrisisStageType;
  }
  export interface CrisisLevelChallengeInfo {
    pointCount: System.Int32;
    shopCoin: System.Int32;
    runeCoin: System.Int32;
    itemReward: Torappu.ItemBundle;
    descrption: System.String;
  }
  export interface CrisisPermStageGroup {
    stageId: System.String;
    runeList: System.Collections.Generic.List<Torappu.CrisisPermStageRuneInfo>;
    stagePointLevelInfo: System.Collections.Generic.Dictionary<System.Int32,Torappu.CrisisLevelChallengeInfo>;
    stageChallengeInfo: System.Collections.Generic.List<Torappu.CrisisMissionRuneInfo>;
  }
  export interface CrisisTempStageGroup {
    runeGroupId: System.String;
    stageId: System.String;
    runeList: System.Collections.Generic.List<System.String>;
    stagePointLevelInfo: System.Collections.Generic.Dictionary<System.Int32,Torappu.CrisisLevelChallengeInfo>;
    stageChallengeInfo: System.Collections.Generic.List<Torappu.CrisisMissionRuneInfo>;
  }
  export interface CrisisMissionRuneInfo {
    challengeId: System.String;
    slotIndex: System.Int32;
    shopCoin: System.Int32;
    runeCoin: System.Int32;
    itemReward: Torappu.ItemBundle;
    descrption: System.String;
    ableToUseBenefit: System.Boolean;
    unlockTime: System.Int64;
    runes: System.Collections.Generic.List<System.String>;
    stageId: System.String;
  }
  export interface CrisisRuneData {
    stageId: System.String;
    runeId: System.String;
    iconId: System.String;
    bgPicId: System.String;
    sortId: System.Int32;
    groupType: System.String;
    runeName: System.String;
  }
  export interface CrisisMapRankInfo {
    rewards: System.Collections.Generic.List<Torappu.ItemBundle>;
    unlockPoint: System.Int32;
  }
  export interface CrisisPermStageRuneInfo {
    runeId: System.String;
    unlockPercent: System.Int32;
  }
  export interface CrisisClientData {
    seasonInfo: System.Collections.Generic.List<Torappu.CrisisClientData.SeasonInfo>;
    tempAppraise: Torappu.StringKeyFrames;
    permAppraise: Torappu.StringKeyFrames;
    mapRankInfo: System.Collections.Generic.Dictionary<System.Int32,Torappu.CrisisMapRankInfo>;
    meta: System.String;
    unlockCoinLv3: System.Int32;
    hardPointPerm: System.Int32;
    hardPointTemp: System.Int32;
    crisisRuneCoinUnlockItemTitle: System.String;
    crisisRuneCoinUnlockItemDesc: System.String;
  }
  export interface EnemyDatabase {
    enemies: System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<System.String,System.Collections.Generic.List<Torappu.EnemyDatabase.EnemyLevel>>>;
  }
  export interface IUndefinable {
  }
  export interface Undefinable<T> {
    DEFAULT: Torappu.Undefinable<T>;
    // m_defined: System.Boolean;
    // m_value: T;
  }
  export enum EnemyLevelType {
    NORMAL = "NORMAL",
    ELITE = "ELITE",
    BOSS = "BOSS",
  }
  export interface EnemyHandBookData {
    enemyId: System.String;
    enemyIndex: System.String;
    enemyTags: System.String[];
    sortId: System.Int32;
    name: System.String;
    enemyRace: System.String;
    enemyLevel: Torappu.EnemyLevelType;
    description: System.String;
    attackType: System.String;
    endure: System.String;
    attack: System.String;
    defence: System.String;
    resistance: System.String;
    ability: System.String;
    isInvalidKilled: System.Boolean;
    overrideKillCntInfos: System.Collections.Generic.Dictionary<System.String,System.Int32>;
  }
  export interface EPBreakBuffData {
    elementBreakDuration: System.Single;
    elementBuffs: System.Collections.Generic.List<System.String>;
  }
  export interface ExternalBuff {
    attributes: Torappu.AttributeModifierData;
  }
  export interface FavorData {
    favorPoint: System.Int32;
    percent: System.Int32;
    battlePhase: System.Int32;
  }
  export interface FavorDataFrames {
  }
  export interface FavorTable {
    maxFavor: System.Int32;
    favorFrames: Torappu.FavorDataFrames;
  }
  export interface IGachaTimeData {
  }
  export interface GachaTag {
    tagId: System.Int32;
    tagName: System.String;
    tagGroup: System.Int32;
  }
  export interface GachaPoolData {
    gachaPoolId: System.String;
    gachaPoolItems: Torappu.GachaPoolData.GachaPoolItem[];
    gachaPoolConstants: Torappu.GachaPoolData.GachaPoolConstants;
  }
  export interface GachaPoolClientData {
    gachaPoolId: System.String;
    gachaIndex: System.Int32;
    openTime: System.Int64;
    endTime: System.Int64;
    gachaPoolName: System.String;
    gachaPoolSummary: System.String;
    gachaPoolDetail: System.String;
    guarantee5Avail: System.Int32;
    guarantee5Count: System.Int32;
    LMTGSID: System.String;
    CDPrimColor: System.String;
    CDSecColor: System.String;
    gachaRuleType: Torappu.GachaRuleType;
    linkageRuleId: System.String;
    linkageParam: Newtonsoft.Json.Linq.JObject;
  }
  export interface NewbeeGachaPoolClientData {
    gachaPoolId: System.String;
    gachaIndex: System.Int32;
    gachaPoolName: System.String;
    gachaPoolDetail: System.String;
    gachaPrice: System.Int32;
    gachaTimes: System.Int32;
    gachaOffset: System.String;
  }
  export interface BasedRecruitPool {
    recruitConstants: Torappu.BasedRecruitPool.RecruitConstants;
  }
  export interface RecruitPool {
    recruitTimeTable: Torappu.RecruitPool.RecruitTime[];
  }
  export interface SpecialRecruitPool {
    recruitId: System.String;
    tagName: System.String;
    tagId: System.Int32;
    order: System.Int32;
    startDateTime: System.Int64;
    endDateTime: System.Int64;
    recruitTimeTable: Torappu.SpecialRecruitPool.SpecialRecruitCostData[];
  }
  export interface PotentialMaterialConverterConfig {
    items: System.Collections.Generic.Dictionary<System.Int32,Torappu.ItemBundle>;
  }
  export interface GachaData {
    gachaPoolClient: Torappu.GachaPoolClientData[];
    newbeeGachaPoolClient: Torappu.NewbeeGachaPoolClientData[];
    specialRecruitPool: Torappu.SpecialRecruitPool[];
    gachaTags: Torappu.GachaTag[];
    recruitPool: Torappu.RecruitPool;
    potentialMaterialConverter: Torappu.PotentialMaterialConverterConfig;
    recruitRarityTable: System.Collections.Generic.Dictionary<System.Int32,Torappu.GachaData.RecruitRange>;
    specialTagRarityTable: System.Collections.Generic.Dictionary<System.Int32,System.Collections.Generic.List<System.Int32>>;
    recruitDetail: System.String;
    carousel: System.Collections.Generic.List<Torappu.GachaData.CarouselData>;
    freeGacha: System.Collections.Generic.List<Torappu.GachaData.FreeLimitGachaData>;
    limitTenGachaItem: System.Collections.Generic.List<Torappu.GachaData.LimitTenGachaTkt>;
    linkageTenGachaItem: System.Collections.Generic.List<Torappu.GachaData.LinkageTenGachaTkt>;
  }
  export interface GachaDetailData {
    availCharInfo: Torappu.GachaDetailData.GachaAvailChar;
    upCharInfo: Torappu.GachaDetailData.GachaUpChar;
    weightUpCharInfo: Torappu.GachaDetailData.GachaWeightUpChar;
    limitedChar: System.Collections.Generic.List<System.String>;
    gachaObjList: System.Collections.Generic.List<Torappu.GachaDetailData.GachaObject>;
    showRecruit6StarHint: System.Boolean;
  }
  export enum GachaRuleType {
    NORMAL = "NORMAL",
    LIMITED = "LIMITED",
    LINKAGE = "LINKAGE",
  }
  export interface GameDataConsts {
    maxPlayerLevel: System.Int32;
    playerExpMap: System.Int32[];
    playerApMap: System.Int32[];
    maxLevel: System.Int32[][];
    characterExpMap: System.Int32[][];
    characterUpgradeCostMap: System.Int32[][];
    evolveGoldCost: System.Int32[][];
    completeGainBonus: System.Single;
    playerApRegenSpeed: System.Int32;
    maxPracticeTicket: System.Int32;
    advancedGachaCrystalCost: System.Int32;
    completeCrystalBonus: System.Int32;
    initPlayerGold: System.Int32;
    initPlayerDiamondShard: System.Int32;
    initCampaignTotalFee: System.Int32;
    initRecruitTagList: System.Int32[];
    initCharIdList: System.String[];
    attackMax: System.Single;
    defMax: System.Single;
    hpMax: System.Single;
    reMax: System.Single;
    diamondToShdRate: System.Int32;
    requestSameFriendCD: System.Int32;
    baseMaxFriendNum: System.Int32;
    hardDiamondDrop: System.Int32;
    instFinDmdShdCost: System.Int32;
    diamondMaterialToShardExchangeRatio: System.Int32;
    apBuyCost: System.Int32;
    apBuyThreshold: System.Int32;
    creditLimit: System.Int32;
    monthlySubRemainTimeLimitDays: System.Int32;
    friendAssistRarityLimit: System.Collections.Generic.List<System.Int32>;
    richTextStyles: System.Collections.Generic.Dictionary<System.String,System.String>;
    charAssistRefreshTime: System.Collections.Generic.List<Torappu.GameDataConsts.CharAssistRefreshTimeState>;
    normalRecruitLockedString: System.Collections.Generic.List<System.String>;
    commonPotentialLvlUpCount: System.Int32;
    weeklyOverrideDesc: System.String;
    voucherDiv: System.Int32;
    recruitPoolVersion: System.Int32;
    v006RecruitTimeStep1Refresh: System.Int64;
    v006RecruitTimeStep2Check: System.Int64;
    v006RecruitTimeStep2Flush: System.Int64;
    buyApTimeNoLimitFlag: System.Boolean;
    isLMGTSEnabled: System.Boolean;
    crisisUnlockStage: System.String;
    legacyTime: System.Int64;
    legacyItemList: Torappu.ItemBundle[];
    useAssistSocialPt: System.Int32;
    useAssistSocialPtMaxCount: System.Int32;
    assistBeUsedSocialPt: Torappu.ListDict<System.Int32,System.Int32>;
    pushForces: System.Single[];
    pushForceZeroIndex: System.Int32;
    normalGachaUnlockPrice: System.Int32[];
    pullForces: System.Single[];
    pullForceZeroIndex: System.Int32;
    multiInComeByRank: System.String[];
    LMTGSToEPGSRatio: System.Int32;
    newBeeGiftEPGS: System.Int32;
    lMTGSDescConstOne: System.String;
    lMTGSDescConstTwo: System.String;
    defCDPrimColor: System.String;
    defCDSecColor: System.String;
    mailBannerType: System.Collections.Generic.List<System.String>;
    monthlySubWarningTime: System.Int64;
    UnlimitSkinOutOfTime: System.Int64;
    replicateShopStartTime: System.Int64;
    operatorRecordsStartTime: System.Int64;
    isDynIllustEnabled: System.Boolean;
    voucherSkinRedeem: System.Int32;
    voucherSkinDesc: System.String;
    termDescriptionDict: System.Collections.Generic.Dictionary<System.String,Torappu.TermDescriptionData>;
  }
  export interface HandbookUnlockParam {
    unlockType: Torappu.DataUnlockType;
    unlockParam1: System.String;
    unlockParam2: System.String;
    unlockParam3: System.String;
  }
  export enum DataUnlockType {
    DIRECT = "DIRECT",
    AWAKE = "AWAKE",
    FAVOR = "FAVOR",
    STAGE = "STAGE",
    ITEM = "ITEM",
    NEVER = "NEVER",
    PATCH = "PATCH",
    NONE = "NONE",
  }
  export interface HandBookInfoTextViewData {
    infoList: System.Collections.Generic.List<Torappu.HandBookInfoTextViewData.InfoTextAudio>;
    unLockorNot: System.Boolean;
    unLockType: Torappu.DataUnlockType;
    unLockParam: System.String;
    unLockLevel: System.Int32;
    unLockLevelAdditive: System.Int32;
    unLockString: System.String;
  }
  export interface HandbookStoryStageData {
    charId: System.String;
    stageId: System.String;
    levelId: System.String;
    zoneId: System.String;
    code: System.String;
    name: System.String;
    loadingPicId: System.String;
    description: System.String;
    unlockParam: System.Collections.Generic.List<Torappu.HandbookUnlockParam>;
    rewardItem: System.Collections.Generic.List<Torappu.ItemBundle>;
    stageNameForShow: System.String;
    zoneNameForShow: System.String;
    picId: System.String;
    stageGetTime: System.Int64;
  }
  export interface HandbookAvgData {
    storyId: System.String;
    storySetId: System.String;
    storySort: System.Int32;
    storyCanShow: System.Boolean;
    storyIntro: System.String;
    storyInfo: System.String;
    storyTxt: System.String;
  }
  export interface HandbookAvgGroupData {
    storySetId: System.String;
    storySetName: System.String;
    sortId: System.Int32;
    storyGetTime: System.Int64;
    rewardItem: System.Collections.Generic.List<Torappu.ItemBundle>;
    unlockParam: System.Collections.Generic.List<Torappu.HandbookUnlockParam>;
    avgList: System.Collections.Generic.List<Torappu.HandbookAvgData>;
    charId: System.String;
  }
  export interface HandBookStoryViewData {
    stories: System.Collections.Generic.List<Torappu.HandBookStoryViewData.StoryText>;
    storyTitle: System.String;
    unLockorNot: System.Boolean;
  }
  export interface HandbookInfoData {
    charID: System.String;
    drawName: System.String;
    infoName: System.String;
    storyTextAudio: Torappu.HandBookStoryViewData[];
    handbookAvgList: System.Collections.Generic.List<Torappu.HandbookAvgGroupData>;
  }
  export interface HandbookTeamMission {
    id: System.String;
    sort: System.Int32;
    powerId: System.String;
    powerName: System.String;
    item: Torappu.ItemBundle;
    favorPoint: System.Int32;
  }
  export interface HandbookDisplayCondition {
    charId: System.String;
    conditionCharId: System.String;
    type: Torappu.HandbookDisplayCondition.DisplayType;
  }
  export interface HandbookInfoTable {
    handbookDict: System.Collections.Generic.Dictionary<System.String,Torappu.HandbookInfoData>;
    npcDict: System.Collections.Generic.Dictionary<System.String,Torappu.NPCData>;
    teamMissionList: System.Collections.Generic.Dictionary<System.String,Torappu.HandbookTeamMission>;
    handbookDisplayConditionList: System.Collections.Generic.Dictionary<System.String,Torappu.HandbookDisplayCondition>;
    handbookStageData: System.Collections.Generic.Dictionary<System.String,Torappu.HandbookStoryStageData>;
  }
  export interface HandbookTeamData {
    powerId: System.String;
    orderNum: System.Int32;
    powerLevel: System.Int32;
    powerName: System.String;
    powerCode: System.String;
    color: System.String;
    isLimited: System.Boolean;
    isRaw: System.Boolean;
  }
  export enum ItemType {
    NONE = "NONE",
    CHAR = "CHAR",
    CARD_EXP = "CARD_EXP",
    MATERIAL = "MATERIAL",
    GOLD = "GOLD",
    EXP_PLAYER = "EXP_PLAYER",
    TKT_TRY = "TKT_TRY",
    TKT_RECRUIT = "TKT_RECRUIT",
    TKT_INST_FIN = "TKT_INST_FIN",
    TKT_GACHA = "TKT_GACHA",
    ACTIVITY_COIN = "ACTIVITY_COIN",
    DIAMOND = "DIAMOND",
    DIAMOND_SHD = "DIAMOND_SHD",
    HGG_SHD = "HGG_SHD",
    LGG_SHD = "LGG_SHD",
    FURN = "FURN",
    AP_GAMEPLAY = "AP_GAMEPLAY",
    AP_BASE = "AP_BASE",
    SOCIAL_PT = "SOCIAL_PT",
    CHAR_SKIN = "CHAR_SKIN",
    TKT_GACHA_10 = "TKT_GACHA_10",
    TKT_GACHA_PRSV = "TKT_GACHA_PRSV",
    AP_ITEM = "AP_ITEM",
    AP_SUPPLY = "AP_SUPPLY",
    RENAMING_CARD = "RENAMING_CARD",
    RENAMING_CARD_2 = "RENAMING_CARD_2",
    ET_STAGE = "ET_STAGE",
    ACTIVITY_ITEM = "ACTIVITY_ITEM",
    VOUCHER_PICK = "VOUCHER_PICK",
    VOUCHER_CGACHA = "VOUCHER_CGACHA",
    VOUCHER_MGACHA = "VOUCHER_MGACHA",
    CRS_SHOP_COIN = "CRS_SHOP_COIN",
    CRS_RUNE_COIN = "CRS_RUNE_COIN",
    LMTGS_COIN = "LMTGS_COIN",
    EPGS_COIN = "EPGS_COIN",
    LIMITED_TKT_GACHA_10 = "LIMITED_TKT_GACHA_10",
    LIMITED_FREE_GACHA = "LIMITED_FREE_GACHA",
    REP_COIN = "REP_COIN",
    ROGUELIKE = "ROGUELIKE",
    LINKAGE_TKT_GACHA_10 = "LINKAGE_TKT_GACHA_10",
    VOUCHER_ELITE_II_5 = "VOUCHER_ELITE_II_5",
    VOUCHER_SKIN = "VOUCHER_SKIN",
    RETRO_COIN = "RETRO_COIN",
  }
  export enum ItemRarity {
    TIER_1 = "TIER_1",
    TIER_2 = "TIER_2",
    TIER_3 = "TIER_3",
    TIER_4 = "TIER_4",
    TIER_5 = "TIER_5",
    TIER_6 = "TIER_6",
    E_NUM = "E_NUM",
  }
  export enum OccPer {
    ALWAYS = "ALWAYS",
    ALMOST = "ALMOST",
    USUAL = "USUAL",
    OFTEN = "OFTEN",
    SOMETIMES = "SOMETIMES",
    NEVER = "NEVER",
  }
  export enum ItemClassifyType {
    NONE = "NONE",
    CONSUME = "CONSUME",
    NORMAL = "NORMAL",
    MATERIAL = "MATERIAL",
  }
  export interface InventoryData {
    items: System.Collections.Generic.Dictionary<System.String,Torappu.ItemData>;
    expItems: System.Collections.Generic.Dictionary<System.String,Torappu.ExpItemFeature>;
    potentialItems: System.Collections.Generic.Dictionary<System.Int32,System.Collections.Generic.Dictionary<System.String,System.String>>;
    apSupplies: System.Collections.Generic.Dictionary<System.String,Torappu.ApSupplyFeature>;
    uniqueInfo: System.Collections.Generic.Dictionary<System.String,System.Int32>;
    itemTimeLimit: System.Collections.Generic.Dictionary<System.String,System.Int32>;
  }
  export interface ItemData {
    itemId: System.String;
    name: System.String;
    description: System.String;
    rarity: Torappu.ItemRarity;
    iconId: System.String;
    overrideBkg: System.String;
    stackIconId: System.String;
    sortId: System.Int32;
    usage: System.String;
    obtainApproach: System.String;
    classifyType: Torappu.ItemClassifyType;
    itemType: Torappu.ItemType;
    stageDropList: System.Collections.Generic.List<Torappu.ItemData.StageDropInfo>;
    buildingProductList: System.Collections.Generic.List<Torappu.ItemData.BuildingProductInfo>;
  }
  export interface ItemBundle {
    id: System.String;
    count: System.Int32;
    type: Torappu.ItemType;
  }
  export interface WeightItemBundle {
    id: System.String;
    type: Torappu.ItemType;
    dropType: Torappu.StageDropType;
    count: System.Int32;
    weight: System.Int32;
  }
  export interface ExpItemFeature {
    id: System.String;
    gainExp: System.Int32;
  }
  export interface ApSupplyFeature {
    id: System.String;
    ap: System.Int32;
    hasTs: System.Boolean;
  }
  export interface CharItemFeature {
    id: System.String;
    charId: System.String;
  }
  export interface RouteData {
    motionMode: Torappu.MotionMode;
    startPosition: Torappu.GridPosition;
    endPosition: Torappu.GridPosition;
    // spawnRandomRange: UnityEngine.Vector2;
    // spawnOffset: UnityEngine.Vector2;
    checkpoints: Torappu.RouteData.CheckpointData[];
    allowDiagonalMove: System.Boolean;
    visitEveryTileCenter: System.Boolean;
    visitEveryNodeCenter: System.Boolean;
    visitEveryCheckPoint: System.Boolean;
  }
  export interface LevelData {
    options: Torappu.LevelData.Options;
    levelId: System.String;
    mapId: System.String;
    bgmEvent: System.String;
    environmentSe: System.String;
    mapData: Torappu.MapData;
    tilesDisallowToLocate: System.Collections.Generic.List<Torappu.GridPosition>;
    runes: Torappu.LegacyInLevelRuneData[];
    globalBuffs: Torappu.LevelData.GlobalBuffData[];
    routes: Torappu.RouteData[];
    extraRoutes: Torappu.RouteData[];
    enemies: Torappu.LevelData.EnemyData[];
    enemyDbRefs: Torappu.LevelData.EnemyDataDbReference[];
    waves: Torappu.LevelData.WaveData[];
    branches: Torappu.ListDict<System.String,Torappu.LevelData.BranchData>;
    predefines: Torappu.LevelData.PredefinedData;
    hardPredefines: Torappu.LevelData.PredefinedData;
    excludeCharIdList: System.String[];
    randomSeed: System.Int32;
    operaConfig: System.String;
  }
  export enum CheckpointType {
    MOVE = "MOVE",
    WAIT_FOR_SECONDS = "WAIT_FOR_SECONDS",
    WAIT_FOR_PLAY_TIME = "WAIT_FOR_PLAY_TIME",
    WAIT_CURRENT_FRAGMENT_TIME = "WAIT_CURRENT_FRAGMENT_TIME",
    WAIT_CURRENT_WAVE_TIME = "WAIT_CURRENT_WAVE_TIME",
    DISAPPEAR = "DISAPPEAR",
    APPEAR_AT_POS = "APPEAR_AT_POS",
    ALERT = "ALERT",
  }
  export interface MapEffectData {
    key: System.String;
    // offset: UnityEngine.Vector3;
    direction: Torappu.SharedConsts.Direction;
  }
  export interface TileData {
    tileKey: System.String;
    heightType: Torappu.TileData.HeightType;
    buildableType: Torappu.BuildableType;
    passableMask: Torappu.MotionMask;
    playerSideMask: Torappu.PlayerSideMask;
    blackboard: System.Collections.Generic.List<Torappu.Blackboard.DataPair>;
    effects: Torappu.MapEffectData[];
  }
  export interface MapData {
    map: System.Int16[][];
    tiles: Torappu.TileData[];
    blockEdges: Torappu.MapData.Edge[];
    tags: System.String[];
    effects: Torappu.MapEffectData[];
    layerRects: System.String[];
  }
  export enum MedalRarity {
    T1 = "T1",
    T1D5 = "T1D5",
    T2 = "T2",
    T2D5 = "T2D5",
    T3 = "T3",
    T3D5 = "T3D5",
  }
  export interface MedalRewardGroupData {
    groupId: System.String;
    slotId: System.Int32;
    itemList: System.Collections.Generic.List<Torappu.ItemBundle>;
  }
  export interface MedalPerData {
    medalId: System.String;
    medalName: System.String;
    medalType: System.String;
    slotId: System.Int32;
    preMedalIdList: System.String[];
    rarity: Torappu.MedalRarity;
    template: System.String;
    unlockParam: System.Collections.Generic.List<System.String>;
    getMethod: System.String;
    description: System.String;
    advancedMedal: System.String;
    originMedal: System.String;
    activeTime: System.Int64;
    getTime: System.Int64;
    medalRewardGroup: System.Collections.Generic.List<Torappu.MedalRewardGroupData>;
  }
  export interface MedalTypeData {
    medalGroupId: System.String;
    sortId: System.Int32;
    medalName: System.String;
    groupData: System.Collections.Generic.List<Torappu.MedalGroupData>;
  }
  export interface MedalGroupData {
    groupId: System.String;
    groupName: System.String;
    groupDesc: System.String;
    medalId: System.Collections.Generic.List<System.String>;
    sortId: System.Int32;
    groupBackColor: System.String;
    groupGetTime: System.Int64;
  }
  export interface MedalData {
    medalList: System.Collections.Generic.List<Torappu.MedalPerData>;
    medalTypeData: System.Collections.Generic.Dictionary<System.String,Torappu.MedalTypeData>;
  }
  export interface MeetingClueData {
    clues: System.Collections.Generic.List<Torappu.MeetingClueData.ClueData>;
    clueTypes: System.Collections.Generic.List<Torappu.MeetingClueData.ClueTypeData>;
    receiveTimeBonus: System.Collections.Generic.List<Torappu.MeetingClueData.ReceiveTimeBonus>;
    inventoryLimit: System.Int32;
    outputBasicBonus: System.Int32;
    outputOperatorsBonus: System.Int32;
    cluePointLimit: System.Int32;
    expiredDays: System.Int32;
    transferBonus: System.Int32;
    recycleBonus: System.Int32;
    expiredBonus: System.Int32;
    communicationDuration: System.Int32;
    initiatorBonus: System.Int32;
    participantsBonus: System.Int32;
  }
  export interface MissionTable {
    missions: System.Collections.Generic.Dictionary<System.String,Torappu.MissionData>;
    missionGroups: System.Collections.Generic.Dictionary<System.String,Torappu.MissionGroup>;
    periodicalRewards: System.Collections.Generic.Dictionary<System.String,Torappu.MissionDailyRewardConf>;
    weeklyRewards: System.Collections.Generic.Dictionary<System.String,Torappu.MissionWeeklyRewardConf>;
    dailyMissionPeriodInfo: System.Collections.Generic.List<Torappu.DailyMissionGroupInfo>;
  }
  export interface MissionData {
    id: System.String;
    sortId: System.Int32;
    description: System.String;
    type: Torappu.MissionType;
    preMissionIds: System.Collections.Generic.List<System.String>;
    template: System.String;
    templateType: System.String;
    param: System.String[];
    unlockCondition: System.String;
    unlockParam: System.String[];
    missionGroup: System.String;
    toPage: System.String;
    periodicalPoint: System.Int32;
    rewards: System.Collections.Generic.List<Torappu.MissionDisplayRewards>;
    backImagePath: System.String;
  }
  export interface DailyMissionGroupInfo {
    startTime: System.Int64;
    endTime: System.Int64;
    tagState: System.String;
    periodList: System.Collections.Generic.List<Torappu.DailyMissionGroupInfo.periodInfo>;
  }
  export interface MissionGroup {
    id: System.String;
    title: System.String;
    type: Torappu.MissionType;
    preMissionGroup: System.String;
    period: System.Int32[];
    rewards: System.Collections.Generic.List<Torappu.MissionDisplayRewards>;
    missionIds: System.String[];
    startTs: System.Int64;
    endTs: System.Int64;
  }
  export interface MissionDailyRewardConf {
    groupId: System.String;
    id: System.String;
    periodicalPointCost: System.Int32;
    type: Torappu.MissionType;
    sortIndex: System.Int32;
    rewards: System.Collections.Generic.List<Torappu.MissionDisplayRewards>;
  }
  export interface MissionWeeklyRewardConf {
    groupId: System.String;
    id: System.String;
    periodicalPointCost: System.Int32;
    beginTime: System.Int64;
    endTime: System.Int64;
    type: Torappu.MissionType;
    sortIndex: System.Int32;
    rewards: System.Collections.Generic.List<Torappu.MissionDisplayRewards>;
  }
  export interface MissionDisplayRewards {
    type: Torappu.ItemType;
    id: System.String;
    count: System.Int32;
  }
  export enum MissionType {
    UNKNOWN = "UNKNOWN",
    MAIN = "MAIN",
    DAILY = "DAILY",
    WEEKLY = "WEEKLY",
    GUIDE = "GUIDE",
    SUB = "SUB",
    ACTIVITY = "ACTIVITY",
    OPENSERVER = "OPENSERVER",
  }
  export enum NPCPhase {
    NONE = "NONE",
    OUTLINE = "OUTLINE",
    ALLEXIST = "ALLEXIST",
  }
  export interface NPCUnlock {
    unLockType: Torappu.DataUnlockType;
    unLockParam: System.String;
    unLockString: System.String;
  }
  export interface NPCData {
    npcId: System.String;
    name: System.String;
    appellation: System.String;
    profession: Torappu.ProfessionCategory;
    illust: System.String;
    cv: System.String;
    displayNumber: System.String;
    nationId: System.String;
    groupId: System.String;
    teamId: System.String;
    unlockDict: System.Collections.Generic.Dictionary<System.String,Torappu.NPCUnlock>;
  }
  export interface OpenServerItemData {
    itemId: System.String;
    itemType: Torappu.ItemType;
    count: System.Int32;
  }
  export interface ChainLoginData {
    order: System.Int32;
    item: Torappu.OpenServerItemData;
    colorId: System.Int32;
  }
  export interface TotalCheckinData {
    order: System.Int32;
    item: Torappu.OpenServerItemData;
    colorId: System.Int32;
  }
  export interface OpenServerData {
    openServerMissionGroup: Torappu.MissionGroup;
    openServerMissionData: System.Collections.Generic.List<Torappu.MissionData>;
    checkInData: System.Collections.Generic.List<Torappu.TotalCheckinData>;
    chainLoginData: System.Collections.Generic.List<Torappu.ChainLoginData>;
  }
  export interface OpenServerScheduleItem {
    id: System.String;
    startTs: System.Int32;
    endTs: System.Int32;
    totalCheckinDescption: System.String;
    chainLoginDescription: System.String;
    charImg: System.String;
  }
  export interface OpenServerConst {
    firstDiamondShardMailCount: System.Int32;
    initApMailEndTs: System.Int64;
  }
  export interface OpenServerSchedule {
    schedule: System.Collections.Generic.List<Torappu.OpenServerScheduleItem>;
    dataMap: System.Collections.Generic.Dictionary<System.String,Torappu.OpenServerData>;
    constant: Torappu.OpenServerConst;
  }
  export interface PlayerAvatarPerData {
    ASSISTANT_GROUP_TYPE: System.String;
    avatarId: System.String;
    avatarType: System.String;
    avatarIdSort: System.Int32;
    avatarIdDesc: System.String;
  }
  export interface PlayerAvatarGroupData {
    avatarType: System.String;
    typeName: System.String;
    avatarIdList: System.Collections.Generic.List<System.String>;
  }
  export interface PlayerAvatarData {
    defaultAvatarId: System.String;
    avatarList: System.Collections.Generic.List<Torappu.PlayerAvatarPerData>;
    avatarTypeData: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerAvatarGroupData>;
  }
  export interface RangeData {
    RANGE_STANDARD_DIRECTION: Torappu.SharedConsts.Direction;
    // s_sharedList: System.Collections.Generic.List<Torappu.GridPosition>;
    // s_sharedRemainingSet: System.Collections.Generic.HashSet<Torappu.GridPosition>;
    // s_sharedAllSet: System.Collections.Generic.HashSet<Torappu.GridPosition>;
    id: System.String;
    direction: Torappu.SharedConsts.Direction;
    grids: System.Collections.Generic.List<Torappu.GridPosition>;
    boundingBoxes: System.Collections.Generic.List<Torappu.ObscuredRect>;
    // <>f__am$cache0: System.Comparison<Torappu.GridPosition>;
  }
  export interface ObscuredRect {
    // m_xMin: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
    // m_yMin: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
    // m_width: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
    // m_height: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
  }
  export interface ReplicateTable {
    replicateList: System.Collections.Generic.List<Torappu.ReplicateData>;
  }
  export interface ReplicateData {
    item: Torappu.ItemBundle;
    replicateTokenItem: Torappu.ItemBundle;
  }
  export enum RetroType {
    SIDESTORY = "SIDESTORY",
    BRANCHLINE = "BRANCHLINE",
  }
  export interface RetroStageOverrideInfo {
    dropInfo: Torappu.StageData.StageDropInfo;
    zoneId: System.String;
    apCost: System.Int32;
    apFailReturn: System.Int32;
    expGain: System.Int32;
    goldGain: System.Int32;
    passFavor: System.Int32;
    completeFavor: System.Int32;
  }
  export interface RetroActData {
    retroId: System.String;
    type: Torappu.RetroType;
    linkedActId: System.String[];
    startTime: System.Int64;
    index: System.Int32;
    name: System.String;
    detail: System.String;
  }
  export interface RetroStageTable {
    zoneToRetro: Torappu.ListDict<System.String,System.String>;
    stageValidInfo: System.Collections.Generic.Dictionary<System.String,Torappu.StageValidInfo>;
    stages: System.Collections.Generic.Dictionary<System.String,Torappu.RetroStageOverrideInfo>;
    retroActList: System.Collections.Generic.Dictionary<System.String,Torappu.RetroActData>;
    stageList: System.Collections.Generic.Dictionary<System.String,Torappu.StageData>;
    initRetroCoin: System.Int32;
    retroCoinPerWeek: System.Int32;
    retroCoinMax: System.Int32;
    retroUnlockCost: System.Int32;
    retroDetail: System.String;
  }
  export interface RoguelikeRecruitUpgradeCharacter {
    population: System.Int32;
    isAddition: System.Int32;
    isElite: System.Int32;
    isFree: System.Int32;
    upgradePhase: System.Int32;
    upgradeLimited: System.Boolean;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
  }
  export interface RoguelikeItemBundle {
    id: System.String;
    count: System.Int32;
  }
  export interface RoguelikeShop {
    goods: System.Collections.Generic.List<Torappu.RoguelikeGoods>;
  }
  export interface RoguelikeGoods {
    instId: System.String;
    itemId: System.String;
    count: System.Int32;
    priceId: System.String;
    priceCount: System.Int32;
  }
  export interface RoguelikeChoiceScene {
    scene: System.String;
    choices: System.Collections.Generic.Dictionary<System.String,System.Boolean>;
    done: System.Boolean;
  }
  export interface RoguelikeReward {
    index: System.String;
    items: System.Collections.Generic.Dictionary<System.String,Torappu.RoguelikeItemBundle>;
    done: System.Boolean;
  }
  export interface RoguelikeStageEarn {
    exp: System.Int32;
    populationMax: System.Int32;
    squadCapacity: System.Int32;
    hp: System.Int32;
  }
  export interface RoguelikeNodePosition {
    x: System.Int32;
    y: System.Int32;
  }
  export interface RoguelikeDungeonNode {
    depth: System.Int32;
    index: System.Int32;
    type: Torappu.RoguelikeEventType;
    fts: System.Int64;
    canReach: System.Boolean;
    parents: System.Collections.Generic.List<Torappu.RoguelikeDungeonNode>;
    children: System.Collections.Generic.List<Torappu.RoguelikeDungeonNode>;
    shop: Torappu.RoguelikeShop;
    scenes: System.Collections.Generic.List<Torappu.RoguelikeChoiceScene>;
    stageId: System.String;
    battleReward: System.Collections.Generic.List<Torappu.RoguelikeReward>;
    earn: Torappu.RoguelikeStageEarn;
  }
  export interface RoguelikeDungeonLayer {
    nodes: System.Collections.Generic.List<Torappu.RoguelikeDungeonNode>;
  }
  export interface RoguelikeDungeonZone {
    zoneId: System.String;
    zoneIndex: System.Int32;
    layers: System.Collections.Generic.List<Torappu.RoguelikeDungeonLayer>;
  }
  export enum RoguelikeItemType {
    NONE = "NONE",
    HP = "HP",
    GOLD = "GOLD",
    POPULATION = "POPULATION",
    SQUAD_CAPACITY = "SQUAD_CAPACITY",
    RECRUIT_TICKET = "RECRUIT_TICKET",
    UPGRADE_TICKET = "UPGRADE_TICKET",
    RELIC = "RELIC",
  }
  export enum RoguelikeItemRarity {
    NONE = "NONE",
    BORN = "BORN",
    NORMAL = "NORMAL",
    RARE = "RARE",
    SUPER_RARE = "SUPER_RARE",
  }
  export enum RoguelikeEventType {
    NONE = "NONE",
    BATTLE_NORMAL = "BATTLE_NORMAL",
    BATTLE_ELITE = "BATTLE_ELITE",
    BATTLE_BOSS = "BATTLE_BOSS",
    SHOP = "SHOP",
    REST = "REST",
    INCIDENT = "INCIDENT",
    TREASURE = "TREASURE",
    ENTERTAINMENT = "ENTERTAINMENT",
    BATTLES = "BATTLES",
    CHOICES = "CHOICES",
    EVENTS = "EVENTS",
    ALL = "ALL",
  }
  export interface RoguelikeTable {
    constTable: Torappu.RoguelikeConstTable;
    itemTable: Torappu.RoguelikeItemTable;
    stages: System.Collections.Generic.Dictionary<System.String,Torappu.RoguelikeStageData>;
    zones: System.Collections.Generic.Dictionary<System.String,Torappu.RoguelikeZoneData>;
    choices: System.Collections.Generic.Dictionary<System.String,Torappu.RoguelikeChoiceData>;
    choiceScenes: System.Collections.Generic.Dictionary<System.String,Torappu.RoguelikeChoiceSceneData>;
    modes: System.Collections.Generic.Dictionary<System.String,Torappu.RoguelikeModeData>;
    endings: System.Collections.Generic.Dictionary<System.String,Torappu.RoguelikeEndingData>;
    outBuffs: System.Collections.Generic.Dictionary<System.String,Torappu.RoguelikeOutBuffData>;
  }
  export interface RoguelikeConstTable {
    playerLevelTable: System.Collections.Generic.Dictionary<System.Int32,Torappu.RoguelikeConstTable.PlayerLevelData>;
    recruitPopulationTable: System.Collections.Generic.Dictionary<System.Int32,Torappu.RoguelikeConstTable.RecruitData>;
    charUpgradeTable: System.Collections.Generic.Dictionary<System.Int32,Torappu.RoguelikeConstTable.CharUpgradeData>;
    eventTypeTable: System.Collections.Generic.Dictionary<Torappu.RoguelikeEventType,Torappu.RoguelikeConstTable.EventTypeData>;
    shopDialogs: System.Collections.Generic.List<System.String>;
    shopRelicDialogs: System.Collections.Generic.List<System.String>;
    shopTicketDialogs: System.Collections.Generic.List<System.String>;
    mimicEnemyIds: System.Collections.Generic.List<System.String>;
    clearZoneScores: System.Collections.Generic.List<System.Int32>;
    moveToNodeScore: System.Int32;
    clearNormalBattleScore: System.Int32;
    clearEliteBattleScore: System.Int32;
    clearBossBattleScore: System.Int32;
    gainRelicScore: System.Int32;
    gainCharacterScore: System.Int32;
    unlockRelicSpecialScore: System.Int32;
    squadCapacityMax: System.Int32;
    bossIds: System.Collections.Generic.List<System.String>;
  }
  export interface RoguelikeItemTable {
    items: System.Collections.Generic.Dictionary<System.String,Torappu.RoguelikeItemData>;
    recruitTickets: System.Collections.Generic.Dictionary<System.String,Torappu.RoguelikeRecruitTicketFeature>;
    upgradeTickets: System.Collections.Generic.Dictionary<System.String,Torappu.RoguelikeUpgradeTicketFeature>;
    relics: System.Collections.Generic.Dictionary<System.String,Torappu.RoguelikeRelicFeature>;
  }
  export interface RoguelikeItemData {
    id: System.String;
    name: System.String;
    description: System.String;
    usage: System.String;
    obtainApproach: System.String;
    iconId: System.String;
    type: Torappu.RoguelikeItemType;
    rarity: Torappu.RoguelikeItemRarity;
    value: System.Int32;
    sortId: System.Int32;
    unlockCond: System.String;
    unlockCondDesc: System.String;
    unlockCondParams: System.Collections.Generic.List<System.String>;
    stableUnlockCond: Torappu.RelicStableUnlockParam;
  }
  export interface RelicStableUnlockParam {
    unlockCondDetail: System.String;
    unlockCnt: System.Int32;
  }
  export interface RoguelikeRecruitTicketFeature {
    id: System.String;
    profession: Torappu.ProfessionCategory;
    rarity: Torappu.RarityRankMask;
    professionList: System.Collections.Generic.List<Torappu.ProfessionID>;
    rarityList: System.Collections.Generic.List<Torappu.RarityRank>;
    extraEliteNum: System.Int32;
    extraFreeRarity: System.Collections.Generic.List<Torappu.RarityRank>;
    extraCharIds: System.Collections.Generic.List<System.String>;
  }
  export interface RoguelikeUpgradeTicketFeature {
    id: System.String;
    profession: Torappu.ProfessionCategory;
    rarity: Torappu.RarityRankMask;
    professionList: System.Collections.Generic.List<Torappu.ProfessionID>;
    rarityList: System.Collections.Generic.List<Torappu.RarityRank>;
  }
  export interface RoguelikeRelicFeature {
    id: System.String;
    buffs: System.Collections.Generic.List<Torappu.RoguelikeBuff>;
  }
  export interface RoguelikeStageData {
    id: System.String;
    linkedStageId: System.String;
    levelId: System.String;
    code: System.String;
    name: System.String;
    loadingPicId: System.String;
    description: System.String;
    eliteDesc: System.String;
    isBoss: System.Int32;
    isElite: System.Int32;
    difficulty: Torappu.LevelData.Difficulty;
  }
  export interface RoguelikeZoneData {
    id: System.String;
    name: System.String;
    description: System.String;
    endingDescription: System.String;
    backgroundId: System.String;
    subIconId: System.String;
  }
  export interface RoguelikeChoiceData {
    id: System.String;
    title: System.String;
    description: System.String;
    type: System.String;
    nextSceneId: System.String;
    icon: System.String;
    param: System.Collections.Generic.Dictionary<System.String,System.Object>;
  }
  export interface RoguelikeChoiceSceneData {
    id: System.String;
    title: System.String;
    description: System.String;
    background: System.String;
  }
  export interface RoguelikeModeData {
    id: System.String;
    name: System.String;
    canUnlockItem: System.Int32;
    scoreFactor: System.Single;
    itemPools: System.Collections.Generic.List<System.String>;
    difficultyDesc: System.String;
    ruleDesc: System.String;
    sortId: System.Int32;
    unlockMode: System.String;
    color: System.String;
  }
  export interface RoguelikeEndingData {
    id: System.String;
    backgroundId: System.String;
    name: System.String;
    description: System.String;
    priority: System.Int32;
    unlockItemId: System.String;
  }
  export interface RoguelikeOutBuffData {
    id: System.String;
    buffs: System.Collections.Generic.Dictionary<System.Int32,Torappu.RoguelikeOuterBuff>;
  }
  export interface RoguelikeWeightedValue<T> {
    weight: System.Int32;
    value: T;
  }
  export interface RoguelikeBuff {
    key: System.String;
    blackboard: Torappu.Blackboard;
  }
  export interface RoguelikeOuterBuff {
    buffId: System.String;
    level: System.Int32;
    name: System.String;
    iconId: System.String;
    description: System.String;
    usage: System.String;
  }
  export interface LegacyInLevelRuneData {
    difficultyMask: Torappu.LevelData.Difficulty;
    key: System.String;
    professionMask: Torappu.ProfessionCategory;
    buildableMask: Torappu.BuildableType;
    blackboard: Torappu.Blackboard;
  }
  export interface RuneData {
    key: System.String;
    selector: Torappu.RuneData.Selector;
    blackboard: Torappu.Blackboard;
    // m_inited: System.Boolean;
  }
  export interface IRuneDataHolder {
  }
  export interface RuneTable {
    runeStages: System.Collections.Generic.List<Torappu.RuneTable.RuneStageExtraData>;
  }
  export interface CrisisData {
    mapInfo: System.Collections.Generic.Dictionary<System.String,Torappu.CrisisData.RuneMapInfo>;
    seasonInfo: System.Collections.Generic.List<Torappu.CrisisData.SeasonInfo>;
    trainingInfo: System.Collections.Generic.List<Torappu.CrisisData.TrainingInfo>;
    shopInfoList: System.Collections.Generic.List<Torappu.CrisisData.LongTermShopInfo>;
    progressGoodInfo: System.Collections.Generic.List<Torappu.CrisisData.ProgressGoodItem>;
  }
  export enum ShopCurrencyUnit {
    CASH = "CASH",
    DIAMOND = "DIAMOND",
  }
  export interface ShopKeeperWord {
    id: System.String;
    text: System.String;
  }
  export enum ShopUnlockType {
    ALWAYS_UNLOCK = "ALWAYS_UNLOCK",
    SKIN_UNLOCK = "SKIN_UNLOCK",
    FURN_UNLOCK = "FURN_UNLOCK",
    BOTH_SKIN_FURN = "BOTH_SKIN_FURN",
  }
  export enum ShopType {
    RECOMMENDSHOP = "RECOMMENDSHOP",
    CASHSHOP = "CASHSHOP",
    GIFTPACKAGE = "GIFTPACKAGE",
    SKINSHOP = "SKINSHOP",
    QCSHOP = "QCSHOP",
    SOCAILSHOP = "SOCAILSHOP",
    FURNSHOP = "FURNSHOP",
    NONE = "NONE",
  }
  export enum ShopRouteTarget {
    RECOMMENDSHOP = "RECOMMENDSHOP",
    CASHSHOP = "CASHSHOP",
    GIFTPACKAGE = "GIFTPACKAGE",
    SKINSHOP = "SKINSHOP",
    HQCSHOP = "HQCSHOP",
    LQCSHOP = "LQCSHOP",
    EXQCSHOP = "EXQCSHOP",
    SOCAILSHOP = "SOCAILSHOP",
    FURNSHOP = "FURNSHOP",
    REPSHOP = "REPSHOP",
    LMGTSSHOP = "LMGTSSHOP",
    EPGSSHOP = "EPGSSHOP",
    NONE = "NONE",
  }
  export interface ShopClientData {
    recommendList: System.Collections.Generic.List<Torappu.ShopRecommendItem>;
    creditUnlockGroup: System.Collections.Generic.Dictionary<System.String,Torappu.ShopCreditUnlockGroup>;
    shopKeeperData: Torappu.ShopClientData.ShopKeeperData;
    carousels: System.Collections.Generic.List<Torappu.ShopCarouselData>;
    chooseShopRelations: System.Collections.Generic.List<Torappu.ChooseShopRelation>;
    shopUnlockDict: System.Collections.Generic.Dictionary<System.String,Torappu.ShopUnlockType>;
    shopMonthlySubGoodId: System.String;
    limitedShopSchedule: System.Collections.Generic.List<Torappu.LMTGSShopSchedule>;
    overlaySchedule: System.Collections.Generic.List<Torappu.LMTGSShopOverlaySchedule>;
  }
  export interface LMTGSShopOverlaySchedule {
    gachaPoolId1: System.String;
    gachaPoolId2: System.String;
    picId: System.String;
  }
  export interface LMTGSShopSchedule {
    gachaPoolId: System.String;
    LMTGSId: System.String;
    iconColor: System.String;
    iconBackColor: System.String;
    startTime: System.Int64;
    endTime: System.Int64;
  }
  export enum RecommendItemTagTips {
    ONSALE = "ONSALE",
    DEADLINE = "DEADLINE",
    NONE = "NONE",
  }
  export interface ShopRecommendItem {
    tagId: System.String;
    displayType: System.String;
    tagName: System.String;
    itemTag: Torappu.RecommendItemTagTips;
    orderNum: System.Int32;
    startDatetime: System.Int64;
    endDatetime: System.Int64;
    groupList: System.Collections.Generic.List<Torappu.ShopRecommendGroup>;
    tagWord: Torappu.ShopKeeperWord;
  }
  export interface ShopRecommendGroup {
    recommendGroup: System.Int32[];
    dataList: System.Collections.Generic.List<Torappu.ShopRecommendData>;
  }
  export interface ShopRecommendData {
    imgId: System.String;
    slotIndex: System.Int32;
    cmd: Torappu.ShopRouteTarget;
    param1: System.String;
    param2: System.String;
    skinId: System.String;
    islocked: System.Boolean;
  }
  export interface ShopCreditUnlockItem {
    sortId: System.Int32;
    unlockNum: System.Int32;
    charId: System.String;
  }
  export interface ShopCreditUnlockGroup {
    id: System.String;
    index: System.String;
    startDateTime: System.Int64;
    charDict: System.Collections.Generic.List<Torappu.ShopCreditUnlockItem>;
  }
  export interface ChooseShopRelation {
    goodId: System.String;
    optionList: System.Collections.Generic.List<System.String>;
  }
  export interface ShopCarouselData {
    items: System.Collections.Generic.List<Torappu.ShopCarouselData.Item>;
  }
  export interface SpData {
    DEFAULT: Torappu.SpData;
    spType: Torappu.SpType;
    levelUpCost: Torappu.ItemBundle[];
    // maxChargeTime: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
    // spCost: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
    // initSp: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
    // increment: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
    // m_incrementsForAllSpTypes: System.Single[];
  }
  export interface ISkillData {
  }
  export interface SkillData {
    name: System.String;
    skillId: System.String;
    rangeId: System.String;
    iconId: System.String;
    level: System.Int32;
    description: System.String;
    skillType: Torappu.SkillType;
    spData: Torappu.SpData;
    prefabKey: System.String;
    duration: System.Single;
    blackboard: Torappu.Blackboard;
    isPrefabKeyOverridden: System.Boolean;
    // m_inited: System.Boolean;
  }
  export interface SkillDataBundle {
    skillId: System.String;
    iconId: System.String;
    hidden: System.Boolean;
    levels: System.Collections.Generic.List<Torappu.SkillDataBundle.LevelData>;
  }
  export enum SkinVoiceType {
    NONE = "NONE",
    ILLUST = "ILLUST",
    ALL = "ALL",
  }
  export interface CharSkinData {
    EMPTY: Torappu.CharSkinData;
    skinId: System.String;
    charId: System.String;
    tokenSkinMap: System.Collections.Generic.List<Torappu.CharSkinData.TokenSkinInfo>;
    // m_illustId: System.String;
    // m_dynIllustId: System.String;
    // m_avatarId: System.String;
    // m_portraitId: System.String;
    // m_buildingId: System.String;
    // m_battleSkin: Torappu.CharSkinData.BattleSkin;
    // m_isBuyAble: System.Boolean;
    tmplId: System.String;
    voiceId: System.String;
    voiceType: Torappu.SkinVoiceType;
    displaySkin: Torappu.CharSkinData.DisplaySkin;
  }
  export enum CharSkinUnlockType {
    BUYSKIN = "BUYSKIN",
    INITSKIN = "INITSKIN",
    ONEEVOLVESKIN = "ONEEVOLVESKIN",
    TWOEVOLVESKIN = "TWOEVOLVESKIN",
  }
  export interface CharSkinBrandInfo {
    brandId: System.String;
    groupList: System.Collections.Generic.List<System.String>;
    kvImgIdList: System.Collections.Generic.List<System.String>;
    brandName: System.String;
    description: System.String;
    sortId: System.Int32;
  }
  export interface SkinTable {
    charSkins: System.Collections.Generic.Dictionary<System.String,Torappu.CharSkinData>;
    buildinEvolveMap: System.Collections.Generic.Dictionary<System.String,Torappu.ListDict<System.Int32,System.String>>;
    buildinPatchMap: System.Collections.Generic.Dictionary<System.String,Torappu.ListDict<System.String,System.String>>;
    brandList: System.Collections.Generic.Dictionary<System.String,Torappu.CharSkinBrandInfo>;
  }
  export enum StageDropType {
    NONE = "NONE",
    ONCE = "ONCE",
    NORMAL = "NORMAL",
    SPECIAL = "SPECIAL",
    ADDITIONAL = "ADDITIONAL",
    APRETURN = "APRETURN",
    DIAMOND_MATERIAL = "DIAMOND_MATERIAL",
    FUNITURE_DROP = "FUNITURE_DROP",
    COMPLETE = "COMPLETE",
  }
  export enum AppearanceStyle {
    MAIN_NORMAL = "MAIN_NORMAL",
    MAIN_PREDEFINED = "MAIN_PREDEFINED",
    SUB = "SUB",
    TRAINING = "TRAINING",
    HIGH_DIFFICULTY = "HIGH_DIFFICULTY",
    MIST_OPS = "MIST_OPS",
    SPECIAL_STORY = "SPECIAL_STORY",
  }
  export interface StageValidInfo {
    startTs: System.Int64;
    endTs: System.Int64;
  }
  export interface StageFogInfo {
    lockId: System.String;
    fogType: Torappu.FogType;
    stageId: System.String;
    lockName: System.String;
    lockDesc: System.String;
    unlockItemId: System.String;
    unlockItemType: Torappu.ItemType;
    unlockItemNum: System.Int32;
    preposedStageId: System.String;
    preposedLockId: System.String;
  }
  export enum FogType {
    ZONE = "ZONE",
    STAGE = "STAGE",
  }
  export interface StageData {
    stageType: Torappu.StageType;
    difficulty: Torappu.LevelData.Difficulty;
    performanceStageFlag: Torappu.StageData.PerformanceStageFlag;
    unlockCondition: System.Collections.Generic.List<Torappu.StageData.ConditionDesc>;
    stageId: System.String;
    levelId: System.String;
    zoneId: System.String;
    code: System.String;
    name: System.String;
    description: System.String;
    hardStagedId: System.String;
    dangerLevel: System.String;
    dangerPoint: System.Single;
    loadingPicId: System.String;
    canPractice: System.Boolean;
    canBattleReplay: System.Boolean;
    apCost: System.Int32;
    apFailReturn: System.Int32;
    etItemId: System.String;
    etCost: System.Int32;
    etFailReturn: System.Int32;
    etButtonStyle: System.String;
    apProtectTimes: System.Int32;
    diamondOnceDrop: System.Int32;
    practiceTicketCost: System.Int32;
    dailyStageDifficulty: System.Int32;
    expGain: System.Int32;
    goldGain: System.Int32;
    loseExpGain: System.Int32;
    loseGoldGain: System.Int32;
    passFavor: System.Int32;
    completeFavor: System.Int32;
    slProgress: System.Int32;
    displayMainItem: System.String;
    hilightMark: System.Boolean;
    bossMark: System.Boolean;
    isPredefined: System.Boolean;
    isHardPredefined: System.Boolean;
    isStoryOnly: System.Boolean;
    appearanceStyle: Torappu.AppearanceStyle;
    stageDropInfo: Torappu.StageData.StageDropInfo;
    startButtonOverrideId: System.String;
    isStagePatch: System.Boolean;
    mainStageId: System.String;
    S_extraCondition: System.Collections.Generic.List<Torappu.StageData.ExtraConditionDesc>;
    S_extraInfo: System.Collections.Generic.List<Torappu.StageData.SpecialStoryInfo>;
  }
  export interface TimelyDropTimeInfo {
    startTs: System.Int64;
    endTs: System.Int64;
    stagePic: System.String;
    dropPicId: System.String;
    stageUnlock: System.String;
    entranceDownPicId: System.String;
    entranceUpPicId: System.String;
    timelyGroupId: System.String;
    weeklyPicId: System.String;
    apSupplyOutOfDateDict: System.Collections.Generic.Dictionary<System.String,System.Int64>;
  }
  export interface TimelyDropInfo {
    dropInfo: System.Collections.Generic.Dictionary<System.String,Torappu.StageData.StageDropInfo>;
  }
  export interface RuneStageGroupData {
    groupId: System.String;
    activeRuneStages: System.Collections.Generic.List<Torappu.RuneStageGroupData.RuneStageInst>;
    startTs: System.Int64;
    endTs: System.Int64;
  }
  export interface MapThemeData {
    themeId: System.String;
    unitColor: System.String;
    buildableColor: System.String;
    themeType: System.String;
  }
  export interface TileAppendInfo {
    tileKey: System.String;
    name: System.String;
    description: System.String;
    isFunctional: System.Boolean;
  }
  export interface WeeklyForceOpenTable {
    id: System.String;
    startTime: System.Int64;
    endTime: System.Int64;
    forceOpenList: System.Collections.Generic.List<System.String>;
  }
  export interface StageStartCond {
    requireChars: System.Collections.Generic.List<Torappu.StageStartCond.RequireChar>;
    excludeAssists: System.Collections.Generic.List<System.String>;
    isNotPass: System.Boolean;
  }
  export interface SpecialBattleFinishStageData {
    stageId: System.String;
    skipAccomplishPerform: System.Boolean;
  }
  export interface StageTable {
    stages: System.Collections.Generic.Dictionary<System.String,Torappu.StageData>;
    runeStageGroups: System.Collections.Generic.Dictionary<System.String,Torappu.RuneStageGroupData>;
    mapThemes: System.Collections.Generic.Dictionary<System.String,Torappu.MapThemeData>;
    tileInfo: Torappu.ListDict<System.String,Torappu.TileAppendInfo>;
    forceOpenTable: Torappu.ListDict<System.String,Torappu.WeeklyForceOpenTable>;
    timelyStageDropInfo: System.Collections.Generic.Dictionary<System.String,Torappu.TimelyDropTimeInfo>;
    timelyTable: System.Collections.Generic.Dictionary<System.String,Torappu.TimelyDropInfo>;
    stageValidInfo: System.Collections.Generic.Dictionary<System.String,Torappu.StageValidInfo>;
    stageFogInfo: System.Collections.Generic.Dictionary<System.String,Torappu.StageFogInfo>;
    stageStartConds: System.Collections.Generic.Dictionary<System.String,Torappu.StageStartCond>;
    specialBattleFinishStageData: System.Collections.Generic.Dictionary<System.String,Torappu.SpecialBattleFinishStageData>;
  }
  export interface StoryData {
    id: System.String;
    needCommit: System.Boolean;
    repeatable: System.Boolean;
    disabled: System.Boolean;
    videoResource: System.Boolean;
    trigger: Torappu.StoryData.Trigger;
    condition: Torappu.StoryData.Condition;
    setProgress: System.Int32;
    setFlags: System.String[];
    completedRewards: Torappu.ItemBundle[];
    forceOmitCommit: System.Boolean;
  }
  export interface StoryReviewInfoClientData {
    storyReviewType: Torappu.StoryReviewType;
    storyId: System.String;
    storyGroup: System.String;
    storySort: System.Int32;
    storyDependence: System.String;
    storyCanShow: System.Int32;
    storyCode: System.String;
    storyName: System.String;
    storyPic: System.String;
    storyInfo: System.String;
    storyCanEnter: System.Int32;
    storyTxt: System.String;
    avgTag: System.String;
    unLockType: Torappu.StoryReviewUnlockType;
    costItemType: Torappu.ItemType;
    costItemId: System.String;
    costItemCount: System.Int32;
    stageCount: System.Int32;
    requiredStages: Torappu.StoryData.Condition.StageCondition[];
  }
  export interface StoryReviewGroupClientData {
    id: System.String;
    name: System.String;
    entryType: Torappu.StoryReviewEntryType;
    actType: Torappu.StoryReviewType;
    startTime: System.Int64;
    endTime: System.Int64;
    startShowTime: System.Int64;
    endShowTime: System.Int64;
    remakeStartTime: System.Int64;
    remakeEndTime: System.Int64;
    storyEntryPicId: System.String;
    storyPicId: System.String;
    storyMainColor: System.String;
    storyCompleteMedalId: System.String;
    rewards: Torappu.ItemBundle[];
    infoUnlockDatas: System.Collections.Generic.List<Torappu.StoryReviewInfoClientData>;
  }
  export interface StoryReviewBriefData {
    id: System.String;
    name: System.String;
    avgTag: System.String;
    chapterName: System.String;
    infoId: System.String;
    storyId: System.String;
  }
  export enum StoryReviewUnlockType {
    STAGE_CLEAR = "STAGE_CLEAR",
    USE_ITEM = "USE_ITEM",
    NOTHING = "NOTHING",
  }
  export enum StoryReviewType {
    NONE = "NONE",
    ACTIVITY_STORY = "ACTIVITY_STORY",
    MINI_STORY = "MINI_STORY",
    MAIN_STORY = "MAIN_STORY",
  }
  export enum StoryReviewEntryType {
    NONE = "NONE",
    ACTIVITY = "ACTIVITY",
    MINI_ACTIVITY = "MINI_ACTIVITY",
    MAINLINE = "MAINLINE",
  }
  export interface TalentData {
    unlockCondition: Torappu.CharacterData.UnlockCondition;
    requiredPotentialRank: System.Int32;
    prefabKey: System.String;
    name: System.String;
    description: System.String;
    rangeId: System.String;
    blackboard: Torappu.Blackboard;
  }
  export interface DynamicAbilityData {
    prefabKey: System.String;
    blackboard: Torappu.Blackboard;
  }
  export interface TermDescriptionData {
    termId: System.String;
    termName: System.String;
    description: System.String;
  }
  export interface TipData {
    tip: System.String;
    weight: System.Single;
    category: Torappu.TipData.Category;
  }
  export interface WorldViewTip {
    title: System.String;
    description: System.String;
    backgroundPicId: System.String;
    weight: System.Single;
  }
  export interface TipTable {
    tips: Torappu.TipData[];
    worldViewTips: Torappu.WorldViewTip[];
  }
  export enum ZoneType {
    NONE = "NONE",
    MAINLINE = "MAINLINE",
    WEEKLY = "WEEKLY",
    ACTIVITY = "ACTIVITY",
    GUIDE = "GUIDE",
    TRAINING = "TRAINING",
    CAMPAIGN = "CAMPAIGN",
    SIDESTORY = "SIDESTORY",
    BRANCHLINE = "BRANCHLINE",
  }
  export enum WeeklyType {
    NONE = "NONE",
    MATERIAL = "MATERIAL",
    SPECIAL = "SPECIAL",
    EVOLVE = "EVOLVE",
  }
  export interface ZoneData {
    zoneID: System.String;
    zoneIndex: System.Int32;
    type: Torappu.ZoneType;
    zoneNameFirst: System.String;
    zoneNameSecond: System.String;
    zoneNameTitleCurrent: System.String;
    zoneNameTitleUnCurrent: System.String;
    zoneNameTitleEx: System.String;
    zoneNameThird: System.String;
    lockedText: System.String;
    canPreview: System.Boolean;
  }
  export interface WeeklyZoneData {
    daysOfWeek: System.Int32[];
    type: Torappu.WeeklyType;
  }
  export interface MainlineZoneData {
    zoneId: System.String;
    chapterId: System.String;
    preposedZoneId: System.String;
    zoneIndex: System.Int32;
    startStageId: System.String;
    endStageId: System.String;
    mainlneBgName: System.String;
  }
  export interface ZoneValidInfo {
    startTs: System.Int64;
    endTs: System.Int64;
  }
  export interface ZoneTable {
    zones: System.Collections.Generic.Dictionary<System.String,Torappu.ZoneData>;
    weeklyAdditionInfo: Torappu.ListDict<System.String,Torappu.WeeklyZoneData>;
    zoneValidInfo: System.Collections.Generic.Dictionary<System.String,Torappu.ZoneValidInfo>;
    mainlineAdditionInfo: System.Collections.Generic.Dictionary<System.String,Torappu.MainlineZoneData>;
  }
  export interface CryptUtils {
  }
  export interface DateTimeUtil {
    EMPTY_DATETIME: System.DateTime;
    UTC_BIAS_HOURS: System.Int32;
    START_TIME: System.DateTime;
    // s_testTimeBias: System.Int64;
    // s_serverTimeBias: System.Int64;
  }
  export interface JsonConvertUtil {
    // __Hotfix0_PopulateJson: XLua.DelegateBridge;
    // __Hotfix0_DeleteFromJson: XLua.DelegateBridge;
    // __Hotfix0_GenerateJsonSettingsForEnemyDatabase: XLua.DelegateBridge;
    // __Hotfix0_PopulateLuaTable: XLua.DelegateBridge;
    // __Hotfix1_PopulateLuaTable: XLua.DelegateBridge;
    // __Hotfix0__SetValueToLuaTable: XLua.DelegateBridge;
  }
  export interface JObjectWrapper {
    EMPTY: Torappu.JObjectWrapper;
    // m_obj: Newtonsoft.Json.Linq.JObject;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_get_rawObj: XLua.DelegateBridge;
    // __Hotfix0_IsEmpty: XLua.DelegateBridge;
    // __Hotfix0_GetLong: XLua.DelegateBridge;
    // __Hotfix0_GetInt: XLua.DelegateBridge;
    // __Hotfix0_GetFloat: XLua.DelegateBridge;
    // __Hotfix0_GetDouble: XLua.DelegateBridge;
    // __Hotfix0_GetBool: XLua.DelegateBridge;
    // __Hotfix0_GetString: XLua.DelegateBridge;
    // __Hotfix0_GetObject: XLua.DelegateBridge;
    // __Hotfix0_GetArray: XLua.DelegateBridge;
    // __Hotfix0_ToString: XLua.DelegateBridge;
    // __Hotfix0__GetValue: XLua.DelegateBridge;
  }
  export interface JArrayWrapper {
    // m_obj: Newtonsoft.Json.Linq.JArray;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_get_rawObj: XLua.DelegateBridge;
    // __Hotfix0_IsNull: XLua.DelegateBridge;
    // __Hotfix0_GetLong: XLua.DelegateBridge;
    // __Hotfix0_GetInt: XLua.DelegateBridge;
    // __Hotfix0_GetFloat: XLua.DelegateBridge;
    // __Hotfix0_GetDouble: XLua.DelegateBridge;
    // __Hotfix0_GetBool: XLua.DelegateBridge;
    // __Hotfix0_GetString: XLua.DelegateBridge;
    // __Hotfix0_GetObject: XLua.DelegateBridge;
    // __Hotfix0_GetArray: XLua.DelegateBridge;
    // __Hotfix0_GetCount: XLua.DelegateBridge;
    // __Hotfix0_ToString: XLua.DelegateBridge;
    // __Hotfix0__GetValue: XLua.DelegateBridge;
  }
  export interface IJsonSerializeHandler {
  }
  export interface BoolToIntJsonConverter {
  }
  export interface DateTimeJsonConverter {
  }
  export interface ListDictConverter {
    KEY_NAME: System.String;
    VALUE_NAME: System.String;
    // m_genericMap: System.Collections.Generic.Dictionary<System.Type,Torappu.ListDictConverter.GenericContext>;
    // m_lock: System.Object;
  }
  export interface ObscuredIntConverter {
  }
  export interface ObscuredFloatConverter {
  }
  export interface BlackboardConverter {
  }
  export interface AOTGenericsForJsonConverters {
  }
  export interface IListDict {
  }
  export interface ListDict<TKey,TValue> {
    // m_equals: Torappu.ListDict.Equality<TKey,TValue>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // _c__Hotfix1_ctor: XLua.DelegateBridge;
    // _c__Hotfix2_ctor: XLua.DelegateBridge;
    // _c__Hotfix3_ctor: XLua.DelegateBridge;
    // __Hotfix0_get_Item: XLua.DelegateBridge;
    // __Hotfix0_set_Item: XLua.DelegateBridge;
    // __Hotfix0_Get: XLua.DelegateBridge;
    // __Hotfix0_Set: XLua.DelegateBridge;
    // __Hotfix0_get_Keys: XLua.DelegateBridge;
    // __Hotfix0_get_Values: XLua.DelegateBridge;
    // __Hotfix0_Add: XLua.DelegateBridge;
    // __Hotfix1_Add: XLua.DelegateBridge;
    // __Hotfix0_ContainsKey: XLua.DelegateBridge;
    // __Hotfix0_Remove: XLua.DelegateBridge;
    // __Hotfix0_TryGetValue: XLua.DelegateBridge;
    // __Hotfix0_IndexOf: XLua.DelegateBridge;
    // __Hotfix0__MakePair: XLua.DelegateBridge;
    // __Hotfix0__SetEquals: XLua.DelegateBridge;
  }
  export interface Singleton<T> {
    // s_instance: T;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_get_instance: XLua.DelegateBridge;
    // __Hotfix0_Reset: XLua.DelegateBridge;
    // __Hotfix0__CreateInstance: XLua.DelegateBridge;
  }
  export interface SortableString {
    str: System.String;
    weight: System.Int32;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_FlushToStringList: XLua.DelegateBridge;
    // __Hotfix0_Compare: XLua.DelegateBridge;
    // __Hotfix0_CompareInverse: XLua.DelegateBridge;
  }
  export interface VcConfig {
    controlVersion: System.String;
    bannedCharIds: System.Collections.Generic.List<System.String>;
    bannedStageIds: System.Collections.Generic.List<System.String>;
    bannedItemIds: System.Collections.Generic.List<System.String>;
    bannedSkinIds: System.Collections.Generic.List<System.String>;
    bannedFurnIds: System.Collections.Generic.List<System.String>;
    bannedFurniSetIds: System.Collections.Generic.List<System.String>;
    bannedActIds: System.Collections.Generic.List<System.String>;
    bannedEnemyIds: System.Collections.Generic.List<System.String>;
    bannedGachaPoolIds: System.Collections.Generic.List<System.String>;
    bannedShopRecommendTags: System.Collections.Generic.List<System.String>;
    bannedShopCarousels: System.Collections.Generic.List<System.String>;
    bannedShopFurnPackages: System.Collections.Generic.List<System.String>;
    bannedShopFurnPackageIcons: System.Collections.Generic.List<System.String>;
    bannedShopGiftPackages: System.Collections.Generic.List<System.String>;
    bannedZoneIds: System.Collections.Generic.List<System.String>;
    bannedMainlineBgNames: System.Collections.Generic.List<System.String>;
    bannedCrisisSeasonId: System.Collections.Generic.List<System.String>;
    bannedCrisisStageId: System.Collections.Generic.List<System.String>;
    bannedCrisisTrainingRotateId: System.Collections.Generic.List<System.String>;
    bannedMusicFolders: System.Collections.Generic.List<System.String>;
    bannedHandbookTeamIds: System.Collections.Generic.List<System.String>;
    bannedMedalIds: System.Collections.Generic.List<System.String>;
    bannedMedalGroupIds: System.Collections.Generic.List<System.String>;
    bannedStoryReviewIds: System.Collections.Generic.List<System.String>;
    bannedCampaignRegionIds: System.Collections.Generic.List<System.String>;
    bannedCampaignRotateGroupIds: System.Collections.Generic.List<System.String>;
    bannedCampaignTrainingGroupIds: System.Collections.Generic.List<System.String>;
    bannedCampaignTrainingAllOpenGroupIds: System.Collections.Generic.List<System.String>;
    bannedHandbookForceIds: System.Collections.Generic.List<System.String>;
    bannedBattleMapRes: System.Collections.Generic.List<System.String>;
    bannedSpecialEffectPrefix: System.Collections.Generic.List<System.String>;
    bannedSpecialPlayerAudio: System.Collections.Generic.List<System.String>;
    bannedTileKey: System.Collections.Generic.List<System.String>;
    bannedTokenIds: System.Collections.Generic.List<System.String>;
    bannedSkinResNames: System.Collections.Generic.List<System.String>;
    bannedLevelIds: System.Collections.Generic.List<System.String>;
    bannedVoucherItemPic: System.Collections.Generic.List<System.String>;
    bannedLMGTSBarType: System.Collections.Generic.List<System.String>;
    bannedBuildingSkillIcons: System.Collections.Generic.List<System.String>;
    bannedSkinGroupIds: System.Collections.Generic.List<System.String>;
    bannedBrandIds: System.Collections.Generic.List<System.String>;
    bannedKVImgIds: System.Collections.Generic.List<System.String>;
    bannedStoryIds: System.Collections.Generic.List<System.String>;
    bannedCharLogo: System.Collections.Generic.List<System.String>;
    bannedRuneIcons: System.Collections.Generic.List<System.String>;
    bannedAudioAssets: System.Collections.Generic.List<System.String>;
    bannedLoadingPics: System.Collections.Generic.List<System.String>;
    bannedCampaignWorldMapIds: System.Collections.Generic.List<System.String>;
    bannedHandBookStorySetId: System.Collections.Generic.List<System.String>;
    bannedHandBookStageId: System.Collections.Generic.List<System.String>;
    bannedRetroIds: System.Collections.Generic.List<System.String>;
    isLimitedGachaBanned: System.Boolean;
    retroRelatedActIds: System.Collections.Generic.List<System.String>;
  }
  export interface DLogOptions {
    _logInfo: System.Boolean;
    _logWarning: System.Boolean;
    _logError: System.Boolean;
    _enableAllForEditorMode: System.Boolean;
    _enableAllForDevelopmentBuild: System.Boolean;
  }
  export interface FastEnumIntEqualityComparer<TEnum> {
  }
  export interface ObscuredFP {
    // _serializedValue: CodeStage.AntiCheat.ObscuredTypes.ObscuredLong;
  }
  export interface FP {
    _serializedValue: System.Int64;
    MAX_VALUE: System.Int64;
    MIN_VALUE: System.Int64;
    NUM_BITS: System.Int32;
    FRACTIONAL_PLACES: System.Int32;
    ONE: System.Int64;
    TEN: System.Int64;
    HALF: System.Int64;
    PI_TIMES_2: System.Int64;
    PI: System.Int64;
    PI_OVER_2: System.Int64;
    LUT_SIZE: System.Int32;
    Precision: System.Decimal;
    MaxValue: Torappu.FP;
    MinValue: Torappu.FP;
    One: Torappu.FP;
    Ten: Torappu.FP;
    Half: Torappu.FP;
    Zero: Torappu.FP;
    PositiveInfinity: Torappu.FP;
    NegativeInfinity: Torappu.FP;
    NaN: Torappu.FP;
    EN1: Torappu.FP;
    EN2: Torappu.FP;
    EN3: Torappu.FP;
    EN4: Torappu.FP;
    EN5: Torappu.FP;
    EN6: Torappu.FP;
    EN7: Torappu.FP;
    EN8: Torappu.FP;
    Epsilon: Torappu.FP;
    Pi: Torappu.FP;
    PiOver2: Torappu.FP;
    PiTimes2: Torappu.FP;
    PiInv: Torappu.FP;
    PiOver2Inv: Torappu.FP;
    Deg2Rad: Torappu.FP;
    Rad2Deg: Torappu.FP;
    LutInterval: Torappu.FP;
    AcosLut: System.Int64[];
    SinLut: System.Int64[];
    TanLut: System.Int64[];
  }
  export interface TSMath {
    Pi: Torappu.FP;
    PiOver2: Torappu.FP;
    Epsilon: Torappu.FP;
    Deg2Rad: Torappu.FP;
    Rad2Deg: Torappu.FP;
  }
  export interface TSMatrix {
    M11: Torappu.FP;
    M12: Torappu.FP;
    M13: Torappu.FP;
    M21: Torappu.FP;
    M22: Torappu.FP;
    M23: Torappu.FP;
    M31: Torappu.FP;
    M32: Torappu.FP;
    M33: Torappu.FP;
    InternalIdentity: Torappu.TSMatrix;
    Identity: Torappu.TSMatrix;
    Zero: Torappu.TSMatrix;
  }
  export interface TSQuaternion {
    x: Torappu.FP;
    y: Torappu.FP;
    z: Torappu.FP;
    w: Torappu.FP;
    identity: Torappu.TSQuaternion;
  }
  export interface TSRandom {
    N: System.Int32;
    M: System.Int32;
    MATRIX_A: System.UInt32;
    UPPER_MASK: System.UInt32;
    LOWER_MASK: System.UInt32;
    MAX_RAND_INT: System.Int32;
    mag01: System.UInt32[];
    mt: System.UInt32[];
    mti: System.Int32;
    instance: Torappu.TSRandom;
  }
  export interface TSVector2 {
    zeroVector: Torappu.TSVector2;
    oneVector: Torappu.TSVector2;
    rightVector: Torappu.TSVector2;
    leftVector: Torappu.TSVector2;
    upVector: Torappu.TSVector2;
    downVector: Torappu.TSVector2;
    x: Torappu.FP;
    y: Torappu.FP;
  }
  export interface TSVector3 {
    ZeroEpsilonSq: Torappu.FP;
    InternalZero: Torappu.TSVector3;
    Arbitrary: Torappu.TSVector3;
    x: Torappu.FP;
    y: Torappu.FP;
    z: Torappu.FP;
    zero: Torappu.TSVector3;
    left: Torappu.TSVector3;
    right: Torappu.TSVector3;
    up: Torappu.TSVector3;
    down: Torappu.TSVector3;
    back: Torappu.TSVector3;
    forward: Torappu.TSVector3;
    one: Torappu.TSVector3;
    MinValue: Torappu.TSVector3;
    MaxValue: Torappu.TSVector3;
  }
  export interface StateMachine {
    DEFAULT_STATE: System.Int32;
    TERMINAL_STATE: System.Int32;
    // onStarted: System.Action<System.Int32>;
    // onStateChanged: System.Action<System.Int32,System.Int32>;
    // onTerminated: System.Action<System.Int32>;
    // m_switchLocked: System.Boolean;
    // m_defaultStateId: System.Int32;
    // m_states: System.Collections.Generic.Dictionary<System.Int32,Torappu.StateMachine.IStateNode>;
    // m_pendingQueue: System.Collections.Generic.Queue<System.Collections.Generic.KeyValuePair<System.Int32,System.Boolean>>;
    // m_blackboard: Torappu.StateMachine.IBlackboard;
    // <currentStateId>k__BackingField: System.Int32;
    // <currentState>k__BackingField: Torappu.StateMachine.IStateNode;
  }
  export interface EnumStateMachine<StateType> {
  }
  export interface TypeStateMachine {
    // m_type2int: System.Collections.Generic.Dictionary<System.Type,System.Int32>;
  }
  export interface HierachyStateMachine<StateType,DataType,BlackboardType> {
    // <data>k__BackingField: DataType;
  }
  export interface CampaignDataUtil {
    // __Hotfix0_GetAllStages: XLua.DelegateBridge;
    // __Hotfix0_GetStageType: XLua.DelegateBridge;
    // __Hotfix0_GetStageRegion: XLua.DelegateBridge;
    // __Hotfix0_GetStageZone: XLua.DelegateBridge;
    // __Hotfix0_GetStageUnlockText: XLua.DelegateBridge;
    // __Hotfix0_GetStageTotalBreakFee: XLua.DelegateBridge;
    // __Hotfix0_GetStageMaxKillCnt: XLua.DelegateBridge;
    // __Hotfix0_HasStageUnconfirmedBreakFee: XLua.DelegateBridge;
    // __Hotfix0_HasStageUnconfirmedReward: XLua.DelegateBridge;
    // __Hotfix0_HasAnyStageUnconfirmedReward: XLua.DelegateBridge;
    // __Hotfix0_HasAnyCommonMissionUnconfirmedReward: XLua.DelegateBridge;
    // __Hotfix0_IsStageFinishAllReward: XLua.DelegateBridge;
    // __Hotfix0_IsStageUnlocked: XLua.DelegateBridge;
    // __Hotfix0_IsStageClosed: XLua.DelegateBridge;
    // __Hotfix0_IsStageUnknown: XLua.DelegateBridge;
    // __Hotfix0_IsTrainingAllOpen: XLua.DelegateBridge;
    // __Hotfix0_GetZoneUnlockText: XLua.DelegateBridge;
    // __Hotfix0_GetZoneRegion: XLua.DelegateBridge;
    // __Hotfix0_GetRemainTimeText: XLua.DelegateBridge;
    // __Hotfix0_GetMissionBreakFee: XLua.DelegateBridge;
    // __Hotfix0_GetCampFeeRefreshCountDownText: XLua.DelegateBridge;
    // __Hotfix0_LoadStageEndTimes: XLua.DelegateBridge;
    // __Hotfix0__GetStageNameInUnlockText: XLua.DelegateBridge;
    // __Hotfix0__FormatTimeDelta: XLua.DelegateBridge;
  }
  export interface EvolvePhaseAndLevel {
    evolvePhase: Torappu.EvolvePhase;
    level: System.Int32;
  }
  export interface CharQuery {
    EMPTY: Torappu.CharQuery;
    charId: System.String;
    isToken: System.Boolean;
    tmplId: System.String;
  }
  export interface CharUISkinStruct {
    EMPTY: Torappu.CharUISkinStruct;
    charId: System.String;
    skinId: System.String;
  }
  export interface CharacterTrackPointData {
    hasPotentialImprovable: System.Boolean;
    hasNewCharTag: System.Boolean;
    hasInfoTrackPoint: System.Boolean;
    hasSpCharMissionTrackPoint: System.Boolean;
    DEFAULT_DATA: Torappu.CharacterTrackPointData;
  }
  export interface CharacterUtil {
    MAX_FAVOR_BATTLE_PHASE_FOR_ZERO_EVOLVE_PHASE: System.Int32;
    // COMPARE_PRIORITY: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>[];
    // CHAR_COMPARISONS: Torappu.ListDict<Torappu.UI.CharacterSortType,System.Comparison<Torappu.UI.BasicCharInfoModel>>;
    // <>f__mg$cache0: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache1: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache2: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache3: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache4: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache5: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache6: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache7: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache8: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache9: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cacheA: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cacheB: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cacheC: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cacheD: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cacheE: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cacheF: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache10: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache11: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache12: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache13: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache14: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache15: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache16: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache17: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache18: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache19: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache1A: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache1B: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache1C: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache1D: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache1E: System.Func<Torappu.UI.BasicCharInfoModel,Torappu.UI.BasicCharInfoModel,System.Int32>;
    // <>f__mg$cache1F: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache20: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache21: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache22: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache23: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache24: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache25: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache26: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache27: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache28: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache29: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache2A: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache2B: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache2C: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache2D: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache2E: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache2F: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache30: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache31: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // <>f__mg$cache32: System.Comparison<Torappu.UI.BasicCharInfoModel>;
    // __Hotfix0_GetHighestSelectableUISkin: XLua.DelegateBridge;
    // __Hotfix0_LoadCharUISkinState: XLua.DelegateBridge;
    // __Hotfix0_LoadCharAvatarBySkin: XLua.DelegateBridge;
    // __Hotfix0_GetMaxEvolvePhase: XLua.DelegateBridge;
    // __Hotfix0_GetCharName: XLua.DelegateBridge;
    // __Hotfix0_TryGetCharName: XLua.DelegateBridge;
    // __Hotfix0_TryGetCharData: XLua.DelegateBridge;
    // __Hotfix0_GetCharDataOrNull: XLua.DelegateBridge;
    // __Hotfix0_GetDefaultCharTmpl: XLua.DelegateBridge;
    // __Hotfix0_VerifySkin: XLua.DelegateBridge;
    // __Hotfix0_EditorTryGetCharData: XLua.DelegateBridge;
    // __Hotfix0_GetCharAppellation: XLua.DelegateBridge;
    // __Hotfix0_CheckUnlimitSkinBuyInLimitTime: XLua.DelegateBridge;
    // __Hotfix0_CheckSkinAvailable: XLua.DelegateBridge;
    // __Hotfix0_GetPortraitSprite: XLua.DelegateBridge;
    // __Hotfix0_GetSkillIdByIndex: XLua.DelegateBridge;
    // __Hotfix0_GetSkillIdByIndexInPlayerData: XLua.DelegateBridge;
    // __Hotfix0_FindSkillIndexByIdInPlayerData: XLua.DelegateBridge;
    // __Hotfix1_FindSkillIndexByIdInPlayerData: XLua.DelegateBridge;
    // __Hotfix0_FindSkillIndexById: XLua.DelegateBridge;
    // __Hotfix0_CheckIfCharSkillAvailable: XLua.DelegateBridge;
    // __Hotfix1_GetPortraitSprite: XLua.DelegateBridge;
    // __Hotfix0_LoadCharAvatar: XLua.DelegateBridge;
    // __Hotfix0_LoadCharPortrait: XLua.DelegateBridge;
    // __Hotfix0_LoadProfessionTextHub: XLua.DelegateBridge;
    // __Hotfix0_SortCharList: XLua.DelegateBridge;
    // __Hotfix0_SortEvolveCharList: XLua.DelegateBridge;
    // __Hotfix0__CompareByChain: XLua.DelegateBridge;
    // __Hotfix0__CompareByLevelUp: XLua.DelegateBridge;
    // __Hotfix0__CompareByLevelDown: XLua.DelegateBridge;
    // __Hotfix0__CompareByNameUp: XLua.DelegateBridge;
    // __Hotfix0__CompareByNameDown: XLua.DelegateBridge;
    // __Hotfix0__CompareByGainTimeUp: XLua.DelegateBridge;
    // __Hotfix0__CompareByGainTimeDown: XLua.DelegateBridge;
    // __Hotfix0__CompareByFavorUp: XLua.DelegateBridge;
    // __Hotfix0__CompareByFavorDown: XLua.DelegateBridge;
    // __Hotfix0__CompareByRarityUp: XLua.DelegateBridge;
    // __Hotfix0__CompareByRarityDown: XLua.DelegateBridge;
    // __Hotfix0__CompareByCostUp: XLua.DelegateBridge;
    // __Hotfix0__CompareByCostDown: XLua.DelegateBridge;
    // __Hotfix0__CompareByHpUp: XLua.DelegateBridge;
    // __Hotfix0__CompareByHpDown: XLua.DelegateBridge;
    // __Hotfix0__CompareByAtkUp: XLua.DelegateBridge;
    // __Hotfix0__CompareByAtkDown: XLua.DelegateBridge;
    // __Hotfix0__CompareByDefUp: XLua.DelegateBridge;
    // __Hotfix0__CompareByDefDown: XLua.DelegateBridge;
    // __Hotfix0__CompareByResUp: XLua.DelegateBridge;
    // __Hotfix0__CompareByResDown: XLua.DelegateBridge;
    // __Hotfix0__CompLevel: XLua.DelegateBridge;
    // __Hotfix0__CompName: XLua.DelegateBridge;
    // __Hotfix0__CompGainTime: XLua.DelegateBridge;
    // __Hotfix0__CompareFavor: XLua.DelegateBridge;
    // __Hotfix0__CompRarity: XLua.DelegateBridge;
    // __Hotfix0__CompCost: XLua.DelegateBridge;
    // __Hotfix0__CompHp: XLua.DelegateBridge;
    // __Hotfix0__CompAtk: XLua.DelegateBridge;
    // __Hotfix0__CompDef: XLua.DelegateBridge;
    // __Hotfix0__CompRes: XLua.DelegateBridge;
    // __Hotfix0__CompProfession: XLua.DelegateBridge;
    // __Hotfix0_GetPlayerInstByCharId: XLua.DelegateBridge;
    // __Hotfix0_GetPlayerTmplByCharId: XLua.DelegateBridge;
    // __Hotfix0_IsStandardCharacter: XLua.DelegateBridge;
    // __Hotfix0_AchieveDefaultSkillId: XLua.DelegateBridge;
    // __Hotfix0_CheckIfCharUpdatedInHandBook: XLua.DelegateBridge;
    // __Hotfix0_CheckIfCharTrackPointInHandBook: XLua.DelegateBridge;
    // __Hotfix0__CheckIfTrackPointInHandBookStory: XLua.DelegateBridge;
    // __Hotfix0__CheckIfTrackPointInHandBookStage: XLua.DelegateBridge;
    // __Hotfix0_CheckIfPontialImprovable: XLua.DelegateBridge;
    // __Hotfix0_CheckIfSpecializedSkillCanImprove: XLua.DelegateBridge;
    // __Hotfix1_CheckIfSpecializedSkillCanImprove: XLua.DelegateBridge;
    // __Hotfix0_CheckIfTmplSkillUpdated: XLua.DelegateBridge;
    // __Hotfix0_IsMutuallyExclusiveChar: XLua.DelegateBridge;
    // __Hotfix1_IsMutuallyExclusiveChar: XLua.DelegateBridge;
    // __Hotfix0_LoadMutuallyExclusiveCharInstIds: XLua.DelegateBridge;
    // __Hotfix0_HasNewCharTag: XLua.DelegateBridge;
    // __Hotfix0_MarkNewCharViewd: XLua.DelegateBridge;
    // __Hotfix0_LogNewCharAchieved: XLua.DelegateBridge;
    // __Hotfix1_LogNewCharAchieved: XLua.DelegateBridge;
    // __Hotfix2_LogNewCharAchieved: XLua.DelegateBridge;
    // __Hotfix0_HasNewSpCharMission: XLua.DelegateBridge;
    // __Hotfix0_ConsumeSpCharMissionNew: XLua.DelegateBridge;
    // __Hotfix0_TryLogSpCharMissionNew: XLua.DelegateBridge;
    // __Hotfix0_HasUnconfirmedSpCharMissionReward: XLua.DelegateBridge;
    // __Hotfix0_CheckIfSpCharMissionUnlocked: XLua.DelegateBridge;
    // __Hotfix0_CheckData: XLua.DelegateBridge;
    // __Hotfix0_ConvertToCharacterCardViewModel: XLua.DelegateBridge;
    // __Hotfix0__CalculateNerfFavorPoint: XLua.DelegateBridge;
    // __Hotfix0__CheckSkillAvalibale: XLua.DelegateBridge;
    // __Hotfix0__CheckSkillAllLevelAvaliable: XLua.DelegateBridge;
    // __Hotfix0__CheckSkillSpecializeLevelAvaliable: XLua.DelegateBridge;
  }
  export interface DataConvertUtil {
    // __Hotfix0_LoadAllCharCards: XLua.DelegateBridge;
    // __Hotfix0_CreateFakeCardView: XLua.DelegateBridge;
    // __Hotfix0_LoadAllCharsInSquads: XLua.DelegateBridge;
    // __Hotfix0_AchieveCharCard: XLua.DelegateBridge;
    // __Hotfix0_GetRespawnTimeDesc: XLua.DelegateBridge;
    // __Hotfix0_GetAttackSpeedDesc: XLua.DelegateBridge;
    // __Hotfix0_CheckHaveBuyApRemainTimes: XLua.DelegateBridge;
    // __Hotfix0_GetSkillIconId: XLua.DelegateBridge;
    // __Hotfix0_GetSkillData: XLua.DelegateBridge;
    // __Hotfix0_GetREPShopOpenFlag: XLua.DelegateBridge;
    // __Hotfix0_GetChooseGPPackageId: XLua.DelegateBridge;
    // __Hotfix0_CheckIsGPOption: XLua.DelegateBridge;
    // __Hotfix0_LoadSkillTags: XLua.DelegateBridge;
    // __Hotfix0_LoadMissionData: XLua.DelegateBridge;
    // __Hotfix0_LoadMissionGroup: XLua.DelegateBridge;
    // __Hotfix0_LoadMissionDailyReward: XLua.DelegateBridge;
    // __Hotfix0_LoadMissionWeeklyReward: XLua.DelegateBridge;
    // __Hotfix0_GetMissionState: XLua.DelegateBridge;
    // __Hotfix1_LoadSkillTags: XLua.DelegateBridge;
    // __Hotfix0_LoadUnlockTextByUnlockCondition: XLua.DelegateBridge;
    // __Hotfix0_LoadSkillUnlockCondition: XLua.DelegateBridge;
    // __Hotfix0_AchieveEvolveRequireGold: XLua.DelegateBridge;
    // __Hotfix0_GetTeamIconId: XLua.DelegateBridge;
    // __Hotfix0_GetPowerLogoId: XLua.DelegateBridge;
    // __Hotfix0_GetProfessionIconId: XLua.DelegateBridge;
    // __Hotfix0_AchieveUplevelExp: XLua.DelegateBridge;
    // __Hotfix0_AchieveGoldPerLevel: XLua.DelegateBridge;
    // __Hotfix0_AchieveMaxLevel: XLua.DelegateBridge;
    // __Hotfix1_AchieveUplevelExp: XLua.DelegateBridge;
    // __Hotfix0_AchieveCharAttributes: XLua.DelegateBridge;
    // __Hotfix1_AchieveCharAttributes: XLua.DelegateBridge;
    // __Hotfix2_AchieveCharAttributes: XLua.DelegateBridge;
    // __Hotfix0_LoadComposeHardPredefine: XLua.DelegateBridge;
    // __Hotfix0_LoadNecessaryDataFromStage: XLua.DelegateBridge;
    // __Hotfix0_GetStartButtonTypeByStageData: XLua.DelegateBridge;
    // __Hotfix0__LoadStagePredefinedSquad: XLua.DelegateBridge;
    // __Hotfix0_CreateBattlePlayerData: XLua.DelegateBridge;
    // __Hotfix0_AchieveCharacterAttackRange: XLua.DelegateBridge;
    // __Hotfix0_TryGetAttackRangeFromRangeId: XLua.DelegateBridge;
    // __Hotfix0_FindGachaTagContentById: XLua.DelegateBridge;
    // __Hotfix0_LoadPlayerCharAvatar: XLua.DelegateBridge;
    // __Hotfix0_GetGiftPackageSprite: XLua.DelegateBridge;
    // __Hotfix0_GetPriceSprite: XLua.DelegateBridge;
    // __Hotfix0__GetPriceTypeSpriteId: XLua.DelegateBridge;
    // __Hotfix0_GetCashSprite: XLua.DelegateBridge;
    // __Hotfix0_GetEPGSCoinSprite: XLua.DelegateBridge;
    // __Hotfix0_GetLMTGSCoinSprite: XLua.DelegateBridge;
    // __Hotfix1_LoadPlayerCharAvatar: XLua.DelegateBridge;
    // __Hotfix0__LoadCharacterAvatar: XLua.DelegateBridge;
    // __Hotfix0_LoadEnemyIcon: XLua.DelegateBridge;
    // __Hotfix0_LoadGachaDetailCharBack: XLua.DelegateBridge;
    // __Hotfix0_LoadGachaDetailStar: XLua.DelegateBridge;
    // __Hotfix0_LoadRarityIcon: XLua.DelegateBridge;
    // __Hotfix0_LoadRarityIconTight: XLua.DelegateBridge;
    // __Hotfix0_LoadLeftJustifyRarityIcon: XLua.DelegateBridge;
    // __Hotfix0_LoadYellowRarityIcon: XLua.DelegateBridge;
    // __Hotfix0_LoadSkillIcon: XLua.DelegateBridge;
    // __Hotfix1_LoadSkillIcon: XLua.DelegateBridge;
    // __Hotfix0_LoadPlayerExpMap: XLua.DelegateBridge;
    // __Hotfix0_GetEnemyIconId: XLua.DelegateBridge;
    // __Hotfix0_LoadPlayerLevelExp: XLua.DelegateBridge;
    // __Hotfix0_LoadMailSenderInfo: XLua.DelegateBridge;
    // __Hotfix0_LoadPlayerMaxAp: XLua.DelegateBridge;
    // __Hotfix0_LoadRetroBack: XLua.DelegateBridge;
    // __Hotfix0_LoadBrandIcon: XLua.DelegateBridge;
    // __Hotfix0_TryLoadSkinGroupIcon: XLua.DelegateBridge;
    // __Hotfix0_LoadLogo: XLua.DelegateBridge;
    // __Hotfix0_LoadTeamIcon: XLua.DelegateBridge;
    // __Hotfix0_GetItemVoucherback: XLua.DelegateBridge;
    // __Hotfix0_GetStartBattleBack: XLua.DelegateBridge;
    // __Hotfix0_GetElitePic: XLua.DelegateBridge;
    // __Hotfix0_GetEliteCard: XLua.DelegateBridge;
    // __Hotfix0_GetTinySpecializedPic: XLua.DelegateBridge;
    // __Hotfix0_GetSpecializedPic: XLua.DelegateBridge;
    // __Hotfix0_GetPotentialIcon: XLua.DelegateBridge;
    // __Hotfix0_GetLargeProfessionPic: XLua.DelegateBridge;
    // __Hotfix0_GetFriendAssistProfessionPic: XLua.DelegateBridge;
    // __Hotfix0_GetNoShadowProfessionPic: XLua.DelegateBridge;
    // __Hotfix0_GetProfessionPic: XLua.DelegateBridge;
    // __Hotfix0_LoadUnlockSkillsAtInitialSkillLvl: XLua.DelegateBridge;
    // __Hotfix0_LoadUnlockTalents: XLua.DelegateBridge;
    // __Hotfix0_CheckCharWordTextAvailable: XLua.DelegateBridge;
    // __Hotfix0_LoadRandomCharData: XLua.DelegateBridge;
    // __Hotfix0_GetCrystalToBuyAp: XLua.DelegateBridge;
    // __Hotfix0_GetNumberPic: XLua.DelegateBridge;
    // __Hotfix0_IsBuildInCharacter: XLua.DelegateBridge;
    // __Hotfix0_GetAnnouncementUrl: XLua.DelegateBridge;
    // __Hotfix0_GetPreAnnouncementUrl: XLua.DelegateBridge;
    // __Hotfix0_get_advancedGachaCost: XLua.DelegateBridge;
    // __Hotfix0_GetStageCode: XLua.DelegateBridge;
    // __Hotfix0_GetStageNameWithCode: XLua.DelegateBridge;
    // __Hotfix0_GetFavorPercent: XLua.DelegateBridge;
    // __Hotfix0_GetFavorBattlePhase: XLua.DelegateBridge;
    // __Hotfix0_IsNormalRecruitSlotWorking: XLua.DelegateBridge;
    // __Hotfix0_GetMaxFavorPercent: XLua.DelegateBridge;
    // __Hotfix0_CalcSkillSpecializedState: XLua.DelegateBridge;
    // __Hotfix0_GenerateRandomName: XLua.DelegateBridge;
    // __Hotfix0__ConverNameToHex: XLua.DelegateBridge;
    // __Hotfix0__ConvertNameToHex: XLua.DelegateBridge;
    // __Hotfix0_CalcInstFinTktDiamondAddRequire: XLua.DelegateBridge;
    // __Hotfix0_CheckCompletedHardStage: XLua.DelegateBridge;
    // __Hotfix1_CheckCompletedHardStage: XLua.DelegateBridge;
    // __Hotfix0_CheckStagePredefine: XLua.DelegateBridge;
    // __Hotfix0_CanApBePurchased: XLua.DelegateBridge;
    // __Hotfix0_CanApBePurchasedWithApItem: XLua.DelegateBridge;
    // __Hotfix0_GetNextBuyApAmount: XLua.DelegateBridge;
    // __Hotfix0_HasFavorBubble: XLua.DelegateBridge;
    // __Hotfix0_ResetDataConvertTestStatus: XLua.DelegateBridge;
    // __Hotfix0__ChangeRandomName: XLua.DelegateBridge;
    // __Hotfix0_LoadMailSenderConfig: XLua.DelegateBridge;
    // __Hotfix0_LoadSkillIconHub: XLua.DelegateBridge;
    // __Hotfix0_LoadOpenserverChainLoginHub: XLua.DelegateBridge;
    // __Hotfix0_LoadProfessionIconHub: XLua.DelegateBridge;
    // __Hotfix0_LoadCashIconHub: XLua.DelegateBridge;
    // __Hotfix0_LoadProfessionLargeIconHub: XLua.DelegateBridge;
    // __Hotfix0_LoadShopImageHub: XLua.DelegateBridge;
    // __Hotfix0_LoadGiftPackageImageHub: XLua.DelegateBridge;
    // __Hotfix0_LoadNumberIconHub: XLua.DelegateBridge;
    // __Hotfix0_LoadItemIconStackHub: XLua.DelegateBridge;
    // __Hotfix0_LoadEnemyIconHub: XLua.DelegateBridge;
    // __Hotfix0_LoadClueHub: XLua.DelegateBridge;
    // __Hotfix0_LoadFurnitureGroupDetailHub: XLua.DelegateBridge;
    // __Hotfix0_LoadGachaDetailHub: XLua.DelegateBridge;
    // __Hotfix0_LoadSpriteFromAutoPackHub: XLua.DelegateBridge;
    // __Hotfix0_LoadSpriteFromAutoPackHubByPage: XLua.DelegateBridge;
    // __Hotfix1_LoadSpriteFromAutoPackHubByPage: XLua.DelegateBridge;
    // __Hotfix0__CheckAndLoadAsset: XLua.DelegateBridge;
  }
  export interface BattleStartController {
    // START_BATTLE_SIGN_KEY: CodeStage.AntiCheat.ObscuredTypes.ObscuredString;
    // m_cache: Torappu.BattleStartController.Cache;
    // <>f__mg$cache0: System.Func<Torappu.Network.ResponseError,System.Boolean>;
    // <>f__mg$cache1: System.Action;
    // <>f__mg$cache2: System.Action;
  }
  export interface IStartBattleServiceConfig {
  }
  export interface StartBattleServiceConfig<TRequest,TResponse> {
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_SendStartBattleService: XLua.DelegateBridge;
  }
  export interface IFinishBattleServiceSender {
  }
  export interface IFinishBattleServiceConfig {
  }
  export interface FinishBattleServiceConfig<TRequest,TResponse> {
    // m_serviceCode: System.String;
  }
  export interface CrisisDataUtil {
    // __Hotfix0_GetCurrentSeason: XLua.DelegateBridge;
    // __Hotfix0_GetPlayerSeason: XLua.DelegateBridge;
    // __Hotfix1_GetPlayerSeason: XLua.DelegateBridge;
    // __Hotfix0_GetStageDataInSeason: XLua.DelegateBridge;
    // __Hotfix0_FindTempStageGroup: XLua.DelegateBridge;
    // __Hotfix0_GetCrisisMapStatus: XLua.DelegateBridge;
    // __Hotfix0_CheckIfCrisisMapRankDone: XLua.DelegateBridge;
    // __Hotfix0_LoadTempStageViewModel: XLua.DelegateBridge;
    // __Hotfix0_GetStageDataByTempGroupId: XLua.DelegateBridge;
    // __Hotfix0_LoadPermStageViewModel: XLua.DelegateBridge;
    // __Hotfix0_GetStageChallengeAbleToGet: XLua.DelegateBridge;
    // __Hotfix0_CheckIfStageChallengeUncomplete: XLua.DelegateBridge;
    // __Hotfix0_GetPermStageChallengeAbleToGet: XLua.DelegateBridge;
    // __Hotfix0_GetTempStageChallengeAbleToGet: XLua.DelegateBridge;
    // __Hotfix0_LoadTrainStageViewModel: XLua.DelegateBridge;
    // __Hotfix0_GetRuneByStageId: XLua.DelegateBridge;
    // __Hotfix0_GetValidStageData: XLua.DelegateBridge;
    // __Hotfix0_CheckIfSystemOpen: XLua.DelegateBridge;
  }
  export interface FriendCommonData {
    nickName: System.String;
    uid: System.String;
    serverName: System.String;
    nickNumber: System.String;
    level: System.Int32;
    lastOnlineTime: System.DateTime;
    recentVisited: System.Boolean;
    avatar: Torappu.AvatarInfo;
  }
  export interface SharedCharData {
    charId: System.String;
    potentialRank: System.Int32;
    // m_skillIndex: System.Int32;
    // m_skinId: System.String;
    // m_skills: Torappu.SharedCharData.SharedCharSkillData[];
    mainSkillLvl: System.Int32;
    evolvePhase: System.Int32;
    level: System.Int32;
    favorPoint: System.Int32;
    crisisRecord: System.Collections.Generic.Dictionary<System.String,System.Int32>;
    currentTmpl: System.String;
    tmpl: Torappu.ListDict<System.String,Torappu.SharedCharData.TmplData>;
  }
  export interface RequestAssistChar {
    charInstId: System.Int32;
    S_skillIndex: System.Int32;
    S_currentTmpl: System.String;
    S_tmpl: Torappu.ListDict<System.String,Torappu.RequestAssistChar.Patch>;
  }
  export interface FriendData {
    assistCharList: System.Collections.Generic.List<Torappu.SharedCharData>;
    board: System.Collections.Generic.List<System.String>;
    infoShare: System.Int64;
    infoShareVisited: System.Int32;
  }
  export interface FriendDataWithNameCard {
    registerTs: System.DateTime;
    mainStageProgress: System.String;
    charCnt: System.Int32;
    furnCnt: System.Int32;
    secretary: System.String;
    secretarySkinId: System.String;
    resume: System.String;
    team: System.Collections.Generic.Dictionary<System.Int32,System.Int32>;
    teamV2: System.Collections.Generic.Dictionary<System.String,System.Int32>;
    medalBoard: Torappu.FriendMedalBoard;
  }
  export interface FriendMedalBoard {
    type: Torappu.NameCardMedalType;
    custom: Torappu.PlayerMedalCustomLayout;
    template: Torappu.FriendMedalTemplateGroupInfo;
  }
  export interface FriendMedalTemplateGroupInfo {
    groupId: System.String;
    medalList: System.Collections.Generic.List<System.String>;
  }
  export interface GetRewardMedalRequest {
    medalId: System.String;
    group: System.String;
  }
  export interface GetRewardMedalResponse {
    items: System.Collections.Generic.List<Torappu.ItemGet>;
  }
  export interface MedalSetCustomDataRequest {
    index: System.String;
    data: Torappu.MedalSetCustomDataRequest.Data;
  }
  export interface MedalSetCustomDataResponse {
  }
  export interface RoguelikeDataUtil {
    // <>f__am$cache0: System.Comparison<Torappu.PlayerRoguelikeItem>;
    // __Hotfix0_EnsurePlayerRoguelike: XLua.DelegateBridge;
    // __Hotfix0_IsInInitialState: XLua.DelegateBridge;
    // __Hotfix0_GetCurrentDungeonZone: XLua.DelegateBridge;
    // __Hotfix0_GetCurrentDepth: XLua.DelegateBridge;
    // __Hotfix0_GetCurrentIndex: XLua.DelegateBridge;
    // __Hotfix0_GetFinishedNode: XLua.DelegateBridge;
    // __Hotfix0_IsBattleNode: XLua.DelegateBridge;
    // __Hotfix0_IsChoiceNode: XLua.DelegateBridge;
    // __Hotfix0_IsShopNode: XLua.DelegateBridge;
    // __Hotfix0_IsCurrentNode: XLua.DelegateBridge;
    // __Hotfix0_CanReachNode: XLua.DelegateBridge;
    // __Hotfix0__SearchNode: XLua.DelegateBridge;
    // __Hotfix0_FetchFirstRecruitOrUpgradeTicket: XLua.DelegateBridge;
    // __Hotfix0_HasRrecruitOrUpgradeTicket: XLua.DelegateBridge;
    // __Hotfix0_GetLevelTargetExp: XLua.DelegateBridge;
    // __Hotfix0_CheckLevelUpStatus: XLua.DelegateBridge;
    // __Hotfix0_GetItemType: XLua.DelegateBridge;
    // __Hotfix0_GetItemName: XLua.DelegateBridge;
    // __Hotfix0_GetGoldItemName: XLua.DelegateBridge;
    // __Hotfix0_GetPopulationItemName: XLua.DelegateBridge;
    // __Hotfix0_TryGetUpgradeTicketFromItem: XLua.DelegateBridge;
    // __Hotfix0_IsUpgradeTicketItem: XLua.DelegateBridge;
    // __Hotfix0_GetUpgradableCharCount: XLua.DelegateBridge;
    // __Hotfix0_GetRecruitSimilarCharCount: XLua.DelegateBridge;
    // __Hotfix0_GetRelicFeatures: XLua.DelegateBridge;
    // __Hotfix0_GetOutBuffs: XLua.DelegateBridge;
    // __Hotfix0_CreateBattlePlayerData: XLua.DelegateBridge;
    // __Hotfix0_GenerateSkillViewModel: XLua.DelegateBridge;
    // __Hotfix0_HasCharacter: XLua.DelegateBridge;
  }
  export interface CashPurchaseOptions {
    EMPTY: Torappu.CashPurchaseOptions;
    productId: System.String;
    // onPurchaseSuc: System.Action<Torappu.PayConfirmOrderResponse>;
    // onPendingOrders: System.Action<System.Collections.Generic.List<System.String>>;
  }
  export interface ShopCashPurchaseUtil {
    // m_options: Torappu.CashPurchaseOptions;
    // m_context: Torappu.ShopCashPurchaseUtil.Context;
    // m_unfinishedOrdersFromLogin: System.Collections.Generic.List<System.String>;
    // <>f__am$cache0: System.Action<Torappu.PayGetUnconfirmedOrderListResponse>;
    // <>f__am$cache1: System.Func<Torappu.Network.ResponseError,System.Boolean>;
    // <>f__am$cache2: System.Action<System.Collections.Generic.List<System.String>>;
    // <>f__am$cache3: System.Action<System.String>;
    // <>f__am$cache4: System.Action<System.Object>;
    // <>f__am$cache5: System.Action<U8.SDK.U8PayResult>;
    // <>f__am$cache6: System.Action<System.Object>;
    // <>f__am$cache7: System.Action<U8.SDK.U8ConfirmOrderResult>;
    // <>f__am$cache8: System.Action<Torappu.PayConfirmOrderResponse>;
    // <>f__am$cache9: System.Func<Torappu.Network.ResponseError,System.Boolean>;
    // <>f__am$cacheA: System.Action;
    // __Hotfix0_get_hasUnconfirmedOrdersFromLogin: XLua.DelegateBridge;
    // __Hotfix0_ConsumeConfirmedUnfinishedOrders: XLua.DelegateBridge;
    // __Hotfix0_ReceiveItemsFromUnfinishedOrders: XLua.DelegateBridge;
    // __Hotfix0__ReceiveItemsFromOrderWithAlert: XLua.DelegateBridge;
    // __Hotfix0_TryConfirmOrderWhenLogin: XLua.DelegateBridge;
    // __Hotfix0_ConfirmUnfinishedOrders: XLua.DelegateBridge;
    // __Hotfix0__ConfirmUnfinishedOrder: XLua.DelegateBridge;
    // __Hotfix0_StartPurchase: XLua.DelegateBridge;
    // __Hotfix0__CreateOrder: XLua.DelegateBridge;
    // __Hotfix0__Pay: XLua.DelegateBridge;
    // __Hotfix0__ConfirmOrder: XLua.DelegateBridge;
    // __Hotfix0__LogTraceOnConfirmOrder: XLua.DelegateBridge;
    // __Hotfix0__SendGetPurchaseGoods: XLua.DelegateBridge;
    // __Hotfix0__OnGetPurchaseGoodsFail: XLua.DelegateBridge;
    // __Hotfix0__AlertErrorAndFail: XLua.DelegateBridge;
    // __Hotfix0__AlertErrorAndToInitScene: XLua.DelegateBridge;
    // __Hotfix0__RouteToInitScene: XLua.DelegateBridge;
    // __Hotfix0__SendCreateOrder: XLua.DelegateBridge;
    // __Hotfix0__IsMockedPay: XLua.DelegateBridge;
    // __Hotfix0__OnPurchaseSuc: XLua.DelegateBridge;
    // __Hotfix0__OnPurchaseFail: XLua.DelegateBridge;
    // __Hotfix0__OnPendingOrders: XLua.DelegateBridge;
  }
  export enum ShopDetailType {
    CHAR = "CHAR",
    PROGRESS = "PROGRESS",
    COMMON = "COMMON",
    GIFTPACKAGE = "GIFTPACKAGE",
    FURNITURE = "FURNITURE",
    MONTHLYSUB = "MONTHLYSUB",
    CASH = "CASH",
  }
  export enum ShopDetailPriceType {
    CASH = "CASH",
    HIGHQC = "HIGHQC",
    LOWQC = "LOWQC",
    EXTRAQC = "EXTRAQC",
    FURNITURE = "FURNITURE",
    DIAMOND = "DIAMOND",
    SOCIAL = "SOCIAL",
    LMTGS_COIN = "LMTGS_COIN",
    EPGS_COIN = "EPGS_COIN",
    REP_COIN = "REP_COIN",
  }
  export enum ShopItemType {
    NORMAL = "NORMAL",
    PROGRESS = "PROGRESS",
  }
  export interface ShopConst {
    SHOP_COUNT: System.Int32;
    COUNT_DOWN_DAY_LIMIT: System.Int32;
    SHOP_MIN_PRIOITY: System.Int32;
    ONSHOWSHOP: System.String;
    CASHSHOP: System.String;
    GPSHOP: System.String;
    HIGHQCSHOP: System.String;
    LOWQCSHOP: System.String;
    EXTRAQCSHOP: System.String;
    FURNSHOP: System.String;
    SOCIALSHOP: System.String;
    FURNITURE: System.String;
    LMTGS: System.String;
    EPGS: System.String;
    REP: System.String;
    DEFAULT_BACK: System.String;
    DIAMOND_IMG: System.String;
    DIAMOND_BACK: System.String;
    CANVAS_SOLDOUT_ALPHA: System.Single;
    SHOP_TYPE_STRING: System.String[];
    SHOP_GG_RESCOURCE: System.Int32;
  }
  export interface ValidStageEnumerator {
    // m_targetTs: System.Int64;
    // m_current: System.Collections.Generic.KeyValuePair<System.String,Torappu.StageData>;
    // m_rawEnum: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,Torappu.StageData>>;
    // _c__Hotfix0_ctor: XLua.DelegateBridge;
    // __Hotfix0_get_Current: XLua.DelegateBridge;
    // __Hotfix0_System.Collections.IEnumerator.get_Current: XLua.DelegateBridge;
    // __Hotfix0_Dispose: XLua.DelegateBridge;
    // __Hotfix0_MoveNext: XLua.DelegateBridge;
    // __Hotfix0_Reset: XLua.DelegateBridge;
  }
  export interface StageDataUtil {
    // __Hotfix0_LoadStagePreviewMap: XLua.DelegateBridge;
    // __Hotfix0_GetZoneViewTypeByZoneType: XLua.DelegateBridge;
    // __Hotfix0__GetSortIndex: XLua.DelegateBridge;
    // __Hotfix0_LoadZonesView: XLua.DelegateBridge;
    // __Hotfix0_FindValidTimelyDrop: XLua.DelegateBridge;
    // __Hotfix0_WeeklyZoneOpenInfo: XLua.DelegateBridge;
    // __Hotfix0_IsWeeklyZoneOpen: XLua.DelegateBridge;
    // __Hotfix0_CheckIfWeeklyStage: XLua.DelegateBridge;
    // __Hotfix0_CheckIfStageAvailable: XLua.DelegateBridge;
    // __Hotfix0__CheckIfWeeklyAvailable: XLua.DelegateBridge;
    // __Hotfix0_QueryPlayerHardLevel: XLua.DelegateBridge;
    // __Hotfix0_GetMainStageProgress: XLua.DelegateBridge;
    // __Hotfix0_ConvertStageId: XLua.DelegateBridge;
    // __Hotfix0_GetStageRank: XLua.DelegateBridge;
    // __Hotfix0_CheckStageMapType: XLua.DelegateBridge;
    // __Hotfix1_CheckStageMapType: XLua.DelegateBridge;
    // __Hotfix0_IsWeeklyFuncUnlocked: XLua.DelegateBridge;
    // __Hotfix0_IsCampaignFuncUnlocked: XLua.DelegateBridge;
    // __Hotfix0_IsCampaignStageOpen: XLua.DelegateBridge;
    // __Hotfix0_HasOpenCampaigns: XLua.DelegateBridge;
    // __Hotfix0_TryGetActiveCampaignGroup: XLua.DelegateBridge;
    // __Hotfix0_TryGetCampaignStage: XLua.DelegateBridge;
    // __Hotfix0__GetActiveCampaignGroup: XLua.DelegateBridge;
    // __Hotfix0_GetWeeklyTypeName: XLua.DelegateBridge;
    // __Hotfix0__CheckAndLoadAsset: XLua.DelegateBridge;
    // __Hotfix0_GetZoneMapAssetPath: XLua.DelegateBridge;
    // __Hotfix0_WriteLastPlayedStageToLocalCache: XLua.DelegateBridge;
    // __Hotfix0_GetStagePlayerState: XLua.DelegateBridge;
    // __Hotfix0_GetMainlinePreposedStageData: XLua.DelegateBridge;
    // __Hotfix0_CheckIsCampaign: XLua.DelegateBridge;
    // __Hotfix0_CheckIsPerformance: XLua.DelegateBridge;
    // __Hotfix0_GetStageOrNull: XLua.DelegateBridge;
    // __Hotfix0_GetStageIgnoreTime: XLua.DelegateBridge;
    // __Hotfix0_TryGetStageIgnoreTime: XLua.DelegateBridge;
    // __Hotfix1_GetStageOrNull: XLua.DelegateBridge;
    // __Hotfix0_TryGetStage: XLua.DelegateBridge;
    // __Hotfix0_TryGetStageWrapper: XLua.DelegateBridge;
    // __Hotfix0__TryGetStageImpl: XLua.DelegateBridge;
    // __Hotfix0_ValidStageEnumerator: XLua.DelegateBridge;
  }
  export interface FuncVersion {
    V001: System.String;
    V002: System.String;
    V003: System.String;
    V004: System.String;
    V005: System.String;
    V006: System.String;
    V007: System.String;
    V008: System.String;
    V009: System.String;
    V010: System.String;
    V011: System.String;
    V012: System.String;
    V013: System.String;
    V014: System.String;
    V015: System.String;
    V016: System.String;
    V017: System.String;
    V018: System.String;
  }
  export interface VersionCompat {
    // s_targetFunVer: System.String;
    CUR_FUNC_VER: System.String;
    // __Hotfix0_SetFuncVersion: XLua.DelegateBridge;
    // __Hotfix0_FuncVersion: XLua.DelegateBridge;
    // __Hotfix0_GetVersion4Display: XLua.DelegateBridge;
  }
  export namespace Activity {
    export interface ActivityServiceCode {
      CONFIRM_MISSION: System.String;
      EXCHANGE_SHOP_ITEM: System.String;
      CONFIRM_MISSION_GROUP: System.String;
      GET_SHOP_INFO: System.String;
      GET_COLLECTION_REWARD: System.String;
      CHECK_COLLECTION_MISSIONS: System.String;
    }
    export interface ActivityConfirmMissionRequest {
      missionId: System.String;
      activityId: System.String;
    }
    export interface RewardItemModel {
      type: Torappu.ItemType;
      id: System.String;
      charGet: Torappu.GachaResult;
      count: System.Int32;
    }
    export interface ActivityConfirmMissionResponse {
      items: System.Collections.Generic.List<Torappu.Activity.RewardItemModel>;
    }
    export interface ActivityConfirmMissionGroupRequest {
      groupId: System.String;
      activityId: System.String;
    }
    export interface ActivityConfirmMissionGroupResponse {
      items: System.Collections.Generic.List<Torappu.Activity.RewardItemModel>;
    }
    export interface ActivityFirstExchangeShopRequest {
      activityId: System.String;
      goodId: System.String;
      count: System.Int32;
    }
    export interface ActivityFirstExchangeShopResponse {
      item: Torappu.Activity.RewardItemModel;
    }
    export interface ActivityGetShopListRequest {
      activityId: System.String;
    }
    export interface ActivityShopData {
      goodId: System.String;
      slotId: System.Int32;
      price: System.Int32;
      availCount: System.Int32;
      overrideName: System.String;
      item: Torappu.ItemBundle;
    }
    export interface ActivityGetShopListResponse {
      shopList: System.Collections.Generic.List<Torappu.Activity.ActivityShopData>;
    }
    export interface ActivityGetCollectionRewardRequest {
      index: System.Int32;
      activityId: System.String;
    }
    export interface ActivityGetCollectionRewardResponse {
      items: System.Collections.Generic.List<Torappu.Activity.RewardItemModel>;
    }
    export interface ActivityMissionCheckRequest {
      missionIds: System.Collections.Generic.List<System.String>;
      activityId: System.String;
    }
    export interface ActivityMissionCheckResponse {
      items: System.Collections.Generic.List<Torappu.Activity.RewardItemModel>;
    }
    export interface Act12D6OuterBuffDetailState {
      _view: Torappu.Activity.Act12D6.Act12D6OuterBuffDetailView;
      // _onOuterBuffUpgradeClicked: Torappu.UI.UIStringEvent;
      // _topMenuContainer: UnityEngine.RectTransform;
      // m_stateBean: Torappu.Activity.Act12D6.Act12D6OuterBuffDetailStateBean;
      // m_topMenu: Torappu.UI.CommonTopMenu;
      // m_inited: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
      // __Hotfix0_OnEnter: XLua.DelegateBridge;
      // __Hotfix0__InitIfNot: XLua.DelegateBridge;
      // __Hotfix0_EventOnOuterBuffUpgrade: XLua.DelegateBridge;
    }
    export interface Act12D6OuterBuffState {
      _view: Torappu.Activity.Act12D6.Act12D6OuterBuffView;
      _coinView: Torappu.Activity.Act12D6.Act12D6CoinView;
      // _topMenuContainer: UnityEngine.RectTransform;
      // m_stateBean: Torappu.Activity.Act12D6.Act12D6OuterBuffStateBean;
      // m_topMenu: Torappu.UI.CommonTopMenu;
      // m_inited: System.Boolean;
      // m_cachedBuffId: System.String;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
      // __Hotfix0_OnEnter: XLua.DelegateBridge;
      // __Hotfix0_RegisterToDataListener: XLua.DelegateBridge;
      // __Hotfix0_RegisterFromDataListener: XLua.DelegateBridge;
      // __Hotfix0_EventOnOuterBuffDetail: XLua.DelegateBridge;
      // __Hotfix0_EventOnMaxLevel: XLua.DelegateBridge;
      // __Hotfix0__InitIfNot: XLua.DelegateBridge;
    }
    export interface Act12D6RelicHandBookState {
      _view: Torappu.Activity.Act12D6.Act12D6RelicHandBookView;
      // _topMenuContainer: UnityEngine.RectTransform;
      // m_stateBean: Torappu.Activity.Act12D6.Act12D6RelicHandBookStateBean;
      // m_topMenu: Torappu.UI.CommonTopMenu;
      // m_inited: System.Boolean;
      // m_cachedChosenRelicId: System.String;
      // m_cachedSortType: Torappu.Activity.Act12D6.eRelicSortType;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
      // __Hotfix0_OnEnter: XLua.DelegateBridge;
      // __Hotfix0__InitIfNot: XLua.DelegateBridge;
      // __Hotfix0_EventOnRelicClicked: XLua.DelegateBridge;
      // __Hotfix0_EventOnSortRelicAll: XLua.DelegateBridge;
      // __Hotfix0_EventOnSortRelicNew: XLua.DelegateBridge;
      // __Hotfix0_EventOnSortRelicLocked: XLua.DelegateBridge;
      // __Hotfix0__RenderView: XLua.DelegateBridge;
    }
    export interface MileStoneViewModel {
      id: System.String;
      orderId: System.Int32;
      type: Torappu.Activity.MileStoneViewModel.PartType;
      state: Torappu.Activity.MileStoneViewModel.State;
      count: System.Int32;
      rewardItem: Torappu.ItemBundle;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_CompareTo: XLua.DelegateBridge;
    }
    export interface Act9D0FavorUpState {
      _view: Torappu.Activity.Act9D0.Act9D0FavorUpView;
      // _topMenuContainer: UnityEngine.RectTransform;
      // m_topMenu: Torappu.UI.CommonTopMenu;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
      // __Hotfix0_OnEnter: XLua.DelegateBridge;
      // __Hotfix0_OnResume: XLua.DelegateBridge;
      // __Hotfix0_EventOnBackgroundClicked: XLua.DelegateBridge;
      // __Hotfix0__InitTopMenu: XLua.DelegateBridge;
    }
    export interface ActivityCommonEntry {
      // m_page: Torappu.UI.UIPage;
      // DismissFunc: UnityEngine.Events.UnityEvent;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_OnExit: XLua.DelegateBridge;
      // __Hotfix0_get_page: XLua.DelegateBridge;
      // __Hotfix0_Dismiss: XLua.DelegateBridge;
      // __Hotfix0_InjectPage: XLua.DelegateBridge;
    }
    export interface ActivityUtil {
      ACT_LOCAL_CACHE_PREFIX_WATCHED_FAVOR_UP_CHAR_ID: System.String;
    }
    export interface ActDefaultResHolder {
      // _homeSprite: UnityEngine.Sprite;
      // _homeSpriteMultiMode: UnityEngine.Sprite;
      // _topbarSprite: UnityEngine.Sprite;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_homeSprite: XLua.DelegateBridge;
      // __Hotfix0_get_homeSpriteMultiMode: XLua.DelegateBridge;
      // __Hotfix0_get_topbarSprite: XLua.DelegateBridge;
    }
    export interface ActivityItemNameView {
      // _textItemName: UnityEngine.UI.Text;
      _itemId: System.String;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Start: XLua.DelegateBridge;
      // __Hotfix0__ApplyCoinName: XLua.DelegateBridge;
    }
    export interface ActivityLocalCache {
      localIntDict: System.Collections.Generic.Dictionary<System.String,System.Int32>;
      localStringDict: System.Collections.Generic.Dictionary<System.String,System.String>;
    }
    export interface ActLocalCacheHandler {
      // s_memCache: Torappu.Activity.ActivityLocalCache;
    }
    export interface ActivityResHolder {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_homeSpriteMultiMode: XLua.DelegateBridge;
      // __Hotfix0_get_zoneHomeRes: XLua.DelegateBridge;
    }
    export interface ActivityStageBindCompsToPage {
      // _canvases: UnityEngine.Canvas[];
      // _renderers: UnityEngine.Renderer[];
      // m_rendererCollection: Torappu.Activity.ActivityStageBindCompsToPage.RendererCollection;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_OnLoaded: XLua.DelegateBridge;
      // __Hotfix0_BeforeUnload: XLua.DelegateBridge;
      // __Hotfix0_OnDestroy: XLua.DelegateBridge;
    }
    export interface ActivityAssetHolder {
      _aspect: System.String;
      _activityId: System.String;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_aspect: XLua.DelegateBridge;
      // __Hotfix0_get_activityId: XLua.DelegateBridge;
      // __Hotfix0__SelectableAspects: XLua.DelegateBridge;
      // __Hotfix0_OnPrefabUpdated: XLua.DelegateBridge;
      // __Hotfix0_PrefabUpdated: XLua.DelegateBridge;
      // __Hotfix0_LockAspect: XLua.DelegateBridge;
    }
    export interface ActivityAssetAspects {
      ITEM_ICON: System.String;
      ZONE_MAP: System.String;
      START_BATTLE_BUTTON: System.String;
      TIMELY_DROP: System.String;
      STAGE_BTN: System.String;
      ZONE_MAP_PLUGIN: System.String;
      BATTLE: System.String;
      BATTLE_FINISH: System.String;
      TEMPLATE_SHOP: System.String;
    }
    export interface ActivityAssetMap {
      // m_data: Torappu.Activity.ActivityAssetMap.InternalData;
      // m_isLoaded: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0__Load: XLua.DelegateBridge;
      // __Hotfix0__InitIfNot: XLua.DelegateBridge;
      // __Hotfix0_ForceReload: XLua.DelegateBridge;
      // __Hotfix0_GetAssetResPath: XLua.DelegateBridge;
    }
    export interface ActivityGameObjectAssetHolder {
      // _gameObjectList: UnityEngine.GameObject[];
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetAssetIdList: XLua.DelegateBridge;
      // __Hotfix0_TryFindGameObject: XLua.DelegateBridge;
    }
    export interface ActivitySpriteAssetHolder {
      // _sprites: UnityEngine.Sprite[];
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetAssetIdList: XLua.DelegateBridge;
      // __Hotfix0_TryFindSprite: XLua.DelegateBridge;
    }
    export interface ActivityStageButtonHolder {
      // _btnPatches: System.Collections.Generic.List<Torappu.UI.Stage.StageButtonPatch>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetAssetIdList: XLua.DelegateBridge;
      // __Hotfix0_LockAspect: XLua.DelegateBridge;
      // __Hotfix0_TryGetStageButtonPatch: XLua.DelegateBridge;
      // __Hotfix0_SavePatch: XLua.DelegateBridge;
    }
    export interface ActivityStartBattleButtonStyle {
      _styles: Torappu.Activity.ActivityStartBattleButtonStyle.Style[];
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetAssetIdList: XLua.DelegateBridge;
      // __Hotfix0_TryFindStyle: XLua.DelegateBridge;
      // __Hotfix0_LockAspect: XLua.DelegateBridge;
    }
    export interface ActivityZoneMapHolder {
      _zoneId: System.String;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_zoneId: XLua.DelegateBridge;
      // __Hotfix0_GetAssetIdList: XLua.DelegateBridge;
      // __Hotfix0_LockAspect: XLua.DelegateBridge;
    }
    export interface ActivityZoneMapPluginHolder {
      // _plugin: Torappu.UI.Stage.StageZoneMapStatePlugin;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_LockAspect: XLua.DelegateBridge;
      // __Hotfix0_GetAssetIdList: XLua.DelegateBridge;
      // __Hotfix0_get_plugin: XLua.DelegateBridge;
    }
    export interface ActivityBattleFinishView {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetAssetIdList: XLua.DelegateBridge;
      // __Hotfix0_LockAspect: XLua.DelegateBridge;
      // __Hotfix0_TriggetInit: XLua.DelegateBridge;
    }
    export interface ActivityDataFromServer<DataType> {
      ACT_DATA_FROM_SERVER: System.String;
      // m_dataId: System.String;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetDataId: XLua.DelegateBridge;
    }
    export interface AbstractRemainTime {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
    }
    export interface AbstractStageTime {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
    }
    export interface ActivitySpriteStageTime {
      // _rewardTimeImage: UnityEngine.GameObject;
      // _stageTimeImage: UnityEngine.GameObject;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_SetRewardTimeActive: XLua.DelegateBridge;
      // __Hotfix0_SetStageTimeActive: XLua.DelegateBridge;
    }
    export interface ActivityTextRemainTime {
      // _text: UnityEngine.UI.Text;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_SetRemainTime: XLua.DelegateBridge;
    }
    export interface ActCommonFavorUpStateBean {
      input: Torappu.Activity.ActCommonFavorUpStateBean.Input;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
    }
    export interface ActCommonFavorUpState {
      _view: Torappu.Activity.ActCommonFavorUpView;
      // _topMenuContainer: UnityEngine.RectTransform;
      // m_topMenu: Torappu.UI.CommonTopMenu;
      // m_stateBean: Torappu.Activity.ActCommonFavorUpStateBean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
      // __Hotfix0_OnEnter: XLua.DelegateBridge;
      // __Hotfix0_EventOnBackgroundClicked: XLua.DelegateBridge;
      // __Hotfix0__InitTopMenu: XLua.DelegateBridge;
    }
    export interface ActCommonFavorUpView {
      // _newUpGroup: Torappu.UI.SimpleLayoutContent;
      // _upGroup: Torappu.UI.SimpleLayoutContent;
      // _imageNew: UnityEngine.GameObject;
      // _panelSplit: UnityEngine.GameObject;
      // m_newUpCharList: System.Collections.Generic.List<Torappu.Activity.ActCommonFavorUpView.ActFavorUpCharData>;
      // m_upCharList: System.Collections.Generic.List<Torappu.Activity.ActCommonFavorUpView.ActFavorUpCharData>;
      // m_newUpGroupAdapter: Torappu.Activity.ActCommonFavorUpView.ActFavorUpGroupViewAdapter;
      // m_upGroupAdapter: Torappu.Activity.ActCommonFavorUpView.ActFavorUpGroupViewAdapter;
      // m_inited: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Render: XLua.DelegateBridge;
      // __Hotfix0__InitIfNot: XLua.DelegateBridge;
      // __Hotfix0__CompareFavorUpChar: XLua.DelegateBridge;
    }
    export interface ActFavorUpCharView {
      // _imageChar: UnityEngine.UI.Image;
      // _imageBkg: UnityEngine.UI.Image;
      // _textName: UnityEngine.UI.Text;
      // _spriteBkg4: UnityEngine.Sprite;
      // _spriteBkg5: UnityEngine.Sprite;
      // _spriteBkg6: UnityEngine.Sprite;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Render: XLua.DelegateBridge;
    }
    export interface ActResUtil {
    }
    export interface MileStoneItemHolder {
      item: Torappu.Activity.MileStoneItem;
    }
    export interface MileStoneGridAdapter {
      // _itemEvent: Torappu.UI.UIStringEvent;
      // _mileStoneItem: UnityEngine.GameObject;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_ViewConstructor: XLua.DelegateBridge;
      // __Hotfix0_UpdateView: XLua.DelegateBridge;
    }
    export interface MileStoneHolder {
      // _content: Torappu.UI.LoopVerticalScrollRect;
      _adapter: Torappu.Activity.MileStoneGridAdapter;
      _max: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_RenderInfo: XLua.DelegateBridge;
      // __Hotfix0_RefreshInfo: XLua.DelegateBridge;
      // __Hotfix0__RenderMileStonePart: XLua.DelegateBridge;
      // __Hotfix0__ScrollToRewardableSlot: XLua.DelegateBridge;
      // __Hotfix0__RefreshTargetState: XLua.DelegateBridge;
    }
    export interface MileStoneItem {
      // clickEvent: Torappu.UI.UIStringEvent;
      _scaleInfo: System.Single;
      // _itemViewContainer: UnityEngine.Transform;
      // m_isInited: System.Boolean;
      // m_itemCard: Torappu.UI.UIItemCard;
      // m_cacheId: System.String;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_itemCard: XLua.DelegateBridge;
      // __Hotfix0__Inited: XLua.DelegateBridge;
      // __Hotfix0_OnClick: XLua.DelegateBridge;
      // __Hotfix0_InitData: XLua.DelegateBridge;
      // __Hotfix0_OnRenderDataPart: XLua.DelegateBridge;
      // __Hotfix0_OnRenderItemStyle: XLua.DelegateBridge;
    }
    export interface MileStoneState {
      PRELOAD_FRAME_CNT: System.Int32;
      _stateBean: Torappu.Activity.MileStoneStateBean;
      _view: Torappu.Activity.MileStoneHolder;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
      // __Hotfix0_OnEnter: XLua.DelegateBridge;
      // __Hotfix0_WaitForLoading: XLua.DelegateBridge;
      // __Hotfix0_SendItemRequest: XLua.DelegateBridge;
      // __Hotfix0__SendItemRequest: XLua.DelegateBridge;
      // __Hotfix0_ReceiveItemsCoroutine: XLua.DelegateBridge;
    }
    export interface MileStoneStateBean {
      viewModelList: System.Collections.Generic.List<Torappu.Activity.MileStoneViewModel>;
      currentStone: System.Int32;
      spRewardId: System.String;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_InitInfo: XLua.DelegateBridge;
    }
    export interface Act5D0Service {
      GET_MILESTONE_ITEM_REWARD: System.String;
    }
    export interface MileStoneRequest {
      activityId: System.String;
      rewardId: System.String;
    }
    export interface MileStoneItemResponse {
      reward: System.Collections.Generic.List<Torappu.ActivityItemModel>;
    }
    export interface ActCommonReplicateItem {
      // _itemContainer1: UnityEngine.Transform;
      // _itemContainer2: UnityEngine.Transform;
      // _lastIgnoreObj: UnityEngine.GameObject;
      // _itemNameGo: UnityEngine.GameObject;
      _scaleFactor: System.Single;
      // m_isInited: System.Boolean;
      // m_itemCard1: Torappu.UI.UIItemCard;
      // m_itemCard2: Torappu.UI.UIItemCard;
      // m_text_name1: UnityEngine.UI.Text;
      // m_slideName1: Torappu.UI.UIAutoSlideRect;
      // m_slideCoroutine: UnityEngine.Coroutine;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0__InitIfNot: XLua.DelegateBridge;
      // __Hotfix0_Render: XLua.DelegateBridge;
      // __Hotfix0__TryEnableTextSlide: XLua.DelegateBridge;
      // __Hotfix0__ClearCoroutine: XLua.DelegateBridge;
      // __Hotfix0_OnDisable: XLua.DelegateBridge;
    }
    export interface ActCommonReplicateState {
      _view: Torappu.Activity.ActCommonReplicateView;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_OnEnter: XLua.DelegateBridge;
      // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
      // __Hotfix0_ToShopPage: XLua.DelegateBridge;
    }
    export interface ActCommonReplicateView {
      // _content: Torappu.UI.SimpleLayoutContent;
      // m_adatper: Torappu.Activity.ActCommonReplicateView.Adapter;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0__InitIfNot: XLua.DelegateBridge;
      // __Hotfix0_Render: XLua.DelegateBridge;
    }
    export interface UIActTrackPoint {
      // _pointContainer: UnityEngine.Transform;
      // m_isInited: System.Boolean;
      // m_trackPoint: UnityEngine.GameObject;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_trackPoint: XLua.DelegateBridge;
      // __Hotfix0__InitIfNot: XLua.DelegateBridge;
      // __Hotfix0_OnValueChanged: XLua.DelegateBridge;
    }
    export interface ActivityCheckinServiceCode {
      GET_CHECKIN_REWARD: System.String;
    }
    export interface ActivityConfirmCheckinRequest {
      index: System.Int32;
      activityId: System.String;
    }
    export interface ActivityConfirmCheckinResponse {
      items: System.Collections.Generic.List<Torappu.Activity.RewardItemModel>;
    }
    export interface ActivityCommonCheckinDotObj {
      // _image: UnityEngine.UI.Image;
      // _button: UnityEngine.UI.Button;
      // m_index: System.Int32;
      // m_onClick: System.Action<System.Int32>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_SetClickListener: XLua.DelegateBridge;
      // __Hotfix0_SetImageAndColor: XLua.DelegateBridge;
      // __Hotfix0_EventOnClick: XLua.DelegateBridge;
    }
    export interface ActivityCommonCheckinDotView {
      LINE_NAME: System.String;
      DOT_NAME: System.String;
      LINE_HEIGHT: System.Int32;
      // _container: UnityEngine.Transform;
      _dotObj: Torappu.Activity.ActivityCommonCheckinDotObj;
      // m_splitPos: System.Int32;
      // m_width: System.Single;
      // m_dotList: System.Collections.Generic.List<Torappu.Activity.ActivityCommonCheckinDotObj>;
      // m_whiteLine: UnityEngine.GameObject;
      // m_grayLine: UnityEngine.GameObject;
      // m_onDotClick: System.Action<System.Int32,System.Int32>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_RenderView: XLua.DelegateBridge;
      // __Hotfix0__RenderLines: XLua.DelegateBridge;
      // __Hotfix0__RenderDots: XLua.DelegateBridge;
      // __Hotfix0__InstLine: XLua.DelegateBridge;
      // __Hotfix0__UpdateWhiteLineTransform: XLua.DelegateBridge;
      // __Hotfix0__UpdateGrayLineTransform: XLua.DelegateBridge;
      // __Hotfix0__UpdateImagePos: XLua.DelegateBridge;
      // __Hotfix0__OnDotClick: XLua.DelegateBridge;
    }
    export interface ActivityCommonCheckinEntry {
      // <actId>k__BackingField: System.String;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_set_actId: XLua.DelegateBridge;
      // __Hotfix0_get_actId: XLua.DelegateBridge;
      // __Hotfix0_OnEnter: XLua.DelegateBridge;
      // __Hotfix0__SendCheckinRequest: XLua.DelegateBridge;
      // __Hotfix0__ReceiveItemsCoroutine: XLua.DelegateBridge;
    }
    export interface ActivityCommonCheckinItem {
      // _itemContainer: UnityEngine.Transform;
      // _canReceiveBack: UnityEngine.GameObject;
      // _normalBack: UnityEngine.GameObject;
      // _canNotReceiveBtn: UnityEngine.GameObject;
      // _alreadyReceiveBtn: UnityEngine.GameObject;
      // _acceptReceiveBack: UnityEngine.GameObject;
      // _canvasGroup: UnityEngine.CanvasGroup;
      // _orderIndex: UnityEngine.UI.Text;
      _itemObj: Torappu.Activity.ActivityCommonCheckinItemObj;
      // clickEvent: Torappu.UI.UIIntEvent;
      // _animator: UnityEngine.Animator;
      // m_order: System.Int32;
      // m_isReceived: System.Boolean;
      ANIMATOR_PARAM: System.String;
      // m_itemCardList: System.Collections.Generic.List<Torappu.Activity.ActivityCommonCheckinItemObj>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_OnEnable: XLua.DelegateBridge;
      // __Hotfix0__RenderItem: XLua.DelegateBridge;
      // __Hotfix0_RenderItemView: XLua.DelegateBridge;
      // __Hotfix0_OnReceive: XLua.DelegateBridge;
    }
    export interface ActivityCommonCheckinItemObj {
      // _itemContainer: UnityEngine.Transform;
      _itemScaler: System.Single;
      // _receiveImg: UnityEngine.RectTransform;
      // m_itemCard: Torappu.UI.UIItemCard;
      // m_isInited: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0__InitIfNot: XLua.DelegateBridge;
      // __Hotfix0_Render: XLua.DelegateBridge;
      // __Hotfix0__OnItemCardClicked: XLua.DelegateBridge;
      // __Hotfix0_GetHashString: XLua.DelegateBridge;
    }
    export interface ActivityCommonCheckinV2Item {
      ANIMATOR_PARAM: System.String;
      // _itemContainer: UnityEngine.Transform;
      // _orderIndex: UnityEngine.UI.Text;
      // _normalShadow: UnityEngine.UI.Image;
      // _normalBg: UnityEngine.UI.Image;
      // _acceptableLight: UnityEngine.UI.Image;
      // _acceptableBg: UnityEngine.UI.Image;
      // _logoImg: UnityEngine.UI.Image;
      // _rewardDot: UnityEngine.UI.Image;
      // _rewardAcceptableMask: UnityEngine.UI.Image;
      // _decImg: UnityEngine.UI.Image;
      // _decorImg: UnityEngine.UI.Image;
      // _rewardAcceptableDot: UnityEngine.UI.Image;
      // _hotSpot: UnityEngine.GameObject;
      // _arrowImg: UnityEngine.UI.Image;
      // _alreadyGetMask: UnityEngine.UI.Image;
      // _alreadyGetImg: UnityEngine.UI.Image;
      // _alreadyGetLabel: UnityEngine.UI.Image;
      _itemObj: Torappu.Activity.ActivityCommonCheckinV2ItemObj;
      _oneItemConfig: Torappu.Activity.ActivityCommonCheckinV2Item.ItemObjConfig;
      _twoItemConfig: Torappu.Activity.ActivityCommonCheckinV2Item.ItemObjConfig;
      _threeItemConfig: Torappu.Activity.ActivityCommonCheckinV2Item.ItemObjConfig;
      // clickEvent: Torappu.UI.UIIntEvent;
      // m_order: System.Int32;
      // m_isClickable: System.Boolean;
      // m_itemCardList: System.Collections.Generic.List<Torappu.Activity.ActivityCommonCheckinV2ItemObj>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_RenderItemView: XLua.DelegateBridge;
      // __Hotfix0__RenderItem: XLua.DelegateBridge;
      // __Hotfix0__GetItemObjConfig: XLua.DelegateBridge;
      // __Hotfix0_OnReceive: XLua.DelegateBridge;
    }
    export interface ActivityCommonCheckinV2ItemObj {
      // _itemContainer: UnityEngine.Transform;
      _itemScaler: System.Single;
      // _layoutElement: UnityEngine.UI.LayoutElement;
      // m_itemCard: Torappu.UI.UIItemCard;
      // m_isInited: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0__InitIfNot: XLua.DelegateBridge;
      // __Hotfix0_Render: XLua.DelegateBridge;
      // __Hotfix0__OnItemCardClicked: XLua.DelegateBridge;
    }
    export interface ActivityCommonMissionEntry {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
    }
    export interface ActivityCommonMissionItem {
      // _missionDetail: UnityEngine.UI.Text;
      // _coinCount: UnityEngine.UI.Text;
      // _itemContainer: UnityEngine.Transform;
      // _canAchievePart: UnityEngine.GameObject;
      // _onUsingPart: UnityEngine.GameObject;
      // _stateText: UnityEngine.UI.Text;
      _itemCardScaleFactor: System.Single;
      // _lineBar: UnityEngine.RectTransform;
      _lineLength: System.Single;
      // sendEvent: Torappu.UI.UIStringEvent;
      // m_itemCard: Torappu.UI.UIItemCard;
      // m_itemCardList: System.Collections.Generic.List<Torappu.UI.UIItemCard>;
      // m_missionId: System.String;
    }
    export namespace Act0D5 {
      export interface Act0D5Entry {
        // _container: UnityEngine.Transform;
        _missionItem: Torappu.Activity.ActivityCommonMissionItem;
        // _allFinishPart: UnityEngine.GameObject;
        // _notAllFinishPart: UnityEngine.GameObject;
        // _btnReceived: UnityEngine.GameObject;
        // _btnLocked: UnityEngine.GameObject;
        // _btnAble: UnityEngine.GameObject;
        maxLength: System.Single;
        // _yellowBar: UnityEngine.RectTransform;
        // _remainTime: UnityEngine.UI.Text;
        // m_missionGroup: Torappu.MissionGroup;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0__RenderMissionGroup: XLua.DelegateBridge;
        // __Hotfix0_SendMissionRequest: XLua.DelegateBridge;
        // __Hotfix0_SendMissionGroupRequest: XLua.DelegateBridge;
        // __Hotfix0__ReceiveItemsCoroutine: XLua.DelegateBridge;
      }
      export interface Activity0D5ResHolder {
        // _homeSprite: UnityEngine.Sprite;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_topbarSprite: XLua.DelegateBridge;
        // __Hotfix0_get_homeSprite: XLua.DelegateBridge;
      }
      export namespace Act0D5Entry {
      }
    }
    export namespace Act1 {
      export interface ActivityFirstStageController {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_CreateBridge: XLua.DelegateBridge;
      }
      export interface ActivityFirstStageEntry {
        // _maskDetail: UnityEngine.GameObject;
        // _coinText: UnityEngine.UI.Text;
        // _timeBar: UnityEngine.UI.Text;
        // _timeRemain: UnityEngine.UI.Text;
        // _mapAbleState: UnityEngine.GameObject;
        // _mapDisableState: UnityEngine.GameObject;
        // m_cacheEndTime: System.DateTime;
        // m_cacheBasicInfo: Torappu.UI.ActivityStage.Extern.ActivityBasicInfo;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitData: XLua.DelegateBridge;
        // __Hotfix0_EventOnButtonClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnMissionShopClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnDetailClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnToZoneMapClicked: XLua.DelegateBridge;
        // __Hotfix0_FixedUpdate: XLua.DelegateBridge;
        // __Hotfix0__FormatEndTime: XLua.DelegateBridge;
      }
      export interface ActivityFirstStageFloat {
        // _barContainer: UnityEngine.Transform;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_LoadCoroutine: XLua.DelegateBridge;
      }
      export interface ActivityFirstStageZoneController {
        // m_currentZone: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnValueChanged: XLua.DelegateBridge;
        // __Hotfix0_EventOnToZoneMapClicked: XLua.DelegateBridge;
      }
      export interface ActivityFirstUtil {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_activityId: XLua.DelegateBridge;
        // __Hotfix0_get_activityType: XLua.DelegateBridge;
        // __Hotfix0_AchieveBasicInfo: XLua.DelegateBridge;
        // __Hotfix0_CheckStageOpenFlag: XLua.DelegateBridge;
        // __Hotfix0_get_uiItemCard: XLua.DelegateBridge;
        // __Hotfix0_get_commonTopMenu: XLua.DelegateBridge;
        // __Hotfix0_get_activityData: XLua.DelegateBridge;
        // __Hotfix0_getMissionData: XLua.DelegateBridge;
        // __Hotfix0_GetShopCount: XLua.DelegateBridge;
        // __Hotfix0_get_playerAct: XLua.DelegateBridge;
      }
      export interface ActivityFirstShopDetailComplexView {
        // _shopBuyCount: UnityEngine.UI.Text;
        // _shopItemName: UnityEngine.UI.Text;
        // _shopItemTitle: UnityEngine.UI.Text;
        // _shopPerCount: UnityEngine.UI.Text;
        // _shopAvailCount: UnityEngine.UI.Text;
        // _totalPrice: UnityEngine.UI.Text;
        // _singlePrice: UnityEngine.UI.Text;
        // _finalPriceIcon: UnityEngine.UI.Image;
        // _pileView: Torappu.UI.ShopDetailItemPileView;
        // _itemDetail: UnityEngine.UI.Text;
        // _itemDetail_2: UnityEngine.UI.Text;
        // m_cacheViewModel: Torappu.Activity.ActivityShopData;
        // m_shopBuyCount: System.Int32;
        // m_perPrice: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_ShopCount: XLua.DelegateBridge;
        // __Hotfix0_ApplyData: XLua.DelegateBridge;
        // __Hotfix0_RefreshNum: XLua.DelegateBridge;
        // __Hotfix0__RefreshClick: XLua.DelegateBridge;
        // __Hotfix0_AddOne: XLua.DelegateBridge;
        // __Hotfix0_MinusOne: XLua.DelegateBridge;
        // __Hotfix0_AddToMax: XLua.DelegateBridge;
        // __Hotfix0_GetMaxPrice: XLua.DelegateBridge;
        // __Hotfix0_MinusToOne: XLua.DelegateBridge;
      }
      export interface ActivityFirstShopDetailSingleView {
        // _shopItemName: UnityEngine.UI.Text;
        // _itemDetailCount: UnityEngine.UI.Text;
        // _pileView: Torappu.UI.ShopDetailItemPileView;
        // _itemDetail: UnityEngine.UI.Text;
        // _itemDetail_2: UnityEngine.UI.Text;
        // _singlePrice: UnityEngine.UI.Text;
        // m_cacheViewModel: Torappu.Activity.ActivityShopData;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_ApplyData: XLua.DelegateBridge;
      }
      export interface ActivityFirstShopObject {
        // _shopName: UnityEngine.UI.Text;
        // _priceCount: UnityEngine.UI.Text;
        // _itemContainer: UnityEngine.Transform;
        // _remainCount: UnityEngine.UI.Text;
        // _soldOutPart: UnityEngine.GameObject;
        // _soldOutCanvas: UnityEngine.CanvasGroup;
        _itemCardScaleFactor: System.Single;
        sendEvent: Torappu.Activity.Act1.UIActShopEvent;
        // m_cacheShopData: Torappu.Activity.ActivityShopData;
        // m_itemObj: Torappu.UI.UIItemCard;
        // m_isInited: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_InitData: XLua.DelegateBridge;
      }
      export interface ActivityFirstShopView {
        _shopObj: Torappu.Activity.Act1.ActivityFirstShopObject;
        // _shopContainer: UnityEngine.Transform;
        _stringEvent: Torappu.Activity.Act1.UIActShopEvent;
        // m_shopObjList: System.Collections.Generic.List<Torappu.Activity.Act1.ActivityFirstShopObject>;
        // m_isInited: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__InitData: XLua.DelegateBridge;
        // __Hotfix0_RenderData: XLua.DelegateBridge;
      }
      export interface UIActShopEvent {
      }
      export interface ActivityFirstDetailState {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
      }
      export interface ActivityFirstEmptyState {
        _stateBean: Torappu.Activity.Act1.ActivityFirstStateBean;
        // _topMenu: UnityEngine.GameObject;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_OnResume: XLua.DelegateBridge;
      }
      export interface ActivityFirstEntryState {
        // _coinCount: UnityEngine.UI.Text;
        // _timeRange: UnityEngine.UI.Text;
        // _remainTime: UnityEngine.UI.Text;
        // _detailBack: UnityEngine.GameObject;
        // _topMenu: UnityEngine.GameObject;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
      }
      export interface ActivityFirstMicroMapState {
        _stateBean: Torappu.Activity.Act1.ActivityFirstStateBean;
        // _topMenu: UnityEngine.GameObject;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_OnConfirm: XLua.DelegateBridge;
        // __Hotfix0_ChangeZoneSelected: XLua.DelegateBridge;
        // __Hotfix0_ChangeZoneLeft: XLua.DelegateBridge;
        // __Hotfix0_ChangeZoneRight: XLua.DelegateBridge;
      }
      export enum ActivityFirstMissionShopEnum {
        MISSION = "MISSION",
        SHOP = "SHOP",
      }
      export interface ActivityFirstMissionShopState {
        _stateBean: Torappu.Activity.Act1.ActivityFirstStateBean;
        // _missionButton: Torappu.UI.TwoStateToggle;
        // _shopButton: Torappu.UI.TwoStateToggle;
        _missionView: Torappu.Activity.Act1.ActivityFirstMissionView;
        _shopView: Torappu.Activity.Act1.ActivityFirstShopView;
        // _topMenu: UnityEngine.GameObject;
        // _coinRemain: UnityEngine.UI.Text;
        // m_currentState: Torappu.Activity.Act1.ActivityFirstMissionShopEnum;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_OnResume: XLua.DelegateBridge;
        // __Hotfix0__ApplyState: XLua.DelegateBridge;
        // __Hotfix0_TweenToMission: XLua.DelegateBridge;
        // __Hotfix0_TweenToShop: XLua.DelegateBridge;
        // __Hotfix0_RefreshCoinState: XLua.DelegateBridge;
        // __Hotfix0_TweenToMap: XLua.DelegateBridge;
        // __Hotfix0__ReceiveItemsCoroutine: XLua.DelegateBridge;
        // __Hotfix1__ReceiveItemsCoroutine: XLua.DelegateBridge;
        // __Hotfix0_SendShopListRequest: XLua.DelegateBridge;
        // __Hotfix0_AddShopTop: XLua.DelegateBridge;
        // __Hotfix0_SendMissionRequest: XLua.DelegateBridge;
      }
      export interface ActivityFirstShopComplexState {
        _stateBean: Torappu.Activity.Act1.ActivityFirstStateBean;
        _detailView: Torappu.Activity.Act1.ActivityFirstShopDetailComplexView;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_SendBuyShopRequest: XLua.DelegateBridge;
        // __Hotfix0__ReceiveItemsCoroutine: XLua.DelegateBridge;
      }
      export interface ActivityFirstShopSingleState {
        _stateBean: Torappu.Activity.Act1.ActivityFirstStateBean;
        _detailView: Torappu.Activity.Act1.ActivityFirstShopDetailSingleView;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_SendBuyShopRequest: XLua.DelegateBridge;
        // __Hotfix0__ReceiveItemsCoroutine: XLua.DelegateBridge;
      }
      export interface ActivityFirstResHolder {
        // _homeSprite: UnityEngine.Sprite;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_topbarSprite: XLua.DelegateBridge;
        // __Hotfix0_get_homeSprite: XLua.DelegateBridge;
      }
      export interface ActivityFirstMapDecro {
        _decroObj: Torappu.Activity.Act1.ActivityFirstMapDecroObj;
        // _objContainer: UnityEngine.Transform;
        // _leftButton: UnityEngine.GameObject;
        // _rightButton: UnityEngine.GameObject;
        _objList: System.Collections.Generic.List<Torappu.Activity.Act1.ActivityFirstMapDecroObj>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnValueChanged: XLua.DelegateBridge;
      }
      export interface ActivityFirstMapDecroObj {
        // _zoneIndex: UnityEngine.UI.Text;
        // _selectedPart: UnityEngine.GameObject;
        // m_zoneCacheId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitData: XLua.DelegateBridge;
        // __Hotfix0_OnSelect: XLua.DelegateBridge;
      }
      export interface ActivityFirstMicroMapEmptyView {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface ActivityFirstMicroMapObj {
        // _textTitle: UnityEngine.UI.Text;
        // _zoneIndex: UnityEngine.UI.Text;
        // _selected: UnityEngine.GameObject;
        // m_cacheZoneId: System.String;
        // stringEvent: Torappu.UI.UIStringEvent;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitData: XLua.DelegateBridge;
        // __Hotfix0_SelectState: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
      }
      export interface ActivityFirstMicroMapView {
        _obj: Torappu.Activity.Act1.ActivityFirstMicroMapObj;
        // _objContainer: UnityEngine.Transform;
        // _dropItemContainer: UnityEngine.Transform;
        // _detailInfo: UnityEngine.UI.Text;
        _itemCardScaleFactor: System.Single;
        // _stringEvent: Torappu.UI.UIStringEvent;
        // m_itemObj: Torappu.UI.UIItemCard;
        // m_initFlag: System.Boolean;
        // m_itemList: System.Collections.Generic.List<Torappu.UI.UIItemCard>;
        // m_objList: System.Collections.Generic.List<Torappu.Activity.Act1.ActivityFirstMicroMapObj>;
        // m_cacheLoader: Torappu.Activity.Act1.ActivityFirstUtil;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_OnSelect: XLua.DelegateBridge;
        // __Hotfix0_OnValueChanged: XLua.DelegateBridge;
        // __Hotfix0__OnItemCardClicked: XLua.DelegateBridge;
      }
      export interface ActivityFirstMissionItem {
        // _missionDetail: UnityEngine.UI.Text;
        // _coinCount: UnityEngine.UI.Text;
        // _itemContainer: UnityEngine.Transform;
        // _canAchievePart: UnityEngine.GameObject;
        // _onUsingPart: UnityEngine.GameObject;
        // _stateText: UnityEngine.UI.Text;
        _itemCardScaleFactor: System.Single;
        // _lineBar: UnityEngine.RectTransform;
        _lineLength: System.Single;
        // sendEvent: Torappu.UI.UIStringEvent;
        // m_itemCard: Torappu.UI.UIItemCard;
        // m_itemCardList: System.Collections.Generic.List<Torappu.UI.UIItemCard>;
        // m_missionId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
        // __Hotfix0__OnItemCardClicked: XLua.DelegateBridge;
      }
      export interface ActivityFirstMissionView {
        // _missionContainer: UnityEngine.Transform;
        _missionItem: Torappu.Activity.Act1.ActivityFirstMissionItem;
        // _stringEvent: Torappu.UI.UIStringEvent;
        // m_missionList: System.Collections.Generic.List<Torappu.Activity.Act1.ActivityFirstMissionItem>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitData: XLua.DelegateBridge;
      }
      export interface ActivityFirstMapViewModel {
        zoneList: System.Collections.Generic.List<Torappu.DefaultZoneData>;
        // m_selectedZoneId: System.String;
        showZoneId: System.String;
        // m_cacheSelectedZoneData: Torappu.DefaultZoneData;
        // m_cacheShowZoneData: Torappu.DefaultZoneData;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_selectedZoneId: XLua.DelegateBridge;
        // __Hotfix0_set_selectedZoneId: XLua.DelegateBridge;
        // __Hotfix0_get_rightData: XLua.DelegateBridge;
        // __Hotfix0_get_leftData: XLua.DelegateBridge;
        // __Hotfix0_get_selectedZoneData: XLua.DelegateBridge;
        // __Hotfix0_get_showZoneData: XLua.DelegateBridge;
      }
      export interface ActivityFirstMapProperty {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitData: XLua.DelegateBridge;
        // __Hotfix0_SetZone: XLua.DelegateBridge;
      }
      export interface ActivityFirstStateBean {
        // missionList: System.Collections.Generic.List<Torappu.UI.Mission.MissionViewModel>;
        cacheShopList: System.Collections.Generic.List<Torappu.Activity.ActivityShopData>;
        cacheData: Torappu.Activity.ActivityShopData;
        mapProperty: Torappu.Activity.Act1.ActivityFirstMapProperty;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitMissionData: XLua.DelegateBridge;
        // __Hotfix0_InitState: XLua.DelegateBridge;
      }
      export namespace ActivityFirstStageController {
        export interface Bridge {
        }
      }
      export namespace ActivityFirstStageFloat {
      }
      export namespace ActivityFirstMissionShopState {
      }
      export namespace ActivityFirstShopComplexState {
      }
      export namespace ActivityFirstShopSingleState {
      }
    }
    export namespace Act10D5 {
      export interface Act10D5ResUtil {
        ACT_LOCAL_CACHE_PREFIX_WATCHED_FAVOR_UP_CHAR_ID: System.String;
        ACT_LOCAL_CACHE_PREFIX_ACCESSED_ZONE_ID: System.String;
        CHAR_HUB_PATH: System.String;
      }
      export interface Act10D5StageController {
        _disableStageEntryPartical: System.Boolean;
        // m_favorUpTrackProperty: Torappu.UI.TrackPointViewProperty;
        // m_zoneDescGroupProperty: Torappu.Activity.Act10D5.Act10D5ZoneDescGroupViewProperty;
        // m_isLoaded: System.Boolean;
        // m_initMetaObj: Torappu.Activity.Act10D5.Act10D5StageController.Act10D5InitMeta;
        // <onStageTimeout>k__BackingField: System.Action;
        // <onRewardTimeout>k__BackingField: System.Action;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_disableStageEntryPartical: XLua.DelegateBridge;
        // __Hotfix0_get_favorUpTrackProperty: XLua.DelegateBridge;
        // __Hotfix0_get_zoneDescGroupProperty: XLua.DelegateBridge;
        // __Hotfix0_get_isLoaded: XLua.DelegateBridge;
        // __Hotfix0_get_onStageTimeout: XLua.DelegateBridge;
        // __Hotfix0_set_onStageTimeout: XLua.DelegateBridge;
        // __Hotfix0_get_onRewardTimeout: XLua.DelegateBridge;
        // __Hotfix0_set_onRewardTimeout: XLua.DelegateBridge;
        // __Hotfix0_get_initMetaObj: XLua.DelegateBridge;
        // __Hotfix0_CreateBridge: XLua.DelegateBridge;
        // __Hotfix0_GetBGMSignal: XLua.DelegateBridge;
        // __Hotfix0_OnLoaded: XLua.DelegateBridge;
        // __Hotfix0_OnStageTimeout: XLua.DelegateBridge;
        // __Hotfix0_OnRewardTimeout: XLua.DelegateBridge;
        // __Hotfix0_EventOnZoneClicked: XLua.DelegateBridge;
        // __Hotfix0_CreateInitMeta4StoryState: XLua.DelegateBridge;
      }
      export interface Act10D5StageEntry {
        ANIM_NORMAL_START_KEY: System.String;
        ANIM_ALL_TIMEOUT_START_KEY: System.String;
        ANIM_SKIP_KEY: System.String;
        // _animatorList: System.Collections.Generic.List<UnityEngine.Animator>;
        _view: Torappu.Activity.Act10D5.Act10D5EntryView;
        _coinView: Torappu.Activity.Act10D5.Act10D5CoinView;
        _zoneGroupView: Torappu.Activity.Act10D5.Act10D5EntryZoneGroupView;
        // _favorUpTrackPoint: Torappu.UI.UICommonTrackPoint;
        // _buttonShop: UnityEngine.UI.Button;
        // _buttonStory: UnityEngine.UI.Button;
        // _topMenuContainer: UnityEngine.RectTransform;
        // _favorUpObj: UnityEngine.GameObject;
        _useCommonFavorState: System.Boolean;
        // m_topMenu: Torappu.UI.CommonTopMenu;
        // m_isLoaded: System.Boolean;
        // m_isAnimPlayed: System.Boolean;
        // <>f__am$cache0: System.Action;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnLoaded: XLua.DelegateBridge;
        // __Hotfix0__EventOnStageTimeout: XLua.DelegateBridge;
        // __Hotfix0__EventOnRewardTimeout: XLua.DelegateBridge;
        // __Hotfix0_EventOnShopClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnStoryClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnFavorUpClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnZoneAllTimeoutClicked: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
        // __Hotfix0__InitTopMenu: XLua.DelegateBridge;
        // __Hotfix0__TryStartAnim: XLua.DelegateBridge;
      }
      export interface Act10D5StageFloat {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_LoadCoroutine: XLua.DelegateBridge;
        // __Hotfix0__TryResumeStoryState: XLua.DelegateBridge;
      }
      export interface Act10D5StageMapDecor {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act10D5StoryAdapter {
        // m_storyModels: System.Collections.Generic.List<Torappu.UI.StoryReview.StoryReviewViewModel>;
        // m_storyColor: UnityEngine.Color;
        // onReviewStoryClicked: System.Action<System.String>;
        // onUnlockStoryClicked: System.Action<System.String>;
        // onStoryRead: System.Action<System.String>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_count: XLua.DelegateBridge;
        // __Hotfix0_RenderView: XLua.DelegateBridge;
      }
      export interface Act10D5ZoneMapPlugin {
        // _viewRoot: UnityEngine.GameObject;
        // _textPoint: UnityEngine.UI.Text;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_UpdateStatus: XLua.DelegateBridge;
      }
      export interface Activity10D5ResHolder {
        // _homeSprite: UnityEngine.Sprite;
        // _homeMultiSprite: UnityEngine.Sprite;
        _zoneHomeRes: Torappu.Activity.ActivityResHolder.ZoneHomeRes;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_topbarSprite: XLua.DelegateBridge;
        // __Hotfix0_get_homeSprite: XLua.DelegateBridge;
        // __Hotfix0_get_homeSpriteMultiMode: XLua.DelegateBridge;
        // __Hotfix0_get_zoneHomeRes: XLua.DelegateBridge;
      }
      export interface Act10D5EmptyState {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_RegisterToDataListener: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnResume: XLua.DelegateBridge;
        // __Hotfix0__DataToFavorState: XLua.DelegateBridge;
      }
      export interface Act10D5FavorUpState {
        _view: Torappu.Activity.Act10D5.Act10D5FavorUpView;
        // _topMenuContainer: UnityEngine.RectTransform;
        // m_topMenu: Torappu.UI.CommonTopMenu;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_OnResume: XLua.DelegateBridge;
        // __Hotfix0_EventOnBackgroundClicked: XLua.DelegateBridge;
        // __Hotfix0__InitTopMenu: XLua.DelegateBridge;
      }
      export interface Act10D5StoryBinder {
        // _viewContainer: Torappu.UI.SimpleLayoutContent;
        // m_storyAdapter: Torappu.Activity.Act10D5.Act10D5StoryAdapter;
        // m_isInited: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_OnValueChanged: XLua.DelegateBridge;
        // __Hotfix0_SetCallbacks: XLua.DelegateBridge;
      }
      export interface Act10D5StoryState {
        // _topMenuContainer: UnityEngine.RectTransform;
        _storyBinder: Torappu.Activity.Act10D5.Act10D5StoryBinder;
        // _maskPanel: UnityEngine.GameObject;
        _unlockPanel: Torappu.Activity.Act10D5.Act10D5StoryUnlockConfirmView;
        // m_topMenu: Torappu.UI.CommonTopMenu;
        // m_inited: System.Boolean;
        // m_stateBean: Torappu.Activity.Act10D5.Act10D5StoryStateBean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0__OnStoryRead: XLua.DelegateBridge;
        // __Hotfix0__OnStoryReadSuc: XLua.DelegateBridge;
        // __Hotfix0__OnStoryClicked: XLua.DelegateBridge;
        // __Hotfix0__OnUnlockClicked: XLua.DelegateBridge;
        // __Hotfix0__OnStoryUnlock: XLua.DelegateBridge;
        // __Hotfix0__OnStoryUnlocked: XLua.DelegateBridge;
      }
      export interface Act10D5StoryStateBean {
        prop: Torappu.Activity.Act10D5.Act10D5StoryProperty;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act10D5StoryProperty {
      }
      export interface Act10D5StoryViewModel {
        // chapterModel: Torappu.UI.StoryReview.StoryReviewChapterViewModel;
        // availableModelList: System.Collections.Generic.List<Torappu.UI.StoryReview.StoryReviewViewModel>;
      }
      export interface Act10D5CoinView {
        // _textCoin: UnityEngine.UI.Text;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_CheckIfDataChanged: XLua.DelegateBridge;
        // __Hotfix0_OnPlayerDataChanged: XLua.DelegateBridge;
        // __Hotfix0__TryUpdateCoin: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
        // __Hotfix0_OnDisable: XLua.DelegateBridge;
        // __Hotfix0_OnDestroy: XLua.DelegateBridge;
      }
      export interface Act10D5EntryView {
        // _panelStageEndTime: UnityEngine.GameObject;
        // _panelRewardEndTime: UnityEngine.GameObject;
        // _textStageEndTime: UnityEngine.UI.Text;
        // _textRewardEndTime: UnityEngine.UI.Text;
        // _textRemainTime: UnityEngine.UI.Text;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
      }
      export interface Act10D5EntryZoneGroupView {
        // _panelAllTimeout: UnityEngine.GameObject;
        _zoneViewList: System.Collections.Generic.List<Torappu.Activity.Act10D5.Act10D5EntryZoneView>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnValueChanged: XLua.DelegateBridge;
      }
      export interface Act10D5EntryZoneView {
        _zoneId: System.String;
        // _buttonSelf: UnityEngine.UI.Button;
        // _textInfo: UnityEngine.UI.Text;
        // _imageNew: UnityEngine.GameObject;
        // _panelAccessible: UnityEngine.GameObject;
        // _panelTimeout: UnityEngine.GameObject;
        // _panelLocked: UnityEngine.GameObject;
        // _onClicked: Torappu.UI.UIStringEvent;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_zoneId: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0_EventOnClicked: XLua.DelegateBridge;
      }
      export interface Act10D5FavorUpCharView {
        // _imageChar: UnityEngine.UI.Image;
        // _imageBkg: UnityEngine.UI.Image;
        // _textName: UnityEngine.UI.Text;
        // _spriteBkg4: UnityEngine.Sprite;
        // _spriteBkg5: UnityEngine.Sprite;
        // _spriteBkg6: UnityEngine.Sprite;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
      }
      export interface Act10D5FavorUpView {
        // _newUpGroup: Torappu.UI.SimpleLayoutContent;
        // _upGroup: Torappu.UI.SimpleLayoutContent;
        // _imageNew: UnityEngine.GameObject;
        // _panelSplit: UnityEngine.GameObject;
        // m_newUpCharList: System.Collections.Generic.List<Torappu.Activity.Act10D5.Act10D5FavorUpView.Act10D5FavorUpCharData>;
        // m_upCharList: System.Collections.Generic.List<Torappu.Activity.Act10D5.Act10D5FavorUpView.Act10D5FavorUpCharData>;
        // m_newUpGroupAdapter: Torappu.Activity.Act10D5.Act10D5FavorUpView.Act10D5FavorUpGroupViewAdapter;
        // m_upGroupAdapter: Torappu.Activity.Act10D5.Act10D5FavorUpView.Act10D5FavorUpGroupViewAdapter;
        // m_inited: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0__CompareFavorUpChar: XLua.DelegateBridge;
      }
      export interface Act10D5StoryItemView {
        // _infoPanel: UnityEngine.GameObject;
        // _charImage: UnityEngine.UI.Image;
        // _titleName: UnityEngine.UI.Text;
        // _newTag: UnityEngine.UI.Image;
        // _newBg: UnityEngine.UI.Image;
        // _decoText: UnityEngine.UI.Image;
        // _newText: UnityEngine.UI.Text;
        // _unlockView: Torappu.UI.StoryReview.StoryReviewUnlockItemView;
        // onClicked: System.Action<System.String>;
        // onStoryRead: System.Action<System.String>;
        // onUnlockClicked: System.Action<System.String>;
        // m_cachedStoryTextId: System.String;
        // m_cachedStoryId: System.String;
        // m_unlockView: Torappu.UI.StoryReview.StoryReviewUnlockItemView;
        DECO_SPRITE_ALPHA: System.Single;
        // m_lightTextColor: UnityEngine.Color;
        // m_darkTextColor: UnityEngine.Color;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_ApplyData: XLua.DelegateBridge;
        // __Hotfix0__LoadSprite: XLua.DelegateBridge;
        // __Hotfix0_EventOnStoryClicked: XLua.DelegateBridge;
      }
      export interface Act10D5StoryUnlockConfirmView {
        // _fullScreenImage: Torappu.UI.UIFullScreenImage;
        // _unlockPart: UnityEngine.GameObject;
        // _container: UnityEngine.GameObject;
        // _rootView: UnityEngine.CanvasGroup;
        // _backBtn: UnityEngine.RectTransform;
        // _soldText: UnityEngine.UI.Text;
        // _backImage: Torappu.UI.UIBlurFloatPanel;
        // _itemContainer1: UnityEngine.Transform;
        // _itemContainer2: UnityEngine.Transform;
        _itemScale: System.Single;
        // m_isInited: System.Boolean;
        // m_onClick: System.Action;
        // m_costItem: Torappu.UI.UIItemCard;
        // m_targetItem: Torappu.UI.UIItemCard;
        // m_costModel: Torappu.UI.UIItemViewModel;
        // m_targetModel: Torappu.UI.UIItemViewModel;
        // m_blocker: Torappu.UI.UIPopupWindow.UIBlocker;
        FADE_DURATION: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Initialize: XLua.DelegateBridge;
        // __Hotfix0__Init: XLua.DelegateBridge;
        // __Hotfix0_RenderLockedPart: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
        // __Hotfix0_ClosePage: XLua.DelegateBridge;
        // __Hotfix0_OnDisable: XLua.DelegateBridge;
        // __Hotfix0__RenderBackImage: XLua.DelegateBridge;
        // __Hotfix0__RenderLockedPart: XLua.DelegateBridge;
        // __Hotfix0_ShowCoroutine: XLua.DelegateBridge;
        // __Hotfix0_HideCoroutine: XLua.DelegateBridge;
      }
      export interface Act10D5FavorUpTrackPointModel {
        // m_hasNewUp: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_isShow: XLua.DelegateBridge;
        // __Hotfix0_UpdateState: XLua.DelegateBridge;
      }
      export interface Act10D5ZoneDescViewModel {
        zoneId: System.String;
        zoneName: System.String;
        iconId: System.String;
        unlockText: System.String;
        startTime: System.Int64;
        isStageLocked: System.Boolean;
        isTimeLocked: System.Boolean;
        isTimeout: System.Boolean;
        isNew: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_isLocked: XLua.DelegateBridge;
        // __Hotfix0_get_isAccessible: XLua.DelegateBridge;
        // __Hotfix0_Create: XLua.DelegateBridge;
      }
      export interface Act10D5ZoneDescGroupViewModel {
        zoneDescModelList: System.Collections.Generic.List<Torappu.Activity.Act10D5.Act10D5ZoneDescViewModel>;
        // <selectedZoneId>k__BackingField: System.String;
        // <isAllTimeout>k__BackingField: System.Boolean;
      }
      export interface Act10D5ZoneDescGroupViewProperty {
      }
      export namespace Act10D5StageController {
        export interface Bridge {
        }
        export interface Act10D5InitMeta {
          jumpToStoryState: System.Boolean;
        }
      }
      export namespace Act10D5StageEntry {
      }
      export namespace Act10D5StageFloat {
      }
      export namespace Act10D5StoryState {
      }
      export namespace Act10D5FavorUpView {
        export interface Act10D5FavorUpCharData {
          charId: System.String;
          index: System.Int32;
          rarity: Torappu.RarityRank;
        }
        export interface Act10D5FavorUpGroupViewAdapter {
          // <dataSet>k__BackingField: System.Collections.Generic.List<Torappu.Activity.Act10D5.Act10D5FavorUpView.Act10D5FavorUpCharData>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_dataSet: XLua.DelegateBridge;
          // __Hotfix0_set_dataSet: XLua.DelegateBridge;
          // __Hotfix0_get_count: XLua.DelegateBridge;
          // __Hotfix0_RenderView: XLua.DelegateBridge;
        }
      }
      export namespace Act10D5StoryUnlockConfirmView {
      }
    }
    export namespace Act12D6 {
      export interface Act12D6ResUtil {
        ROGUELIKE_BUFF_ICON_HUB: System.String;
        ROGUELIKE_BUFF_LEVEL_HUB: System.String;
        GAME_END_FAIL_ENDING_ID: System.String;
        GAME_END_FAIL_BACKGROUND_ID: System.String;
        GAME_END_BKG_HUB: System.String;
        ACT_LOCAL_CACHE_PREFIX_WATCHED_RELIC: System.String;
        ACT_LOCAL_CACHE_PREFIX_MODE_CHOICE: System.String;
        MILESTONE_HEIGHT: System.Single;
        MILESTONE_DELTA_HEIGHT: System.Single;
        MILESTONE_OFFSET: System.Single;
        DEFAULT_MODE: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_activityId: XLua.DelegateBridge;
        // __Hotfix0_get_floatStateEngine: XLua.DelegateBridge;
        // __Hotfix0_CreateCommonTopMenu: XLua.DelegateBridge;
        // __Hotfix0_get_uiItemCard: XLua.DelegateBridge;
        // __Hotfix0_get_act12d6BuffIconHub: XLua.DelegateBridge;
        // __Hotfix0_get_act12d6BuffLevelHub: XLua.DelegateBridge;
        // __Hotfix0_get_activityRoguelikeData: XLua.DelegateBridge;
        // __Hotfix0_GetAct12D6PlayerInfo: XLua.DelegateBridge;
        // __Hotfix0_GetAct12D6PlayerInfoFromPlayerData: XLua.DelegateBridge;
        // __Hotfix0_LoadBuffLevelImage: XLua.DelegateBridge;
        // __Hotfix0_LoadOuterBuffIcon: XLua.DelegateBridge;
        // __Hotfix0_LoadGameEndBkgSprite: XLua.DelegateBridge;
        // __Hotfix0_GetBuffFullLevel: XLua.DelegateBridge;
        // __Hotfix0_get_mileStoneToken: XLua.DelegateBridge;
        // __Hotfix0_GetRelicData: XLua.DelegateBridge;
        // __Hotfix0_SetRelicRead: XLua.DelegateBridge;
        // __Hotfix0_GenRelicReadStatus: XLua.DelegateBridge;
        // __Hotfix0_SetModeChoice: XLua.DelegateBridge;
        // __Hotfix0_GetModeChoice: XLua.DelegateBridge;
        // __Hotfix0__GenerateActLocalCacheKey: XLua.DelegateBridge;
      }
      export interface Act12D6Service {
        CREATE_GAME: System.String;
        GIVE_UP_GAME: System.String;
        FINISH_GAME: System.String;
        UPGRADE_OUT_BUFF: System.String;
        MILESTONE_REWARD: System.String;
        MILESTONE_REWARD_TRY_BEST: System.String;
      }
      export interface Act12D6MileStoneRewardRequest {
        activityId: System.String;
        mid: System.String;
      }
      export interface Act12D6MileStoneRewardResponse {
        items: System.Collections.Generic.List<Torappu.ActivityItemModel>;
      }
      export interface Act12D6MileStoneRewardTryBestRequest {
        activityId: System.String;
      }
      export interface Act12D6MileStoneRewardTryBestResponse {
        items: System.Collections.Generic.List<Torappu.ActivityItemModel>;
      }
      export interface Act12D6CreateGameRequest {
        activityId: System.String;
        mode: System.String;
      }
      export interface Act12D6CreateGameResponse {
      }
      export interface Act12D6GiveUpGameRequest {
        activityId: System.String;
      }
      export interface Act12D6GiveUpGameResponse {
      }
      export interface Act12D6FinishGameRequest {
        activityId: System.String;
      }
      export interface Act12D6FinishGameResponse {
        buffToken: System.Int32;
        milestoneToken: System.Int32;
        unlockRelicBuffToken: System.Int32;
        unlockRelicMilestoneToken: System.Int32;
      }
      export interface Act12D6UpgradeOutBuffRequest {
        activityId: System.String;
        buffId: System.String;
      }
      export interface Act12D6UpgradeOutBuffResponse {
        result: System.String;
      }
      export interface Act12D6StageController {
        // m_isControllerReady: System.Boolean;
        // <onRogueLikeEnd>k__BackingField: System.Action;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_onRogueLikeEnd: XLua.DelegateBridge;
        // __Hotfix0_set_onRogueLikeEnd: XLua.DelegateBridge;
        // __Hotfix0_CreateBridge: XLua.DelegateBridge;
        // __Hotfix0_OnLoaded: XLua.DelegateBridge;
        // __Hotfix0_OnStageTimeout: XLua.DelegateBridge;
        // __Hotfix0_OnRewardTimeout: XLua.DelegateBridge;
        // __Hotfix0_OnStagePageResumed: XLua.DelegateBridge;
        // __Hotfix0_GetBGMSignal: XLua.DelegateBridge;
        // __Hotfix0_GetReadySignalForStagePage: XLua.DelegateBridge;
        // __Hotfix0_ShowCoroutine: XLua.DelegateBridge;
        // __Hotfix0__CheckIfToShowGameEnd: XLua.DelegateBridge;
        // __Hotfix0__OpenGameEndCoroutine: XLua.DelegateBridge;
        // __Hotfix0__WaitForControllerReady: XLua.DelegateBridge;
      }
      export interface Act12D6StageEntry {
        // _topMenuContainer: UnityEngine.RectTransform;
        _view: Torappu.Activity.Act12D6.Act12D6StageEntryView;
        _unlockPanel: Torappu.Activity.Act12D6.Act12D6RetireConfirmView;
        // m_topMenu: Torappu.UI.CommonTopMenu;
        // <>f__am$cache0: System.Action;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnLoaded: XLua.DelegateBridge;
        // __Hotfix0_NotifyStageTimeout: XLua.DelegateBridge;
        // __Hotfix0_NotifyRewardTimeout: XLua.DelegateBridge;
        // __Hotfix0_EventOnRetireClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnStartGameClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnRetireConfirmClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnOuterBuffClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnMileStoneClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnDifficultyToggleClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnDifficultyLockedClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnRelicBookHandClicked: XLua.DelegateBridge;
        // __Hotfix0__InitTopMenu: XLua.DelegateBridge;
        // __Hotfix0__EventOnRogueLikeEnd: XLua.DelegateBridge;
      }
      export interface Act12D6StageFloat {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OpenGameEndCoroutine: XLua.DelegateBridge;
      }
      export interface Act12D6StageMapDecor {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act12D6EmptyState {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
      }
      export interface Act12D6GameEndState {
        STATS_SHOW_ANIM: System.String;
        STATS_HIDE_ANIM: System.String;
        REWARD_SHOW_ANIM: System.String;
        REWARD_HIDE_ANIM: System.String;
        UNLOCK_SHOW_ANIM: System.String;
        FACTOR_OBJ_SHOW_ANIM: System.String;
        UNLOCK_TOAST_INTERVAL: System.Single;
        // _animationWrapper: Torappu.UI.AnimationWrapper;
        _scoreObjViews: System.Collections.Generic.List<Torappu.Activity.Act12D6.Act12D6GameEndScoreObjView>;
        // _modeFactorWrapper: Torappu.UI.AnimationWrapper;
        _totalScoreObjView: Torappu.Activity.Act12D6.Act12D6GameEndScoreObjView;
        _outbuffTokenCountView: Torappu.Activity.Act12D6.Act12D6GameEndScoreObjView;
        _milestoneTokenCountView: Torappu.Activity.Act12D6.Act12D6GameEndScoreObjView;
        _titleView: Torappu.Activity.Act12D6.Act12d6GameEndTitleView;
        _statsView: Torappu.Activity.Act12D6.Act12D6GameEndStatsView;
        _rewardView: Torappu.Activity.Act12D6.Act12D6GameEndRewardView;
        _unlockView: Torappu.Activity.Act12D6.Act12D6GameEndUnlockView;
        // _imageBkg: UnityEngine.UI.Image;
        // _imageBlurBkg: Torappu.UI.UIFullScreenImage;
        // _imageCornerSuc: UnityEngine.UI.Image;
        // _imageCornerFail: UnityEngine.UI.Image;
        // m_stateBean: Torappu.Activity.Act12D6.Act12D6GameEndStateBean;
        // m_state: Torappu.Activity.Act12D6.Act12D6GameEndState.InternalState;
        // m_updateCoroutine: UnityEngine.Coroutine;
        // m_isNextClicked: System.Boolean;
        // m_isBackClicked: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_OnExit: XLua.DelegateBridge;
        // __Hotfix0_EventOnNextClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnBackClicked: XLua.DelegateBridge;
        // __Hotfix0__AnimationEventOnPlayAudio: XLua.DelegateBridge;
        // __Hotfix0__AnimationEventOnShotBlurBkg: XLua.DelegateBridge;
        // __Hotfix0__AnimationEventOnEnableRewardView: XLua.DelegateBridge;
        // __Hotfix0__AnimationEventOnPlayScoreObjAnim: XLua.DelegateBridge;
        // __Hotfix0__AnimationEventOnPlayModeFactor: XLua.DelegateBridge;
        // __Hotfix0__AnimationEventOnPlayTotalScore: XLua.DelegateBridge;
        // __Hotfix0__AnimationEventOnPlayOutbuffCount: XLua.DelegateBridge;
        // __Hotfix0__AnimationEventOnPlayMilestoneCount: XLua.DelegateBridge;
        // __Hotfix0__Render: XLua.DelegateBridge;
        // __Hotfix0__UpdateState: XLua.DelegateBridge;
        // __Hotfix0__TryDismissSelf: XLua.DelegateBridge;
        // __Hotfix0__Reset: XLua.DelegateBridge;
        // __Hotfix0__ResetAnim: XLua.DelegateBridge;
        // __Hotfix0__PlayAnim: XLua.DelegateBridge;
        // __Hotfix0__SkipStatsShowAnim: XLua.DelegateBridge;
        // __Hotfix0__SkipRewardShowAnim: XLua.DelegateBridge;
        // __Hotfix0__CanClick: XLua.DelegateBridge;
        // __Hotfix0__HasUnprocessedCommand: XLua.DelegateBridge;
        // __Hotfix0__ConsumeNextCommand: XLua.DelegateBridge;
        // __Hotfix0__ConsumeBackCommand: XLua.DelegateBridge;
        // __Hotfix0__SendFinishGameRequest: XLua.DelegateBridge;
        // __Hotfix0__ShowGainedTokens: XLua.DelegateBridge;
        // __Hotfix0__ShowUnlockToast: XLua.DelegateBridge;
      }
      export interface Act12D6MileStoneState {
        _stateBean: Torappu.Activity.Act12D6.Act12D6MileStoneStateBean;
        _view: Torappu.Activity.Act12D6.Act12D6MileStoneHolder;
        // _topMenuContainer: UnityEngine.RectTransform;
        // m_topMenu: Torappu.UI.CommonTopMenu;
        // m_inited: System.Boolean;
        // m_cacheTransId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_SendItemRequest: XLua.DelegateBridge;
        // __Hotfix0_SendItemTryBestRequest: XLua.DelegateBridge;
        // __Hotfix0__SendItemTryBestRequest: XLua.DelegateBridge;
        // __Hotfix0__SendItemRequest: XLua.DelegateBridge;
        // __Hotfix0_ReceiveItemsCoroutine: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
      }
      export interface Act12D6CoinView {
        // _textCoin: UnityEngine.UI.Text;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_CheckIfDataChanged: XLua.DelegateBridge;
        // __Hotfix0_OnPlayerDataChanged: XLua.DelegateBridge;
        // __Hotfix0__TryUpdateCoin: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
        // __Hotfix0_OnDisable: XLua.DelegateBridge;
        // __Hotfix0_OnDestroy: XLua.DelegateBridge;
      }
      export interface Act12D6DifficultyToggleItemView {
        // _textDifficulty: UnityEngine.UI.Text;
        // _textDesc: UnityEngine.UI.Text;
        // _panelDesc: UnityEngine.GameObject;
        // _animator: UnityEngine.Animator;
        // _imageLocked: UnityEngine.GameObject;
        // OnLockedToggleClicked: Torappu.UI.UIStringEvent;
        // m_cachedModeName: System.String;
        // <difficultyId>k__BackingField: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_difficultyId: XLua.DelegateBridge;
        // __Hotfix0_set_difficultyId: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0_SwitchOnState: XLua.DelegateBridge;
      }
      export interface Act12D6GameEndCharObjView {
        // _imagePotrait: UnityEngine.UI.Image;
        // _imageEvolvePhase: UnityEngine.UI.Image;
        // _imageUpgraded: UnityEngine.UI.Image;
        // _imageFreeChar: UnityEngine.UI.Image;
        // _imageNpcChar: UnityEngine.UI.Image;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
      }
      export interface Act12D6GameEndRewardView {
        FACTOR_FORMAT: System.String;
        _modeColorData: System.Collections.Generic.List<Torappu.Activity.Act12D6.Act12D6GameEndRewardView.ModeColorData>;
        _passedZoneScoreView: Torappu.Activity.Act12D6.Act12D6GameEndScoreObjView;
        _moveScoreView: Torappu.Activity.Act12D6.Act12D6GameEndScoreObjView;
        _battleScoreView: Torappu.Activity.Act12D6.Act12D6GameEndScoreObjView;
        _eliteScoreView: Torappu.Activity.Act12D6.Act12D6GameEndScoreObjView;
        _bossScoreView: Torappu.Activity.Act12D6.Act12D6GameEndScoreObjView;
        _relicScoreView: Torappu.Activity.Act12D6.Act12D6GameEndScoreObjView;
        _charScoreView: Torappu.Activity.Act12D6.Act12D6GameEndScoreObjView;
        // _imageModeBkg: UnityEngine.UI.Image;
        // _textMode: UnityEngine.UI.Text;
        // _textModeFactor: UnityEngine.UI.Text;
        _totoalScoreView: Torappu.Activity.Act12D6.Act12D6GameEndScoreObjView;
        // _textOutBuffTokenTotalScore: UnityEngine.UI.Text;
        // _textOutBuffTokenFactor: UnityEngine.UI.Text;
        _outBuffTokenCnt: Torappu.Activity.Act12D6.Act12D6GameEndScoreObjView;
        // _textOutBuffTokenName: UnityEngine.UI.Text;
        // _imageOutBuffTokenIcon: UnityEngine.UI.Image;
        // _textMilestoneTokenTotalScore: UnityEngine.UI.Text;
        // _textMilestoneTokenFactor: UnityEngine.UI.Text;
        _milestoneTokenCnt: Torappu.Activity.Act12D6.Act12D6GameEndScoreObjView;
        // _textMilestoneTokenName: UnityEngine.UI.Text;
        // _imageMilestoneTokenIcon: UnityEngine.UI.Image;
        // m_inited: System.Boolean;
        // <switchTween>k__BackingField: Torappu.UI.FadeSwitchTween;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_switchTween: XLua.DelegateBridge;
        // __Hotfix0_set_switchTween: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0__GetModeBkgColor: XLua.DelegateBridge;
        // __Hotfix0__GetModeTextColor: XLua.DelegateBridge;
      }
      export interface Act12D6GameEndScoreObjView {
        // _animationWrapper: Torappu.UI.AnimationWrapper;
        // _textCount: UnityEngine.UI.Text;
        // _textScore: UnityEngine.UI.Text;
        _scoreTweenDuration: System.Single;
        _scoreTweenDelay: System.Single;
        // _countNormalColor: UnityEngine.Color;
        // _countZeroColor: UnityEngine.Color;
        // _scoreNormalColor: UnityEngine.Color;
        // _scoreZeroColor: UnityEngine.Color;
        // m_inited: System.Boolean;
        // m_cacheCount: System.Int32;
        // m_cacheScore: System.Int32;
        // m_scoreTweener: Torappu.Activity.Act12D6.Act12D6GameEndScoreObjView.TextTweener;
        // m_animName: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0_PlayAnim: XLua.DelegateBridge;
        // __Hotfix0_ResetAnim: XLua.DelegateBridge;
        // __Hotfix0_SkipAnim: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
      }
      export interface Act12D6GameEndStatsView {
        // _imageInitRelic: UnityEngine.UI.Image;
        // _textNickName: UnityEngine.UI.Text;
        // _textInitRelicName: UnityEngine.UI.Text;
        // _textTotalTime: UnityEngine.UI.Text;
        // _textEndTime: UnityEngine.UI.Text;
        // _textSuc: UnityEngine.UI.Text;
        // _textFail: UnityEngine.UI.Text;
        // _textEndingOrZoneName: UnityEngine.UI.Text;
        // _textEndingDesc: UnityEngine.UI.Text;
        // _textRelicCount: UnityEngine.UI.Text;
        // _textCharCount: UnityEngine.UI.Text;
        // _relicContent: Torappu.UI.SimpleLayoutContent;
        // _charContent: Torappu.UI.SimpleLayoutContent;
        // m_inited: System.Boolean;
        // m_relicAdapter: Torappu.Activity.Act12D6.Act12D6GameEndStatsView.RelicAdapter;
        // m_charAdapter: Torappu.Activity.Act12D6.Act12D6GameEndStatsView.CharAdapter;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
      }
      export interface Act12d6GameEndTitleView {
        _endingDatas: System.Collections.Generic.List<Torappu.Activity.Act12D6.Act12d6GameEndTitleView.EndingData>;
        _logoTweenDuration: System.Single;
        // _imageBkgFail: UnityEngine.UI.Image;
        // _imageBkgEnding: UnityEngine.UI.Image;
        // _imageTitle: UnityEngine.UI.Image;
        // _logoLayoutGroup: UnityEngine.UI.HorizontalLayoutGroup;
        // _logos: System.Collections.Generic.List<UnityEngine.UI.Image>;
        // m_inited: System.Boolean;
        // m_tweener: DG.Tweening.Tween;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0__GetTitleSprite: XLua.DelegateBridge;
        // __Hotfix0__GetLogoSprite: XLua.DelegateBridge;
        // __Hotfix0__GetLogoSize: XLua.DelegateBridge;
        // __Hotfix0__TryPlayLogoTween: XLua.DelegateBridge;
        // __Hotfix0__PlayLogoTween: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
      }
      export interface Act12d6GameEndUnlockRelicObjView {
        // _imageIcon: UnityEngine.UI.Image;
        // _textName: UnityEngine.UI.Text;
        // _textUnlockCond: UnityEngine.UI.Text;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
      }
      export interface Act12D6GameEndUnlockView {
        CNT_FORMAT: System.String;
        // _relicContainer: Torappu.UI.SimpleLayoutContent;
        // _imageBlurBkg: Torappu.UI.UIFullScreenImage;
        // _textUnlockCnt: UnityEngine.UI.Text;
        // _imageOutBuffToken: UnityEngine.UI.Image;
        // _textOutBuffTokenName: UnityEngine.UI.Text;
        // _textOutBuffTokenCount: UnityEngine.UI.Text;
        // _imageMilestoneToken: UnityEngine.UI.Image;
        // _textMilestoneTokenName: UnityEngine.UI.Text;
        // _textMilestoneTokenCount: UnityEngine.UI.Text;
        // m_inited: System.Boolean;
        // m_adapter: Torappu.Activity.Act12D6.Act12D6GameEndUnlockView.Adapter;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0_ShotBlurBkg: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
      }
      export interface MileStoneItemHolder {
        item: Torappu.Activity.Act12D6.Act12D6MileStoneItemObj;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act12D6MileStoneGridAdapter {
        // _itemEvent: Torappu.UI.UIStringEvent;
        // _mileStoneItem: UnityEngine.GameObject;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_ViewConstructor: XLua.DelegateBridge;
        // __Hotfix0_UpdateView: XLua.DelegateBridge;
      }
      export interface BuffObjViewHolder {
        view: Torappu.Activity.Act12D6.Act12D6OuterBuffItemView;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act12D6OuterBuffAdapter {
        // _outerBuffObj: UnityEngine.GameObject;
        // _onOuterBuffDetailClicked: Torappu.UI.UIStringEvent;
        // _onMaxLevelClicked: Torappu.UI.UIStringEvent;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_UpdateView: XLua.DelegateBridge;
        // __Hotfix0_ViewConstructor: XLua.DelegateBridge;
      }
      export interface Act12D6OuterBuffDetailView {
        // _imgLevelBg: UnityEngine.UI.Image;
        // _imgLevel: UnityEngine.UI.Image;
        // _imgIcon: UnityEngine.UI.Image;
        // _txtLevel: UnityEngine.UI.Text;
        // _txtPrevLevel: UnityEngine.UI.Text;
        // _txtNameLevel: UnityEngine.UI.Text;
        // _txtDesc: UnityEngine.UI.Text;
        // _effects: UnityEngine.UI.ScrollRect;
        // _confirmTip: UnityEngine.UI.Text;
        // _effectTxtObj: UnityEngine.GameObject;
        // <onClicked>k__BackingField: Torappu.UI.UIStringEvent;
        // m_isFullFlag: System.Boolean;
        // m_buffId: System.String;
        // m_cachedNextLevel: System.Int32;
        // m_cachedFullLevel: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_onClicked: XLua.DelegateBridge;
        // __Hotfix0_set_onClicked: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0__ScrollToNextInfo: XLua.DelegateBridge;
        // __Hotfix0__OnScrollRectTween: XLua.DelegateBridge;
        // __Hotfix0_EventOnClicked: XLua.DelegateBridge;
      }
      export interface Act12D6OuterBuffItemView {
        // _imgLevelBg: UnityEngine.UI.Image;
        // _imgLevel: UnityEngine.UI.Image;
        // _imgBuffIcon: UnityEngine.UI.Image;
        // _txtBuffName: UnityEngine.UI.Text;
        // _txtBuffLevel: UnityEngine.UI.Text;
        // _txtBuffDesc: UnityEngine.UI.Text;
        // _txtBuffEffect: UnityEngine.UI.Text;
        // _btnLevelUp: UnityEngine.UI.Button;
        // _btnMaxLevel: UnityEngine.UI.Button;
        // m_buffId: System.String;
        // <onUpgradeClicked>k__BackingField: Torappu.UI.UIStringEvent;
        // <onMaxLevelClicked>k__BackingField: Torappu.UI.UIStringEvent;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_onUpgradeClicked: XLua.DelegateBridge;
        // __Hotfix0_set_onUpgradeClicked: XLua.DelegateBridge;
        // __Hotfix0_get_onMaxLevelClicked: XLua.DelegateBridge;
        // __Hotfix0_set_onMaxLevelClicked: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0_EventOnClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnMaxLevelClicked: XLua.DelegateBridge;
      }
      export interface Act12D6OuterBuffView {
        _outerBuffAdapter: Torappu.Activity.Act12D6.Act12D6OuterBuffAdapter;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
      }
      export interface RelicObjViewHolder {
        view: Torappu.Activity.Act12D6.Act12D6RelicHandBookItemView;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act12D6RelicHandBookGridAdapter {
        // _relickObj: UnityEngine.GameObject;
        // _onRelicClicked: Torappu.UI.UIStringEvent;
        chosenRelic: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_UpdateView: XLua.DelegateBridge;
        // __Hotfix0_ViewConstructor: XLua.DelegateBridge;
      }
      export interface Act12D6RelicHandBookToggleItemView {
        // _textName: UnityEngine.UI.Text;
        // _objCheck: UnityEngine.GameObject;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_SwitchOnState: XLua.DelegateBridge;
      }
      export interface Act12D6RelicHandBookView {
        _relicHandBookAdapter: Torappu.Activity.Act12D6.Act12D6RelicHandBookGridAdapter;
        // _imgIcon: UnityEngine.UI.Image;
        // _textName: UnityEngine.UI.Text;
        // _textEffect: UnityEngine.UI.Text;
        // _textDesc: UnityEngine.UI.Text;
        // _textCondition: UnityEngine.UI.Text;
        // _imgLock: UnityEngine.GameObject;
        // _objUnlockTips: UnityEngine.GameObject;
        // _relicCount: UnityEngine.UI.Text;
        // _textChooseTip: UnityEngine.UI.Text;
        // m_cachedBean: Torappu.Activity.Act12D6.Act12D6RelicHandBookStateBean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0__RenderEmptyDetailPart: XLua.DelegateBridge;
        // __Hotfix0__RenderDetailPart: XLua.DelegateBridge;
        // __Hotfix0__GenerateRelicProgress: XLua.DelegateBridge;
      }
      export interface Act12D6RetireConfirmView {
        // _fullScreenImage: Torappu.UI.UIFullScreenImage;
        // _container: UnityEngine.GameObject;
        // _rootView: UnityEngine.CanvasGroup;
        // _backBtn: UnityEngine.RectTransform;
        // m_blocker: Torappu.UI.UIPopupWindow.UIBlocker;
        // m_isInited: System.Boolean;
        // m_onClick: System.Action;
        FADE_DURATION: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Initialize: XLua.DelegateBridge;
        // __Hotfix0__Init: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
        // __Hotfix0_ClosePage: XLua.DelegateBridge;
        // __Hotfix0_OnDisable: XLua.DelegateBridge;
        // __Hotfix0__RenderBackImage: XLua.DelegateBridge;
        // __Hotfix0_ShowCoroutine: XLua.DelegateBridge;
        // __Hotfix0_HideCoroutine: XLua.DelegateBridge;
      }
      export interface Act12D6StageEntryView {
        // _panelStageEndTime: UnityEngine.GameObject;
        // _panelRewardEndTime: UnityEngine.GameObject;
        // _textStageEndTime: UnityEngine.UI.Text;
        // _textRewardEndTime: UnityEngine.UI.Text;
        // _textRemainTime: UnityEngine.UI.Text;
        // _remainTimeColor: UnityEngine.Color;
        // _btnMillstone: UnityEngine.UI.Button;
        // _lockEntry: UnityEngine.GameObject;
        // _endBtn: UnityEngine.GameObject;
        // _btnPlayerBuff: UnityEngine.UI.Button;
        // _objbuff: UnityEngine.GameObject;
        // _panelContinue: UnityEngine.GameObject;
        // _textCurrentDifficulty: UnityEngine.UI.Text;
        // _textLastStartTime: UnityEngine.UI.Text;
        // _textLastNode: UnityEngine.UI.Text;
        // _imageBuffLocked: UnityEngine.GameObject;
        // _imageChosenModeBg: UnityEngine.UI.Image;
        // _panelStartNew: UnityEngine.GameObject;
        // _textDifficultyChosen: UnityEngine.UI.Text;
        // _toggles: UnityEngine.UI.Toggle[];
        // _imageDifficultyBg: UnityEngine.UI.Image;
        // _diffDescAnimator: UnityEngine.Animator;
        // _btnNewGame: UnityEngine.UI.Button;
        // _panelNewGameLock: UnityEngine.GameObject;
        // _textNewGameLock: UnityEngine.UI.Text;
        // m_difficulty: System.String;
        // m_status: Torappu.Activity.Act12D6.Act12D6StageEntryView.Status;
        // m_reOpenTask: Torappu.CountDownTask;
        // <>f__am$cache0: System.Comparison<Torappu.RoguelikeModeData>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_Difficulty: XLua.DelegateBridge;
        // __Hotfix0_set_Difficulty: XLua.DelegateBridge;
        // __Hotfix0__RenderDifficulty: XLua.DelegateBridge;
        // __Hotfix0__FormatRemainTime: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0_Update: XLua.DelegateBridge;
        // __Hotfix0_EventOnNewGameLockClicked: XLua.DelegateBridge;
        // __Hotfix0__DealWithNewGameCoolDown: XLua.DelegateBridge;
        // __Hotfix0__TickNewGameCoolDownTime: XLua.DelegateBridge;
        // __Hotfix0__CheckReOpenRemainSeconds: XLua.DelegateBridge;
      }
      export interface Act12D6GameEndStateBean {
        viewModel: Torappu.Activity.Act12D6.Act12D6GameEndViewModel;
        cacheUnlockRelicOutBuffTokenCnt: System.Int32;
        cacheUnlockRelicMilestoneTokenCnt: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act12D6GameEndViewModel {
        isDead: System.Boolean;
        lastZoneName: System.String;
        lastZoneEndingDesc: System.String;
        endingId: System.String;
        endingBackgroundId: System.String;
        endingName: System.String;
        endingDesc: System.String;
        nickName: System.String;
        beginTs: System.Int64;
        endTs: System.Int64;
        totalSeconds: System.Int32;
        passedZoneCnt: System.Int32;
        moveCnt: System.Int32;
        normalBattleCnt: System.Int32;
        eliteBattleCnt: System.Int32;
        bossBattleCnt: System.Int32;
        relicCnt: System.Int32;
        charCnt: System.Int32;
        passedZoneScore: System.Int32;
        moveScore: System.Int32;
        normalBattleScore: System.Int32;
        eliteBattleScore: System.Int32;
        bossBattleScore: System.Int32;
        relicScore: System.Int32;
        charScore: System.Int32;
        modeId: System.String;
        modeName: System.String;
        modeFactor: System.Single;
        totalScore: System.Int32;
        outBuffTokenId: System.String;
        outBuffTokenName: System.String;
        // outBuffTokenIconSprite: UnityEngine.Sprite;
        outbuffTokenFactor: System.Single;
        outBuffTokenCnt: System.Int32;
        milestoneTokenId: System.String;
        milestoneTokenName: System.String;
        // milestoneTokenIconSprite: UnityEngine.Sprite;
        milestoneTokenFactor: System.Single;
        milestoneTokenCnt: System.Int32;
        // initRelic: Torappu.UI.Roguelike.RoguelikeRelicViewModel;
        // relics: System.Collections.Generic.List<Torappu.UI.Roguelike.RoguelikeRelicViewModel>;
        // chars: System.Collections.Generic.List<Torappu.UI.Roguelike.RoguelikeCharCardViewModel>;
        unlockedModes: System.Collections.Generic.List<System.String>;
        // unlockedInitRelics: System.Collections.Generic.List<Torappu.UI.Roguelike.RoguelikeRelicViewModel>;
        // unlockedRelics: System.Collections.Generic.List<Torappu.UI.Roguelike.RoguelikeRelicViewModel>;
        // <>f__am$cache0: System.Comparison<Torappu.UI.Roguelike.RoguelikeRelicViewModel>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_LoadData: XLua.DelegateBridge;
        // __Hotfix0__LoadRelics: XLua.DelegateBridge;
        // __Hotfix0__LoadChars: XLua.DelegateBridge;
        // __Hotfix0__LoadUnlockedRelics: XLua.DelegateBridge;
        // __Hotfix0__CompareChar: XLua.DelegateBridge;
      }
      export interface Act12D6MileStoneAvailTrackPointModel {
        // m_hasNew: System.Boolean;
      }
      export interface Act12D6MileStoneHolder {
        // _title: UnityEngine.UI.Text;
        // _content: Torappu.UI.LoopVerticalScrollRect;
        _adapter: Torappu.Activity.Act12D6.Act12D6MileStoneGridAdapter;
        // _costText: UnityEngine.UI.Text;
        // _btnFinishAll: UnityEngine.UI.Button;
        // m_targetIndex: System.Int32;
        // m_targetId: System.String;
        // m_max: System.Int32;
        // m_ableToGetFlag: System.Boolean;
      }
      export interface Act12D6MileStoneItemObj {
        // _finishImg: UnityEngine.UI.Image;
        // _ableToGetImg: UnityEngine.UI.Image;
        // _ableToGetPart: UnityEngine.GameObject;
        // _finishPart: UnityEngine.GameObject;
        // _cannotGetPart: UnityEngine.GameObject;
        // _finishBackgroundPart: UnityEngine.GameObject;
        _scaleInfo: System.Single;
        // _itemViewContainer: UnityEngine.Transform;
        // _charGetPart: UnityEngine.GameObject;
        // _itemGetPart: UnityEngine.GameObject;
        // _detailText: UnityEngine.UI.Text;
        // _detailText_2: UnityEngine.UI.Text;
        // _countText: UnityEngine.UI.Text;
        // _countText_2: UnityEngine.UI.Text;
        // _countTextActive: UnityEngine.UI.Text;
        // _countTextNoActive: UnityEngine.UI.Text;
        // _itemName: UnityEngine.UI.Text;
        // _countSymbol: UnityEngine.UI.Image;
        // _charHead: UnityEngine.UI.Image;
        // _storyObj: UnityEngine.GameObject;
        // _itemObj: UnityEngine.GameObject;
        // _ableToGetObj: UnityEngine.GameObject;
        // _ableToGetButton: UnityEngine.UI.Button;
        // _ableToGetButtonChar: UnityEngine.UI.Button;
        // _getText: UnityEngine.UI.Text;
        // _focusLight: UnityEngine.GameObject;
        // _storyTextColor: UnityEngine.Color;
        // _itemTextColor: UnityEngine.Color;
        // _notFinishTextColor: UnityEngine.Color;
        // _notFinishedCountColor: UnityEngine.Color;
        // clickEvent: Torappu.UI.UIStringEvent;
        // m_isInited: System.Boolean;
        // m_itemCard: Torappu.UI.UIItemCard;
        // m_cacheId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__Inited: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
        // __Hotfix0_OnFocus: XLua.DelegateBridge;
        // __Hotfix0_RenderItemPart: XLua.DelegateBridge;
        // __Hotfix0_InitData: XLua.DelegateBridge;
      }
      export interface Act12D6MileStoneStateBean {
        viewModelList: System.Collections.Generic.List<Torappu.Activity.Act12D6.Act12D6MileStoneViewModel>;
        currentStone: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitInfo: XLua.DelegateBridge;
      }
      export interface Act12D6MileStoneViewModel {
        id: System.String;
        state: Torappu.Activity.Act12D6.Act12D6MileStoneViewModel.State;
        count: System.Int32;
        rewardItem: Torappu.ItemBundle;
        orderId: System.Int32;
      }
      export interface Act12D6OuterBuffDetailStateBean {
        // <BuffData>k__BackingField: Torappu.Activity.Act12D6.PlayerOuterBuffData;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_BuffData: XLua.DelegateBridge;
        // __Hotfix0_set_BuffData: XLua.DelegateBridge;
        // __Hotfix0_LoadData: XLua.DelegateBridge;
      }
      export interface Act12D6OuterBuffStateBean {
        outerBuffs: System.Collections.Generic.List<Torappu.RoguelikeOuterBuff>;
        DEFAULT_BUFF_LEVEL: System.Int32;
        // m_unlockBuffInfos: Torappu.ListDict<System.String,Torappu.ActivityRoguelikeData.OuterBuffUnlockInfoData>;
        // m_playerBuffInfos: Torappu.ListDict<System.String,Torappu.Activity.Act12D6.PlayerOuterBuffData>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_LoadData: XLua.DelegateBridge;
        // __Hotfix0_GetPlayerOuterBuffData: XLua.DelegateBridge;
        // __Hotfix0__GenOuterBuffByLevel: XLua.DelegateBridge;
        // __Hotfix0__GenPlayerOuterBuffData: XLua.DelegateBridge;
      }
      export interface PlayerOuterBuffData {
        currentLevel: System.Int32;
      }
      export interface Act12D6RelicHandBookItemView {
        // _imgRelicIcon: UnityEngine.UI.Image;
        // _imageChosen: UnityEngine.UI.Image;
        // _textName: UnityEngine.UI.Text;
        // _imageNew: UnityEngine.GameObject;
        // _imageLock: UnityEngine.GameObject;
        // _imgRelicBg: UnityEngine.UI.Image;
        // _lockedBgColor: UnityEngine.Color;
        // _unlockedBgColor: UnityEngine.Color;
        // m_relicId: System.String;
        // <onRelicClicked>k__BackingField: Torappu.UI.UIStringEvent;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_onRelicClicked: XLua.DelegateBridge;
        // __Hotfix0_set_onRelicClicked: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0_EventOnClicked: XLua.DelegateBridge;
      }
      export interface Act12D6RelicHandBookStateBean {
        relicDataList: System.Collections.Generic.List<Torappu.Activity.Act12D6.PlayerRelicHandBookData>;
        // m_relicDataDict: Torappu.ListDict<System.String,Torappu.Activity.Act12D6.PlayerRelicHandBookData>;
        // m_playerRelicDict: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerRoguelike.StableData.RelicRecord>;
        sortedRelicDataList: System.Collections.Generic.List<Torappu.Activity.Act12D6.PlayerRelicHandBookData>;
        // m_gotCount: System.Int32;
        // m_inited: System.Boolean;
        // <>f__am$cache0: System.Comparison<Torappu.Activity.Act12D6.PlayerRelicHandBookData>;
        // <>f__am$cache1: System.Comparison<Torappu.Activity.Act12D6.PlayerRelicHandBookData>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_RelicCount: XLua.DelegateBridge;
        // __Hotfix0_LoadData: XLua.DelegateBridge;
        // __Hotfix0_SortData: XLua.DelegateBridge;
        // __Hotfix0_GetPlayerRelicData: XLua.DelegateBridge;
        // __Hotfix0_SetRelicRead: XLua.DelegateBridge;
        // __Hotfix0__GenPlayerRelicGotStatus: XLua.DelegateBridge;
      }
      export interface PlayerRelicHandBookData {
        read: System.Boolean;
        got: System.Boolean;
        unlocked: System.Boolean;
        progress: System.Int32;
      }
      export enum eRelicSortType {
        ALL = "ALL",
        HAVE = "HAVE",
        LOCKED = "LOCKED",
      }
      export namespace Act12D6StageController {
        export interface Bridge {
        }
      }
      export namespace Act12D6StageFloat {
      }
      export namespace Act12D6GameEndState {
        export enum InternalState {
          NONE = "NONE",
          IDLE_WAIT = "IDLE_WAIT",
          STATS_PLAY_SHOW_ANIM = "STATS_PLAY_SHOW_ANIM",
          STATS_WAIT_SHOW_ANIM = "STATS_WAIT_SHOW_ANIM",
          STATS_WAIT_INPUT = "STATS_WAIT_INPUT",
          STATS_PLAY_HIDE_ANIM = "STATS_PLAY_HIDE_ANIM",
          REWARD_PLAY_SHOW_ANIM = "REWARD_PLAY_SHOW_ANIM",
          REWARD_WAIT_SHOW_ANIM = "REWARD_WAIT_SHOW_ANIM",
          REWARD_WAIT_INPUT = "REWARD_WAIT_INPUT",
          REWARD_PLAY_HIDE_ANIM = "REWARD_PLAY_HIDE_ANIM",
          UNLOCK_PLAY_SHOW_ANIM = "UNLOCK_PLAY_SHOW_ANIM",
          UNLOCK_WAIT_INPUT = "UNLOCK_WAIT_INPUT",
          TRY_EXIT = "TRY_EXIT",
        }
      }
      export namespace Act12D6MileStoneState {
      }
      export namespace Act12D6GameEndRewardView {
        export interface ModeColorData {
          modeId: System.String;
          // color: UnityEngine.Color;
          // textColor: UnityEngine.Color;
        }
      }
      export namespace Act12D6GameEndScoreObjView {
        export interface TextTweener {
          TWEEN_DURATION: System.Single;
          TWEEN_DELAY: System.Single;
          // m_text: UnityEngine.UI.Text;
          // m_tweener: DG.Tweening.Tween;
          // m_count: System.Int32;
        }
      }
      export namespace Act12D6GameEndStatsView {
        export interface RelicAdapter {
          // <dataSet>k__BackingField: System.Collections.Generic.List<Torappu.UI.Roguelike.RoguelikeRelicViewModel>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_dataSet: XLua.DelegateBridge;
          // __Hotfix0_set_dataSet: XLua.DelegateBridge;
          // __Hotfix0_get_count: XLua.DelegateBridge;
          // __Hotfix0_RenderView: XLua.DelegateBridge;
        }
        export interface CharAdapter {
          // <dataSet>k__BackingField: System.Collections.Generic.List<Torappu.UI.Roguelike.RoguelikeCharCardViewModel>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_dataSet: XLua.DelegateBridge;
          // __Hotfix0_set_dataSet: XLua.DelegateBridge;
          // __Hotfix0_get_count: XLua.DelegateBridge;
          // __Hotfix0_RenderView: XLua.DelegateBridge;
        }
        export namespace RelicAdapter {
        }
      }
      export namespace Act12d6GameEndTitleView {
        export interface EndingData {
          endingId: System.String;
          // titleSprite: UnityEngine.Sprite;
          // logoSprite: UnityEngine.Sprite;
          // logoSize: UnityEngine.Vector2;
        }
      }
      export namespace Act12D6GameEndUnlockView {
        export interface Adapter {
          // <dataSet>k__BackingField: System.Collections.Generic.List<Torappu.UI.Roguelike.RoguelikeRelicViewModel>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_dataSet: XLua.DelegateBridge;
          // __Hotfix0_set_dataSet: XLua.DelegateBridge;
          // __Hotfix0_get_count: XLua.DelegateBridge;
          // __Hotfix0_RenderView: XLua.DelegateBridge;
        }
      }
      export namespace Act12D6RetireConfirmView {
      }
      export namespace Act12D6StageEntryView {
        export interface Status {
          EMPTY: Torappu.Activity.Act12D6.Act12D6StageEntryView.Status;
          activityId: System.String;
          data: Torappu.ActivityRoguelikeData;
          basicInfo: Torappu.ActivityTable.BasicData;
          playerData: Torappu.PlayerActivity.PlayerRoguelikeActivity;
          isNewFlag: System.Boolean;
        }
      }
      export namespace Act12D6MileStoneHolder {
      }
      export namespace Act12D6MileStoneViewModel {
        export enum State {
          FINISH = "FINISH",
          AVAIL = "AVAIL",
          NOTAVAIL = "NOTAVAIL",
        }
      }
    }
    export namespace Act13D5 {
      export interface Act13D5LineFiller {
        // _target: UnityEngine.UI.RectMask2D;
        // _size: UnityEngine.Vector2;
        _fillAmount: System.Single;
        _fillType: Torappu.Activity.Act13D5.Act13D5LineFiller.FillType;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_fillAmount: XLua.DelegateBridge;
        // __Hotfix0_set_fillAmount: XLua.DelegateBridge;
        // __Hotfix0__UpdateFillAmount: XLua.DelegateBridge;
      }
      export interface Act13D5StageButtonPlugin {
        _lines: System.Collections.Generic.List<Torappu.Activity.Act13D5.Act13D5LineFiller>;
        _lineDuration: System.Single;
        // _showAnim: Torappu.UI.UIAnimationLocation;
        _allDelay: System.Single;
        // _pluginObj: UnityEngine.GameObject;
        // _panelEmpty: UnityEngine.GameObject;
        _enableShowEffect: System.Boolean;
        // m_isFirstShow: System.Boolean;
        // m_isEnabled: System.Boolean;
        // m_model: Torappu.UI.Stage.StageViewModel;
        // m_displayCoroutine: Torappu.CoroutineOnEnable;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
        // __Hotfix0_OnRenderStage: XLua.DelegateBridge;
        // __Hotfix0__StatusBegin: XLua.DelegateBridge;
        // __Hotfix0__StatusEnd: XLua.DelegateBridge;
        // __Hotfix0__CheckIfTriggerShowEffect: XLua.DelegateBridge;
        // __Hotfix0__DisplayCoroutine: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
        // __Hotfix0_OnDisable: XLua.DelegateBridge;
      }
      export namespace Act13D5LineFiller {
        export enum FillType {
          VERTICAL = "VERTICAL",
          HORIZONTAL = "HORIZONTAL",
        }
      }
      export namespace Act13D5StageButtonPlugin {
      }
    }
    export namespace Act15D0 {
      export interface Act15D0SoundEffectTrigger {
        effectSoundType: Torappu.Audio.UiEffectSoundType;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__animatorPlaySoundEffect: XLua.DelegateBridge;
      }
    }
    export namespace Act16D6 {
      export interface Act16D6Entry {
        _checkinItem: Torappu.Activity.ActivityCommonCheckinV2Item;
        // _itemContainer: UnityEngine.Transform;
        // _dotViewContainer: UnityEngine.Transform;
        // _openTime: UnityEngine.UI.Text;
        // _scrollRect: UnityEngine.UI.ScrollRect;
        // _apItemTime: UnityEngine.UI.Text;
        // _mainRewardCountdown: UnityEngine.UI.Text[];
        _dotView: Torappu.Activity.ActivityCommonCheckinDotView;
        // _mainColor: UnityEngine.Color;
        // _logoColor: UnityEngine.Color;
        // _acceptableLogoColor: UnityEngine.Color;
        // _maskColor: UnityEngine.Color;
        // _rewardBgColor: UnityEngine.Color;
        // _rewardMaskColor: UnityEngine.Color;
        // _rewardDotColor: UnityEngine.Color;
        // _acceptableLightColor: UnityEngine.Color;
        // _decSprite: UnityEngine.Sprite;
        // _normalDot: UnityEngine.Sprite;
        // _bigDot: UnityEngine.Sprite;
        // _acceptableDot: UnityEngine.Sprite;
        // _outlineColor: UnityEngine.Color;
        // _notGetColor: UnityEngine.Color;
        // m_dotView: Torappu.Activity.ActivityCommonCheckinDotView;
        // m_itemList: System.Collections.Generic.List<Torappu.Activity.ActivityCommonCheckinV2Item>;
        // m_ShowItemArray: Torappu.DefaultCheckInData.CheckInDailyInfo[];
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0__RefreshHorizontal: XLua.DelegateBridge;
        // __Hotfix0__CountNormalizedPosition: XLua.DelegateBridge;
        // __Hotfix0__ApplyTimeInfo: XLua.DelegateBridge;
        // __Hotfix0_RefreshInfo: XLua.DelegateBridge;
        // __Hotfix0__UpdateEntryInfo: XLua.DelegateBridge;
        // __Hotfix0__EventForDotClick: XLua.DelegateBridge;
        // __Hotfix0__MoveToFocusItem: XLua.DelegateBridge;
      }
      export namespace Act16D6Entry {
      }
    }
    export namespace Act17D0 {
      export interface Act17D0TopMenu {
        // _btnBack: UnityEngine.RectTransform;
        // m_isInited: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_OnClickBack: XLua.DelegateBridge;
        // __Hotfix0_OnClickHome: XLua.DelegateBridge;
      }
      export interface Act17D0EffectView {
        _effectHolder: Torappu.ScreenEffectHolder;
        // m_rendererCollection: Torappu.Activity.Act17D0.Act17D0EffectView.RendererCollection;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnLoaded: XLua.DelegateBridge;
        // __Hotfix0_BeforeUnload: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
        // __Hotfix0_OnDestroy: XLua.DelegateBridge;
        // __Hotfix0__DisableEffect: XLua.DelegateBridge;
      }
      export interface Act17D0MissionView {
        // _textProgress: UnityEngine.UI.Text;
        // _imageProgress: UnityEngine.UI.Image;
        _missionGroupAdapter: Torappu.Activity.Act9D0.Act9D0MissionGroupAdapter;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
      }
      export namespace Act17D0EffectView {
        export interface RendererCollection {
          // m_holder: Torappu.ScreenEffectHolder;
          // m_layerCache: System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<UnityEngine.Renderer,System.String>>;
          // m_registeredPage: Torappu.UI.UIPage;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_AdjustToTargetLayer: XLua.DelegateBridge;
          // __Hotfix0_RestoreLayers: XLua.DelegateBridge;
          // __Hotfix0_Dispose: XLua.DelegateBridge;
          // __Hotfix0__InitCacheIfNot: XLua.DelegateBridge;
        }
      }
    }
    export namespace Act17D1 {
      export interface Act17D1BattleOutMeta {
        endTs: System.Int64;
        isFriend: System.Boolean;
      }
      export interface Act17D1RouteUtil {
        // __Hotfix0_RouteToProperTargetFromBattle: XLua.DelegateBridge;
        // __Hotfix0__RouteToTargetFromBattle: XLua.DelegateBridge;
        // __Hotfix0__GenPageStackParamToTargetFromBattle: XLua.DelegateBridge;
      }
      export interface Act17D1ActivityPage {
        _topMenuHolder: Torappu.PrefabInstHolder;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__ReturnPage: XLua.DelegateBridge;
        // __Hotfix0_OnCreate: XLua.DelegateBridge;
      }
      export interface Act17D1ResUtil {
        COLOR_GRAY_NET: System.String;
        COLOR_BLUE_NET: System.String;
        // COLOR_MATCH_NUMBER: UnityEngine.Color;
        // COLOR_MATCH_YELLOW_NUMBER: UnityEngine.Color;
        BUBBLE_LIFETIME: System.Single;
        BUBBLE_INTERVAL_LIMIT: System.Single;
        ACT_LOCAL_CACHE_PREFIX_STAGE_DIFFICULTY: System.String;
        ACT17D1_STAGE_DETAIL_MAP_HUB: System.String;
        MATCH_MAX_TIME: System.Int32;
        MATCH_START_TIME_CEIL: System.Int32;
        MATCH_START_TIME_FLOOR: System.Int32;
        ACT17D1_EMOJI_HUB: System.String;
        STAGE_SPRITE_HUB_PATH: System.String;
        STAGE_BANNER_SPRITE_ID: System.String;
        STAGE_BATTLE_FINISH_SPRITE_ID: System.String;
        STAGE_BUTTON_SPRITE_ID: System.String;
        STAGE_DETAIL_SPRITE_ID: System.String;
        STAGE_MATCH_SPRITE_ID: System.String;
        STAGE_NUMBER_SPRITE_ID: System.String;
        STAGE_SQUAD_SPRITE_ID: System.String;
        STAGE_FRIEND_MAP_SPRITE_ID: System.String;
        TEAM_CHAR_COUNT: System.Int32;
        // s_replayActivityID: System.String;
        // s_lastFindRoomTs: System.Int64;
        // s_lastJoinRoomTs: System.Int64;
        // s_lastCreateRoomTs: System.Int64;
        ROOM_REQUEST_COLDDOWN: System.Int32;
        // __Hotfix0_get_MATCH_TIME_DELTA: XLua.DelegateBridge;
        // __Hotfix0_InitReplay: XLua.DelegateBridge;
        // __Hotfix0_ResetLastTsCache: XLua.DelegateBridge;
        // __Hotfix0_get_LastRefreshRoomTs: XLua.DelegateBridge;
        // __Hotfix0_set_LastRefreshRoomTs: XLua.DelegateBridge;
        // __Hotfix0_get_LastJoinRoomTs: XLua.DelegateBridge;
        // __Hotfix0_set_LastJoinRoomTs: XLua.DelegateBridge;
        // __Hotfix0_get_LastCreateRoomTs: XLua.DelegateBridge;
        // __Hotfix0_set_LastCreateRoomTs: XLua.DelegateBridge;
        // __Hotfix0_GetRandomStartTime: XLua.DelegateBridge;
        // __Hotfix0_get_activityId: XLua.DelegateBridge;
        // __Hotfix0_get_uiItemCard: XLua.DelegateBridge;
        // __Hotfix0_get_floatStateEngine: XLua.DelegateBridge;
        // __Hotfix0_get_basicData: XLua.DelegateBridge;
        // __Hotfix0_get_actData: XLua.DelegateBridge;
        // __Hotfix0_get_serverDataCache: XLua.DelegateBridge;
        // __Hotfix0_CheckStageCompleted: XLua.DelegateBridge;
        // __Hotfix0_CheckGroupSquadAvail: XLua.DelegateBridge;
        // __Hotfix0_CheckFriendRoomJoinable: XLua.DelegateBridge;
        // __Hotfix0_CheckStageUnlocked: XLua.DelegateBridge;
        // __Hotfix0_get_act17d1StageDetailMapHub: XLua.DelegateBridge;
        // __Hotfix0_GetMissionData: XLua.DelegateBridge;
        // __Hotfix0_GetMissionExtraData: XLua.DelegateBridge;
        // __Hotfix0_GetStageData: XLua.DelegateBridge;
        // __Hotfix0_GetDiffText: XLua.DelegateBridge;
        // __Hotfix0_GetPositionText: XLua.DelegateBridge;
        // __Hotfix0_LoadStageDatasByGroupId: XLua.DelegateBridge;
        // __Hotfix0_LoadStageDataByGroupIdAndDifficulty: XLua.DelegateBridge;
        // __Hotfix0_GetStageGroupData: XLua.DelegateBridge;
        // __Hotfix0_GetStageGroupDataByStageId: XLua.DelegateBridge;
        // __Hotfix0_LoadStageBannerSprite: XLua.DelegateBridge;
        // __Hotfix0_LoadStageButtonSprite: XLua.DelegateBridge;
        // __Hotfix0_LoadStageDetailSprite: XLua.DelegateBridge;
        // __Hotfix0_LoadStageMatchSprite: XLua.DelegateBridge;
        // __Hotfix0_LoadStageNumberSprite: XLua.DelegateBridge;
        // __Hotfix0_LoadStageSquadSprite: XLua.DelegateBridge;
        // __Hotfix0_LoadStageFriendMapSprite: XLua.DelegateBridge;
        // __Hotfix0__ActivityStageOnlyLoadAutoPackSprite: XLua.DelegateBridge;
        // __Hotfix0_LoadStageBattleFinishSprite: XLua.DelegateBridge;
        // __Hotfix0_LoadStageDetailMap: XLua.DelegateBridge;
        // __Hotfix0_LoadEmojiSprite: XLua.DelegateBridge;
        // __Hotfix0_get_act17d1EmojiHub: XLua.DelegateBridge;
        // __Hotfix0_GetStageDetailDifficulty: XLua.DelegateBridge;
        // __Hotfix0_SetStageDetailDifficulty: XLua.DelegateBridge;
        // __Hotfix0__GenerateActLocalCacheKey: XLua.DelegateBridge;
        // __Hotfix0_GetEnemyListByStageId: XLua.DelegateBridge;
        // __Hotfix0_GetSquadUsableList: XLua.DelegateBridge;
        // __Hotfix0_OpenSquadPage: XLua.DelegateBridge;
        // __Hotfix0_CreateCommonTopMenu: XLua.DelegateBridge;
      }
      export interface Act17D1Curve {
        // _startNode: UnityEngine.RectTransform;
        // _endNode: UnityEngine.RectTransform;
        // _startPosOffset: UnityEngine.Vector2;
        // _endPosOffset: UnityEngine.Vector2;
        _segment: System.Int32;
        _width: System.Single;
        _degreeX: System.Single;
        _degreeY: System.Single;
        _startRoundCorner: System.Single;
        _endRoundCorner: System.Single;
        _useClipColor: System.Boolean;
        _clipRatio: System.Single;
        // _clipColor: UnityEngine.Color;
        _reflectOffsetY: System.Single;
        _reflectWidthRatio: System.Single;
        // _reflectColor: UnityEngine.Color;
        // m_vertices: System.Collections.Generic.List<UnityEngine.Vector3>;
        // m_tris: System.Collections.Generic.List<System.Int32>;
        // m_startPos: UnityEngine.Vector3;
        // m_endPos: UnityEngine.Vector3;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_startNode: XLua.DelegateBridge;
        // __Hotfix0_set_startNode: XLua.DelegateBridge;
        // __Hotfix0_get_endNode: XLua.DelegateBridge;
        // __Hotfix0_set_endNode: XLua.DelegateBridge;
        // __Hotfix0_get_useClipColor: XLua.DelegateBridge;
        // __Hotfix0_set_useClipColor: XLua.DelegateBridge;
        // __Hotfix0_get_clipColor: XLua.DelegateBridge;
        // __Hotfix0_set_clipColor: XLua.DelegateBridge;
        // __Hotfix0_OnPopulateMesh: XLua.DelegateBridge;
        // __Hotfix0__GenerateCurve: XLua.DelegateBridge;
        // __Hotfix0_Update: XLua.DelegateBridge;
      }
      export namespace Act17D1RouteUtil {
        export enum Target {
          ACTIVITY = "ACTIVITY",
          ROOM = "ROOM",
        }
      }
      export namespace Battle {
        export interface Act17D1CameraPlugin {
          AUDIO_FADE_OUT_TIME: System.Single;
          // _extraCameraTransform: UnityEngine.Transform;
          // _extraCamera: UnityEngine.Camera;
          _elevateDuration: System.Single;
          // _elevateAlphaCurve: UnityEngine.AnimationCurve;
          // _elevateHeightCurve: UnityEngine.AnimationCurve;
          // m_adaptOffset: System.Nullable<UnityEngine.Vector3>;
          // m_elevateHeight: System.Single;
          // m_uiPlugin: Torappu.Activity.Act17D1.Battle.UI.Act17D1Plugin;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_uiPlugin: XLua.DelegateBridge;
          // __Hotfix0_set_uiPlugin: XLua.DelegateBridge;
          // __Hotfix0_OnSwitchCameraBtnClicked: XLua.DelegateBridge;
          // __Hotfix0__DoElevatorCameraTween: XLua.DelegateBridge;
          // __Hotfix0_DoAdaptCameraPosition: XLua.DelegateBridge;
          // __Hotfix0_OnCreate: XLua.DelegateBridge;
          // __Hotfix0__InitLayout: XLua.DelegateBridge;
        }
        export namespace Act17D1CameraPlugin {
        }
      }
      export namespace BattleFinish {
        export interface Act17D1BattleFinishPlayerView {
          // _colorWin: UnityEngine.Color;
          // _colorLose: UnityEngine.Color;
          // _charViewPrefab: Torappu.Activity.Act17D1.UI.Act17D1SquadCharCard;
          // _charViewContainers: System.Collections.Generic.List<UnityEngine.RectTransform>;
          // _textLevel: UnityEngine.UI.Text;
          // _textNickName: UnityEngine.UI.Text;
          // _avatarContainer: UnityEngine.RectTransform;
          // _imageTeamPos: UnityEngine.UI.Image;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_Render: XLua.DelegateBridge;
        }
        export interface Act17D1BattleFinishView {
          ANIM_WIN: System.String;
          ANIM_LOSE: System.String;
          ANIM_WIN_WAIT_TIME: System.Single;
          ANIM_LOSE_WAIT_TIME: System.Single;
          FRIEND_ADD_WIN_WAIT_TIME: System.Single;
          FRIEND_ADD_LOSE_WAIT_TIME: System.Single;
          WAIT_A_WHILE_TIME: System.Single;
          // _colorWin: UnityEngine.Color;
          // _colorLose: UnityEngine.Color;
          // _animationWrapper: Torappu.UI.AnimationWrapper;
          _p1View: Torappu.Activity.Act17D1.BattleFinish.Act17D1BattleFinishPlayerView;
          _p2View: Torappu.Activity.Act17D1.BattleFinish.Act17D1BattleFinishPlayerView;
          // _imageMask: UnityEngine.UI.Image;
          // _panelWin: UnityEngine.RectTransform;
          // _panelLose: UnityEngine.RectTransform;
          // _textTimestampWin: UnityEngine.UI.Text;
          // _textTimestampLose: UnityEngine.UI.Text;
          // _textStageName: UnityEngine.UI.Text;
          // _textDifficulty: UnityEngine.UI.Text;
          // _imageStageBkg: UnityEngine.UI.Image;
          // m_viewModel: Torappu.Activity.Act17D1.BattleFinish.Act17D1BattleFinishViewModel;
          // m_internalState: Torappu.Activity.Act17D1.BattleFinish.Act17D1BattleFinishView.InternalState;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnInit: XLua.DelegateBridge;
          // __Hotfix0_EventOnClicked: XLua.DelegateBridge;
          // __Hotfix0__AnimationEventOnPlayAudio: XLua.DelegateBridge;
          // __Hotfix0__Render: XLua.DelegateBridge;
          // __Hotfix0__UpdateState: XLua.DelegateBridge;
          // __Hotfix0__UpdateFriendAdd: XLua.DelegateBridge;
        }
        export interface Act17D1BattleFinishViewModel {
          isWin: System.Boolean;
          timestampStr: System.String;
          stageName: System.String;
          difficulty: System.String;
          // spriteStageBkg: UnityEngine.Sprite;
          p1ViewModel: Torappu.Activity.Act17D1.BattleFinish.Act17D1BattleFinishPlayerViewModel;
          p2ViewModel: Torappu.Activity.Act17D1.BattleFinish.Act17D1BattleFinishPlayerViewModel;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_LoadData: XLua.DelegateBridge;
        }
        export interface Act17D1BattleFinishPlayerViewModel {
          isMySelf: System.Boolean;
          isFriend: System.Boolean;
          isWin: System.Boolean;
          uid: System.String;
          nickName: System.String;
          nickNameWithoutNickNumber: System.String;
          nickNumber: System.String;
          level: System.Int32;
          serverName: System.String;
          lastOnlineTime: System.DateTime;
          avatarInfo: Torappu.AvatarInfo;
          // charModels: System.Collections.Generic.List<Torappu.Activity.Act17D1.UI.Act17D1RoomUserViewModel.SquadCharViewModel>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_LoadData: XLua.DelegateBridge;
          // __Hotfix0_ToSquadFriendData: XLua.DelegateBridge;
        }
        export namespace Act17D1BattleFinishView {
          export enum InternalState {
            NONE = "NONE",
            PLAY_ANIM = "PLAY_ANIM",
            WAIT_FOR_A_WHILE = "WAIT_FOR_A_WHILE",
            WAIT_FOR_INPUT = "WAIT_FOR_INPUT",
          }
        }
      }
    }
    export namespace Act1D5 {
      export interface Act1D5Entry {
        _checkinItemList: System.Collections.Generic.List<Torappu.Activity.ActivityCommonCheckinItem>;
        // _itemContainer: UnityEngine.Transform;
        // _openTime: UnityEngine.UI.Text;
        // _scrollRect: UnityEngine.UI.ScrollRect;
        // _apItemTime: UnityEngine.UI.Text;
        // m_itemList: System.Collections.Generic.List<Torappu.Activity.ActivityCommonCheckinItem>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0__refreshVertial: XLua.DelegateBridge;
        // __Hotfix0__ApplyTimeInfo: XLua.DelegateBridge;
        // __Hotfix0_RefreshInfo: XLua.DelegateBridge;
      }
      export interface Act1D5ResHolder {
        // _homeSprite: UnityEngine.Sprite;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_topbarSprite: XLua.DelegateBridge;
        // __Hotfix0_get_homeSprite: XLua.DelegateBridge;
      }
      export namespace Act1D5Entry {
      }
    }
    export namespace Act3D0 {
      export interface Act3D0CampResHolder {
        _campId: System.String;
        _effectStyle: Torappu.Activity.Act3D0.UIGachaBoxDrawEffectFloatPage.Style;
        // _commonColor: UnityEngine.Color;
        // _textColor: UnityEngine.Color;
        // _textNumColor: UnityEngine.Color;
        // _selectGroup: UnityEngine.Sprite;
        // _chooseGroupImg: UnityEngine.Sprite;
        // _backImg: UnityEngine.Sprite;
        // _spriteList: System.Collections.Generic.List<UnityEngine.Sprite>;
        // _gachaButton: UnityEngine.Sprite;
        // _titleBanner: UnityEngine.Sprite;
        // _shadowBack: UnityEngine.Sprite;
        // _infiShadowBack: UnityEngine.Sprite;
        // _gotoGachaBoxButton: UnityEngine.Sprite;
        // _gotoGachaBoxBack: UnityEngine.Sprite;
        // _mileStoneBackImg: UnityEngine.Sprite;
        // _mileStoneMissionBack: UnityEngine.Sprite;
        // _mileStoneMissionFinishImg: UnityEngine.Sprite;
        // _mileStoneMissionShining: UnityEngine.Sprite;
        // _clueWarning: UnityEngine.Sprite;
        // _keyList: System.Collections.Generic.List<UnityEngine.Sprite>;
        // _clueInfoList: System.Collections.Generic.List<UnityEngine.Sprite>;
      }
      export interface Act3D0Const {
        DEFAULT_CAMP: System.String;
        CLUE_LOCAL_CACHE_PARAM: System.String;
        // blackMask: UnityEngine.Color;
        // whiteMask: UnityEngine.Color;
        MINGACHATIMES: System.Int32;
        MAXGACHATIMES: System.Int32;
        DEFAULTTIMES: System.Int32;
        MILESTONE_HEIGHT: System.Single;
        MILESTONE_DELTA_HEIGHT: System.Single;
        MILESTONE_OFFSET: System.Single;
        CLUE_EFFECT_TIME: System.Single;
        GACHA_BOX_EFFECT_TIME: System.Single;
        CONST_CLUE_PARAM: System.String;
        CONST_CLUE_LEFT_PARAM: System.String;
        CONST_CLUE_RIGHT_PARAM: System.String;
        LOCK_PATH_FORMAT: System.String;
      }
      export interface Act3d0ResUtil {
      }
      export interface Act3d0Service {
        GACHA: System.String;
        SELECT_FACTION: System.String;
        GET_MILESTONE_REWARD: System.String;
        GET_GACHA_INFO: System.String;
      }
      export interface Act3D0MileStoneRequest {
        activityId: System.String;
        rewardId: System.String;
      }
      export interface Act3D0MileStoneResponse {
        item: Torappu.ActivityItemModel;
      }
      export interface Act3D0GachaInfoRequest {
        activityId: System.String;
      }
      export interface Act3D0GachaInfoResponse {
        info: System.Collections.Generic.Dictionary<System.String,Torappu.Act3D0Data.InfinitePoolPercent>;
      }
      export interface Act3D0GachaResponse {
        items: System.Collections.Generic.List<Torappu.ActivityItemModel>;
        unlock: System.Collections.Generic.List<System.String>;
        clues: System.Collections.Generic.List<System.String>;
      }
      export interface Act3D0GachaRequest {
        count: System.Int32;
        poolId: System.String;
        activityId: System.String;
      }
      export interface Act3D0SelectFactionRequest {
        activityId: System.String;
        faction: System.String;
      }
      export interface Act3D0SelectFactionResponse {
      }
      export enum Act3D0Event {
        CAMP_SELECTED = "CAMP_SELECTED",
      }
      export interface Act3D0StageController {
        _entryZoneBinder: Torappu.Activity.Act3D0.Act3D0EntryZoneGroupBinder;
        _mapZoneBinder: Torappu.Activity.Act3D0.Act3D0MapZoneGroupBinder;
        _useFloat: System.Boolean;
        // m_zoneDescGroupProperty: Torappu.Activity.Act3D0.Act3D0ZoneDescGroupViewProperty;
        // m_fakeCampForBGM: System.String;
        // m_eventPool: Torappu.EventPool<Torappu.Activity.Act3D0.Act3D0Event>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_eventPool: XLua.DelegateBridge;
        // __Hotfix0_get_staticActivityId: XLua.DelegateBridge;
        // __Hotfix0_CreateBridge: XLua.DelegateBridge;
        // __Hotfix0_CheckIfCampSelected: XLua.DelegateBridge;
        // __Hotfix0_OnLoaded: XLua.DelegateBridge;
        // __Hotfix0__OnCampConfirmed: XLua.DelegateBridge;
        // __Hotfix0__TryShowCampSelectState: XLua.DelegateBridge;
        // __Hotfix0_OnStageTimeout: XLua.DelegateBridge;
        // __Hotfix0_OnRewardTimeout: XLua.DelegateBridge;
        // __Hotfix0_GetBGMSignal: XLua.DelegateBridge;
        // __Hotfix0_TriggerBGMForCampManually: XLua.DelegateBridge;
        // __Hotfix0__TriggerCampConfirmedAudioSignal: XLua.DelegateBridge;
        // __Hotfix0_GetAct3D0PlayerInfo: XLua.DelegateBridge;
        // __Hotfix0_GetAct3D0PlayerInfoFromPlayerData: XLua.DelegateBridge;
      }
      export interface Act3D0StageEntry {
        // _buttonImg: UnityEngine.UI.Image;
        // _backImg: UnityEngine.UI.Image;
        // _boxImg: UnityEngine.UI.Image;
        // _timeInfo: UnityEngine.UI.Text;
        // _stateInfo: UnityEngine.UI.Text;
        _actTrackPoint: Torappu.Activity.UIActTrackPoint;
        // _mileStoneButton: UnityEngine.UI.Button;
        // _gachaBoxButton: UnityEngine.UI.Button;
        // _topMenuContainer: UnityEngine.RectTransform;
        // _favorUpTrackPoint: Torappu.UI.UICommonTrackPoint;
        // _favorUpObj: UnityEngine.GameObject;
        // _noFavorUpObj: UnityEngine.GameObject;
        // _mileStoneTrackPoint: Torappu.UI.TrackPointViewProperty;
        // m_favorTrackPoint: Torappu.UI.TrackPointViewProperty;
        // m_topMenu: Torappu.UI.CommonTopMenu;
        // m_isInited: System.Boolean;
        // <>f__am$cache0: System.Action;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnBanAct: XLua.DelegateBridge;
        // __Hotfix0_RefreshTrackPoint: XLua.DelegateBridge;
        // __Hotfix0_InitData: XLua.DelegateBridge;
        // __Hotfix0_EventOnReplicateClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnFavorUpClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnDetailClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnMileStoneClicked: XLua.DelegateBridge;
      }
      export interface Act3D0StageFloat {
        // _barContainer: UnityEngine.Transform;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_LoadCoroutine: XLua.DelegateBridge;
      }
      export interface Act3D0StageMapDecor {
        // _coinCount: UnityEngine.UI.Text;
        // _mileStoneCount: UnityEngine.UI.Text;
        // m_actId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_CheckIfDataChanged: XLua.DelegateBridge;
        // __Hotfix0_OnPlayerDataChanged: XLua.DelegateBridge;
        // __Hotfix0_OnLoaded: XLua.DelegateBridge;
        // __Hotfix0_BeforeUnload: XLua.DelegateBridge;
        // __Hotfix0_OnDestroy: XLua.DelegateBridge;
      }
      export interface Act3D0StagePreview {
        // _coinCount: UnityEngine.UI.Text;
        // _mileStoneCount: UnityEngine.UI.Text;
        // m_actId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_CheckIfDataChanged: XLua.DelegateBridge;
        // __Hotfix0_OnPlayerDataChanged: XLua.DelegateBridge;
        // __Hotfix0_OnLoaded: XLua.DelegateBridge;
        // __Hotfix0_BeforeUnload: XLua.DelegateBridge;
        // __Hotfix0_OnDestroy: XLua.DelegateBridge;
      }
      export interface UIGachaBoxDrawEffectFloatPage {
        _isSkippable: System.Boolean;
        // _backImage: Torappu.UI.UIBlurFloatPanel;
        // _spineGraphic: Spine.Unity.SkeletonGraphic;
        // _effectHolder: UnityEngine.GameObject;
        _skinNameOfStyles: System.String[];
        // m_isBlurShown: System.Boolean;
        // m_options: Torappu.Activity.Act3D0.UIGachaBoxDrawEffectFloatPage.Options;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_ShowIfNot: XLua.DelegateBridge;
        // __Hotfix0_FinishIfNot: XLua.DelegateBridge;
        // __Hotfix0_OnClicked: XLua.DelegateBridge;
        // __Hotfix0__StartSpineAnimation: XLua.DelegateBridge;
        // __Hotfix0__GetSkinNameFromStyle: XLua.DelegateBridge;
        // __Hotfix0__SetActiveOfSpineAndEffect: XLua.DelegateBridge;
        // __Hotfix0_PlayEffect: XLua.DelegateBridge;
        // __Hotfix0_OnReset: XLua.DelegateBridge;
        // __Hotfix0_OnStart: XLua.DelegateBridge;
        // __Hotfix0_OnFinish: XLua.DelegateBridge;
      }
      export interface Act3D0ResUrls {
        PANEL_CAMP_SELECT_PATH: System.String;
        PANEL_CAMP_RES_PATH: System.String;
        // __Hotfix0_GetPanelCampSelectPath: XLua.DelegateBridge;
        // __Hotfix0_GetCampResPath: XLua.DelegateBridge;
      }
      export interface Act3D0CampSelectState {
        FADE_DURATION: System.Single;
        // _alphaHandler: UnityEngine.CanvasGroup;
        // _campSelectContainer: UnityEngine.RectTransform;
        // m_campSelectView: Torappu.Activity.Act3D0.Act3D0CampSelectView;
        // <>f__am$cache0: System.Action<Torappu.Activity.Act3D0.Act3D0SelectFactionResponse>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_OnExit: XLua.DelegateBridge;
        // __Hotfix0__OnCampSelected: XLua.DelegateBridge;
        // __Hotfix0__InitCampSelectView: XLua.DelegateBridge;
        // __Hotfix0__OnCampSelectConfirmed: XLua.DelegateBridge;
        // __Hotfix0__OnCampResultConfirmed: XLua.DelegateBridge;
        // __Hotfix0_HideCoroutine: XLua.DelegateBridge;
        // __Hotfix0_HideImmediately: XLua.DelegateBridge;
        // __Hotfix0_ShowCoroutine: XLua.DelegateBridge;
        // __Hotfix0_ShowImmediately: XLua.DelegateBridge;
      }
      export interface Act3D0ClueState {
        _stateBean: Torappu.Activity.Act3D0.Act3D0ClueStateBean;
        _clueHolder: Torappu.Activity.Act3D0.Act3D0ClueHolder;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
      }
      export interface Act3D0EmptyState {
        // _topMenu: UnityEngine.GameObject;
        _stateBean: Torappu.Activity.Act3D0.Act3D0GachaBoxStateBean;
        // <>f__am$cache0: System.Action<Torappu.UI.IStateBean>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_RegisterToDataListener: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_OnExit: XLua.DelegateBridge;
        // __Hotfix0__OnCampSelected: XLua.DelegateBridge;
        // __Hotfix0_OnResume: XLua.DelegateBridge;
      }
      export interface Act3D0GachaBoxState {
        _stateBean: Torappu.Activity.Act3D0.Act3D0GachaBoxStateBean;
        _rightPartView: Torappu.Activity.Act3D0.Act3D0GachaBoxRightPartView;
        _showPart: Torappu.Activity.Act3D0.Act3D0ClueShowPart;
        // _topMenu: UnityEngine.GameObject;
        // _backImage: UnityEngine.UI.Image;
        // _banner: UnityEngine.UI.Image;
        // _coinText: UnityEngine.UI.Text;
        _floatPage: Torappu.Activity.Act3D0.UIGachaBoxDrawEffectFloatPage;
        // _floatPageContainer: UnityEngine.Transform;
        // _alphaHandler: UnityEngine.CanvasGroup;
        // m_floatPage: Torappu.Activity.Act3D0.UIGachaBoxDrawEffectFloatPage;
        // m_isInited: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
        // __Hotfix0_OnClickTence: XLua.DelegateBridge;
        // __Hotfix0__SendGachaRequest: XLua.DelegateBridge;
        // __Hotfix0__SendGachaInfoRequest: XLua.DelegateBridge;
        // __Hotfix0__ReceiveItemsFromBox: XLua.DelegateBridge;
        // __Hotfix0__RefreshActWithNewIndex: XLua.DelegateBridge;
        // __Hotfix0__RefreshCoinState: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_ToClueState: XLua.DelegateBridge;
      }
      export interface Act3D0MileStoneState {
        _stateBean: Torappu.Activity.Act3D0.Act3D0MileStoneStateBean;
        _view: Torappu.Activity.Act3D0.Act3D0MileStoneHolder;
        // _topMenu: UnityEngine.GameObject;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_SendGachaRequest: XLua.DelegateBridge;
        // __Hotfix0__SendGachaRequest: XLua.DelegateBridge;
        // __Hotfix0_ReceiveItemsCoroutine: XLua.DelegateBridge;
      }
      export interface Act3D0ReplicateState {
        _view: Torappu.Activity.Act3D0.Act3D0ReplicateView;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_ToShopPage: XLua.DelegateBridge;
      }
      export interface Act3D0EntryZoneGroupBinder {
        _zoneViews: System.Collections.Generic.List<Torappu.Activity.Act3D0.Act3D0EntryZoneView>;
        // m_isInited: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_OnValueChanged: XLua.DelegateBridge;
        // __Hotfix0__OnZoneClicked: XLua.DelegateBridge;
      }
      export interface Act3D0EntryZoneView {
        _zoneId: System.String;
        // _panelUnlocked: UnityEngine.GameObject;
        // _panelLocked: UnityEngine.GameObject;
        // _panelTrackPoint: UnityEngine.GameObject;
        // _textLocked: UnityEngine.UI.Text;
        // onZoneClicked: System.Action<System.String>;
        // m_cachedModel: Torappu.Activity.Act3D0.Act3D0ZoneDescModel;
        // m_isInited: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnZoneDescModelUpdated: XLua.DelegateBridge;
        // __Hotfix0_EventOnBtnClicked: XLua.DelegateBridge;
      }
      export interface Act3D0GachaBoxDetailView {
        // _viewContainer: Torappu.UI.SimpleLayoutContent;
        // _lockedObj: UnityEngine.GameObject;
        // _lockImg: UnityEngine.UI.Image;
        // _requireText: UnityEngine.UI.Text;
        // m_adapter: Torappu.Activity.Act3D0.Act3D0GachaBoxDetailView.Adapter;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
      }
      export interface Act3D0GachaBoxGroupView {
        // _title: UnityEngine.UI.Text;
        // _content: Torappu.UI.SimpleLayoutContent;
        // m_adapter: Torappu.Activity.Act3D0.Act3D0GachaBoxGroupView.Adapter;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
      }
      export interface Act3D0GachaBoxItem {
        // _boxImage: UnityEngine.UI.Image;
        // _lockedObj: UnityEngine.GameObject;
        // _outOfStack: UnityEngine.GameObject;
        // _animator: UnityEngine.Animator;
        // _shadow: UnityEngine.UI.Image;
        // m_cacheId: System.Int32;
        ANIM_PARAM: System.String;
        START_PARAM: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0_OnFocus: XLua.DelegateBridge;
      }
      export interface Act3D0GachaBoxItemView {
        // _remainCount: UnityEngine.UI.Text;
        // _itemCardContainer: UnityEngine.Transform;
        _itemScaleFactor: System.Single;
        // _canvasGroup: UnityEngine.CanvasGroup;
        // _outStack: UnityEngine.GameObject;
        // _replicateFlag: UnityEngine.GameObject;
        ANIMATION_ALPHA_SPEED: System.Single;
        ANIMATION_ANIM_SPEED: System.Single;
        // m_itemCard: Torappu.UI.UIItemCard;
        // m_cacheTween: DG.Tweening.Tween;
        // m_isInited: System.Boolean;
        // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0__OnItemCardClicked: XLua.DelegateBridge;
      }
      export interface Act3D0GachaBoxRightPartView {
        _boxItem: Torappu.Activity.Act3D0.Act3D0GachaBoxItem;
        // _container: UnityEngine.Transform;
        _slideItem: Torappu.Activity.Act3D0.Act3D0GachaBoxSliderItem;
        // _slideContainer: UnityEngine.Transform;
        _detailView: Torappu.Activity.Act3D0.Act3D0GachaBoxDetailView;
        // _onGachaTime: Torappu.UI.UIStringEvent;
        // _onGachaTenTimes: Torappu.UI.UIStringEvent;
        // _buttonImg: UnityEngine.UI.Image;
        // _buttonPrice: UnityEngine.UI.Text;
        // _buttonTencePrice: UnityEngine.UI.Text;
        // _buttonTenceTimes: UnityEngine.UI.Text;
        // _boxIndex: UnityEngine.UI.Text;
        // _leftBtn: UnityEngine.GameObject;
        // _rightBtn: UnityEngine.GameObject;
        // _oneTimeBtn: UnityEngine.GameObject;
        // _tenTimeBtn: UnityEngine.GameObject;
        // _oneTimeBan: UnityEngine.GameObject;
        // _tenTimeBan: UnityEngine.GameObject;
        // _oneTimeMin: UnityEngine.GameObject;
        // _tenTimeMin: UnityEngine.GameObject;
        // _remainPart: UnityEngine.GameObject;
        // _remainCount: UnityEngine.UI.Text;
        infinitePercent: System.Collections.Generic.Dictionary<System.String,Torappu.Act3D0Data.InfinitePoolPercent>;
        // m_focusIndex: System.Int32;
        // m_focusId: System.String;
        // m_gachaTimes: System.Int32;
        // m_boxItemList: System.Collections.Generic.List<Torappu.Activity.Act3D0.Act3D0GachaBoxItem>;
        // m_sliderItem: System.Collections.Generic.List<Torappu.Activity.Act3D0.Act3D0GachaBoxSliderItem>;
        // m_boxInfo: System.Collections.Generic.List<Torappu.Activity.Act3D0.Act3D0GachaBoxInfo>;
        // m_isInited: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_gachaTimes: XLua.DelegateBridge;
        // __Hotfix0_get_resHolder: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
        // __Hotfix0_OnClickTenTimes: XLua.DelegateBridge;
        // __Hotfix0_InitInfo: XLua.DelegateBridge;
        // __Hotfix0_OnFocus: XLua.DelegateBridge;
        // __Hotfix1_OnFocus: XLua.DelegateBridge;
        // __Hotfix0_Refresh: XLua.DelegateBridge;
        // __Hotfix1_Refresh: XLua.DelegateBridge;
        // __Hotfix0__OnFocus: XLua.DelegateBridge;
        // __Hotfix0_RenderInfo: XLua.DelegateBridge;
        // __Hotfix0_CheckTimes: XLua.DelegateBridge;
        // __Hotfix0_LeftOne: XLua.DelegateBridge;
        // __Hotfix0_RightOne: XLua.DelegateBridge;
      }
      export interface Act3D0GachaBoxSliderItem {
        order: System.Int32;
        // _gachaBoxImg: UnityEngine.UI.Image;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnFocus: XLua.DelegateBridge;
      }
      export interface Act3D0MapZoneGroupBinder {
        _zoneViews: System.Collections.Generic.List<Torappu.Activity.Act3D0.Act3D0MapZoneView>;
        // m_isInited: System.Boolean;
        // m_selectZoneId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_OnValueChanged: XLua.DelegateBridge;
        // __Hotfix0__OnZoneClicked: XLua.DelegateBridge;
      }
      export interface Act3D0MapZoneView {
        _zoneId: System.String;
        // _panelUnlocked: UnityEngine.GameObject;
        // _panelLocked: UnityEngine.GameObject;
        // _panelSelected: UnityEngine.GameObject;
        // _panelTrackPoint: UnityEngine.GameObject;
        // onZoneClicked: System.Action<System.String>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnZoneDescModelUpdated: XLua.DelegateBridge;
        // __Hotfix0_EventOnBtnClicked: XLua.DelegateBridge;
      }
      export interface MileStoneItemHolder {
        item: Torappu.Activity.Act3D0.Act3D0MileStoneObj;
      }
      export interface Act3D0MileStoneGridAdapter {
        // clickEvent: Torappu.UI.UIStringEvent;
        // _mileStoneItem: UnityEngine.GameObject;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_ViewConstructor: XLua.DelegateBridge;
        // __Hotfix0_UpdateView: XLua.DelegateBridge;
      }
      export interface Act3D0MileStoneHolder {
        // _title: UnityEngine.UI.Text;
        // _content: Torappu.UI.LoopVerticalScrollRect;
        _adapter: Torappu.Activity.Act3D0.Act3D0MileStoneGridAdapter;
        // _backImage: UnityEngine.UI.Image;
        // _clickEvent: Torappu.UI.UIStringEvent;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_RefreshInfo: XLua.DelegateBridge;
        // __Hotfix0_RenderInfo: XLua.DelegateBridge;
        // __Hotfix0__RefreshTargetState: XLua.DelegateBridge;
      }
      export interface Act3D0MileStoneObj {
        // _finishImg: UnityEngine.UI.Image;
        // _ableToGetImg: UnityEngine.UI.Image;
        // _ableToGetPart: UnityEngine.GameObject;
        // _finishPart: UnityEngine.GameObject;
        // _cannotGetPart: UnityEngine.GameObject;
        _scaleInfo: System.Single;
        // _itemViewContainer: UnityEngine.Transform;
        // _detailText: UnityEngine.UI.Text;
        // _countText: UnityEngine.UI.Text;
        // _countText_2: UnityEngine.UI.Text;
        // _countTextActive: UnityEngine.UI.Text;
        // _countTextNoActive: UnityEngine.UI.Text;
        // _itemName: UnityEngine.UI.Text;
        // _countSymbol: UnityEngine.UI.Image;
        // _backShiningImg: UnityEngine.UI.Image;
        // _maskB: UnityEngine.GameObject;
        // _maskW: UnityEngine.GameObject;
        // _canvasGroup: UnityEngine.CanvasGroup;
        // _replicateFlag1: UnityEngine.GameObject;
        // _replicateFlag2: UnityEngine.GameObject;
        // clickEvent: Torappu.UI.UIStringEvent;
        // m_isInited: System.Boolean;
        // m_itemCard: Torappu.UI.UIItemCard;
        // m_cacheId: System.String;
        // m_cacheTween: DG.Tweening.Tween;
        ANIMATION_ALPHA_SPEED: System.Single;
        ANIMATION_ANIM_SPEED: System.Single;
        // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__Inited: XLua.DelegateBridge;
        // __Hotfix0_RenderAgain: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
      }
      export interface Act3D0ReplicateItem {
        // _itemContainer1: UnityEngine.Transform;
        // _itemContainer2: UnityEngine.Transform;
        // _lastIgnoreObj: UnityEngine.GameObject;
        _scaleFactor: System.Single;
        // m_isInited: System.Boolean;
        // m_itemCard1: Torappu.UI.UIItemCard;
        // m_itemCard2: Torappu.UI.UIItemCard;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
      }
      export interface Act3D0ReplicateView {
        // _content: Torappu.UI.SimpleLayoutContent;
        // m_adatper: Torappu.Activity.Act3D0.Act3D0ReplicateView.Adapter;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
      }
      export interface Act3D0CampDetailView {
        // _floatPanel: Torappu.UI.UIBlurFloatPanel;
        _campImages: Torappu.Activity.Act3D0.Act3D0CampDetailView.CampImage[];
        // _textName: UnityEngine.UI.Text;
        // _textCampDesc: UnityEngine.UI.Text;
        // _textRewardDesc: UnityEngine.UI.Text;
        // m_campModel: Torappu.Activity.Act3D0.Act3D0CampViewModel;
        // onCampConfirmed: System.Action<System.String>;
        // onCampCancelled: System.Action;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Open: XLua.DelegateBridge;
        // __Hotfix0_CloseCoroutine: XLua.DelegateBridge;
        // __Hotfix0__Render: XLua.DelegateBridge;
        // __Hotfix0_EventOnConfirmClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnCancelClicked: XLua.DelegateBridge;
      }
      export interface Act3D0CampSelectResultView {
        // _colorTheme: Torappu.UI.UIColorGraphic;
        _campColors: Torappu.Activity.Act3D0.Act3D0CampSelectResultView.CampColor[];
        _campNameImgs: Torappu.Activity.Act3D0.Act3D0CampSelectResultView.CampGameObject[];
        // _imgCampLeft: UnityEngine.UI.Image;
        // _imgBox: UnityEngine.UI.Image;
        // _imgBoxShadow: UnityEngine.UI.Image;
        // _textCampName: UnityEngine.UI.Text;
        // _effectAnim: Torappu.UI.UIAnimationLocation;
        // m_isEffectStart: System.Boolean;
        // m_isEffectFinish: System.Boolean;
        // onResultConfirmed: System.Action;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Start: XLua.DelegateBridge;
        // __Hotfix0_StartEffectCoroutine: XLua.DelegateBridge;
        // __Hotfix0__RenderContent: XLua.DelegateBridge;
        // __Hotfix0__LoadCampRes: XLua.DelegateBridge;
        // __Hotfix0_EventOnConfirmClicked: XLua.DelegateBridge;
      }
      export interface Act3D0CampSelectView {
        CAMP_BGM_PREVIEW_SUFFIX: System.String;
        _detailView: Torappu.Activity.Act3D0.Act3D0CampDetailView;
        // _selectView: UnityEngine.GameObject;
        _resultView: Torappu.Activity.Act3D0.Act3D0CampSelectResultView;
        // m_selectViewTween: Torappu.UI.FadeSwitchTween;
        // m_campGroupModel: Torappu.Activity.Act3D0.Act3D0CampGroupViewModel;
        // onCampSelected: System.Action<System.String>;
        // onCampResultConfirmed: System.Action;
        // <>f__am$cache0: System.Action;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0_ShowSelectResult: XLua.DelegateBridge;
        // __Hotfix0__SelectResultEffectCoroutine: XLua.DelegateBridge;
        // __Hotfix0__TriggerCampBGMPreview: XLua.DelegateBridge;
        // __Hotfix0_EventOnCampButtonClicked: XLua.DelegateBridge;
      }
      export interface Act3D0ClueHolder {
        // _focusSprite: UnityEngine.UI.Image;
        // _focusObj: UnityEngine.GameObject;
        // _noObj: UnityEngine.GameObject;
        _slideObj: Torappu.Activity.Act3D0.Act3D0ClueSliderObj;
        // _container: UnityEngine.Transform;
        // _leftPart: UnityEngine.GameObject;
        // _rightPart: UnityEngine.GameObject;
        // _animator: UnityEngine.Animator;
        // _countText: UnityEngine.UI.Text;
        selectId: System.Int32;
        // m_cacheInfo: System.Collections.Generic.List<Torappu.Activity.Act3D0.Act3D0ClueInfo>;
        // m_slideObj: System.Collections.Generic.List<Torappu.Activity.Act3D0.Act3D0ClueSliderObj>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0_SetSelectId: XLua.DelegateBridge;
        // __Hotfix0_RefreshImg: XLua.DelegateBridge;
        // __Hotfix0_AddOne: XLua.DelegateBridge;
        // __Hotfix0_MinusOne: XLua.DelegateBridge;
      }
      export interface Act3D0ClueShowPart {
        // _remainCount: UnityEngine.UI.Text;
        // _haveRemainCount: UnityEngine.GameObject;
        // _haveAnimator: UnityEngine.Animator;
        // _currentText: UnityEngine.UI.Text;
        // _clueBackImg: UnityEngine.UI.Image;
        // m_remainCount: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitRender: XLua.DelegateBridge;
        // __Hotfix0_AddNewClue: XLua.DelegateBridge;
        // __Hotfix0_OpenClue: XLua.DelegateBridge;
        // __Hotfix0__RenderClue: XLua.DelegateBridge;
      }
      export interface Act3D0ClueSliderObj {
        // _selectedPart: UnityEngine.GameObject;
        // _availPart: UnityEngine.GameObject;
        // _unavailPart: UnityEngine.GameObject;
        // m_currentIndex: System.Int32;
        // m_cacheState: Torappu.Activity.Act3D0.Act3D0ClueInfo.State;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitData: XLua.DelegateBridge;
        // __Hotfix0_SetIndex: XLua.DelegateBridge;
      }
      export interface Act3D0ClueInfo {
        state: Torappu.Activity.Act3D0.Act3D0ClueInfo.State;
        ImgId: System.String;
        orderId: System.Int32;
        clueId: System.String;
      }
      export interface Act3D0ClueStateBean {
        clueList: System.Collections.Generic.List<Torappu.Activity.Act3D0.Act3D0ClueInfo>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitData: XLua.DelegateBridge;
      }
      export interface Act3D0GachaBoxInfo {
        gachaBoxId: System.String;
        tokenNumOnce: System.Int32;
        unlockState: Torappu.Activity.Act3D0.Act3D0GachaBoxInfo.UnlockState;
        gachaBoxType: Torappu.Act3D0Data.GachaBoxType;
        itemList: System.Collections.Generic.List<Torappu.Activity.Act3D0.Act3D0GachaBoxInfo.Act3D0GachaBoxItemInfo>;
        requireItem: Torappu.ItemBundle;
        unlockImg: System.String;
        totalCount: System.Int32;
        remainCount: System.Int32;
      }
      export interface Act3D0GachaBoxStateBean {
        percent: System.Collections.Generic.Dictionary<System.String,Torappu.Act3D0Data.InfinitePoolPercent>;
        gachaBoxInfo: System.Collections.Generic.List<Torappu.Activity.Act3D0.Act3D0GachaBoxInfo>;
        defaultBoxId: System.String;
        // m_actId: System.String;
        // m_faction: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_act3d0Data: XLua.DelegateBridge;
        // __Hotfix0_CheckRemainCount: XLua.DelegateBridge;
        // __Hotfix0_CheckBoxInfi: XLua.DelegateBridge;
        // __Hotfix0_InitInfo: XLua.DelegateBridge;
      }
      export interface Act3D0MileStoneViewModel {
        id: System.String;
        state: Torappu.Activity.Act3D0.Act3D0MileStoneViewModel.State;
        count: System.Int32;
        rewardItem: Torappu.ItemBundle;
        orderId: System.Int32;
      }
      export interface Act3D0MileStoneStateBean {
        viewModelList: System.Collections.Generic.List<Torappu.Activity.Act3D0.Act3D0MileStoneViewModel>;
        currentStone: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitInfo: XLua.DelegateBridge;
      }
      export interface Act3D0MileStoneTrackPoint {
        // m_finishedList: System.Int32;
      }
      export interface Act3D0ZoneDescModel {
        EMPTY: Torappu.Activity.Act3D0.Act3D0ZoneDescModel;
        zoneId: System.String;
        isUnlocked: System.Boolean;
        lockedText: System.String;
        hasNewStages: System.Boolean;
        // __Hotfix0_Create: XLua.DelegateBridge;
        // __Hotfix0__HasNewStages: XLua.DelegateBridge;
        // __Hotfix0__ParseTimeLockedInfo: XLua.DelegateBridge;
      }
      export interface Act3D0ZoneDescGroupViewModel {
        selectedZoneId: System.String;
        zoneDescModels: System.Collections.Generic.List<Torappu.Activity.Act3D0.Act3D0ZoneDescModel>;
      }
      export interface Act3D0ZoneDescGroupViewProperty {
      }
      export interface Act3D0CampGroupViewModel {
        activityId: System.String;
        camps: Torappu.ListDict<System.String,Torappu.Activity.Act3D0.Act3D0CampViewModel>;
      }
      export interface Act3D0CampViewModel {
        campId: System.String;
        campName: System.String;
        campDesc: System.String;
        rewardDesc: System.String;
      }
      export interface Act3D0FavorUpTrackPointModel {
        // m_hasNewUp: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_isShow: XLua.DelegateBridge;
        // __Hotfix0_UpdateState: XLua.DelegateBridge;
      }
      export namespace Act3D0StageController {
        export interface Bridge {
          // m_controller: Torappu.Activity.Act3D0.Act3D0StageController;
        }
      }
      export namespace Act3D0StageFloat {
      }
      export namespace UIGachaBoxDrawEffectFloatPage {
        export enum Style {
          WHITE = "WHITE",
          YELLOW = "YELLOW",
          RED = "RED",
          GREEN = "GREEN",
        }
        export interface Options {
          style: Torappu.Activity.Act3D0.UIGachaBoxDrawEffectFloatPage.Style;
          // onFinish: System.Action;
        }
      }
      export namespace Act3D0CampSelectState {
      }
      export namespace Act3D0GachaBoxState {
      }
      export namespace Act3D0MileStoneState {
      }
      export namespace Act3D0GachaBoxDetailView {
        export interface GachaBoxGroupInfo {
          name: System.String;
          orderId: System.Int32;
          itemList: System.Collections.Generic.List<Torappu.Activity.Act3D0.Act3D0GachaBoxInfo.Act3D0GachaBoxItemInfo>;
          percent: System.Int32;
        }
        export interface Adapter {
          infoList: System.Collections.Generic.List<Torappu.Activity.Act3D0.Act3D0GachaBoxDetailView.GachaBoxGroupInfo>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_count: XLua.DelegateBridge;
          // __Hotfix0_RenderView: XLua.DelegateBridge;
        }
      }
      export namespace Act3D0GachaBoxGroupView {
        export interface Adapter {
          itemList: System.Collections.Generic.List<Torappu.Activity.Act3D0.Act3D0GachaBoxInfo.Act3D0GachaBoxItemInfo>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_count: XLua.DelegateBridge;
          // __Hotfix0_RenderView: XLua.DelegateBridge;
        }
      }
      export namespace Act3D0GachaBoxItemView {
      }
      export namespace Act3D0MileStoneHolder {
      }
      export namespace Act3D0MileStoneObj {
      }
      export namespace Act3D0ReplicateView {
        export interface Adapter {
          data: Torappu.ReplicateTable;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_count: XLua.DelegateBridge;
          // __Hotfix0_RenderView: XLua.DelegateBridge;
        }
      }
      export namespace Act3D0CampDetailView {
        export interface CampImage {
          campId: System.String;
          // image: UnityEngine.UI.Image;
        }
      }
      export namespace Act3D0CampSelectResultView {
        export interface CampColor {
          campId: System.String;
          // color: UnityEngine.Color;
        }
        export interface CampGameObject {
          campId: System.String;
          // gameObject: UnityEngine.GameObject;
        }
      }
      export namespace Act3D0CampSelectView {
      }
      export namespace Act3D0ClueInfo {
        export enum State {
          GET = "GET",
          NOTGET = "NOTGET",
        }
      }
      export namespace Act3D0GachaBoxInfo {
        export enum UnlockState {
          OUT_OF_STACK = "OUT_OF_STACK",
          UNLOCKED = "UNLOCKED",
          LOCKED = "LOCKED",
        }
        export interface Act3D0GachaBoxItemInfo {
          goodId: System.String;
          boxId: System.String;
          remainCount: System.Int32;
          itemInfo: Torappu.ItemBundle;
          perCount: System.Int32;
          totalCount: System.Int32;
          type: System.String;
          orderId: System.Int32;
        }
      }
      export namespace Act3D0MileStoneViewModel {
        export enum State {
          FINISH = "FINISH",
          AVAIL = "AVAIL",
          NOTAVAIL = "NOTAVAIL",
        }
      }
    }
    export namespace Act3D5 {
      export interface Act3D5Entry {
        // s_sorted: System.Boolean;
        // _actDescLabel: UnityEngine.UI.Text;
        // _pointTitle: UnityEngine.UI.Text;
        // _pointCnt: UnityEngine.UI.Text;
        // _timeDesc: UnityEngine.UI.Text;
        // _pointIcon: UnityEngine.UI.Image;
        // _helpBtnDesc: UnityEngine.UI.Text;
        // _prg: UnityEngine.UI.Slider;
        // _itemContainer: UnityEngine.Transform;
        // _scrollView: UnityEngine.UI.ScrollRect;
        _itemPrefab: Torappu.Activity.Act3D5.Activity3D5Item;
        _helpViewPrefab: Torappu.Activity.Act3D5.Activity3D5HelpView;
        // m_itemList: System.Collections.Generic.List<Torappu.Activity.Act3D5.Activity3D5Item>;
        // m_adjustPrgWidth: System.Boolean;
        // m_helpView: Torappu.Activity.Act3D5.Activity3D5HelpView;
        // m_activityId: System.String;
        // <>f__am$cache0: System.Comparison<Torappu.ActivityCollectionData.CollectionInfo>;
        // <>f__am$cache1: System.Func<Torappu.Network.ResponseError,System.Boolean>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0__SynPrg: XLua.DelegateBridge;
        // __Hotfix0__CheckMissionStatus: XLua.DelegateBridge;
        // __Hotfix0_OnOpenHelpPage: XLua.DelegateBridge;
        // __Hotfix0__HandleHelpViewClose: XLua.DelegateBridge;
        // __Hotfix0_OnScrollTo: XLua.DelegateBridge;
        // __Hotfix0__CalculateItemScrollPrg: XLua.DelegateBridge;
      }
      export interface Act3D5Mgr {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_FindBasicInfo: XLua.DelegateBridge;
        // __Hotfix0_FindPointRewardItem: XLua.DelegateBridge;
        // __Hotfix0_GetMissionGroup: XLua.DelegateBridge;
        // __Hotfix0_FindMission: XLua.DelegateBridge;
        // __Hotfix0_CheckRewardCanGet: XLua.DelegateBridge;
      }
      export interface Activity3D5HelpDailyItem {
        // _complete: UnityEngine.Sprite;
        // _requirement: UnityEngine.Sprite;
        // _flagIcon: UnityEngine.UI.Image;
        // _descLabel: UnityEngine.UI.Text;
        // _itemDescLabel: UnityEngine.UI.Text;
        // _prgLabel: UnityEngine.UI.Text;
        // _itemIconRoot: UnityEngine.Transform;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Refresh: XLua.DelegateBridge;
      }
      export interface Activity3D5HelpLimitItem {
        // _complete: UnityEngine.Sprite;
        // _requirement: UnityEngine.Sprite;
        // _flagIcon: UnityEngine.UI.Image;
        // _itemBG: UnityEngine.UI.Image;
        // _desc: UnityEngine.UI.Text;
        // _prgBG: UnityEngine.UI.Image;
        // _prgCntLabel: UnityEngine.UI.Text;
        // _prg: UnityEngine.UI.Slider;
        // _statusLabel: UnityEngine.UI.Text;
        // _rewardCntLabel: UnityEngine.UI.Text;
        // _rewardIconRoot: UnityEngine.Transform;
        // _gotMark: UnityEngine.GameObject;
        // m_finish: System.Boolean;
        // m_sortId: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Refresh: XLua.DelegateBridge;
        // __Hotfix0_get_finish: XLua.DelegateBridge;
        // __Hotfix0_get_sortId: XLua.DelegateBridge;
      }
      export interface Activity3D5HelpView {
        // _dailyTaskTimeLabel: UnityEngine.UI.Text;
        // _limitTaskTimeLabel: UnityEngine.UI.Text;
        _dailyItem: Torappu.Activity.Act3D5.Activity3D5HelpDailyItem;
        // _limitContainer: UnityEngine.Transform;
        _limitItemPrefab: Torappu.Activity.Act3D5.Activity3D5HelpLimitItem;
        // m_limitItems: System.Collections.Generic.List<Torappu.Activity.Act3D5.Activity3D5HelpLimitItem>;
        // m_activityId: System.String;
        // m_close: System.Action;
        // <>f__am$cache0: System.Comparison<Torappu.Activity.Act3D5.Activity3D5HelpLimitItem>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Refresh: XLua.DelegateBridge;
        // __Hotfix0__SynTime: XLua.DelegateBridge;
        // __Hotfix0_OnClose: XLua.DelegateBridge;
      }
      export interface Activity3D5Item {
        // _normalBG: UnityEngine.Sprite;
        // _normalCompleteBG: UnityEngine.Sprite;
        // _bigCompleteBG: UnityEngine.Sprite;
        // _bg: UnityEngine.UI.Image;
        // _bigMark: UnityEngine.GameObject;
        // _bright: Torappu.UI.UITweenFade;
        // _rewardCnt: UnityEngine.UI.Text;
        // _rewardName: UnityEngine.UI.Text;
        // _rewardIconRoot: UnityEngine.Transform;
        // _getMarkBtn: UnityEngine.UI.Button;
        // _getBtn: UnityEngine.UI.Button;
        // _needDesc: UnityEngine.UI.Text;
        // _needCount: UnityEngine.UI.Text;
        // _colorAlter: Torappu.UI.UIChildrenColorGraphic;
        // m_activityId: System.String;
        // m_data: Torappu.ActivityCollectionData.CollectionInfo;
        // m_hasGot: System.Boolean;
        // m_itemCell: Torappu.UI.UIItemCard;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Refresh: XLua.DelegateBridge;
        // __Hotfix0_get_hasGot: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
        // __Hotfix0_Flash: XLua.DelegateBridge;
        // __Hotfix0_OnGetReward: XLua.DelegateBridge;
        // __Hotfix0__ReceiveItemsCoroutine: XLua.DelegateBridge;
      }
      export namespace Act3D5Entry {
      }
      export namespace Activity3D5HelpDailyItem {
      }
      export namespace Activity3D5HelpLimitItem {
      }
      export namespace Activity3D5Item {
      }
    }
    export namespace Act4D0 {
      export interface Act4D0ResUtil {
        HEAD_ICON: System.String;
        LARGE_IMAGE: System.String;
        HUB_PATH_FORMAT: System.String;
        MILESTONE_HEIGHT: System.Single;
        MILESTONE_DELTA_HEIGHT: System.Single;
        MILESTONE_OFFSET: System.Single;
      }
      export interface Act4D0InitMeta {
        jumpToStoryState: System.Boolean;
      }
      export interface Act4D0StageController {
        // m_initMetaObj: Torappu.Activity.Act4D0.Act4D0InitMeta;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_staticActivityId: XLua.DelegateBridge;
        // __Hotfix0_get_initMetaObj: XLua.DelegateBridge;
        // __Hotfix0_CreateBridge: XLua.DelegateBridge;
        // __Hotfix0_CreateInitMeta4StoryState: XLua.DelegateBridge;
        // __Hotfix0_GetAct4D0PlayerInfo: XLua.DelegateBridge;
        // __Hotfix0_GetAct4D0PlayerInfoFromPlayerData: XLua.DelegateBridge;
      }
      export interface Act4D0StageEntry {
        _activityTrackPoint: Torappu.Activity.UIActTrackPoint;
        _mileStoneTrackPoint: Torappu.Activity.UIActTrackPoint;
        _stageContainer: Torappu.Activity.Act4D0.Act4D0EntryStageObjContainer;
        // _stoneText: UnityEngine.UI.Text;
        // _topMenu: UnityEngine.GameObject;
        // _entryTopMenu: UnityEngine.Transform;
        // _remainText: UnityEngine.UI.Text;
        // _detailText: UnityEngine.UI.Text;
        // _bannedPart: UnityEngine.GameObject;
        _hourOffset: System.Int32;
        // m_activityRedPoint: Torappu.UI.TrackPointViewProperty;
        // m_mileStoneRedPoint: Torappu.UI.TrackPointViewProperty;
        // m_isInited: System.Boolean;
        // m_topMenu: Torappu.UI.CommonTopMenu;
        // <>f__am$cache0: System.Action;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetTopMenu: XLua.DelegateBridge;
        // __Hotfix0_InitData: XLua.DelegateBridge;
      }
      export interface Act4D0StageFloat {
        // _barContainer: UnityEngine.Transform;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_LoadCoroutine: XLua.DelegateBridge;
        // __Hotfix0__TryResumeStoryState: XLua.DelegateBridge;
      }
      export interface Act4D0StageMapDecro {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act4D0Service {
        GET_MILESTONE_STORY_REWARD: System.String;
        GET_MILESTONE_ITEM_REWARD: System.String;
        FINISH_STORY: System.String;
        GET_REWARD: System.String;
        UNLOCK_STORY: System.String;
      }
      export interface Act4D0MileStoneRequest {
        activityId: System.String;
        rewardId: System.String;
      }
      export interface Act4D0MileStoneItemResponse {
        reward: Torappu.ActivityItemModel;
      }
      export interface Act4D0MileStoneStoryResponse {
        storyId: System.String;
      }
      export interface Act4D0FinishStoryRequest {
        activityId: System.String;
        storyId: System.String;
      }
      export interface Act4D0FinishStoryResponse {
      }
      export interface Act4D0GetRewardRequest {
        activityId: System.String;
        rewardId: System.String;
      }
      export interface Act4D0GetRewardResponse {
      }
      export interface Act4D0UnlockStoryRequest {
        activityId: System.String;
        rewardId: System.String;
      }
      export interface Act4D0UnlockStoryResponse {
        storyId: System.String;
      }
      export interface Act4D0EmptyState {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnResume: XLua.DelegateBridge;
        // __Hotfix0_ToStoryState: XLua.DelegateBridge;
        // __Hotfix0_ToMileStoneState: XLua.DelegateBridge;
      }
      export interface Act4D0GetStoryState {
        _statebean: Torappu.Activity.Act4D0.Act4D0GetStoryStateBean;
        // _charImage: UnityEngine.UI.Image;
        // _storyName: UnityEngine.UI.Text;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
      }
      export interface Act4D0MileStoneState {
        _stateBean: Torappu.Activity.Act4D0.Act4D0MileStoneStateBean;
        _view: Torappu.Activity.Act4D0.Act4D0MileStoneHolder;
        // _topMenu: UnityEngine.GameObject;
        // m_cacheTransId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_RegisterToDataListener: XLua.DelegateBridge;
        // __Hotfix0_SendItemRequest: XLua.DelegateBridge;
        // __Hotfix0__SendItemRequest: XLua.DelegateBridge;
        // __Hotfix0_SendStoryRequest: XLua.DelegateBridge;
        // __Hotfix0__SendStoryRequest: XLua.DelegateBridge;
        // __Hotfix0_ReceiveItemsCoroutine: XLua.DelegateBridge;
      }
      export interface Act4D0StoryDetailState {
        _stateBean: Torappu.Activity.Act4D0.Act4D0StoryDetailStateBean;
        // _stageTitleText: UnityEngine.UI.Text;
        // _stageDescText: UnityEngine.UI.Text;
        // _stageSort: UnityEngine.UI.Text;
        _hideTopBar: System.Boolean;
        // _stageImage: UnityEngine.UI.Image;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_OnStartButtonPressed: XLua.DelegateBridge;
        // __Hotfix0_ShowStory: XLua.DelegateBridge;
        // __Hotfix0__TrySendFinishCurrentStoryAndPlay: XLua.DelegateBridge;
        // __Hotfix0__StartStory: XLua.DelegateBridge;
        // __Hotfix0_OnBackgroundPressed: XLua.DelegateBridge;
      }
      export interface Act4D0StoryState {
        _stateBean: Torappu.Activity.Act4D0.Act4D0StoryStateBean;
        _view: Torappu.Activity.Act4D0.Act4D0StoryView;
        // m_currentSelect: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0__NeedScroll: XLua.DelegateBridge;
        // __Hotfix0__OnItemClickCallBack: XLua.DelegateBridge;
        // __Hotfix0_RegisterToDataListener: XLua.DelegateBridge;
        // __Hotfix0__OnJumpToDetailState: XLua.DelegateBridge;
      }
      export interface Act4D0StoryView {
        _itemList: System.Collections.Generic.List<Torappu.Activity.Act4D0.Activity4D0StoryItem>;
        // _rect: UnityEngine.UI.ScrollRect;
        // m_callback: System.Action<System.Int32>;
        // m_activityId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_RenderInfo: XLua.DelegateBridge;
        // __Hotfix0__RefreshTargetState: XLua.DelegateBridge;
        // __Hotfix0__OnItemClickCallBack: XLua.DelegateBridge;
      }
      export interface Activity4D0StoryItem {
        // _title: UnityEngine.UI.Text;
        // _titleB: UnityEngine.UI.Text;
        // _normalRoot: UnityEngine.GameObject;
        // _newHintRoot: UnityEngine.GameObject;
        // _lockRoot: UnityEngine.GameObject;
        // _unlockCondition: UnityEngine.UI.Text;
        // _readStoryButton: UnityEngine.UI.Button;
        // _lockDisableRoot: UnityEngine.GameObject;
        // m_data: Torappu.Activity.Act4D0.Act4D0StoryItemViewModel;
        // m_callback: System.Action<System.Int32>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnItemClick: XLua.DelegateBridge;
        // __Hotfix0_Refresh: XLua.DelegateBridge;
      }
      export interface Act4D0EntryStageObj {
        // _backImage: UnityEngine.UI.Image;
        // _gotoText: UnityEngine.UI.Text;
        // _bannedImage: UnityEngine.GameObject;
        // _bannedText: UnityEngine.UI.Text;
        // m_cacheInfo: Torappu.Act4D0Data.StageJumpInfo;
        // m_isUnlocked: System.Boolean;
      }
      export interface Act4D0EntryStageObjContainer {
        _stageObj: Torappu.Activity.Act4D0.Act4D0EntryStageObj;
        _stageObjects: Torappu.Activity.Act4D0.Act4D0EntryStageObj[];
        // m_isInited: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitData: XLua.DelegateBridge;
      }
      export interface MileStoneItemHolder {
        item: Torappu.Activity.Act4D0.Act4D0MileStoneItemObj;
      }
      export interface Act4D0MileStoneGridAdapter {
        // _storyEvent: Torappu.UI.UIStringEvent;
        // _itemEvent: Torappu.UI.UIStringEvent;
        // _mileStoneItem: UnityEngine.GameObject;
        focusCharId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_ViewConstructor: XLua.DelegateBridge;
        // __Hotfix0_UpdateView: XLua.DelegateBridge;
      }
      export interface Act4D0MileStoneItemObj {
        // _finishImg: UnityEngine.UI.Image;
        // _ableToGetImg: UnityEngine.UI.Image;
        // _ableToGetPart: UnityEngine.GameObject;
        // _finishPart: UnityEngine.GameObject;
        // _cannotGetPart: UnityEngine.GameObject;
        // _finishBackgroundPart: UnityEngine.GameObject;
        _scaleInfo: System.Single;
        // _itemViewContainer: UnityEngine.Transform;
        // _charGetPart: UnityEngine.GameObject;
        // _itemGetPart: UnityEngine.GameObject;
        // _detailText: UnityEngine.UI.Text;
        // _detailText_2: UnityEngine.UI.Text;
        // _countText: UnityEngine.UI.Text;
        // _countText_2: UnityEngine.UI.Text;
        // _countTextActive: UnityEngine.UI.Text;
        // _countTextNoActive: UnityEngine.UI.Text;
        // _itemName: UnityEngine.UI.Text;
        // _storyImg: UnityEngine.UI.Image;
        // _countSymbol: UnityEngine.UI.Image;
        // _charHead: UnityEngine.UI.Image;
        // _storyObj: UnityEngine.GameObject;
        // _itemObj: UnityEngine.GameObject;
        // _ableToGetObj: UnityEngine.GameObject;
        // _ableToGetButton: UnityEngine.UI.Button;
        // _ableToGetButtonChar: UnityEngine.UI.Button;
        // _getText: UnityEngine.UI.Text;
        // _focusLight: UnityEngine.GameObject;
        // _storyTextColor: UnityEngine.Color;
        // _itemTextColor: UnityEngine.Color;
        // _notFinishTextColor: UnityEngine.Color;
        // _notFinishedCountColor: UnityEngine.Color;
        // clickEvent: Torappu.UI.UIStringEvent;
        // m_isInited: System.Boolean;
        // m_itemCard: Torappu.UI.UIItemCard;
        // m_cacheId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__Inited: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
        // __Hotfix0_OnFocus: XLua.DelegateBridge;
        // __Hotfix0_RenderStoryPart: XLua.DelegateBridge;
        // __Hotfix0_RenderItemPart: XLua.DelegateBridge;
        // __Hotfix0_InitData: XLua.DelegateBridge;
      }
      export interface Act4D0ZoneMapPlugin {
        // _textPoint: UnityEngine.UI.Text;
        // _viewRoot: UnityEngine.GameObject;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_UpdateStatus: XLua.DelegateBridge;
        // __Hotfix0__CheckIfToShowOnZone: XLua.DelegateBridge;
      }
      export interface Act4D0GetStoryStateBean {
        storyInfo: Torappu.Act4D0Data.StoryInfo;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act4D0MileStoneAvailTrackPointModel {
        // m_hasNew: System.Boolean;
      }
      export interface Act4D0MileStoneHolder {
        // _title: UnityEngine.UI.Text;
        // _content: Torappu.UI.LoopVerticalScrollRect;
        _adapter: Torappu.Activity.Act4D0.Act4D0MileStoneGridAdapter;
        // _backImage: UnityEngine.UI.Image;
        // _costText: UnityEngine.UI.Text;
        // _remainTime: UnityEngine.UI.Text;
        _skinReward: System.Boolean;
        // m_targetIndex: System.Int32;
        // m_targetId: System.String;
        // m_max: System.Int32;
      }
      export interface Act4D0MileStoneStateBean {
        viewModelList: System.Collections.Generic.List<Torappu.Activity.Act4D0.Act4D0MileStoneViewModel>;
        currentStone: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitInfo: XLua.DelegateBridge;
      }
      export interface Act4D0MileStoneViewModel {
        id: System.String;
        state: Torappu.Activity.Act4D0.Act4D0MileStoneViewModel.State;
        type: Torappu.Activity.Act4D0.Act4D0MileStoneViewModel.Type;
        count: System.Int32;
        rewardItem: Torappu.ItemBundle;
        orderId: System.Int32;
        storyKey: System.String;
      }
      export interface Act4D0NewStoryTrackPointModel {
        // m_hasNew: System.Boolean;
      }
      export interface Act4D0StoryDetailStateBean {
        stageTitle: System.String;
        stageDesc: System.String;
        storyKey: System.String;
        storyId: System.String;
        storySort: System.String;
        isNewStory: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_SetData: XLua.DelegateBridge;
      }
      export interface Act4D0StoryItemViewModel {
        index: System.Int32;
        storyKey: System.String;
        storyId: System.String;
        storySort: System.String;
        storyName: System.String;
        lockDesc: System.String;
        storyDesc: System.String;
        isNew: System.Boolean;
        isLock: System.Boolean;
      }
      export enum StoryItemState {
        LOCK = "LOCK",
        NEW = "NEW",
        READ = "READ",
      }
      export interface Act4D0StoryStateBean {
        viewModelList: System.Collections.Generic.List<Torappu.Activity.Act4D0.Act4D0StoryItemViewModel>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitInfo: XLua.DelegateBridge;
      }
      export namespace Act4D0StageController {
        export interface Bridge {
          // m_controller: Torappu.Activity.Act4D0.Act4D0StageController;
        }
      }
      export namespace Act4D0StageFloat {
      }
      export namespace Act4D0MileStoneState {
      }
      export namespace Act4D0StoryView {
      }
      export namespace Act4D0MileStoneHolder {
      }
      export namespace Act4D0MileStoneViewModel {
        export enum State {
          FINISH = "FINISH",
          AVAIL = "AVAIL",
          NOTAVAIL = "NOTAVAIL",
        }
        export enum Type {
          STORY = "STORY",
          ITEM = "ITEM",
        }
      }
    }
    export namespace Act5D1 {
      export interface Act5D1ResourceBar {
        // _pointPart: UnityEngine.GameObject;
        // _coinPart: UnityEngine.GameObject;
        // _pointText: UnityEngine.UI.Text;
        // _coinText: UnityEngine.UI.Text;
      }
      export interface Act5D1DataHolder {
        // m_actionWhenHaveData: System.Action;
        // m_wrappedData: Torappu.Activity.ActivityDataFromServer<Torappu.Act5D1Data>;
        // m_dataRequest: Torappu.UI.UISender.ResultHandler<Torappu.Activity.Act5D1.Act5D1GetDetailResponse>;
        // m_isCrossDay: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_actDataWrapper: XLua.DelegateBridge;
        // __Hotfix0_get_actData: XLua.DelegateBridge;
        // __Hotfix0_RefreshActData: XLua.DelegateBridge;
        // __Hotfix0__TrySendDataRequest: XLua.DelegateBridge;
      }
      export interface Act5D1ResUtil {
        CHARACTER_BATTLE_RESULT_ASSIST: System.String;
        CHARACTER_BATTLE_RESULT_NONE: System.String;
        CHARACTER_BATTLE_RESULT_BG: System.String;
        HUB_PATH: System.String;
        ENTRY_IMG_PATH: System.String;
        STAGE_GROUP_ICON_PATH: System.String;
        MAP_PREVIEW: System.String;
        ACT5D1_ID: System.String;
      }
      export interface Act5D1RuneUtil {
        RUNE_HUB_PATH: System.String;
        RUNE_BACK_HUB_PATH: System.String;
        AVAILMASK: System.Int32;
        UNLOCKMASK: System.Int32;
        SELECT_PARAM: System.Int32;
        NOT_SELECT_PARAM: System.Int32;
      }
      export interface Act5D1InitMeta {
        stageId: System.String;
      }
      export interface Act5D1StageController {
        // m_initMetaObj: Torappu.Activity.Act5D1.Act5D1InitMeta;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_staticActivityId: XLua.DelegateBridge;
        // __Hotfix0_get_initMetaObj: XLua.DelegateBridge;
        // __Hotfix0_OnStageTimeout: XLua.DelegateBridge;
        // __Hotfix0_OnRewardTimeout: XLua.DelegateBridge;
        // __Hotfix0_CreateBridge: XLua.DelegateBridge;
      }
      export interface Act5D1StageFloat {
        // _barContainer: UnityEngine.Transform;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_LoadCoroutine: XLua.DelegateBridge;
      }
      export interface Act5D1UIService {
        GET_DETAIL: System.String;
        BUY_RUNE: System.String;
        GET_GOODS_LIST: System.String;
        BUY_GOODS: System.String;
      }
      export interface Act5D1GetDetailRequest {
        activityId: System.String;
        keys: System.Collections.Generic.List<System.String>;
      }
      export interface Act5D1GetDetailResponse {
        actData: Torappu.Act5D1Data;
      }
      export interface Act5D1BuyRuneRequest {
        stageId: System.String;
        runeId: System.String;
        activityId: System.String;
      }
      export interface Act5D1BuyRuneResponse {
      }
      export interface Act5D1GetGoodsListRequest {
        activityId: System.String;
      }
      export interface Act5D1ShopGood {
        goodId: System.String;
        displayName: System.String;
        slotId: System.Int32;
        number: System.Int32;
        goodType: System.String;
        progressGoodId: System.String;
        item: Torappu.ItemBundle;
        price: System.Int32;
        availCount: System.Int32;
        rarity: System.String;
      }
      export interface Act5D1ProgressGoodItem {
        order: System.Int32;
        price: System.Int32;
        displayName: System.String;
        item: Torappu.ItemBundle;
      }
      export interface Act5D1GetGoodsListResponse {
        goodList: Torappu.Activity.Act5D1.Act5D1ShopGood[];
        progressGoodList: System.Collections.Generic.Dictionary<System.String,Torappu.Activity.Act5D1.Act5D1ProgressGoodItem[]>;
      }
      export interface Act5D1BuyGoodsRequest {
        activityId: System.String;
        goodId: System.String;
        count: System.Int32;
      }
      export interface Act5D1BuyGoodsResponse {
        item: Torappu.Activity.RewardItemModel;
      }
      export interface Activity5D1ResHolder {
        // _homeSprite: UnityEngine.Sprite;
        // _zoneTabSprite: UnityEngine.Sprite;
        _zoneHomeRes: Torappu.Activity.ActivityResHolder.ZoneHomeRes;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_topbarSprite: XLua.DelegateBridge;
        // __Hotfix0_get_homeSprite: XLua.DelegateBridge;
        // __Hotfix0_get_zoneHomeRes: XLua.DelegateBridge;
      }
      export interface Act5D1BattleFinishView {
        _holder: Torappu.Activity.Act5D1.RuneBattleFinishHolder;
        _effView: Torappu.Activity.Act5D1.RuneBattleFinishEffView;
        _stateBean: Torappu.Activity.Act5D1.RuneBattleFinishStateBean;
        CLOSE_VIEW_DELAY: System.Single;
        // m_isLoadingAnimEnd: System.Boolean;
        // m_animEndTime: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
        // __Hotfix0__PlayAnim: XLua.DelegateBridge;
        // __Hotfix0_EventOnPageClicked: XLua.DelegateBridge;
      }
      export interface Act5D1MissionAvailTrackPointModel {
        isFinish: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_isShow: XLua.DelegateBridge;
        // __Hotfix0_UpdateState: XLua.DelegateBridge;
      }
      export interface Act5D1StageEntry {
        _periodObj: Torappu.Activity.Act5D1.Act5D1StageEntryButtonObj;
        _perpetualObj: Torappu.Activity.Act5D1.Act5D1StageEntryButtonObj;
        _missionTrackPoint: Torappu.Activity.UIActTrackPoint;
        // _coinCount: UnityEngine.UI.Text;
        // _coinName: UnityEngine.UI.Text;
        // _periodTimeOutButton: UnityEngine.GameObject;
        // _perpetualOutButton: UnityEngine.GameObject;
        // _missionBtn: UnityEngine.UI.Button;
        // _shopBtn: UnityEngine.UI.Button;
        // m_missionTrackPoint: Torappu.UI.TrackPointViewProperty;
        // m_isInited: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__InitTrack: XLua.DelegateBridge;
        // __Hotfix0_OnBannedEveryButton: XLua.DelegateBridge;
        // __Hotfix0_OnBannedStageButton: XLua.DelegateBridge;
        // __Hotfix0__RenderInfoWithData: XLua.DelegateBridge;
        // __Hotfix0_InitData: XLua.DelegateBridge;
      }
      export interface Act5D1StageEntryButtonObj {
        // _backImage: UnityEngine.UI.Image;
        // _icon: UnityEngine.UI.Image;
        // _stageName: UnityEngine.UI.Text;
        // _groupName: UnityEngine.UI.Text;
        // _remainTime: UnityEngine.GameObject;
        // _remainText: UnityEngine.UI.Text;
        // _onClick: Torappu.UI.UIStringEvent;
        // m_cacheStageId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_RenderStage: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
      }
      export interface BattleFinishCard {
        // _bg: UnityEngine.UI.Image;
        // _imageChrIcon: UnityEngine.UI.Image;
        // _panelNoSkill: UnityEngine.GameObject;
        // _iconSkill: UnityEngine.UI.Image;
        // _panelPotential: UnityEngine.GameObject;
        // _iconPotential: UnityEngine.UI.Image;
        // _iconEvolve: UnityEngine.UI.Image;
        // _textLevel: UnityEngine.UI.Text;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_UpdateViewData: XLua.DelegateBridge;
      }
      export interface BattleFinishCardPlaceHolder {
        // characterBg: UnityEngine.UI.Image;
        // _cardTrans: UnityEngine.Transform;
        // m_card: Torappu.Activity.Act5D1.BattleFinishCard;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
      }
      export interface BattleFinishRuneItemHolder {
        item: Torappu.Activity.Act5D1.BattleFinishRuneItem;
      }
      export interface BattleFinishRuneGridAdapter {
        // _itemEvent: Torappu.UI.UIStringEvent;
        // _item: UnityEngine.GameObject;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_ViewConstructor: XLua.DelegateBridge;
        // __Hotfix0_UpdateView: XLua.DelegateBridge;
      }
      export interface BattleFinishRuneItem {
        // _imageRune: UnityEngine.UI.Image;
        // _imageYellow: UnityEngine.GameObject;
        // _imageBlue: UnityEngine.GameObject;
        // _textBuffCount: UnityEngine.UI.Text;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
      }
      export interface RuneBattleFinishEffView {
        // _backImage: Torappu.UI.UIBlurFloatPanel;
        // _spriteLogo: UnityEngine.UI.Image;
        // _stageName: UnityEngine.UI.Text;
        // _stageDesc: UnityEngine.UI.Text;
        // _runeValue: UnityEngine.UI.Text;
        // _psItem: UnityEngine.ParticleSystem;
        // m_effectEndFlag: System.Boolean;
        // m_isClosed: System.Boolean;
        PASTTIME: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_EffectEndFlag: XLua.DelegateBridge;
        // __Hotfix0_set_EffectEndFlag: XLua.DelegateBridge;
        // __Hotfix0_get_IsClosed: XLua.DelegateBridge;
        // __Hotfix0_set_IsClosed: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_PlayEffect: XLua.DelegateBridge;
        // __Hotfix0_Hide: XLua.DelegateBridge;
      }
      export interface RuneBattleFinishHolder {
        // _battleStageBg: UnityEngine.UI.Image;
        // _battleStageLogo: UnityEngine.UI.Image;
        // _battleStageTitle: UnityEngine.UI.Text;
        // _battleStageDesc: UnityEngine.UI.Text;
        // _runeValue: UnityEngine.UI.Text;
        // _healthValue: UnityEngine.UI.Text;
        _runeAdapter: Torappu.Activity.Act5D1.BattleFinishRuneGridAdapter;
        _cellTransList: System.Collections.Generic.List<Torappu.Activity.Act5D1.BattleFinishCardPlaceHolder>;
        _cellFriendTrans: Torappu.Activity.Act5D1.BattleFinishCardPlaceHolder;
        _cellObj: Torappu.Activity.Act5D1.BattleFinishCard;
        // _illustTrans: UnityEngine.Transform;
        // _anim: UnityEngine.Animator;
        // m_illust: Torappu.UI.UICharacterIllust;
        MAXFRAME: System.Int32;
        START_ANIM_KEY: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0_PlayAnim: XLua.DelegateBridge;
        // __Hotfix0_RenderIllust: XLua.DelegateBridge;
        // __Hotfix0__UpdateIllust: XLua.DelegateBridge;
        // __Hotfix0__PlayCharThreeStarVoice: XLua.DelegateBridge;
      }
      export interface RuneBattleFinishStateBean {
        // squadList: Torappu.UI.Squad.SquadItemStruct[];
        // assistSquad: Torappu.UI.Squad.SquadItemStruct;
        runeList: System.Collections.Generic.List<Torappu.RuneTable.PackedRuneData>;
        battleStage: Torappu.Battle.BattleStageInfo;
        randomIllust: Torappu.CharUISkinStruct;
        leftHp: System.Int32;
        isNewRecord: System.Boolean;
        runeValue: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitInfo: XLua.DelegateBridge;
      }
      export interface Act5D1RuneShowObj {
        // _runeName: UnityEngine.UI.Text;
        // _runeIcon: UnityEngine.UI.Image;
        // _runePoint: UnityEngine.UI.Text;
        // _runeDetail: UnityEngine.UI.Text;
        // _runeDescription: UnityEngine.UI.Text;
        // _runeLockedInfo: UnityEngine.UI.Text;
        // _runeLocked: UnityEngine.GameObject;
        // _pointPart: UnityEngine.GameObject;
        // _newHandPoint: UnityEngine.GameObject;
        // _runeUnlockCannotBuy: UnityEngine.GameObject;
        // _backImage: UnityEngine.UI.Image;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_ApplyData: XLua.DelegateBridge;
      }
      export interface Act5D1RuneShowSelectObj {
        // _runeName: UnityEngine.UI.Text;
        // _runeIcon: UnityEngine.UI.Image;
        // _runePoint: UnityEngine.UI.Text;
        // _runeDetail: UnityEngine.UI.Text;
        // _runeDescription: UnityEngine.UI.Text;
        // _runeLockedInfo: UnityEngine.UI.Text;
        // _runeLocked: UnityEngine.GameObject;
        // _pointPart: UnityEngine.GameObject;
        // _newHandPoint: UnityEngine.GameObject;
        // _isSelectedPart: UnityEngine.GameObject;
        // _isBanned: UnityEngine.GameObject;
        // _isNotAvailable: UnityEngine.GameObject;
        // _isAbleToUnlock: UnityEngine.GameObject;
        // _clickBtn: UnityEngine.UI.Button;
        // clickEvent: Torappu.UI.UIStringEvent;
        // _backImage: UnityEngine.UI.Image;
        // m_cacheRuneId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Click: XLua.DelegateBridge;
        // __Hotfix0_ApplyData: XLua.DelegateBridge;
      }
      export interface Act5D1RuneUnlockNotify {
        // _sprite: UnityEngine.UI.Image;
        // _unlockText: UnityEngine.UI.Text;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
      }
      export interface Act5D1ShowAdapter {
        runeShowList: System.Collections.Generic.List<Torappu.Activity.Act5D1.RuneShowInfo>;
        canUnlockFlag: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_count: XLua.DelegateBridge;
        // __Hotfix0_RenderView: XLua.DelegateBridge;
      }
      export interface Act5D1RuneObj {
        FADE_DUR: System.Single;
        // _point: UnityEngine.UI.Text;
        // _hasPoint: UnityEngine.GameObject;
        // _noPoint: UnityEngine.GameObject;
        // _runeImg: UnityEngine.UI.Image;
        // _lockedObj: UnityEngine.GameObject;
        // _bannedObj: UnityEngine.GameObject;
        // _selectedObj: UnityEngine.GameObject;
        // _backImg: UnityEngine.GameObject;
        // _alphaHandler: UnityEngine.CanvasGroup;
        // onClickEvent: Torappu.UI.UIStringEvent;
        // m_cacheInfoObj: Torappu.Activity.Act5D1.RuneInfo;
        // m_showTween: DG.Tweening.Tween;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_SetRune: XLua.DelegateBridge;
        // __Hotfix0_SetRuneOnlyForShow: XLua.DelegateBridge;
        // __Hotfix0__ShowTransitionFirst: XLua.DelegateBridge;
        // __Hotfix0__ShowTransitionSecond: XLua.DelegateBridge;
        // __Hotfix0__ResetTween: XLua.DelegateBridge;
        // __Hotfix0__RenderOnlyForShow: XLua.DelegateBridge;
        // __Hotfix0_OnDestroy: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
      }
      export interface Act5D1RuneStageDetailContainer {
        _detailText: Torappu.Activity.Act5D1.Act5D1RuneStageDetailText;
        // _container: Torappu.UI.SimpleLayoutContent;
        // _newHandObj: UnityEngine.CanvasGroup;
        // _warningObj: UnityEngine.CanvasGroup;
        // m_cacheRuneReId: System.String;
        // m_isInited: System.Boolean;
        // m_newHandSwitch: Torappu.UI.FadeSwitchTween;
        // m_warningSwitch: Torappu.UI.FadeSwitchTween;
        // m_detailAdapter: Torappu.Activity.Act5D1.Act5D1RuneStageDetailContainer.DetailAdapter;
        // m_displayRuneList: System.Collections.Generic.List<Torappu.Activity.Act5D1.RuneInfo>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0__Render: XLua.DelegateBridge;
        // __Hotfix0__RenderWarningInfo: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
      }
      export interface Act5D1RuneStageDetailText {
        FADE_DUR: System.Single;
        // _detailText: UnityEngine.UI.Text;
        // _alphaHandler: UnityEngine.CanvasGroup;
        // m_isInited: System.Boolean;
        // m_status: Torappu.Activity.Act5D1.Act5D1RuneStageDetailText.Status;
        // m_tween: DG.Tweening.Tween;
        // m_hasInterruptedTween: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnDestroy: XLua.DelegateBridge;
        // __Hotfix0_RenderInfo: XLua.DelegateBridge;
        // __Hotfix0__ResetTween: XLua.DelegateBridge;
        // __Hotfix0__TransitionFirst: XLua.DelegateBridge;
        // __Hotfix0__TransitionSecond: XLua.DelegateBridge;
        // __Hotfix0__RenderStatus: XLua.DelegateBridge;
        // __Hotfix0__ValidateComps: XLua.DelegateBridge;
      }
      export interface Act5D1RuneStagePreview {
        // _mapPreview: UnityEngine.UI.Image;
        // _mapPreviewLarge: UnityEngine.UI.Image;
        // _mapBlur: UnityEngine.GameObject;
        // _groupImg: UnityEngine.UI.Image;
        // _pointCount: UnityEngine.UI.Text;
        // _countDownPart: UnityEngine.GameObject;
        // _countDownText: UnityEngine.UI.Text;
        // _mapDesc: UnityEngine.UI.Text;
        // _stageName: UnityEngine.UI.Text;
        // _stageCode: UnityEngine.UI.Text;
        // _backImg: UnityEngine.UI.Image;
        // m_directAssetsLoader: Torappu.Resource.DirectAssetLoader;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnClickMapDetail: XLua.DelegateBridge;
        // __Hotfix0__InitifNot: XLua.DelegateBridge;
        // __Hotfix0_OnDestroy: XLua.DelegateBridge;
        // __Hotfix0_OnCloseMapDetail: XLua.DelegateBridge;
        // __Hotfix0_RenderInfo: XLua.DelegateBridge;
      }
      export enum RuneClassify {
        ALL = "ALL",
        NEWHAND = "NEWHAND",
        DANGER = "DANGER",
      }
      export interface Act5D1RuneStageRuneContainer {
        // _onClick: Torappu.UI.UIStringEvent;
        // _viewContainer: Torappu.UI.SimpleLayoutContent;
        // _allToggle: Torappu.UI.TwoStateFadeSwitcher;
        // _dangerToggle: Torappu.UI.TwoStateFadeSwitcher;
        // _newHandToggle: Torappu.UI.TwoStateFadeSwitcher;
        // m_adapter: Torappu.Activity.Act5D1.Act5D1RuneStageRuneContainer.Adapter;
        // m_isInit: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0__GetDefaultClassRune: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0_SetAll: XLua.DelegateBridge;
        // __Hotfix0_SetNewHand: XLua.DelegateBridge;
        // __Hotfix0_SetDanger: XLua.DelegateBridge;
        // __Hotfix0_SetType: XLua.DelegateBridge;
      }
      export interface Act5D1RuneStageSelectRuneContainer {
        // _onClick: Torappu.UI.UIStringEvent;
        // _viewContainer: Torappu.UI.SimpleLayoutContent;
        // m_isInit: System.Boolean;
        // m_adapter: Torappu.Activity.Act5D1.Act5D1RuneStageSelectRuneContainer.Adapter;
        // m_displayRuneList: System.Collections.Generic.List<Torappu.Activity.Act5D1.RuneInfo>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0_Refresh: XLua.DelegateBridge;
      }
      export interface Act5D1EmptyState {
        ENTRY_GUIDE_SUBSIGNAL: System.String;
        // m_cacheStageId: System.String;
        // m_hasTriedToResumeStage: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_RegisterToDataListener: XLua.DelegateBridge;
        // __Hotfix0_OnResume: XLua.DelegateBridge;
        // __Hotfix0_JumpToMission: XLua.DelegateBridge;
        // __Hotfix0_JumpToShop: XLua.DelegateBridge;
        // __Hotfix0_JumpToStage: XLua.DelegateBridge;
        // __Hotfix0__TryResumeStageState: XLua.DelegateBridge;
      }
      export interface Act5D1RuneSelectState {
        // _point1: UnityEngine.UI.Text;
        // _point2: UnityEngine.UI.Text;
        _resourceBar: Torappu.Activity.Act5D1.Act5D1ResourceBar;
        // _viewContainer: Torappu.UI.SimpleLayoutContent;
        _stateBean: Torappu.Activity.Act5D1.Act5D1RuneStageStateBean;
        // _softMask: Torappu.UI.ScrollRectSoftMask;
        // m_adapter: Torappu.Activity.Act5D1.Act5D1RuneSelectState.Adapter;
        // m_isInit: System.Boolean;
        // m_stageId: System.String;
        // m_runeId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_RegisterToDataListener: XLua.DelegateBridge;
        // __Hotfix0_OnResume: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
      }
      export interface Act5D1RuneShowState {
        _stateBean: Torappu.Activity.Act5D1.Act5D1RuneShowStateBean;
        // _viewContainer: Torappu.UI.SimpleLayoutContent;
        // _cannotUseBenefit: UnityEngine.GameObject;
        // m_adapter: Torappu.Activity.Act5D1.Act5D1ShowAdapter;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
      }
      export interface Act5D1RuneStageState {
        // NEW_HAND_COLOR: UnityEngine.Color;
        // WARNING_COLOR: UnityEngine.Color;
        _stateBean: Torappu.Activity.Act5D1.Act5D1RuneStageStateBean;
        _runeContainer: Torappu.Activity.Act5D1.Act5D1RuneStageRuneContainer;
        _selectedContainer: Torappu.Activity.Act5D1.Act5D1RuneStageSelectRuneContainer;
        _detailContainer: Torappu.Activity.Act5D1.Act5D1RuneStageDetailContainer;
        _stagePreview: Torappu.Activity.Act5D1.Act5D1RuneStagePreview;
        // _backImage: UnityEngine.UI.Image;
        // _pointText: UnityEngine.UI.Text;
        // _pointText2: UnityEngine.UI.Text;
        _resourceBar: Torappu.Activity.Act5D1.Act5D1ResourceBar;
        // m_stageId: System.String;
        // m_runeId: System.String;
        DUR_PER_POINT: System.Single;
        MAX_DUR_POINT: System.Single;
        // m_pointTextTween: DG.Tweening.Tween;
        // m_currentPoint: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_RegisterToDataListener: XLua.DelegateBridge;
        // __Hotfix0_OnResume: XLua.DelegateBridge;
        // __Hotfix0_RefreshPointInfo: XLua.DelegateBridge;
        // __Hotfix0_Refresh: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
        // __Hotfix0_OnClickToEnemyHandBook: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_ToDetailState: XLua.DelegateBridge;
        // __Hotfix0_CleanAllSelect: XLua.DelegateBridge;
        // __Hotfix0_OpenSquadPage: XLua.DelegateBridge;
        // __Hotfix0__GenerateActMeta4BattleFinish: XLua.DelegateBridge;
        // __Hotfix0__GenerateDataBundleToRuneStage: XLua.DelegateBridge;
        // __Hotfix0__TweenPointText: XLua.DelegateBridge;
        // __Hotfix0__SetPointText: XLua.DelegateBridge;
      }
      export interface Act5D1RuneUnlockStateBean {
        stageId: System.String;
        runeId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act5D1RuneUnlockState {
        _stateBean: Torappu.Activity.Act5D1.Act5D1RuneUnlockStateBean;
        // _priceText: UnityEngine.UI.Text;
        _showObj: Torappu.Activity.Act5D1.Act5D1RuneShowObj;
        // _container: UnityEngine.Transform;
        // _availPart: UnityEngine.GameObject;
        // _notAvailPart: UnityEngine.GameObject;
        // _unlockBtn: UnityEngine.UI.Button;
        _resourceBar: Torappu.Activity.Act5D1.Act5D1ResourceBar;
        _notify: Torappu.Activity.Act5D1.Act5D1RuneUnlockNotify;
        // _price: UnityEngine.UI.Text;
        // m_showObj: Torappu.Activity.Act5D1.Act5D1RuneShowObj;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_OnResume: XLua.DelegateBridge;
        // __Hotfix0__CheckAvailInfo: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
      }
      export interface Act5D1RuneMissionItem {
        // _uncomplete: UnityEngine.Sprite;
        // _completed: UnityEngine.Sprite;
        // _goted: UnityEngine.Sprite;
        // _bg: UnityEngine.UI.Image;
        // _missionDesc: UnityEngine.UI.Text;
        // _runeBtn: UnityEngine.GameObject;
        // _itemIconRoot: UnityEngine.Transform;
        // _prgText: UnityEngine.UI.Text;
        // _prg: UnityEngine.UI.Slider;
        // _btn: UnityEngine.GameObject;
        // _gotFlag: UnityEngine.GameObject;
        // _colorChanger: Torappu.UI.UIChildrenColorGraphic;
        // m_mission: Torappu.MissionData;
        // m_rewardIcon: Torappu.UI.UIItemCard[];
        // m_owner: Torappu.Activity.Act5D1.Act5D1RuneMissionPanel;
        // m_runes: System.String[];
        // m_cannotFlag: System.Boolean;
        // m_hasGot: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_SynMission: XLua.DelegateBridge;
        // __Hotfix0_GetMissionStatus: XLua.DelegateBridge;
        // __Hotfix0_HandleGetReward: XLua.DelegateBridge;
        // __Hotfix0__ReceiveItemsCoroutine: XLua.DelegateBridge;
        // __Hotfix0_ShowRuneDetail: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
      }
      export interface Act5D1RuneMissionPanel {
        // _missionList: UnityEngine.UI.ScrollRect;
        // _contentRoot: UnityEngine.Transform;
        _itemPrefab: Torappu.Activity.Act5D1.Act5D1RuneMissionItem;
        // _remainHours: UnityEngine.UI.Text;
        // _remainMinutes: UnityEngine.UI.Text;
        // m_missionGrps: System.Collections.Generic.List<Torappu.MissionGroup>;
        // <ownerState>k__BackingField: Torappu.Activity.Act5D1.Act5D1RuneMissionState;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_ownerState: XLua.DelegateBridge;
        // __Hotfix0_set_ownerState: XLua.DelegateBridge;
        // __Hotfix0_SynContent: XLua.DelegateBridge;
        // __Hotfix0_Refresh: XLua.DelegateBridge;
        // __Hotfix0__AppendMissions: XLua.DelegateBridge;
      }
      export interface Act5D1RuneMissionState {
        _stateBean: Torappu.Activity.Act5D1.Act5D1RuneMissionStateBean;
        _urgentMission: Torappu.Activity.Act5D1.Act5D1RuneMissionPanel;
        _permanentMissison: Torappu.Activity.Act5D1.Act5D1RuneMissionPanel;
        // m_tempRunesForShow: System.Collections.Generic.List<Torappu.Activity.Act5D1.RuneShowInfo>;
        // m_cannotUseBenefit: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_showRuneDetail: XLua.DelegateBridge;
        // __Hotfix0_RegisterToDataListener: XLua.DelegateBridge;
      }
      export interface Act5D1RuneShopItem {
        // _button: UnityEngine.UI.Button;
        // _rarityBG1: UnityEngine.Sprite;
        // _rarityBG2: UnityEngine.Sprite;
        // _rarityBG3: UnityEngine.Sprite;
        // _bg: UnityEngine.UI.Image;
        // _cardName: UnityEngine.UI.Text;
        // _offsetPercent: UnityEngine.UI.Text;
        // _itemContainer: UnityEngine.Transform;
        // _remainCount: UnityEngine.UI.Text;
        // _remainCountPart: UnityEngine.GameObject;
        // _price: UnityEngine.UI.Text;
        // _offsetPricePart: UnityEngine.GameObject;
        _itemScale: System.Single;
        // _soldOutCanvasGroup: UnityEngine.CanvasGroup;
        // _soldOutObj: UnityEngine.GameObject;
        // m_shop: Torappu.Activity.Act5D1.Act5D1RuneShopState;
        // m_good: Torappu.Activity.Act5D1.Act5D1ShopGood;
        // m_progress: Torappu.Activity.Act5D1.Act5D1ProgressGoodItem[];
        // m_itemCard: Torappu.UI.UIItemCard;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_ApplyData: XLua.DelegateBridge;
        // __Hotfix0__SynContent: XLua.DelegateBridge;
        // __Hotfix0_OpenItemDetail: XLua.DelegateBridge;
        // __Hotfix0__CalculateDetailModel: XLua.DelegateBridge;
        // __Hotfix0__GetCurPrgGoodItem: XLua.DelegateBridge;
        // __Hotfix0__SetSoldOutObj: XLua.DelegateBridge;
        // __Hotfix0__HandleBuy: XLua.DelegateBridge;
        // __Hotfix1__HandleBuy: XLua.DelegateBridge;
        // __Hotfix0__ReceiveItemsCoroutine: XLua.DelegateBridge;
        // __Hotfix0_EnterDetailEvent: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
      }
      export interface Act5D1RuneShopState {
        _stateBean: Torappu.Activity.Act5D1.Act5D1RuneShopStateBean;
        _itemPrefab: Torappu.Activity.Act5D1.Act5D1RuneShopItem;
        // _listRoot: UnityEngine.RectTransform;
        _resourceBar: Torappu.Activity.Act5D1.Act5D1ResourceBar;
        forOpenViewModel: Torappu.Activity.Act5D1.Act5D1ShopCommonViewModel;
        // <>f__am$cache0: System.Comparison<Torappu.Activity.Act5D1.Act5D1ShopGood>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0__SendGetGoodList: XLua.DelegateBridge;
        // __Hotfix0_TransDataToDetail: XLua.DelegateBridge;
        // __Hotfix0_RegisterToDataListener: XLua.DelegateBridge;
        // __Hotfix0_OnResume: XLua.DelegateBridge;
        // __Hotfix0__Syn: XLua.DelegateBridge;
        // __Hotfix0_NotifyBuyComplete: XLua.DelegateBridge;
      }
      export interface Act5D1ShopDetailCommonStateBean {
        model: Torappu.Activity.Act5D1.Act5D1ShopCommonViewModel;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act5D1ShopDetailCommonState {
        _stateBean: Torappu.Activity.Act5D1.Act5D1ShopDetailCommonStateBean;
        _view: Torappu.Activity.Act5D1.Act5D1ShopDetailView;
        _resourceBar: Torappu.Activity.Act5D1.Act5D1ResourceBar;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_OnResume: XLua.DelegateBridge;
      }
      export interface Act5D1ShopDetailComplexState {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act5D1ShopDetailComplexView {
        // m_shopBuyCount: System.Int32;
        _pileView: Torappu.Activity.Act5D1.Act5D1ShopDetailItemPileView;
        // _shopBuyCount: UnityEngine.UI.Text;
        // _remainCount: UnityEngine.UI.Text;
        // _shopItemName: UnityEngine.UI.Text;
        // _shopPerCount: UnityEngine.UI.Text;
        // _shopAvailCount: UnityEngine.UI.Text;
        // _totalPrice: UnityEngine.UI.Text;
        // m_data: Torappu.Activity.Act5D1.Act5D1ShopCommonViewModel;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_ApplyData: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
        // __Hotfix0_AddOne: XLua.DelegateBridge;
        // __Hotfix0_MinusOne: XLua.DelegateBridge;
        // __Hotfix0_AddToMax: XLua.DelegateBridge;
        // __Hotfix0_MinusToOne: XLua.DelegateBridge;
        // __Hotfix0_GetMaxPrice: XLua.DelegateBridge;
        // __Hotfix0_RefreshNum: XLua.DelegateBridge;
        // __Hotfix0__RefreshClick: XLua.DelegateBridge;
      }
      export interface Act5D1ShopDetailItemPileView {
        // _imageList: UnityEngine.UI.Image[];
        // _pileBoxPart: UnityEngine.GameObject;
        // _pileBoxImage: UnityEngine.UI.Image;
        MAX_COUNT: System.Int32;
        // DEFAULT_SIZE: UnityEngine.Vector2;
        // LITTLE_SIZE: UnityEngine.Vector2;
        // CONSTPOSLIST: UnityEngine.Vector2[][];
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_PileItem: XLua.DelegateBridge;
        // __Hotfix1_PileItem: XLua.DelegateBridge;
      }
      export interface Act5D1ShopDetailNormalState {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act5D1ShopDetailNormalView {
        _pileView: Torappu.Activity.Act5D1.Act5D1ShopDetailItemPileView;
        // _itemContainer: UnityEngine.Transform;
        // _pilePart: UnityEngine.GameObject;
        // _itemPart: UnityEngine.GameObject;
        // _itemDetailCount: UnityEngine.UI.Text;
        _scaleCount: System.Single;
        // m_itemCard: Torappu.UI.UIItemCard;
        // m_isInited: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_ApplyData: XLua.DelegateBridge;
      }
      export interface Act5D1ShopDetailProgressItem {
        // _itemSprite: UnityEngine.UI.Image;
        // _priceSprite: UnityEngine.UI.Image;
        // _priceText: UnityEngine.UI.Text;
        // _index: UnityEngine.UI.Text;
        // _count: UnityEngine.UI.Text;
        // _backImage: UnityEngine.UI.Image;
        // _isSoldOut: UnityEngine.GameObject;
        // _pricePart: UnityEngine.GameObject;
        BACKIMAGEBLACKTYPE: System.Single[];
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitCommonPart: XLua.DelegateBridge;
        // __Hotfix0_InitActiveData: XLua.DelegateBridge;
        // __Hotfix0_InitUnActiveData: XLua.DelegateBridge;
      }
      export interface Act5D1ShopDetailProgressState {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act5D1ShopDetailProgressView {
        _unactiveItem: Torappu.Activity.Act5D1.Act5D1ShopDetailProgressItem;
        _acativeItem: Torappu.Activity.Act5D1.Act5D1ShopDetailProgressItem;
        // _itemContainer: UnityEngine.Transform;
        // _itemDetailState: UnityEngine.UI.Text;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_ApplyData: XLua.DelegateBridge;
      }
      export interface Act5D1ShopCommonViewModel {
        goodId: System.String;
        item: Torappu.ItemBundle;
        displayName: System.String;
        price: System.Int32;
        availRemainCount: System.Int32;
        buyCount: System.Int32;
        // buyHandler: System.Action<System.Int32>;
      }
      export interface Act5D1ShopDetailView {
        // _currentPrice: UnityEngine.UI.Text;
        // _itemDetail: UnityEngine.UI.Text;
        // _itemDetail_2: UnityEngine.UI.Text;
        // _itemName: UnityEngine.UI.Text;
        // m_data: Torappu.Activity.Act5D1.Act5D1ShopCommonViewModel;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_ApplyData: XLua.DelegateBridge;
        // __Hotfix0_OnClick: XLua.DelegateBridge;
      }
      export interface Act5D1RuneMissionStateBean {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act5D1RuneSelectStateBean {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act5D1RuneShopStateBean {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface RuneShowInfo {
        stageId: System.String;
        runeId: System.String;
      }
      export interface Act5D1RuneShowStateBean {
        runeShowList: System.Collections.Generic.List<Torappu.Activity.Act5D1.RuneShowInfo>;
        cannotUseBenefit: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Apply: XLua.DelegateBridge;
      }
      export interface RuneInfo {
        runeId: System.String;
        stageId: System.String;
        isAvailable: System.Boolean;
        isSelected: System.Boolean;
        isUnlock: System.Boolean;
        isBanned: System.Boolean;
        conflictKey: System.String;
        point: System.Int32;
        sortId: System.Int32;
        iconId: System.String;
        description: System.String;
      }
      export interface Act5D1RuneStageStateBean {
        runeList: System.Collections.Generic.List<Torappu.Activity.Act5D1.RuneInfo>;
        cacheStageId: System.String;
        cacheRuneReId: System.String;
        // <>f__am$cache0: System.Comparison<Torappu.Activity.Act5D1.RuneInfo>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Refresh: XLua.DelegateBridge;
        // __Hotfix0_InitRuneInfo: XLua.DelegateBridge;
        // __Hotfix0_GetRuneWarningLine: XLua.DelegateBridge;
        // __Hotfix0_GetPointCount: XLua.DelegateBridge;
        // __Hotfix0_GetNewHandFlag: XLua.DelegateBridge;
        // __Hotfix0_GetBanList: XLua.DelegateBridge;
      }
      export namespace Act5D1StageController {
        export interface Bridge {
          // m_controller: Torappu.Activity.Act5D1.Act5D1StageController;
        }
      }
      export namespace Act5D1StageFloat {
      }
      export namespace Act5D1BattleFinishView {
      }
      export namespace RuneBattleFinishEffView {
      }
      export namespace RuneBattleFinishHolder {
      }
      export namespace Act5D1RuneUnlockNotify {
        export interface Param {
          runeId: System.String;
          stageId: System.String;
        }
      }
      export namespace Act5D1RuneStageDetailContainer {
        export interface DetailAdapter {
          // m_context: Torappu.Activity.Act5D1.Act5D1RuneStageDetailContainer;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_count: XLua.DelegateBridge;
          // __Hotfix0_RenderView: XLua.DelegateBridge;
        }
      }
      export namespace Act5D1RuneStageDetailText {
        export interface Status {
          EMPTY: Torappu.Activity.Act5D1.Act5D1RuneStageDetailText.Status;
          desc: System.String;
          isNewHand: System.Boolean;
        }
      }
      export namespace Act5D1RuneStageRuneContainer {
        export interface Adapter {
          classify: Torappu.Activity.Act5D1.RuneClassify;
          infoList: System.Collections.Generic.List<Torappu.Activity.Act5D1.RuneInfo>;
          // onClickEvent: Torappu.UI.UIStringEvent;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_count: XLua.DelegateBridge;
          // __Hotfix0_RenderView: XLua.DelegateBridge;
        }
      }
      export namespace Act5D1RuneStageSelectRuneContainer {
        export interface Adapter {
          // m_context: Torappu.Activity.Act5D1.Act5D1RuneStageSelectRuneContainer;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_count: XLua.DelegateBridge;
          // __Hotfix0_RenderView: XLua.DelegateBridge;
        }
      }
      export namespace Act5D1EmptyState {
      }
      export namespace Act5D1RuneSelectState {
        export interface Adapter {
          classify: Torappu.Activity.Act5D1.RuneClassify;
          infoList: System.Collections.Generic.List<Torappu.Activity.Act5D1.RuneInfo>;
          // onClickEvent: Torappu.UI.UIStringEvent;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_count: XLua.DelegateBridge;
          // __Hotfix0_RenderView: XLua.DelegateBridge;
        }
      }
      export namespace Act5D1RuneMissionItem {
      }
      export namespace Act5D1RuneShopItem {
      }
      export namespace Act5D1ShopDetailProgressView {
        export interface PrgViewModel {
          prgId: System.String;
          progress: Torappu.Activity.Act5D1.Act5D1ProgressGoodItem[];
        }
      }
    }
    export namespace Act5D0 {
      export interface Act5D0MileStoneResHolder {
        // _backImg_ongoing: UnityEngine.Sprite;
        // _backImg_can_reward: UnityEngine.Sprite;
        // _backImg_eff: UnityEngine.Sprite;
        // _imgComplete: UnityEngine.Sprite;
        // _indexColor_ongoing: UnityEngine.Color;
        // _itemColor_ongoing: UnityEngine.Color;
        // _indexColor_canReward: UnityEngine.Color;
        // _itemColor_canReward: UnityEngine.Color;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_backImgOngoing: XLua.DelegateBridge;
        // __Hotfix0_get_backImgCanReward: XLua.DelegateBridge;
        // __Hotfix0_get_backImgEff: XLua.DelegateBridge;
        // __Hotfix0_get_imgComplete: XLua.DelegateBridge;
        // __Hotfix0_get_indexColorOngoing: XLua.DelegateBridge;
        // __Hotfix0_get_itemColorOngoing: XLua.DelegateBridge;
        // __Hotfix0_get_indexColorCanReward: XLua.DelegateBridge;
        // __Hotfix0_get_itemColorCanReward: XLua.DelegateBridge;
      }
      export interface Act5D0MissionResHolder {
        // _backImg: UnityEngine.Sprite;
        // _diffColor: UnityEngine.Color;
        // _diffAppendColor: UnityEngine.Color;
        // _titleColor: UnityEngine.Color;
        // _descColor: UnityEngine.Color;
        // _rewardCountColor: UnityEngine.Color;
        // _crossColor: UnityEngine.Color;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_backImg: XLua.DelegateBridge;
        // __Hotfix0_get_diffColor: XLua.DelegateBridge;
        // __Hotfix0_get_diffAppendColor: XLua.DelegateBridge;
        // __Hotfix0_get_titleColor: XLua.DelegateBridge;
        // __Hotfix0_get_descColor: XLua.DelegateBridge;
        // __Hotfix0_get_rewardCountColor: XLua.DelegateBridge;
        // __Hotfix0_get_crossColor: XLua.DelegateBridge;
      }
      export interface Act5D0ResUtil {
        PANEL_MISSION_RES_PATH: System.String;
        PANEL_MILESTONE_RES_PATH: System.String;
        HUB_PATH: System.String;
        MILESTONE_HEIGHT: System.Single;
        MILESTONE_DELTA_HEIGHT: System.Single;
        MILESTONE_OFFSET: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_activityId: XLua.DelegateBridge;
        // __Hotfix0_GetMissionResPath: XLua.DelegateBridge;
        // __Hotfix0_GetMileStoneResPath: XLua.DelegateBridge;
        // __Hotfix0_get_uiItemCard: XLua.DelegateBridge;
        // __Hotfix0_get_commonTopMenu: XLua.DelegateBridge;
        // __Hotfix0_get_playerInfo: XLua.DelegateBridge;
        // __Hotfix0_get_act5d0Data: XLua.DelegateBridge;
        // __Hotfix0_get_basicData: XLua.DelegateBridge;
        // __Hotfix0_GetMissionGroup: XLua.DelegateBridge;
        // __Hotfix0_getMissionData: XLua.DelegateBridge;
        // __Hotfix0_GetAct5D0PlayerInfo: XLua.DelegateBridge;
        // __Hotfix0_GetAct5D0PlayerInfoFromPlayerData: XLua.DelegateBridge;
        // __Hotfix0_get_entrySpriteHub: XLua.DelegateBridge;
        // __Hotfix0_GetMissionItemResHolder: XLua.DelegateBridge;
        // __Hotfix0_GetMileStoneItemResHolder: XLua.DelegateBridge;
        // __Hotfix0_get_mileStoneToken: XLua.DelegateBridge;
      }
      export interface Act5D0StageController {
        _entryZoneBinder: Torappu.Activity.Act5D0.Act5D0EntryZoneGroupBinder;
        _mapZoneBinder: Torappu.Activity.Act5D0.Act5D0MapZoneGroupBinder;
        // m_zoneDescGroupProperty: Torappu.Activity.Act5D0.Act5D0ZoneDescGroupViewProperty;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_LoadCoroutine: XLua.DelegateBridge;
        // __Hotfix0_get_staticActivityId: XLua.DelegateBridge;
        // __Hotfix0_OnLoaded: XLua.DelegateBridge;
        // __Hotfix0_OnStageTimeout: XLua.DelegateBridge;
        // __Hotfix0_CreateBridge: XLua.DelegateBridge;
        // __Hotfix0__TrySyncMissionStatus: XLua.DelegateBridge;
        // __Hotfix0_GetAct5D0PlayerInfo: XLua.DelegateBridge;
        // __Hotfix0_GetAct5D0PlayerInfoFromPlayerData: XLua.DelegateBridge;
      }
      export interface Act5D0StageEntry {
        _mileStoneTrackPoint: Torappu.Activity.UIActTrackPoint;
        // _topMenuContainer: UnityEngine.Transform;
        // _actTime: UnityEngine.UI.Text;
        // _actDesc: UnityEngine.UI.Text;
        // _brushAnim: UnityEngine.Animator;
        // _actLeftTime: UnityEngine.UI.Text;
        // _mileStoneToken: UnityEngine.UI.Text;
        // _exBlock: UnityEngine.GameObject;
        // _animMission: UnityEngine.Animator;
        // _animMilestone: UnityEngine.Animator;
        // _animBrush: UnityEngine.Animator;
        // _animBlink: UnityEngine.Animator;
        // _animToDowntown: UnityEngine.Animator;
        // _animToEx: UnityEngine.Animator;
        // _animBlockToEx: UnityEngine.Animator;
        // _animRetro: UnityEngine.Animator;
        // m_topMenu: Torappu.UI.CommonTopMenu;
        START_ANIM_KEY: System.String;
        // m_isLoaded: System.Boolean;
        // m_isBindedToParent: System.Boolean;
        // m_mileStoneRedPoint: Torappu.UI.TrackPointViewProperty;
        // m_isInited: System.Boolean;
        // <>f__am$cache0: System.Action;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
        // __Hotfix0_NotifyBackToFloatEmptyState: XLua.DelegateBridge;
        // __Hotfix0_OnBindToParent: XLua.DelegateBridge;
        // __Hotfix0_OnLoaded: XLua.DelegateBridge;
        // __Hotfix0__TryPlayAni: XLua.DelegateBridge;
        // __Hotfix0__InitTopMenu: XLua.DelegateBridge;
        // __Hotfix0__InitData: XLua.DelegateBridge;
      }
      export interface Act5D0StageFloat {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_LoadCoroutine: XLua.DelegateBridge;
      }
      export interface Act5D0StageMapDecro {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act5D0Service {
        GET_MILESTONE_ITEM_REWARD: System.String;
      }
      export interface Act5D0MileStoneRequest {
        activityId: System.String;
        rewardId: System.String;
      }
      export interface Act5D0MileStoneItemResponse {
        reward: System.Collections.Generic.List<Torappu.ActivityItemModel>;
      }
      export interface ActivityMissionCheckRequest {
        missionIds: System.Collections.Generic.List<System.String>;
        activityId: System.String;
      }
      export interface ActivityMissionCheckResponse {
        items: System.Collections.Generic.List<Torappu.Activity.RewardItemModel>;
      }
      export interface Activity5D0ResHolder {
        // _homeSprite: UnityEngine.Sprite;
        // _zoneTabSprite: UnityEngine.Sprite;
        _zoneHomeRes: Torappu.Activity.ActivityResHolder.ZoneHomeRes;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_topbarSprite: XLua.DelegateBridge;
        // __Hotfix0_get_homeSprite: XLua.DelegateBridge;
        // __Hotfix0_get_zoneHomeRes: XLua.DelegateBridge;
      }
      export interface Act5D0EmptyState {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnResume: XLua.DelegateBridge;
        // __Hotfix0_ToMileStoneState: XLua.DelegateBridge;
        // __Hotfix0_ToActivityMission: XLua.DelegateBridge;
        // __Hotfix0_ToReplicateState: XLua.DelegateBridge;
      }
      export interface Act5D0MileStoneState {
        // _topMenuContainer: UnityEngine.Transform;
        // m_topMenu: Torappu.UI.CommonTopMenu;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_InitTopMenu: XLua.DelegateBridge;
        // __Hotfix0_GetMileStoneServiceCode: XLua.DelegateBridge;
        // __Hotfix0_ToActivityMission: XLua.DelegateBridge;
      }
      export interface Act5D0MissionState {
        _stateBean: Torappu.Activity.Act5D0.Act5D0MissionStateBean;
        _view: Torappu.Activity.Act5D0.Act5D0MissionView;
        // _topMenuContainer: UnityEngine.Transform;
        // m_topMenu: Torappu.UI.CommonTopMenu;
        // m_cacheTransId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_InitTopMenu: XLua.DelegateBridge;
      }
      export interface Act5D0EntryZoneGroupBinder {
        _zoneViews: System.Collections.Generic.List<Torappu.Activity.Act5D0.Act5D0EntryZoneView>;
        // m_isInited: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_OnValueChanged: XLua.DelegateBridge;
        // __Hotfix0__OnZoneClicked: XLua.DelegateBridge;
      }
      export interface Act5D0EntryZoneView {
        _zoneId: System.String;
        // _btn: UnityEngine.UI.Button;
        // _notOpenLocked: UnityEngine.GameObject;
        // _timeOutLocked: UnityEngine.GameObject;
        // _textLocked: UnityEngine.UI.Text;
        // _panelTrackPoint: UnityEngine.GameObject;
        // onZoneClicked: System.Action<System.String>;
        // m_cachedModel: Torappu.Activity.Act5D0.Act5D0ZoneDescModel;
        // m_isInited: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnZoneDescModelUpdated: XLua.DelegateBridge;
        // __Hotfix0_EventOnBtnClicked: XLua.DelegateBridge;
      }
      export interface Act5D0MapZoneGroupBinder {
        _zoneViews: System.Collections.Generic.List<Torappu.Activity.Act5D0.Act5D0MapZoneView>;
        // m_isInited: System.Boolean;
        // m_selectZoneId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_OnValueChanged: XLua.DelegateBridge;
        // __Hotfix0__OnZoneClicked: XLua.DelegateBridge;
      }
      export interface Act5D0MapZoneView {
        _zoneId: System.String;
        // _panelContent: UnityEngine.UI.Image;
        // _panelLocked: UnityEngine.GameObject;
        // _panelSelected: UnityEngine.GameObject;
        // _panelTrackPoint: UnityEngine.GameObject;
        // _lockColor: UnityEngine.Color;
        // onZoneClicked: System.Action<System.String>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnZoneDescModelUpdated: XLua.DelegateBridge;
        // __Hotfix0_EventOnBtnClicked: XLua.DelegateBridge;
      }
      export interface Act5D0MileStoneItemObj {
        // _bgEff: UnityEngine.UI.Image;
        // _bg: UnityEngine.UI.Image;
        // _ableToGetButton: UnityEngine.UI.Button;
        // _indexText: UnityEngine.UI.Text;
        // _itemName: UnityEngine.UI.Text;
        // _detailText: UnityEngine.UI.Text;
        // _countSymbol: UnityEngine.UI.Image;
        // _countText: UnityEngine.UI.Text;
        // _finishPart: UnityEngine.GameObject;
        // _contentRoot: UnityEngine.GameObject;
        // _gapRoot: UnityEngine.GameObject;
        // _group: UnityEngine.CanvasGroup;
        // _completeMark: UnityEngine.UI.Image;
        // _desc: UnityEngine.UI.Text;
        // _canvasGroup: UnityEngine.CanvasGroup;
        // _replicateFlag: UnityEngine.GameObject;
        // m_cacheTween: DG.Tweening.Tween;
        ANIMATION_ALPHA_SPEED: System.Single;
        ANIMATION_ANIM_SPEED: System.Single;
        // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitData: XLua.DelegateBridge;
        // __Hotfix0_OnRenderDataPart: XLua.DelegateBridge;
        // __Hotfix0_OnRenderItemStyle: XLua.DelegateBridge;
      }
      export interface MissionItemHolder {
        item: Torappu.Activity.Act5D0.Act5D0MissionItemObj;
      }
      export interface Act5D0MissionGridAdapter {
        // _itemEvent: Torappu.UI.UIStringEvent;
        // _missionItem: UnityEngine.GameObject;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_ViewConstructor: XLua.DelegateBridge;
        // __Hotfix0_UpdateView: XLua.DelegateBridge;
      }
      export interface Act5D0MissionItemObj {
        // _bg: UnityEngine.UI.Image;
        // _difficulty: UnityEngine.UI.Text;
        // _difficultyAppend: UnityEngine.UI.Text;
        // _reward: UnityEngine.UI.Text;
        // _rewardAppend: UnityEngine.UI.Text;
        // _title: UnityEngine.UI.Text;
        // _desc: UnityEngine.UI.Text;
        // _rewardItemCount: UnityEngine.UI.Text;
        // _crossImg: UnityEngine.UI.Image;
        // _finishMask: UnityEngine.GameObject;
        // _itemCanvas: UnityEngine.CanvasGroup;
        // _itemViewContainer: UnityEngine.Transform;
        _itemCardScaleFactor: System.Single;
        // clickEvent: Torappu.UI.UIStringEvent;
        // m_itemCard: Torappu.UI.UIItemCard;
        // m_itemInited: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_RenderItemPart: XLua.DelegateBridge;
        // __Hotfix0_InitData: XLua.DelegateBridge;
      }
      export interface Act5D0MileStoneAvailTrackPointModel {
        // m_hasNew: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_isShow: XLua.DelegateBridge;
        // __Hotfix0_UpdateState: XLua.DelegateBridge;
      }
      export interface Act5D0MileStoneHolder {
        // _curMilestoneToken: UnityEngine.UI.Text;
        // _curBonusCond: UnityEngine.UI.Text;
        // _curBonusName: UnityEngine.UI.Text;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnRefreshHolderInfo: XLua.DelegateBridge;
        // __Hotfix0_GetScrollToTargetIndex: XLua.DelegateBridge;
      }
      export interface Act5D0MileStoneStateBean {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetMileStoneList: XLua.DelegateBridge;
        // __Hotfix0_GetMileStonePlayerInfo: XLua.DelegateBridge;
        // __Hotfix0_GetMileStoneToken: XLua.DelegateBridge;
        // __Hotfix0_GetSpReward: XLua.DelegateBridge;
        // __Hotfix0_OnInitInfo: XLua.DelegateBridge;
      }
      export interface Act5D0MissionStateBean {
        missionList: System.Collections.Generic.List<Torappu.Activity.Act5D0.Act5D0MissionViewModel>;
        curStoneToken: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitInfo: XLua.DelegateBridge;
        // __Hotfix0__InitStoneTokenCount: XLua.DelegateBridge;
        // __Hotfix0__InitMissionList: XLua.DelegateBridge;
      }
      export interface Act5D0MissionView {
        _adapter: Torappu.Activity.Act5D0.Act5D0MissionGridAdapter;
        // _passedMissionRate: UnityEngine.UI.Text;
        // _rect: Torappu.UI.LoopScrollRect;
        // _curMilestoneToken: UnityEngine.UI.Text;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_RenderInfo: XLua.DelegateBridge;
        // __Hotfix0__ScrollToFirstSlot: XLua.DelegateBridge;
      }
      export interface Act5D0MissionViewModel {
        id: System.String;
        sortId: System.Int32;
        state: Torappu.Activity.Act5D0.Act5D0MissionViewModel.State;
        level: Torappu.Activity.Act5D0.Act5D0MissionViewModel.DifficultyLevel;
        title: System.String;
        desc: System.String;
        rewardItem: Torappu.ItemBundle;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_CompareTo: XLua.DelegateBridge;
      }
      export interface Act5D0ZoneDescModel {
        EMPTY: Torappu.Activity.Act5D0.Act5D0ZoneDescModel;
        zoneId: System.String;
        isUnlocked: System.Boolean;
        lockedText: System.String;
        isTimeOut: System.Boolean;
        hasNewStages: System.Boolean;
        // __Hotfix0_Create: XLua.DelegateBridge;
        // __Hotfix0__HasNewStages: XLua.DelegateBridge;
        // __Hotfix0__ParseTimeLockedInfo: XLua.DelegateBridge;
        // __Hotfix0__IsActTimeOut: XLua.DelegateBridge;
      }
      export interface Act5D0ZoneDescGroupViewModel {
        selectedZoneId: System.String;
        zoneDescModels: System.Collections.Generic.List<Torappu.Activity.Act5D0.Act5D0ZoneDescModel>;
      }
      export interface Act5D0ZoneDescGroupViewProperty {
      }
      export namespace Act5D0StageController {
        export interface Bridge {
          // m_controller: Torappu.Activity.Act5D0.Act5D0StageController;
        }
      }
      export namespace Act5D0StageFloat {
      }
      export namespace Act5D0MileStoneItemObj {
      }
      export namespace Act5D0MissionItemObj {
      }
      export namespace Act5D0MissionView {
      }
      export namespace Act5D0MissionViewModel {
        export enum State {
          FINISH = "FINISH",
          NOTAVAIL = "NOTAVAIL",
        }
        export enum DifficultyLevel {
          C = "C",
          B = "B",
          A = "A",
          S = "S",
        }
      }
    }
    export namespace MileStoneViewModel {
      export enum State {
        FINISH = "FINISH",
        AVAIL = "AVAIL",
        NOTAVAIL = "NOTAVAIL",
      }
      export enum PartType {
        PART1 = "PART1",
        PART2 = "PART2",
        GAP = "GAP",
      }
    }
    export namespace Act9D0 {
      export interface Act9D0ResUtil {
        ACT_LOCAL_CACHE_PREFIX_WATCHED_FAVOR_UP_CHAR_ID: System.String;
        ACT_LOCAL_CACHE_PREFIX_ACCESSED_ZONE_ID: System.String;
        ACT_NEWS_PARAM: System.Single;
        ACT_NEWS_PARAM_2: System.Int32;
        ACT_NEWS_READ_LIMIT: System.Int64;
        ACT_NEWS_READ_LIMIT_2: System.Int64;
      }
      export interface Act9D0Service {
        READ_NEWS: System.String;
      }
      export interface Act9D0ReadNewsRequest {
        activityId: System.String;
        newsIds: System.String[];
      }
      export interface Act9D0ReadNewsResponse {
      }
      export interface Act9D0StageController {
        _disableStageEntryPartical: System.Boolean;
        // m_favorUpTrackProperty: Torappu.UI.TrackPointViewProperty;
        // m_missionTrackProperty: Torappu.UI.TrackPointViewProperty;
        // m_zoneDescGroupProperty: Torappu.Activity.Act9D0.Act9D0ZoneDescGroupViewProperty;
        // m_isLoaded: System.Boolean;
        // m_eventPool: Torappu.EventPool<Torappu.Activity.Act9D0.Act9D0StageController.Act9D0Event>;
        // <onStageTimeout>k__BackingField: System.Action;
        // <onRewardTimeout>k__BackingField: System.Action;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_disableStageEntryPartical: XLua.DelegateBridge;
        // __Hotfix0_get_favorUpTrackProperty: XLua.DelegateBridge;
        // __Hotfix0_get_missionTrackProperty: XLua.DelegateBridge;
        // __Hotfix0_get_zoneDescGroupProperty: XLua.DelegateBridge;
        // __Hotfix0_get_isLoaded: XLua.DelegateBridge;
        // __Hotfix0_get_onStageTimeout: XLua.DelegateBridge;
        // __Hotfix0_set_onStageTimeout: XLua.DelegateBridge;
        // __Hotfix0_get_onRewardTimeout: XLua.DelegateBridge;
        // __Hotfix0_set_onRewardTimeout: XLua.DelegateBridge;
        // __Hotfix0_get_eventPool: XLua.DelegateBridge;
        // __Hotfix0_CreateBridge: XLua.DelegateBridge;
        // __Hotfix0_OnLoaded: XLua.DelegateBridge;
        // __Hotfix0_OnStageTimeout: XLua.DelegateBridge;
        // __Hotfix0_OnRewardTimeout: XLua.DelegateBridge;
        // __Hotfix0_HideCoroutine: XLua.DelegateBridge;
        // __Hotfix0_EventOnZoneClicked: XLua.DelegateBridge;
      }
      export interface Act9D0StageEntry {
        ANIM_NORMAL_START_KEY: System.String;
        ANIM_ALL_TIMEOUT_START_KEY: System.String;
        ANIM_SKIP_KEY: System.String;
        // _animatorList: System.Collections.Generic.List<UnityEngine.Animator>;
        _view: Torappu.Activity.Act9D0.Act9D0EntryView;
        _coinView: Torappu.Activity.Act9D0.Act9D0CoinView;
        _zoneGroupView: Torappu.Activity.Act9D0.Act9D0EntryZoneGroupView;
        // _favorUpTrackPoint: Torappu.UI.UICommonTrackPoint;
        _missionTrackPoint: Torappu.Activity.UIActTrackPoint;
        // _buttonShop: UnityEngine.UI.Button;
        // _buttonMission: UnityEngine.UI.Button;
        // _topMenuContainer: UnityEngine.RectTransform;
        // _favorUpObj: UnityEngine.GameObject;
        // _noFavorUpObj: UnityEngine.GameObject;
        _useCommonFavorState: System.Boolean;
        // _enableWhenBinded: UnityEngine.GameObject[];
        // m_topMenu: Torappu.UI.CommonTopMenu;
        // m_isLoaded: System.Boolean;
        // m_isAnimPlayed: System.Boolean;
        // m_isBindToParent: System.Boolean;
        // <>f__am$cache0: System.Action;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnLoaded: XLua.DelegateBridge;
        // __Hotfix0_OnBindToParent: XLua.DelegateBridge;
        // __Hotfix0__EventOnStageTimeout: XLua.DelegateBridge;
        // __Hotfix0__EventOnRewardTimeout: XLua.DelegateBridge;
        // __Hotfix0_EventOnShopClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnMissionClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnReplicateClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnMedalGroupClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnFavorUpClicked: XLua.DelegateBridge;
        // __Hotfix0_EventOnZoneAllTimeoutClicked: XLua.DelegateBridge;
        // __Hotfix0_Awake: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
        // __Hotfix0__InitTopMenu: XLua.DelegateBridge;
        // __Hotfix0__TryStartAnim: XLua.DelegateBridge;
        // __Hotfix0__UpdateBindToParentStatus: XLua.DelegateBridge;
      }
      export interface Act9D0StageFloat {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act9D0StageMapDecor {
        _coinView: Torappu.Activity.Act9D0.Act9D0CoinView;
        _zoneGroupView: Torappu.Activity.Act9D0.Act9D0MapZoneGroupView;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnLoaded: XLua.DelegateBridge;
        // __Hotfix0_EventOnShopClicked: XLua.DelegateBridge;
      }
      export interface Activity9D0ResHolder {
        // _homeSprite: UnityEngine.Sprite;
        // _homeMultiSprite: UnityEngine.Sprite;
        _zoneHomeRes: Torappu.Activity.ActivityResHolder.ZoneHomeRes;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_topbarSprite: XLua.DelegateBridge;
        // __Hotfix0_get_homeSprite: XLua.DelegateBridge;
        // __Hotfix0_get_homeSpriteMultiMode: XLua.DelegateBridge;
        // __Hotfix0_get_zoneHomeRes: XLua.DelegateBridge;
      }
      export interface Act9D0EmptyState {
        // <>f__am$cache0: System.Action<Torappu.UI.IStateBean>;
        // <>f__am$cache1: System.Action<Torappu.UI.IStateBean>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_RegisterToDataListener: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnResume: XLua.DelegateBridge;
      }
      export interface Act9D0MissionState {
        _view: Torappu.Activity.Act9D0.Act9D0MissionBaseView;
        _coinView: Torappu.Activity.Act9D0.Act9D0CoinView;
        // _topMenuContainer: UnityEngine.RectTransform;
        // m_stateBean: Torappu.Activity.Act9D0.Act9D0MissionStateBean;
        // m_topMenu: Torappu.UI.CommonTopMenu;
        // m_inited: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_EventOnMissionObjClicked: XLua.DelegateBridge;
        // __Hotfix0__ReceiveItemsCoroutine: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
      }
      export interface Act9D0MissionSubState {
        // m_stateBean: Torappu.Activity.Act9D0.Act9D0MissionStateBean;
        _view: Torappu.Activity.Act9D0.Act9D0MissionSubView;
        _subView: Torappu.Activity.Act9D0.Act9D0SubMissionView;
        // _topMenuContainer: UnityEngine.RectTransform;
        // m_topMenu: Torappu.UI.CommonTopMenu;
        // m_inited: System.Boolean;
        // m_cacheId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_EventOnMissionObjClicked: XLua.DelegateBridge;
        // __Hotfix0_OpenDetail: XLua.DelegateBridge;
        // __Hotfix0_RegisterToDataListener: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_OnResume: XLua.DelegateBridge;
        // __Hotfix0__ReceiveItemsCoroutine: XLua.DelegateBridge;
      }
      export interface Act9D0NewsState {
        _view: Torappu.Activity.Act9D0.Act9D0NewsView;
        // _groupAnimation: Torappu.UI.AnimationWrapper;
        // _detailAnimation: Torappu.UI.AnimationWrapper;
        // m_stateBean: Torappu.Activity.Act9D0.Act9D0NewsStateBean;
        // m_cachedNewsId: System.String;
        NEWS_LIST_ANIM: System.String;
        NEWS_DETAIL_ANIM: System.String;
        // m_detailOut: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_EventOnNewsObjClicked: XLua.DelegateBridge;
        // __Hotfix0__RenderDetailPart: XLua.DelegateBridge;
        // __Hotfix0__ResetAnimation: XLua.DelegateBridge;
        // __Hotfix0_ClosePage: XLua.DelegateBridge;
      }
      export interface Act9D0SubMissionDetailState {
        _detailView: Torappu.Activity.Act9D0.Act9D0SubMissionDetailView;
        // m_stateBean: Torappu.Activity.Act9D0.Act9D0SubMissionStateBean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_EventOnMissionObjClicked: XLua.DelegateBridge;
        // __Hotfix0__ReceiveItemsCoroutine: XLua.DelegateBridge;
      }
      export interface Act9D0CoinView {
        // _textCoin: UnityEngine.UI.Text;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_CheckIfDataChanged: XLua.DelegateBridge;
        // __Hotfix0_OnPlayerDataChanged: XLua.DelegateBridge;
        // __Hotfix0__TryUpdateCoin: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
        // __Hotfix0_OnDisable: XLua.DelegateBridge;
        // __Hotfix0_OnDestroy: XLua.DelegateBridge;
      }
      export interface Act9D0EntryMissionView {
        // _missionText: UnityEngine.UI.Text;
        // _progressBar: UnityEngine.UI.Image;
        // m_missionNum: System.Int32;
        // m_missionSum: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnLoaded: XLua.DelegateBridge;
        // __Hotfix0_BeforeUnload: XLua.DelegateBridge;
        // __Hotfix0__LoadMissionData: XLua.DelegateBridge;
        // __Hotfix0__TryLoadMissionData: XLua.DelegateBridge;
        // __Hotfix0__TryUpdateMission: XLua.DelegateBridge;
      }
      export interface Act9D0EntryView {
        // _textStageTimeDesc: UnityEngine.UI.Text;
        // _textRewardTimeDesc: UnityEngine.UI.Text;
        _stage: Torappu.Activity.AbstractStageTime;
        // _textTime: UnityEngine.UI.Text;
        // _textRemainTime: UnityEngine.UI.Text;
        _remainTime: Torappu.Activity.AbstractRemainTime;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
      }
      export interface Act9D0EntryZoneGroupView {
        // _panelAllTimeout: UnityEngine.GameObject;
        _disableAllTimeout: System.Boolean;
        _zoneViewList: System.Collections.Generic.List<Torappu.Activity.Act9D0.Act9D0EntryZoneView>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnValueChanged: XLua.DelegateBridge;
      }
      export interface Act9D0EntryZoneView {
        _zoneId: System.String;
        // _buttonSelf: UnityEngine.UI.Button;
        // _textInfo: UnityEngine.UI.Text;
        // _imageNew: UnityEngine.GameObject;
        // _panelAccessible: UnityEngine.GameObject;
        // _panelTimeout: UnityEngine.GameObject;
        // _panelLocked: UnityEngine.GameObject;
        // _onClicked: Torappu.UI.UIStringEvent;
        _stagePushAudio: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_zoneId: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0_EventOnClicked: XLua.DelegateBridge;
      }
      export interface Act9D0FavorUpCharView {
        // _imageChar: UnityEngine.UI.Image;
        // _imageBkg: UnityEngine.UI.Image;
        // _textName: UnityEngine.UI.Text;
        // _spriteBkg4: UnityEngine.Sprite;
        // _spriteBkg5: UnityEngine.Sprite;
        // _spriteBkg6: UnityEngine.Sprite;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
      }
      export interface Act9D0FavorUpView {
        // _newUpGroup: Torappu.UI.SimpleLayoutContent;
        // _upGroup: Torappu.UI.SimpleLayoutContent;
        // _imageNew: UnityEngine.GameObject;
        // _panelSplit: UnityEngine.GameObject;
        // m_newUpCharList: System.Collections.Generic.List<Torappu.Activity.Act9D0.Act9D0FavorUpView.Act9D0FavorUpCharData>;
        // m_upCharList: System.Collections.Generic.List<Torappu.Activity.Act9D0.Act9D0FavorUpView.Act9D0FavorUpCharData>;
        // m_newUpGroupAdapter: Torappu.Activity.Act9D0.Act9D0FavorUpView.Act9D0FavorUpGroupViewAdapter;
        // m_upGroupAdapter: Torappu.Activity.Act9D0.Act9D0FavorUpView.Act9D0FavorUpGroupViewAdapter;
        // m_inited: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
        // __Hotfix0__CompareFavorUpChar: XLua.DelegateBridge;
      }
      export interface Act9D0MapZoneGroupView {
        _zoneViewList: System.Collections.Generic.List<Torappu.Activity.Act9D0.Act9D0MapZoneView>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnValueChanged: XLua.DelegateBridge;
      }
      export interface Act9D0MapZoneView {
        _zoneId: System.String;
        // _textTitle: UnityEngine.UI.Text;
        // _buttonSelf: UnityEngine.UI.Button;
        // _imageSelected: UnityEngine.GameObject;
        // _imageIcon: UnityEngine.GameObject;
        // _panelTimeout: UnityEngine.GameObject;
        // _panelLocked: UnityEngine.GameObject;
        // _onClicked: Torappu.UI.UIStringEvent;
        _needDisableImageIcon: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_zoneId: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0_EventOnClicked: XLua.DelegateBridge;
      }
      export interface Act9D0MissionBaseView {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface MissionObjViewHolder {
        view: Torappu.Activity.Act9D0.Act9D0MissionObjView;
      }
      export interface Act9D0MissionGroupAdapter {
        // _missionObjPrefab: UnityEngine.GameObject;
        // _onMissionObjClicked: Torappu.UI.UIStringEvent;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_ViewConstructor: XLua.DelegateBridge;
        // __Hotfix0_UpdateView: XLua.DelegateBridge;
      }
      export interface Act9D0MissionObjView {
        _itemCardScale: System.Single;
        // _textDescCompletedColor: UnityEngine.Color;
        // _textDescInprogressColor: UnityEngine.Color;
        // _textProgressValueColor: UnityEngine.Color;
        // _textProgressTargetColor: UnityEngine.Color;
        // _textDesc: UnityEngine.UI.Text;
        // _textProgress: UnityEngine.UI.Text;
        // _sliderProgress: UnityEngine.UI.Slider;
        // _panelCompleted: UnityEngine.GameObject;
        // _panelInprogress: UnityEngine.GameObject;
        // _imageOutline: UnityEngine.GameObject;
        // _imageRewardGot: UnityEngine.GameObject;
        // _buttonSelf: UnityEngine.UI.Button;
        // _notHaveImgList: System.Collections.Generic.List<UnityEngine.GameObject>;
        // _itemContainerList: System.Collections.Generic.List<UnityEngine.RectTransform>;
        // _replicateContainerList: System.Collections.Generic.List<UnityEngine.RectTransform>;
        // _replicateIconList: System.Collections.Generic.List<UnityEngine.GameObject>;
        // _replicateAnimationList: System.Collections.Generic.List<Torappu.UI.AnimationWrapper>;
        _hideSlideProgressWhenAbleToGet: System.Boolean;
        SHINING_ANIM: System.String;
        // m_missionId: System.String;
        // m_itemCardList: System.Collections.Generic.List<Torappu.UI.UIItemCard>;
        // m_replicateItemCardList: System.Collections.Generic.List<Torappu.UI.UIItemCard>;
        // m_tweens: System.Collections.Generic.List<Torappu.Activity.Act9D0.Act9D0MissionObjView.Act9D0MissionReplicateTweenWrapper>;
        // m_useAnimationWrapper: System.Boolean;
        // m_isInited: System.Boolean;
        // <onClicked>k__BackingField: Torappu.UI.UIStringEvent;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_onClicked: XLua.DelegateBridge;
        // __Hotfix0_set_onClicked: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0__RenderItemList: XLua.DelegateBridge;
        // __Hotfix0_EventOnClicked: XLua.DelegateBridge;
        // __Hotfix0__EventOnItemClicked: XLua.DelegateBridge;
        // __Hotfix0__InitIfNot: XLua.DelegateBridge;
      }
      export interface Act9D0MissionSubView {
        _missionGroupAdapter: Torappu.Activity.Act9D0.Act9D0MissionGroupAdapter;
        // _itemKeyName: UnityEngine.UI.Text;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
      }
      export interface Act9D0MissionView {
        // _textProgress: UnityEngine.UI.Text;
        _missionGroupAdapter: Torappu.Activity.Act9D0.Act9D0MissionGroupAdapter;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
      }
      export interface Act9D0NewsDetailObjView {
        // _titlePart: UnityEngine.GameObject;
        // _imgPart: UnityEngine.GameObject;
        // _textPart: UnityEngine.GameObject;
        // _titleText: UnityEngine.UI.Text;
        // _titleAuthor: UnityEngine.UI.Text;
        // _readCount: UnityEngine.UI.Text;
        // _imgPartImg: UnityEngine.UI.Image;
        // _textPartText: UnityEngine.UI.Text;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_RenderTitlePart: XLua.DelegateBridge;
        // __Hotfix0_RenderTextPart: XLua.DelegateBridge;
        // __Hotfix0_RenderImgPart: XLua.DelegateBridge;
        // __Hotfix0__CalReadCount: XLua.DelegateBridge;
      }
      export interface NewsObjViewHolder {
        view: Torappu.Activity.Act9D0.Act9D0NewsObjView;
      }
      export interface Act9D0NewsGroupAdapter {
        // _newsObjPrefab: UnityEngine.GameObject;
        // _onNewsObjClicked: Torappu.UI.UIStringEvent;
        cachedNewsChosenId: System.String;
        cachedActId: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_ViewConstructor: XLua.DelegateBridge;
        // __Hotfix0_UpdateView: XLua.DelegateBridge;
      }
      export interface Act9D0NewsObjView {
        // _newsLogo: UnityEngine.UI.Image;
        // _newsImg: UnityEngine.UI.Image;
        // _unread: UnityEngine.GameObject;
        // _newsTitle: UnityEngine.UI.Text;
        // _newsContent: UnityEngine.UI.Text;
        // _constText: UnityEngine.UI.Text;
        // _chosenObj: UnityEngine.GameObject;
        // _lightColor: UnityEngine.Color;
        // _darkColor: UnityEngine.Color;
        // m_newsId: System.String;
        // <onClicked>k__BackingField: Torappu.UI.UIStringEvent;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_onClicked: XLua.DelegateBridge;
        // __Hotfix0_set_onClicked: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0_EventOnClicked: XLua.DelegateBridge;
      }
      export interface Act9D0NewsUnreadView {
        // _unreadObj: UnityEngine.GameObject;
        // _noUnreadObj: UnityEngine.GameObject;
        // _unreadTitle: UnityEngine.GameObject;
        // _unreadCount: UnityEngine.UI.Text;
        // _showAnim: Torappu.UI.UIAnimationLocation;
        // m_displayCoroutine: Torappu.CoroutineOnEnable;
        UNREAD_ANIM: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
        // __Hotfix0_OnDisable: XLua.DelegateBridge;
        // __Hotfix0_OnLoaded: XLua.DelegateBridge;
        // __Hotfix0_BeforeUnload: XLua.DelegateBridge;
        // __Hotfix0__OnNewsUpdated: XLua.DelegateBridge;
        // __Hotfix0__OnAnimationPlay: XLua.DelegateBridge;
        // __Hotfix0__DisplayCoroutine: XLua.DelegateBridge;
        // __Hotfix0__StatusBegin: XLua.DelegateBridge;
        // __Hotfix0__StatusEnd: XLua.DelegateBridge;
        // __Hotfix0_EventOnNewsClicked: XLua.DelegateBridge;
      }
      export interface Act9D0NewsView {
        _newsAdapter: Torappu.Activity.Act9D0.Act9D0NewsGroupAdapter;
        // _detailContent: UnityEngine.UI.ScrollRect;
        _titleObj: Torappu.Activity.Act9D0.Act9D0NewsDetailObjView;
        _textObj: Torappu.Activity.Act9D0.Act9D0NewsDetailObjView;
        _imgObj: Torappu.Activity.Act9D0.Act9D0NewsDetailObjView;
        // _detailMainLogo: UnityEngine.UI.Image;
        // _scrollRect: Torappu.UI.LoopScrollRect;
        cachedActId: System.String;
        cachedBean: Torappu.Activity.Act9D0.Act9D0NewsStateBean;
        // m_cacheTween: DG.Tweening.Tween;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Render: XLua.DelegateBridge;
        // __Hotfix0_RenderDetail: XLua.DelegateBridge;
        // __Hotfix0__ClearContent: XLua.DelegateBridge;
        // __Hotfix0_ScrollToGroupPos: XLua.DelegateBridge;
      }
      export interface Act9D0SubMissionDetailView {
        // _icon: UnityEngine.UI.Image;
        // _ableToGet: UnityEngine.GameObject;
        // _alreadyGet: UnityEngine.GameObject;
        // _slider: UnityEngine.UI.Slider;
        // _schedule: UnityEngine.UI.Text;
        // _titleText: UnityEngine.UI.Text;
        // _contentText: UnityEngine.UI.Text;
        // _iconList: System.Collections.Generic.List<UnityEngine.Sprite>;
        // _cardContainer: UnityEngine.Transform;
        _scaleFactor: System.Single;
        // m_itemCard: Torappu.UI.UIItemCard;
      }
      export interface Act9D0SubMissionItem {
        _subMissionId: System.String;
        // _hasAllPart: UnityEngine.GameObject;
        // _fillAmount: UnityEngine.UI.Image;
        // _clickEvent: Torappu.UI.UIStringEvent;
      }
      export interface Act9D0SubMissionView {
        _missionItemList: System.Collections.Generic.List<Torappu.Activity.Act9D0.Act9D0SubMissionItem>;
        // _subMissionText: UnityEngine.UI.Text;
      }
      export interface Act9D0FavorUpTrackPointModel {
        // m_hasNewUp: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_isShow: XLua.DelegateBridge;
        // __Hotfix0_UpdateState: XLua.DelegateBridge;
      }
      export interface Act9D0MissionStateBean {
        // missionModelList: System.Collections.Generic.List<Torappu.UI.Mission.MissionViewModel>;
        // <completedMissionCount>k__BackingField: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_subMissionList: XLua.DelegateBridge;
        // __Hotfix0_get_notSubMissionList: XLua.DelegateBridge;
        // __Hotfix0_get_completedMissionCount: XLua.DelegateBridge;
        // __Hotfix0_set_completedMissionCount: XLua.DelegateBridge;
        // __Hotfix0_get_missionCount: XLua.DelegateBridge;
        // __Hotfix0_LoadData: XLua.DelegateBridge;
        // __Hotfix0__CompareMission: XLua.DelegateBridge;
      }
      export interface SubMissionViewModel {
        // viewModel: Torappu.UI.Mission.MissionViewModel;
        subMissionInfo: Torappu.Act9D0Data.SubMissionInfo;
      }
      export interface Act9D0MissionTrackPointModel {
        // m_hasCanGetRewardMission: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_isShow: XLua.DelegateBridge;
        // __Hotfix0_UpdateState: XLua.DelegateBridge;
      }
      export interface Act9D0NewsStateBean {
        newsModelList: System.Collections.Generic.List<Torappu.Activity.Act9D0.Act9D0NewsViewModel>;
        // <unReadNewsCount>k__BackingField: System.Int32;
        // <unLockedCount>k__BackingField: System.Int32;
        // <>f__am$cache0: System.Comparison<Torappu.Activity.Act9D0.Act9D0NewsViewModel>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_unReadNewsCount: XLua.DelegateBridge;
        // __Hotfix0_set_unReadNewsCount: XLua.DelegateBridge;
        // __Hotfix0_get_unLockedCount: XLua.DelegateBridge;
        // __Hotfix0_set_unLockedCount: XLua.DelegateBridge;
        // __Hotfix0_LoadData: XLua.DelegateBridge;
        // __Hotfix0_UpdateNewsStatus: XLua.DelegateBridge;
        // __Hotfix0_getViewModel: XLua.DelegateBridge;
      }
      export interface Act9D0NewsViewModel {
        readTs: System.Int64;
      }
      export interface Act9D0SubMissionStateBean {
        subMissionViewModel: Torappu.Activity.Act9D0.SubMissionViewModel;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface Act9D0ZoneDescViewModel {
        zoneId: System.String;
        zoneName: System.String;
        iconId: System.String;
        unlockText: System.String;
        startTime: System.Int64;
        isStageLocked: System.Boolean;
        isTimeLocked: System.Boolean;
        isTimeout: System.Boolean;
        isNew: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_isLocked: XLua.DelegateBridge;
        // __Hotfix0_get_isAccessible: XLua.DelegateBridge;
        // __Hotfix0_Create: XLua.DelegateBridge;
      }
      export interface Act9D0ZoneDescGroupViewModel {
        zoneDescModelList: System.Collections.Generic.List<Torappu.Activity.Act9D0.Act9D0ZoneDescViewModel>;
        // <selectedZoneId>k__BackingField: System.String;
        // <isAllTimeout>k__BackingField: System.Boolean;
      }
      export interface Act9D0ZoneDescGroupViewProperty {
      }
      export interface Act9D0BannableObject {
        _key: System.String;
        // _sprites: System.Collections.Generic.List<UnityEngine.Sprite>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_key: XLua.DelegateBridge;
        // __Hotfix0_get_sprites: XLua.DelegateBridge;
      }
      export interface Act9D0EntryZoneDeco {
        TRACK_VISIBILITY_FRAME_CNT: System.Int32;
        _zoneView: Torappu.Activity.Act9D0.Act9D0EntryZoneView;
        // m_frameCounter: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
        // __Hotfix0__TrackVisibility: XLua.DelegateBridge;
      }
      export namespace Act9D0StageController {
        export enum Act9D0Event {
          NONE = "NONE",
          NEWS_UPDATED = "NEWS_UPDATED",
          MISSION_UPDATED = "MISSION_UPDATED",
          BEFORE_HIDE_EFFECT = "BEFORE_HIDE_EFFECT",
        }
        export interface Bridge {
        }
      }
      export namespace Act9D0StageEntry {
      }
      export namespace Act9D0MissionState {
      }
      export namespace Act9D0MissionSubState {
      }
      export namespace Act9D0NewsState {
      }
      export namespace Act9D0SubMissionDetailState {
      }
      export namespace Act9D0FavorUpView {
        export interface Act9D0FavorUpCharData {
          charId: System.String;
          index: System.Int32;
          rarity: Torappu.RarityRank;
        }
        export interface Act9D0FavorUpGroupViewAdapter {
          // <dataSet>k__BackingField: System.Collections.Generic.List<Torappu.Activity.Act9D0.Act9D0FavorUpView.Act9D0FavorUpCharData>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_dataSet: XLua.DelegateBridge;
          // __Hotfix0_set_dataSet: XLua.DelegateBridge;
          // __Hotfix0_get_count: XLua.DelegateBridge;
          // __Hotfix0_RenderView: XLua.DelegateBridge;
        }
      }
      export namespace Act9D0MissionObjView {
        export interface Act9D0MissionReplicateTweenWrapper {
          ANIMATION_ANIM_SPEED: System.Single;
          // m_itemCanvasGroup: UnityEngine.CanvasGroup;
          // m_replicateCanvasGroup: UnityEngine.CanvasGroup;
          // m_tween: DG.Tweening.Sequence;
          // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
          // <>f__am$cache1: DG.Tweening.Core.DOGetter<System.Single>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_SetCanvasGroup: XLua.DelegateBridge;
          // __Hotfix0_SetTween: XLua.DelegateBridge;
          // __Hotfix0_KillTween: XLua.DelegateBridge;
        }
      }
      export namespace Act9D0NewsUnreadView {
      }
      export namespace Act9D0SubMissionDetailView {
      }
      export namespace Act9D0EntryZoneDeco {
      }
    }
    export namespace ActivityUtil {
    }
    export namespace ActivityResHolder {
      export interface ZoneHomeRes {
        EMPTY: Torappu.Activity.ActivityResHolder.ZoneHomeRes;
        // mainColor: UnityEngine.Color;
        // shopIcon: UnityEngine.Sprite;
      }
    }
    export namespace ActivityStageBindCompsToPage {
      export interface RendererCollection {
        // m_closure: Torappu.Activity.ActivityStageBindCompsToPage;
        // m_rendererLayerCache: System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<UnityEngine.Renderer,System.String>>;
        // m_bindedCanvases: System.Collections.Generic.List<UnityEngine.Canvas>;
        // m_registeredPage: Torappu.UI.UIPage;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_AdjustToTargetLayer: XLua.DelegateBridge;
        // __Hotfix0_RestoreLayers: XLua.DelegateBridge;
        // __Hotfix0_Dispose: XLua.DelegateBridge;
        // __Hotfix0__InitCacheIfNot: XLua.DelegateBridge;
        // __Hotfix0__BindCanvases: XLua.DelegateBridge;
        // __Hotfix0__UnbindCanvases: XLua.DelegateBridge;
      }
    }
    export namespace ActivityAssetMap {
      export interface InternalData {
        isTrimed: System.Boolean;
        code: System.Int32;
        aspects: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.Dictionary<System.String,Torappu.Activity.ActivityAssetMap.InternalData.AssetInfo>>;
      }
      export namespace InternalData {
        export interface AssetInfo {
          resPath: System.String;
          activity: System.String;
        }
      }
    }
    export namespace ActivityStartBattleButtonStyle {
      export interface Style {
        id: System.String;
        // costIcon: UnityEngine.Sprite;
        // buttonImg: UnityEngine.Sprite;
        // costBkg: UnityEngine.Sprite;
      }
    }
    export namespace ActCommonFavorUpStateBean {
      export interface Input {
        charIdList: System.Collections.Generic.List<System.String>;
        actId: System.String;
      }
    }
    export namespace ActCommonFavorUpView {
      export interface ActFavorUpCharData {
        charId: System.String;
        index: System.Int32;
        rarity: Torappu.RarityRank;
      }
      export interface ActFavorUpGroupViewAdapter {
        // <dataSet>k__BackingField: System.Collections.Generic.List<Torappu.Activity.ActCommonFavorUpView.ActFavorUpCharData>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_dataSet: XLua.DelegateBridge;
        // __Hotfix0_set_dataSet: XLua.DelegateBridge;
        // __Hotfix0_get_count: XLua.DelegateBridge;
        // __Hotfix0_RenderView: XLua.DelegateBridge;
      }
    }
    export namespace MileStoneHolder {
    }
    export namespace MileStoneState {
    }
    export namespace ActCommonReplicateItem {
    }
    export namespace ActCommonReplicateView {
      export interface Adapter {
        data: Torappu.ReplicateTable;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_count: XLua.DelegateBridge;
        // __Hotfix0_RenderView: XLua.DelegateBridge;
      }
    }
    export namespace ActivityCommonCheckinDotView {
      export interface DotViewConfigGroup {
        // normalDot: UnityEngine.Sprite;
        // bigDot: UnityEngine.Sprite;
        // acceptableDot: UnityEngine.Sprite;
        // outlineColor: UnityEngine.Color;
        // notGetColor: UnityEngine.Color;
        // onDotClick: System.Action<System.Int32,System.Int32>;
      }
    }
    export namespace ActivityCommonCheckinEntry {
    }
    export namespace ActivityCommonCheckinV2Item {
      export interface ItemConfigGroup {
        // mainColor: UnityEngine.Color;
        // logoColor: UnityEngine.Color;
        // acceptableLogoColor: UnityEngine.Color;
        // maskColor: UnityEngine.Color;
        // rewardBgColor: UnityEngine.Color;
        // rewardMaskColor: UnityEngine.Color;
        // rewardDotColor: UnityEngine.Color;
        // lightColor: UnityEngine.Color;
        // decSprite: UnityEngine.Sprite;
      }
      export interface ItemObjConfig {
        scale: System.Single;
        preferredHeight: System.Int32;
      }
    }
  }
  export namespace Fx {
    export interface FxDelay {
      DELAY_FUNC: System.String;
      _delayTime: System.Single;
      // m_playbackSpeed: System.Single;
      // m_isWaiting: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_playbackSpeed: XLua.DelegateBridge;
      // __Hotfix0_set_playbackSpeed: XLua.DelegateBridge;
      // __Hotfix0_OnEnable: XLua.DelegateBridge;
      // __Hotfix0_ForceToEnd: XLua.DelegateBridge;
      // __Hotfix0_OnRecycle: XLua.DelegateBridge;
      // __Hotfix0__DelayFunc: XLua.DelegateBridge;
    }
    export interface FxSpritSheetEffect {
      row: System.Int32;
      column: System.Int32;
      duration: System.Single;
      loop: System.Boolean;
      // m_time: System.Single;
      // m_perFrameTime: System.Single;
      // m_totalFrameNum: System.Int32;
      HG_FX_OUT_CTRL_PROP: System.Int32;
      HG_FX_SPRITE_SHEET_PARAM_PROP: System.Int32;
      // m_varyingMaterial: UnityEngine.Material;
    }
    export interface FxUVTweener {
      MATERIAL_KEY: System.String;
      SPEED_SCALE: System.Single;
      keepInitOffset: System.Boolean;
      useSharedMaterial: System.Boolean;
      protectMainUV: System.Boolean;
      xspeed: System.Single;
      yspeed: System.Single;
      useSecondMap: System.Boolean;
      protectSecondUV: System.Boolean;
      secondMapName: System.String;
      secondXSpeed: System.Single;
      secondYSpeed: System.Single;
      // m_sharedMaterial: UnityEngine.Material;
      // m_renderer: UnityEngine.Renderer;
      // m_v2: UnityEngine.Vector2;
      // m_secondMapST: UnityEngine.Vector4;
      // m_secondMapSTProp: System.String;
    }
    export interface FxUVTweenerAdvance {
      MATERIAL_KEY: System.String;
      SPEED_SCALE: System.Single;
      tweenRepeat: System.Boolean;
      tweenAnmTime: System.Single;
      keepInitOffset: System.Boolean;
      useSharedMaterial: System.Boolean;
      xspeed: System.Single;
      yspeed: System.Single;
      useSecondMap: System.Boolean;
      secondMapName: System.String;
      secondXSpeed: System.Single;
      secondYSpeed: System.Single;
      // m_time: System.Single;
      // m_sharedMaterial: UnityEngine.Material;
      // m_renderer: UnityEngine.Renderer;
      // m_v2: UnityEngine.Vector2;
      // m_secondMapST: UnityEngine.Vector4;
      // m_secondMapSTProp: System.String;
    }
    export interface BasicEffect {
    }
    export interface EffectImportData {
      _importName: System.String;
      _resourceName: System.String;
      _sortingLayerId: Torappu.SortingLayerWrapper;
      _removeTopAnimator: System.Boolean;
    }
  }
  export namespace Battle {
    export interface BattleStageInfo {
      EMPTY: Torappu.Battle.BattleStageInfo;
      stageId: System.String;
      code: System.String;
      name: System.String;
      levelId: System.String;
      zoneId: System.String;
      canBattleReplay: System.Boolean;
      difficulty: Torappu.LevelData.Difficulty;
      apCost: System.Int32;
      etCost: System.Int32;
      etFailReturn: System.Int32;
      etItemId: System.String;
      stageType: Torappu.StageType;
      loadingPicId: System.String;
      canPractice: System.Boolean;
      loseGoldGain: System.Int32;
      loseExpGain: System.Int32;
      stateBeforeBattle: Torappu.PlayerStageState;
      isPredefineFlag: System.Boolean;
    }
    export interface BattleActivityMeta {
      activityId: System.String;
      overrideBattleFinish: System.Boolean;
      meta: Torappu.DataBundle;
      backAsHomeAct: System.Boolean;
    }
    export interface BattleStageMeta {
      DEFAULT: Torappu.Battle.BattleStageMeta;
      isCrisis: System.Boolean;
    }
    export interface BattleFinishIllust {
      EMPTY: Torappu.Battle.BattleFinishIllust;
      instId: System.Int32;
      overrideSkin: Torappu.CharUISkinStruct;
      overrideCharWord: Torappu.CharWordData;
    }
    export interface GameModeMeta {
      DEFAULT: Torappu.Battle.GameModeMeta;
      modeType: Torappu.Battle.GameModeMeta.GameModeType;
      isDeterministic: System.Boolean;
      playerSide: Torappu.PlayerSide;
      extraData: System.Object;
    }
    export interface BattleInOut {
      // <input>k__BackingField: Torappu.Battle.BattleInOut.InParams;
      // <output>k__BackingField: Torappu.Battle.BattleInOut.OutParams;
      // <sceneAssetPath>k__BackingField: System.String;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_input: XLua.DelegateBridge;
      // __Hotfix0_set_input: XLua.DelegateBridge;
      // __Hotfix0_get_hasInput: XLua.DelegateBridge;
      // __Hotfix0_SetInParams: XLua.DelegateBridge;
      // __Hotfix0_get_output: XLua.DelegateBridge;
      // __Hotfix0_set_output: XLua.DelegateBridge;
      // __Hotfix0_SetOutParams: XLua.DelegateBridge;
      // __Hotfix0_Clear: XLua.DelegateBridge;
      // __Hotfix0_get_sceneAssetPath: XLua.DelegateBridge;
      // __Hotfix0_set_sceneAssetPath: XLua.DelegateBridge;
    }
    export interface BattlePluginConsts {
      ACTIVITY_UI_PLUGIN_ASSET_ID: System.String;
      ACTIVITY_CAMERA_PLUGIN_ASSET_ID: System.String;
    }
    export interface BattleOptions {
      // MOVE_MULTIPLIER: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
      // COST_INCREASE_TIME: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
      // MAX_COST: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      // INITIAL_COST: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      // CHARACTER_LIMIT: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      // MAX_LIFE_POINT: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      BATTLE_ROLLBACK_SPEED: System.Boolean;
      STEERING_ENABLED: System.Boolean;
      IS_TRAINING_LEVEL: System.Boolean;
      IS_LIMIT_FPS: System.Boolean;
      // GLOBAL_UNIT_COLOR: UnityEngine.Color;
      // GLOBAL_BUILDABLE_COLOR: UnityEngine.Color;
    }
    export interface Consts {
      MODIFIER_CRIT_THRESHOLD: System.Single;
      BLACKBOARD_PREFIX_TO_STRIP_FORMAT: System.String;
      // CAMERA_VIEWS: UnityEngine.Vector3[];
      MAP_MAX_SQRMAGNITUDE: Torappu.FP;
      MAX_UNITS: System.Int32;
      MAX_SELECTED_TARGET: System.Int32;
      MAX_SELECTED_TILE: System.Int32;
      UNIT_HP_RECOVERY_DELTA: System.Single;
      UNIT_EP_RECOVERY_DELTA: System.Single;
      BLOCK_RADIUS: System.Single;
      BLOCK_RADIUS_SQUARE: System.Single;
      CHARACTER_DEAD_TIME: System.Single;
      CHARACTER_BORN_TIME: System.Single;
      ENEMY_DEAD_TIME: System.Single;
      ENEMY_BORN_TIME: System.Single;
      CHARACTER_RESPAWN_COST_MULTIPLIER: System.Single;
      CHARACTER_RESPAWN_COST_MAX_MULTIPLIER: System.Single;
      MIN_ANIM_SPEED: System.Single;
      MAX_ANIM_SPEED: System.Single;
      PRELOAD_ENTITY_LIST_POOL_SIZE: System.Int32;
      SPINE_VERTEX_COUNT_FOR_CHARACTER_RECOMMEND: System.Int32;
      SPINE_VERTEX_COUNT_FOR_CHARACTER_MAX: System.Int32;
      SPINE_VERTEX_COUNT_FOR_ENEMY_MAX: System.Int32;
      SPINE_VERTEX_COUNT_FOR_TOKEN_MAX: System.Int32;
      ROUTE_REACH_DISTANCE: System.Single;
      ROUTE_MIN_CHANGE_FACE_DISTANCE_SQR: System.Single;
      ROUTE_GOPASS_DISTANCE: System.Single;
      TILE_HALF_SIZE: System.Single;
      MAX_STEERING_FACTOR: System.Single;
      MAX_STEERING_FORCE: System.Single;
      TILE_OBSTACLE_LIKE_MOVE_COST: System.Int32;
      PROJECTILE_REACHED_DISTANCE: System.Single;
      TIMESCALE_PER_SPEED_LEVELS: System.Single[];
      ALL_ENTITY_CATEGORIES: Torappu.Battle.EntityCategory;
      GRAVITY: System.Single;
      FRICTION_FACTOR: System.Single;
      UNBALANCE_MIN_SPEED: System.Single;
      UNBALANCE_PROTECT_TIME: System.Single;
      KNOCKBACK_FACTOR: System.Single;
      PULL_FACTOR: System.Single;
      HARPOON_BROKEN_FORCE_LEVEL_OFFSET: System.Single;
      HARPOON_BROKEN_DURATION: System.Single;
      PROJECTILE_NAME_REFIX: System.String[];
    }
    export interface Defaults {
      WITHDRAW_COST_RECOVER_RATIO: System.Single;
      MAX_WITHDRAW_COST_RATIO_OF_RAW_COST: System.Single;
      UNIT_SP_REDUCE_DELTA: System.Int32;
      UNIT_FOUR_DIRECTION: Torappu.SharedConsts.Direction;
      UNIT_L_OR_R_DIRECTION: Torappu.SharedConsts.Direction;
      SPINE_STANDARD_FACE: Torappu.SharedConsts.Direction;
      PROJECTILE_MAIN_DIRECTION: Torappu.SharedConsts.Direction;
      MESH_STANDARD_DIRECTION: Torappu.SharedConsts.Direction;
      // EFFECT_DIRECTION: UnityEngine.Vector3;
      EMPTY_ACTION_ARRAY: Torappu.Battle.Action.ActionNode[];
      EMPTY_STRING_ARRAY: System.String[];
      UNIT_COLOR_TWEEN_DURATION: System.Single;
      RANGE_RADIUS: System.Single;
      HIGHLAND_HEIGHT: System.Single;
      LAYER_HEIGHT: System.Single;
    }
    export interface DefaultEffects {
      CHARACTER_BORN: System.String;
      CHARACTER_DEAD: System.String;
      TOKEN_BORN: System.String;
      ENEMY_DEAD: System.String;
      DAMAGE_BLOCK: System.String;
      EXTRA_DISABLE_LOCATION: System.String;
      BLOCKED_WITH_DAMAGE_NUMBER: System.String;
      ENEMY_ALERT: System.String;
      PIN_MARK: System.String;
      PIN_MARK_OTHERS: System.String;
      ALL_DEFAULT_EFFECTS: System.String[];
    }
    export enum SideTypeIndex {
      ALLY = "ALLY",
      ENEMY = "ENEMY",
      NEUTRAL = "NEUTRAL",
      ENUM = "ENUM",
    }
    export enum SideType {
      NONE = "NONE",
      ALLY = "ALLY",
      ENEMY = "ENEMY",
      BOTH_ALLY_AND_ENEMY = "BOTH_ALLY_AND_ENEMY",
      NEUTRAL = "NEUTRAL",
    }
    export enum EntityCategory {
      NONE = "NONE",
      DEFAULT = "DEFAULT",
      TRAP_OR_ITEM = "TRAP_OR_ITEM",
      OBSTACLE = "OBSTACLE",
    }
    export enum DamageType {
      NONE = "NONE",
      PHYSICAL = "PHYSICAL",
      MAGICAL = "MAGICAL",
      PURE = "PURE",
      HEAL = "HEAL",
    }
    export enum DamageTypeMask {
      NONE = "NONE",
      PHYSICAL = "PHYSICAL",
      MAGICAL = "MAGICAL",
      PURE = "PURE",
      HEAL = "HEAL",
      ANY_ATTACK = "ANY_ATTACK",
      ANY_HEAL = "ANY_HEAL",
      ANY_ATTACK_EXCEPT_PURE = "ANY_ATTACK_EXCEPT_PURE",
    }
    export enum ElementType {
      NONE = "NONE",
      SANITY = "SANITY",
    }
    export enum BattleEvent {
      ON_GAME_READY = "ON_GAME_READY",
      ON_GAME_PRE_START = "ON_GAME_PRE_START",
      ON_GAME_START = "ON_GAME_START",
      ON_GAME_OVER = "ON_GAME_OVER",
      ON_UNIT_POST_INIT = "ON_UNIT_POST_INIT",
      ON_UNIT_BORN = "ON_UNIT_BORN",
      ON_UNIT_FINISH = "ON_UNIT_FINISH",
      ON_ENEMY_REACHED_EXIT = "ON_ENEMY_REACHED_EXIT",
      ON_ENEMY_RECYCLED = "ON_ENEMY_RECYCLED",
      ON_BOSS_ENTER = "ON_BOSS_ENTER",
      ON_CHARACTER_LOCATE = "ON_CHARACTER_LOCATE",
      ON_BEFORE_APPLYING_MODIFIER = "ON_BEFORE_APPLYING_MODIFIER",
      ON_APPLYING_MODIFIER = "ON_APPLYING_MODIFIER",
      ON_APPLIED_MODIFIER = "ON_APPLIED_MODIFIER",
      ON_ABILITY_CASTED = "ON_ABILITY_CASTED",
      ON_STATE_CHANGED = "ON_STATE_CHANGED",
      ON_PAUSE_TOGGLED = "ON_PAUSE_TOGGLED",
      ON_AUTO_REPLAY_TOGGLED = "ON_AUTO_REPLAY_TOGGLED",
      ON_AUTO_REPLAY_FINISHED = "ON_AUTO_REPLAY_FINISHED",
      ON_SPEED_LEVEL_CHANGED = "ON_SPEED_LEVEL_CHANGED",
      ON_PREDEFINED_LOCATION_REACHED = "ON_PREDEFINED_LOCATION_REACHED",
      ON_DISPLAY_ENEMY_INFO = "ON_DISPLAY_ENEMY_INFO",
      ON_BLOCK_ANY_ROUTES = "ON_BLOCK_ANY_ROUTES",
      ON_PREVIEW_CURSOR_SPAWND = "ON_PREVIEW_CURSOR_SPAWND",
      ON_SKILL_CASTED = "ON_SKILL_CASTED",
      ON_CHARACTER_ATK_OR_CBT = "ON_CHARACTER_ATK_OR_CBT",
      ON_ACTIVATE_INTERNAL_HIDDEN_CARD = "ON_ACTIVATE_INTERNAL_HIDDEN_CARD",
      ON_RALLYPOINT_REBORN = "ON_RALLYPOINT_REBORN",
      ON_RALLYPOINT_DEAD = "ON_RALLYPOINT_DEAD",
      ON_SNAP_SHOT = "ON_SNAP_SHOT",
      ON_PLAYER_OPERATION = "ON_PLAYER_OPERATION",
      ON_GAME_GIVE_UP = "ON_GAME_GIVE_UP",
    }
    export enum SpeedLevel {
      SLOW_MOTION = "SLOW_MOTION",
      STANDARD = "STANDARD",
      FAST = "FAST",
      SUPER_FAST = "SUPER_FAST",
      E_NUM = "E_NUM",
    }
    export enum CameraViewLevel {
      DEFAULT = "DEFAULT",
      MAX = "MAX",
      MEDIUM = "MEDIUM",
      ULTIMATE = "ULTIMATE",
    }
    export enum PredefinedLocation {
      COST = "COST",
      CARD = "CARD",
      E_NUM = "E_NUM",
    }
    export enum SkinType {
      CHARACTER = "CHARACTER",
      TRAP = "TRAP",
    }
    export enum ActionPurposeMask {
      NONE = "NONE",
      DAMAGE = "DAMAGE",
      HEAL = "HEAL",
      EP_DAMAGE = "EP_DAMAGE",
    }
    export enum PlayerOperationType {
      SPAWN = "SPAWN",
      WITHDRAW = "WITHDRAW",
      SKILL = "SKILL",
      CHEAT = "CHEAT",
    }
    export interface Layers {
      ALLY_INDEX: System.Int32;
      ENEMY_INDEX: System.Int32;
      NEUTRAL_INDEX: System.Int32;
      MAP_INDEX: System.Int32;
      TILE_INDEX: System.Int32;
      DEATH_AREA_INDEX: System.Int32;
      EFFECT_INDEX: System.Int32;
      ENEMY_COLLIDER_INDEX: System.Int32;
      UI_RT_PS_INDEX: System.Int32;
      ALLY_MASK: System.Int32;
      ENEMY_MASK: System.Int32;
      MAP_MASK: System.Int32;
      TILE_MASK: System.Int32;
      DEATH_AREA_MASK: System.Int32;
      EFFECT_MASK: System.Int32;
      UI_RT_PS_INDEX_MASK: System.Int32;
      NEUTRAL_MASK: System.Int32;
    }
    export interface Yields {
      // sharedWaitForFixedUpdate: UnityEngine.WaitForFixedUpdate;
      // sharedWaitForEndOfFrame: UnityEngine.WaitForEndOfFrame;
    }
    export interface EmptyAbility {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_cooldown: XLua.DelegateBridge;
      // __Hotfix0_get_category: XLua.DelegateBridge;
      // __Hotfix0_get_selectTargetSource: XLua.DelegateBridge;
      // __Hotfix0_get_alwaysIncludeTarget: XLua.DelegateBridge;
      // __Hotfix0_GetEventActions: XLua.DelegateBridge;
      // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
      // __Hotfix0_GetPassiveBuffs: XLua.DelegateBridge;
      // __Hotfix0_GetActiveBuffs: XLua.DelegateBridge;
      // __Hotfix0_OnWaitForPreDelay: XLua.DelegateBridge;
      // __Hotfix0_OnWaitForPostDelay: XLua.DelegateBridge;
    }
    export interface Ability {
      // onCastStart: System.Action;
      onCastFinish: Torappu.Battle.Ability.FinishCallbackDelegate;
      _selector: Torappu.Battle.TargetSelector;
      _metadata: Torappu.Battle.Ability.Metadata;
      // m_owner: Torappu.ObjectPtr<Torappu.Battle.Entity>;
      // m_isCasting: System.Boolean;
      // m_castStartFrameCnt: System.UInt32;
      // m_onCastedOnce: Torappu.Battle.Ability.FinishCallbackDelegate;
      // m_cooldownTimer: Torappu.PeriodicTimer;
      // m_passiveBuffUids: System.Collections.Generic.List<System.UInt32>;
      // <abilityUniqueId>k__BackingField: System.UInt32;
      // <blackboard>k__BackingField: Torappu.Blackboard;
      // <isAttached>k__BackingField: System.Boolean;
      // <options>k__BackingField: Torappu.Battle.Ability.Options;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_instanceUid: XLua.DelegateBridge;
      // __Hotfix0_get_abilityUniqueId: XLua.DelegateBridge;
      // __Hotfix0_set_abilityUniqueId: XLua.DelegateBridge;
      // __Hotfix0_get_familyGroup: XLua.DelegateBridge;
      // __Hotfix0_get_blackboard: XLua.DelegateBridge;
      // __Hotfix0_set_blackboard: XLua.DelegateBridge;
      // __Hotfix0_get_signalId: XLua.DelegateBridge;
      // __Hotfix0_get_rangeId: XLua.DelegateBridge;
      // __Hotfix0_get_searchName: XLua.DelegateBridge;
      // __Hotfix0_get_owner: XLua.DelegateBridge;
      // __Hotfix0_get_context: XLua.DelegateBridge;
      // __Hotfix0_get_selector: XLua.DelegateBridge;
      // __Hotfix0_get_rangeToShow: XLua.DelegateBridge;
      // __Hotfix0_get_remainingTime: XLua.DelegateBridge;
      // __Hotfix0_get_cooldownProgress: XLua.DelegateBridge;
      // __Hotfix0_get_periodTime: XLua.DelegateBridge;
      // __Hotfix0_get_isCastable: XLua.DelegateBridge;
      // __Hotfix0_get_isReady: XLua.DelegateBridge;
      // __Hotfix0_get_isReadyIgnoreAttachAndCooldown: XLua.DelegateBridge;
      // __Hotfix0_get_isCooledDown: XLua.DelegateBridge;
      // __Hotfix0_get_isAffecting: XLua.DelegateBridge;
      // __Hotfix0_get_isCasting: XLua.DelegateBridge;
      // __Hotfix0_get_isAttached: XLua.DelegateBridge;
      // __Hotfix0_set_isAttached: XLua.DelegateBridge;
      // __Hotfix0_get_canSelectCamouflageTarget: XLua.DelegateBridge;
      // __Hotfix0_get_passiveBuffUids: XLua.DelegateBridge;
      // __Hotfix0_get_escapeTime: XLua.DelegateBridge;
      // __Hotfix0_get_applyWay: XLua.DelegateBridge;
      // __Hotfix0_get_options: XLua.DelegateBridge;
      // __Hotfix0_set_options: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
      // __Hotfix0_DoSetData: XLua.DelegateBridge;
      // __Hotfix0_Attach: XLua.DelegateBridge;
      // __Hotfix0_Detach: XLua.DelegateBridge;
      // __Hotfix0_DoAttach: XLua.DelegateBridge;
      // __Hotfix0_DoDetach: XLua.DelegateBridge;
      // __Hotfix0_OnOwnerLocated: XLua.DelegateBridge;
      // __Hotfix0_InterruptIfNot: XLua.DelegateBridge;
      // __Hotfix0_ResetCooldown: XLua.DelegateBridge;
      // __Hotfix0_UpdateCooldown: XLua.DelegateBridge;
      // __Hotfix0_UpdateCooldownToMatch: XLua.DelegateBridge;
      // __Hotfix0_StopAffect: XLua.DelegateBridge;
      // __Hotfix0_UpdateCooldownWhenFinish: XLua.DelegateBridge;
      // __Hotfix0_IsOnFirstCastFrame: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_CleanupForNextCast: XLua.DelegateBridge;
      // __Hotfix0_GetAbilityAttachments: XLua.DelegateBridge;
      // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      // __Hotfix0_GatherProjectiles: XLua.DelegateBridge;
      // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
      // __Hotfix0_OnCastStart: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_OnAttackTimeChanged: XLua.DelegateBridge;
      // __Hotfix0_OnAbilityExtendUpdated: XLua.DelegateBridge;
      // __Hotfix0_PreloadSpecialAudioSignals: XLua.DelegateBridge;
      // __Hotfix0_CheckAtPreCastPhase: XLua.DelegateBridge;
      // __Hotfix0_FinishIfNot: XLua.DelegateBridge;
      // __Hotfix0_AddPassiveBuffs: XLua.DelegateBridge;
      // __Hotfix0_ClearPassiveBuffs: XLua.DelegateBridge;
      // __Hotfix0_PreprocessActionsForProjectile: XLua.DelegateBridge;
      // __Hotfix0_RegisterFinishCallbackOnce: XLua.DelegateBridge;
      // __Hotfix0_ClearFinishCallbackOnce: XLua.DelegateBridge;
      // __Hotfix0_StartCastingInternal: XLua.DelegateBridge;
    }
    export interface IAbilityAttachment {
    }
    export interface AbilityAttachment {
      source: Torappu.Battle.Entity;
      activeBuffData: Torappu.BuffData[];
      extraBlackboard: Torappu.Blackboard;
      prob: System.Single;
      // m_targetValidator: Torappu.Battle.TargetValidator;
    }
    export interface AbilityStandard {
      _ignoreIfOwnerDead: System.Boolean;
      INFINITY_TIME: Torappu.FP;
      // m_castTargets: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Entity>>;
      // m_inputTarget: System.Collections.Generic.KeyValuePair<UnityEngine.Vector2,Torappu.ObjectPtr<Torappu.Battle.Entity>>;
      // m_playbackSpeed: System.Single;
      // m_behaviours: Torappu.Battle.AbilityStandard.Behaviour[];
      // m_isDmgOrHealAbility: System.Boolean;
      // m_purposeMask: Torappu.Battle.ActionPurposeMask;
      // <spellCnt>k__BackingField: System.Int32;
      // <firstAttack>k__BackingField: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_castTargets: XLua.DelegateBridge;
      // __Hotfix0_get_inputTarget: XLua.DelegateBridge;
      // __Hotfix0_get_selectTargetTiming: XLua.DelegateBridge;
      // __Hotfix0_get_playbackSpeed: XLua.DelegateBridge;
      // __Hotfix0_set_playbackSpeed: XLua.DelegateBridge;
      // __Hotfix0_get_allowNoTarget: XLua.DelegateBridge;
      // __Hotfix0_get_onlyTrigAudioSignalForFirstSpell: XLua.DelegateBridge;
      // __Hotfix0_get_onlyTrigAudioSignalForFirstHit: XLua.DelegateBridge;
      // __Hotfix0_get_spellCnt: XLua.DelegateBridge;
      // __Hotfix0_set_spellCnt: XLua.DelegateBridge;
      // __Hotfix0_get_firstAttack: XLua.DelegateBridge;
      // __Hotfix0_set_firstAttack: XLua.DelegateBridge;
      // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
      // __Hotfix0_DoSetData: XLua.DelegateBridge;
      // __Hotfix0_CastToTarget: XLua.DelegateBridge;
      // __Hotfix0_CastDirectly: XLua.DelegateBridge;
      // __Hotfix0_GetCastDirectlyMapPosition: XLua.DelegateBridge;
      // __Hotfix0_StopAffect: XLua.DelegateBridge;
      // __Hotfix0_CheckAtPreCastPhase: XLua.DelegateBridge;
      // __Hotfix0_CleanupForNextCast: XLua.DelegateBridge;
      // __Hotfix0_OnEvent: XLua.DelegateBridge;
      // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      // __Hotfix0_GatherActionNodes: XLua.DelegateBridge;
      // __Hotfix0_PlayCheckPointSignal: XLua.DelegateBridge;
      // __Hotfix0_OnCastOnTarget: XLua.DelegateBridge;
      // __Hotfix0_DoApplyActionsOnTarget: XLua.DelegateBridge;
      // __Hotfix0_OnWaitForTriggerDelta: XLua.DelegateBridge;
      // __Hotfix0_OnSpellStart: XLua.DelegateBridge;
      // __Hotfix0_OnCastStart: XLua.DelegateBridge;
      // __Hotfix0_OnCastEnd: XLua.DelegateBridge;
      // __Hotfix0_OnAttached: XLua.DelegateBridge;
      // __Hotfix0_OnDetached: XLua.DelegateBridge;
      // __Hotfix0_OnAttackFinished: XLua.DelegateBridge;
      // __Hotfix0_OnStunnedChanged: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_CheckActiveBuffs: XLua.DelegateBridge;
      // __Hotfix0_DoCastOnTargets: XLua.DelegateBridge;
      // __Hotfix0__DoCast: XLua.DelegateBridge;
      // __Hotfix0_UpdateTargets: XLua.DelegateBridge;
      // __Hotfix0_CheckAnotherSpell: XLua.DelegateBridge;
      // __Hotfix0_CheckFinished: XLua.DelegateBridge;
      // __Hotfix0_DoUpdatePlaybackSpeed: XLua.DelegateBridge;
      // __Hotfix0_UpdatePlaybackSpeed: XLua.DelegateBridge;
      // __Hotfix0_CheckIsDamageOrHealSource: XLua.DelegateBridge;
      // __Hotfix0_GeneratePurposeMask: XLua.DelegateBridge;
      // __Hotfix0_DoEmitAudioSignalForSpellOn: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
    }
    export interface CharacterAnimator {
      TOLERANCE_L_OR_R_DIRECTION: System.Single;
      ADDON_TO_L_OR_R_DIRECTION: System.Single;
      _faceSwitcher: Torappu.Battle.FaceSwitcher;
      _front: Torappu.Battle.CharacterAnimator.FaceConfiguration;
      _back: Torappu.Battle.CharacterAnimator.FaceConfiguration;
      _useNewSpineFormat: System.Boolean;
      // m_forceFaceFront: System.Boolean;
      // m_SetForDir: System.Action<Torappu.SharedConsts.Direction,Torappu.SharedConsts.Direction>;
      // m_color: UnityEngine.Color;
      // m_activeFace: Torappu.Battle.CharacterAnimator.FaceConfiguration;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_useNewSpineFormat: XLua.DelegateBridge;
      // __Hotfix0_get_forceFaceFront: XLua.DelegateBridge;
      // __Hotfix0_set_forceFaceFront: XLua.DelegateBridge;
      // __Hotfix0_get_front: XLua.DelegateBridge;
      // __Hotfix0_get_back: XLua.DelegateBridge;
      // __Hotfix0_get_color: XLua.DelegateBridge;
      // __Hotfix0_set_color: XLua.DelegateBridge;
      // __Hotfix0_get_graphicTransform: XLua.DelegateBridge;
      // __Hotfix0_get_muzzleTransform: XLua.DelegateBridge;
      // __Hotfix0_get_hitTransform: XLua.DelegateBridge;
      // __Hotfix0_get_footTransform: XLua.DelegateBridge;
      // __Hotfix0_get_headTransform: XLua.DelegateBridge;
      // __Hotfix0_get_faceToBack: XLua.DelegateBridge;
      // __Hotfix0_get_faceSign: XLua.DelegateBridge;
      // __Hotfix0_get_faceLOrR: XLua.DelegateBridge;
      // __Hotfix0_get_skeleton: XLua.DelegateBridge;
      // __Hotfix0_get_faceSwitcher: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_GetMountPoint: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_OnFaceChanged: XLua.DelegateBridge;
      // __Hotfix0_PlayAnimationInternal: XLua.DelegateBridge;
      // __Hotfix0_InitShaders: XLua.DelegateBridge;
      // __Hotfix0_DoUpdateFaceSign: XLua.DelegateBridge;
      // __Hotfix0_ForEachSkeleton: XLua.DelegateBridge;
      // __Hotfix0__CalculateLOrRDirection: XLua.DelegateBridge;
      // __Hotfix0__SetFourDirection: XLua.DelegateBridge;
      // __Hotfix0__SwapConfiguration: XLua.DelegateBridge;
      // __Hotfix0_TryGetSpinePrefix: XLua.DelegateBridge;
    }
    export interface EmptyAnimator {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_color: XLua.DelegateBridge;
      // __Hotfix0_set_color: XLua.DelegateBridge;
      // __Hotfix0_get_faceSign: XLua.DelegateBridge;
      // __Hotfix0_get_graphicTransform: XLua.DelegateBridge;
      // __Hotfix0_get_muzzleTransform: XLua.DelegateBridge;
      // __Hotfix0_get_hitTransform: XLua.DelegateBridge;
      // __Hotfix0_get_footTransform: XLua.DelegateBridge;
      // __Hotfix0_get_headTransform: XLua.DelegateBridge;
      // __Hotfix0_Stop: XLua.DelegateBridge;
      // __Hotfix0_PlayAnimationInternal: XLua.DelegateBridge;
      // __Hotfix0_ContainsAnimationInternal: XLua.DelegateBridge;
      // __Hotfix0_GetAnimationTimeInternal: XLua.DelegateBridge;
      // __Hotfix1_GetAnimationTimeInternal: XLua.DelegateBridge;
      // __Hotfix0_OnFaceChanged: XLua.DelegateBridge;
      // __Hotfix0_OnTakeDamage: XLua.DelegateBridge;
      // __Hotfix0_GetCurrentAniState: XLua.DelegateBridge;
    }
    export interface FaceSwitcher {
      _switchTime: System.Single;
      // m_currentUOrD: Torappu.SharedConsts.Direction;
      // m_currentLOrR: Torappu.SharedConsts.Direction;
      // m_firstTouch: System.Boolean;
      // m_lastTween: Torappu.ITweenHandler;
      // <animator>k__BackingField: Torappu.Battle.UnitAnimator;
    }
    export interface MeshAnimator {
      // _animation: UnityEngine.Animation;
      // _muzzleTransform: UnityEngine.Transform;
      // _hitTransform: UnityEngine.Transform;
      // _headTransform: UnityEngine.Transform;
      // _specialPoint0: UnityEngine.Transform;
      // _specialPoint1: UnityEngine.Transform;
      // _specialPoint2: UnityEngine.Transform;
      // _specialPoint3: UnityEngine.Transform;
      _animations: Torappu.Battle.MeshAnimator.AnimationData[];
      _enableRotate: System.Boolean;
      _useMaterialTintColorAsDefaultColor: System.Boolean;
      // _constRenders: UnityEngine.Renderer[];
      // m_defaultColor: UnityEngine.Color;
      // m_renderers: UnityEngine.Renderer[];
      // m_initDataFlag: System.Boolean;
      // m_animationDict: System.Collections.Generic.Dictionary<System.String,Torappu.Battle.MeshAnimator.AnimationData>;
      // m_lastTween: DG.Tweening.Tween;
      // m_material: UnityEngine.Material;
      // m_currentAniState: Torappu.Battle.UnitAnimator.CurrentAniState;
      // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_color: XLua.DelegateBridge;
      // __Hotfix0_set_color: XLua.DelegateBridge;
      // __Hotfix0_get_graphicTransform: XLua.DelegateBridge;
      // __Hotfix0_get_muzzleTransform: XLua.DelegateBridge;
      // __Hotfix0_get_hitTransform: XLua.DelegateBridge;
      // __Hotfix0_get_footTransform: XLua.DelegateBridge;
      // __Hotfix0_get_headTransform: XLua.DelegateBridge;
      // __Hotfix0_get_renderer: XLua.DelegateBridge;
      // __Hotfix0_get_animation: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_GetCurrentAniState: XLua.DelegateBridge;
      // __Hotfix0_DoResetColor: XLua.DelegateBridge;
      // __Hotfix0_Stop: XLua.DelegateBridge;
      // __Hotfix0_PlayAnimationInternal: XLua.DelegateBridge;
      // __Hotfix0_ContainsAnimationInternal: XLua.DelegateBridge;
      // __Hotfix0_GetAnimationTimeInternal: XLua.DelegateBridge;
      // __Hotfix1_GetAnimationTimeInternal: XLua.DelegateBridge;
      // __Hotfix0_OnTakeDamage: XLua.DelegateBridge;
      // __Hotfix0_OnFinish: XLua.DelegateBridge;
      // __Hotfix0_GetMountPoint: XLua.DelegateBridge;
      // __Hotfix0_PlayAnimation: XLua.DelegateBridge;
      // __Hotfix0_GetAnimationData: XLua.DelegateBridge;
      // __Hotfix0_InitAnimationDataIfNot: XLua.DelegateBridge;
      // __Hotfix0_UpdateAnimationData: XLua.DelegateBridge;
      // __Hotfix0_DoUpdateFaceSign: XLua.DelegateBridge;
      // __Hotfix0__InitRenderersIfNot: XLua.DelegateBridge;
      // __Hotfix0_OnFaceChanged: XLua.DelegateBridge;
    }
    export interface UnitAnimatorHooker {
    }
    export interface SimpleUnitAnimatorHooker {
      _excludeAnimKeys: System.String[];
      _replaceAnimPairs: Torappu.Battle.SimpleUnitAnimatorHooker.ReplacePair[];
    }
    export interface SingleSpineAnimator {
      // _skeleton: Spine.Unity.SkeletonAnimation;
      _faceSwitcher: Torappu.Battle.FaceSwitcher;
      // _muzzleTransform: UnityEngine.Transform;
      // _hitTransform: UnityEngine.Transform;
      // _headTransform: UnityEngine.Transform;
      // _specialPoint0: UnityEngine.Transform;
      // _specialPoint1: UnityEngine.Transform;
      // _specialPoint2: UnityEngine.Transform;
      // _specialPoint3: UnityEngine.Transform;
      // m_renderer: UnityEngine.Renderer;
      // m_UpdateDir: System.Action<Torappu.SharedConsts.Direction,Torappu.SharedConsts.Direction>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_graphicTransform: XLua.DelegateBridge;
      // __Hotfix0_get_muzzleTransform: XLua.DelegateBridge;
      // __Hotfix0_get_hitTransform: XLua.DelegateBridge;
      // __Hotfix0_get_footTransform: XLua.DelegateBridge;
      // __Hotfix0_get_headTransform: XLua.DelegateBridge;
      // __Hotfix0_get_faceSign: XLua.DelegateBridge;
      // __Hotfix0_get_skeleton: XLua.DelegateBridge;
      // __Hotfix0_get_faceSwitcher: XLua.DelegateBridge;
      // __Hotfix0_get_renderer: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_SyncFrom: XLua.DelegateBridge;
      // __Hotfix0_GetMountPoint: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_OnFaceChanged: XLua.DelegateBridge;
      // __Hotfix0_InitShaders: XLua.DelegateBridge;
      // __Hotfix0_DoUpdateFaceSign: XLua.DelegateBridge;
      // __Hotfix0_ForEachSkeleton: XLua.DelegateBridge;
      // __Hotfix0__UpdateDirection: XLua.DelegateBridge;
    }
    export interface SpineAnimator {
      SHADER_PROPERTY_BASELINE_Z: System.String;
      _animations: Torappu.Battle.SpineAnimator.AnimationData[];
      _mixSettings: Torappu.Battle.SpineAnimator.CustomMixAnimSetting[];
      _spineScale: System.Single;
      // m_initDataFlag: System.Boolean;
      // m_animationDict: System.Collections.Generic.Dictionary<System.String,Torappu.Battle.SpineAnimator.AnimationData>;
      // m_lastTween: DG.Tweening.Tween;
      // m_originFaceSwitcherX: System.Single;
      // m_skinHooker: Torappu.Battle.CharacterSkinHooker;
      // m_audioHooker: Torappu.Battle.CharacterAudioHooker;
      // m_boneFollowers: Spine.Unity.BoneFollower[];
      // m_currentAniState: Torappu.Battle.UnitAnimator.CurrentAniState;
      // m_spineEffectEmitter: Torappu.Battle.SpineEffectEmitter;
      // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
      // <>f__am$cache1: System.Action<Spine.Unity.SkeletonAnimation>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_color: XLua.DelegateBridge;
      // __Hotfix0_set_color: XLua.DelegateBridge;
      // __Hotfix0_get_skinHooker: XLua.DelegateBridge;
      // __Hotfix0_get_audioHooker: XLua.DelegateBridge;
      // __Hotfix0_get_useNewSpineFormat: XLua.DelegateBridge;
      // __Hotfix0_get_spineScale: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_Stop: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_GetCurrentAniState: XLua.DelegateBridge;
      // __Hotfix0_PlayAnimationInternal: XLua.DelegateBridge;
      // __Hotfix0_ContainsAnimationInternal: XLua.DelegateBridge;
      // __Hotfix0_GetAnimationTimeInternal: XLua.DelegateBridge;
      // __Hotfix1_GetAnimationTimeInternal: XLua.DelegateBridge;
      // __Hotfix0_OnTakeDamage: XLua.DelegateBridge;
      // __Hotfix0_OnFinish: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_OnUnitPostInit: XLua.DelegateBridge;
      // __Hotfix0_TryHookEffect: XLua.DelegateBridge;
      // __Hotfix0_TryHookAudio: XLua.DelegateBridge;
      // __Hotfix0_TryHookProjectile: XLua.DelegateBridge;
      // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      // __Hotfix0_GatherProjectiles: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
      // __Hotfix0_OnPrefabUpdated: XLua.DelegateBridge;
      // __Hotfix0_PlayAnimation: XLua.DelegateBridge;
      // __Hotfix0_TryApplyCustomMixAnimSettings: XLua.DelegateBridge;
      // __Hotfix0_GetAnimationData: XLua.DelegateBridge;
      // __Hotfix0_InitAnimationDataIfNot: XLua.DelegateBridge;
      // __Hotfix0_UpdateAnimationData: XLua.DelegateBridge;
      // __Hotfix0_ResetSkeletonToDefaultPose: XLua.DelegateBridge;
      // __Hotfix0__RegisterSkeletonEvents: XLua.DelegateBridge;
      // __Hotfix0_MakeDisappearNextFrame: XLua.DelegateBridge;
      // __Hotfix0_InitShaders: XLua.DelegateBridge;
      // __Hotfix0_InitSkeletonAnimation: XLua.DelegateBridge;
      // __Hotfix0_SyncAnimationState: XLua.DelegateBridge;
      // __Hotfix0__TryGotoMixTarget: XLua.DelegateBridge;
      // __Hotfix0_DoUpdateFaceSign: XLua.DelegateBridge;
      // __Hotfix0_FlipSkeletonAnimation: XLua.DelegateBridge;
      // __Hotfix0__OnEvent: XLua.DelegateBridge;
      // __Hotfix0__ResetSetAlphaInFirstFrame: XLua.DelegateBridge;
      // __Hotfix0__CheckShowDamageFlash: XLua.DelegateBridge;
      // __Hotfix0__PlayBattleAudio: XLua.DelegateBridge;
      // __Hotfix0_TryGetSpinePrefix: XLua.DelegateBridge;
      // __Hotfix0_GetAnimName: XLua.DelegateBridge;
      // __Hotfix0__CheckMesh: XLua.DelegateBridge;
      // __Hotfix0_GetSkeletonOrNull: XLua.DelegateBridge;
    }
    export interface AnimationConsts {
      IDLE_KEY: System.String;
      DIE_KEY: System.String;
      BORN_KEY: System.String;
      MOVE_KEY: System.String;
      SKILL_KEY: System.String;
      DEFAULT_KEY: System.String;
      UNBALANCE_KEY: System.String;
      DISAPPEAR_KEY: System.String;
      APPEAR_KEY: System.String;
      REBORN_KEY: System.String;
      STUN_KEY: System.String;
      HIDE_KEY: System.String;
      ON_ATTACK_EVENT: System.String;
      ON_ATTACK_FINISHED_EVENT: System.String;
      ON_PLAY_AUDIO_EVENT: System.String;
      ON_PLAY_EFFECT_EVENT: System.String;
    }
    export interface UnitAnimator {
      L_OR_R_THRESHOLD: System.Single;
      // m_faceSign: System.Int32;
      // m_originScale: UnityEngine.Vector3;
      // m_muzzlesGroup: Torappu.Battle.TransformGroup;
      // <host>k__BackingField: Torappu.Battle.Unit;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_faceSign: XLua.DelegateBridge;
      // __Hotfix0_get_faceToBack: XLua.DelegateBridge;
      // __Hotfix0_get_faceLOrR: XLua.DelegateBridge;
      // __Hotfix0_set_scale: XLua.DelegateBridge;
      // __Hotfix0_get_host: XLua.DelegateBridge;
      // __Hotfix0_set_host: XLua.DelegateBridge;
      // __Hotfix0_get_hooker: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_SyncFrom: XLua.DelegateBridge;
      // __Hotfix0_FetchMuzzleTransform: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_OnFinish: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_OnUnitPostInit: XLua.DelegateBridge;
      // __Hotfix0_OnGameOver: XLua.DelegateBridge;
      // __Hotfix0_PlayAnimation: XLua.DelegateBridge;
      // __Hotfix0_ContainsAnimation: XLua.DelegateBridge;
      // __Hotfix0_GetAnimationTime: XLua.DelegateBridge;
      // __Hotfix1_GetAnimationTime: XLua.DelegateBridge;
      // __Hotfix0_TryLoadEffectOverrideMap: XLua.DelegateBridge;
      // __Hotfix0_GetMountPoint: XLua.DelegateBridge;
      // __Hotfix0_TryHookEffect: XLua.DelegateBridge;
      // __Hotfix0_TryHookAudio: XLua.DelegateBridge;
      // __Hotfix0_TryHookProjectile: XLua.DelegateBridge;
      // __Hotfix0_DoResetColor: XLua.DelegateBridge;
      // __Hotfix0_CalculateDirection: XLua.DelegateBridge;
      // __Hotfix0_SetLeftOrRight: XLua.DelegateBridge;
      // __Hotfix0_DoUpdateFaceSign: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
    }
    export interface ClientAntiCheatChecker {
      // RANDOM_TIME_RANGE: CodeStage.AntiCheat.ObscuredTypes.ObscuredVector2;
      // MAX_CHECK_TIMES: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      // m_moveMultiplier: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
      // m_costIncreaseTime: Torappu.ObscuredFP;
      // m_checkTimer: Torappu.PeriodicTimer;
      // m_checkTimes: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      // m_isValidBattle: CodeStage.AntiCheat.ObscuredTypes.ObscuredBool;
      // m_errorLog: Torappu.ListDict<System.Int32,System.Collections.Generic.List<System.Object>>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_errorLog: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0__CheckEnemyMoveSpeed: XLua.DelegateBridge;
      // __Hotfix0__CheckCostIncreaseTime: XLua.DelegateBridge;
      // __Hotfix0__CheckCharacterAttackTime: XLua.DelegateBridge;
      // __Hotfix0__DoCheck: XLua.DelegateBridge;
      // __Hotfix0__ResetTimer: XLua.DelegateBridge;
      // __Hotfix0_OnFixedUpdate: XLua.DelegateBridge;
      // __Hotfix0_Clear: XLua.DelegateBridge;
    }
    export interface ArtCollection {
      // _defaultIcon: UnityEngine.Sprite;
      // _defaultIllust: UnityEngine.UI.Image;
      // m_assetLoader: Torappu.Resource.CachedAssetLoader;
      // m_avatarHub: Torappu.UI.AutoPackSpriteHub;
      // m_skillIconHub: Torappu.SpriteHub;
      // m_enemyIconHub: Torappu.SpriteHub;
      SYSTEM_MEMORY_LIMIT_FOR_BATTLE_ILLUST: System.Int32;
      SYSTEM_MEMORY_LIMIT_FOR_BATTLE_ILLUST_MULTIPLAYER_ONLY: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetAvatar: XLua.DelegateBridge;
      // __Hotfix0_GetSkillIcon: XLua.DelegateBridge;
      // __Hotfix0_GetEnemyIcon: XLua.DelegateBridge;
      // __Hotfix0_GetIllust: XLua.DelegateBridge;
      // __Hotfix0_LoadEtIcon: XLua.DelegateBridge;
      // __Hotfix0_PreloadIllustrations: XLua.DelegateBridge;
      // __Hotfix0_LoadActivityGameObject: XLua.DelegateBridge;
      // __Hotfix0__TryLoadIllust: XLua.DelegateBridge;
      // __Hotfix1__TryLoadIllust: XLua.DelegateBridge;
      // __Hotfix2__TryLoadIllust: XLua.DelegateBridge;
      // __Hotfix0_Start: XLua.DelegateBridge;
      // __Hotfix0_OnDestroy: XLua.DelegateBridge;
    }
    export interface AsyncUtil {
    }
    export interface CoroutineId {
      NULL: Torappu.Battle.CoroutineId;
      // coroutine: UnityEngine.Coroutine;
      simulatorId: Torappu.Battle.CoroutineSimulator.InternalId;
    }
    export interface CoroutineSimulator {
      // m_uidCounter: System.UInt64;
      // m_pendingDict: System.Collections.Generic.Dictionary<Torappu.Battle.CoroutineSimulator.InternalId,Torappu.Battle.CoroutineSimulator.RuntimeHandler>;
      // m_pendingList: System.Collections.Generic.List<Torappu.Battle.CoroutineSimulator.RuntimeHandler>;
      // m_cachedList: System.Collections.Generic.List<Torappu.Battle.CoroutineSimulator.RuntimeHandler>;
    }
    export interface PoolManagerExtensions {
    }
    export interface Attributes {
      // m_abnormalFlagModifiers: System.Collections.Generic.HashSet<Torappu.Battle.Attributes.IAttributesModifier>;
      // m_attributeModifiers: System.Collections.Generic.HashSet<Torappu.Battle.Attributes.IAttributesModifier>[];
      // m_abnormalFlagsCounter: System.Int16[];
      // m_abnormalImmuneCounter: System.Int16[];
      // m_abnormalAntiCounter: System.Int16[];
      // m_abnormalComboMgr: Torappu.Battle.Attributes.AbnormalComboManager;
      // m_rawData: Torappu.ObscuredFP[];
      // m_dataRange: Torappu.TSVector2[];
      // m_cachedData: Torappu.ObscuredFP[];
      // m_dirtyMask: System.Int64;
      // onAttributeMarkedDirty: System.Action<Torappu.AttributeType,Torappu.FP>;
      // onAbnormalFlagPossiblyChanged: System.Action<Torappu.AbnormalFlag>;
    }
    export interface SimpleAttributeModifier {
      // m_attributeAdditions: Torappu.FP[];
      // m_attributeMultipliers: Torappu.FP[];
      // m_attributeFinalAdditions: Torappu.FP[];
      // m_attributeFinalScalers: Torappu.FP[];
      // <attributes>k__BackingField: Torappu.Battle.Attributes;
      // <attributeMask>k__BackingField: System.Int64;
      // <abnormalFlagMask>k__BackingField: System.Int64;
      // <abnormalImmuneMask>k__BackingField: System.Int64;
      // <abnormalAntiMask>k__BackingField: System.Int64;
      // <abnormalComboMask>k__BackingField: System.Int64;
      // <abnormalComboImmuneMask>k__BackingField: System.Int64;
    }
    export interface AudioSignals {
      ON_GAME_READY: System.String;
      ON_GAME_OVER: System.String;
      ON_CUSTOM_TRIGGER: System.String;
      SIGNALS_WITH_BUFF: System.String[];
      ON_BUFF_START: System.String;
      ON_BUFF_TRIGGER: System.String;
      SIGNALS_WITH_NO_SUBSIGNAL: System.String[];
      ON_GAME_START: System.String;
      ON_MODIFIER_HEAL: System.String;
      ON_MODIFIER_COST: System.String;
      ON_MODIFIER_CHAR_LIMIT: System.String;
      ON_MODIFIER_LIFE_POINT: System.String;
      ON_BOSS_ENTER: System.String;
      ON_ENEMY_REACHED_EXIT: System.String;
      ON_DAMAGE_BLOCK: System.String;
      ON_PREDEFINED_LOCATION: System.String;
      ON_ENV_SHOW: System.String;
      ON_ENEMY_ALERT: System.String;
      ON_PIN_MARK: System.String;
      SIGNALS_WITH_UNIT_CATEGORY: System.String[];
      ON_UNIT_BORN: System.String;
      ON_UNIT_DEAD: System.String;
      ON_CHARACTER_WITHDRAW: System.String;
      ON_CHARACTER_LOCATE: System.String;
      SIGNALS_WITH_ABILITY_ID: System.String[];
      ON_ABILITY_HIT: System.String;
      ON_ABILITY_ON: System.String;
      ON_ABILITY_START: System.String;
      ON_ABILITY_ATTACK_FINISH: System.String;
      ON_ABILITY_END: System.String;
      ON_ABILITY_CHECK_POINT: System.String;
      SIGNALS_WITH_SKILL_ID: System.String[];
      ON_SKILL_START: System.String;
      ON_SKILL_FINISH: System.String;
      ON_SKILL_FAILED: System.String;
      ON_SKILL_SPECIAL_POINT: System.String;
      SIGNALS_WITH_PROJECTILE_ID: System.String[];
      ON_PROJECTILE_HIT: System.String;
      ON_PROJECTILE_REACH: System.String;
      ON_PROJECTILE_STOP: System.String;
      ON_PROJECTILE_BEHAVIOUR_TRIGGER: System.String;
      ON_TILE_TRIGGER: System.String;
      ON_SPINE_EVENT_TRIGGER: System.String;
      UNIT_CATEGORY_CHAR: System.String;
      UNIT_CATEGORY_TOKEN: System.String;
      UNIT_CATEGORY_ENEMY: System.String;
      ON_OPERA_TRIGGER: System.String;
    }
    export interface RandomUtil {
    }
    export interface BattleController {
      INITIAL_OBJECT_CAPACITY: System.Int32;
      INITIAL_BUFF_PRELOAD_CNT: System.Int32;
      // s_cachedModeMeta: Torappu.Battle.GameModeMeta;
      // <isDeterministic>k__BackingField: System.Boolean;
      // <playerSide>k__BackingField: Torappu.PlayerSide;
      // s_fixedFrameCnt: System.UInt32;
      // s_fixedPlayTime: Torappu.FP;
      // s_fixedPlayTimeFloat: System.Single;
      RANDOM_ALGORITHM: Torappu.RandomFactory.AlgorithmType;
      // s_randomImp: System.Random;
      // s_randomTrivial: System.Random;
      // s_battleUidCounter: System.UInt32;
      // s_entityListPool: Torappu.ListPool<Torappu.Battle.Entity>;
      // m_delayToRecycleBuffContainer: Torappu.ListDict<System.UInt32,System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Buff>>>;
      _map: Torappu.Battle.Map;
      _scheduler: Torappu.Battle.Scheduler;
      _factory: Torappu.Battle.BattleFactory;
      _gridRangeDrawer: Torappu.Battle.GridRangeDrawer;
      // _dragPlane: UnityEngine.Transform;
      // _predefinedLocations: UnityEngine.Transform[];
      // PREDEFINED_LOCATION_COST_OFFSET: UnityEngine.Vector3;
      // m_modules: System.Collections.Generic.List<Torappu.Battle.IBattleModule>;
      // m_eventPool: Torappu.EventPool<Torappu.Battle.BattleEvent>;
      // m_globalBuffs: System.Collections.Generic.List<Torappu.Battle.GlobalBuff>;
      // m_objectManger: Torappu.Battle.ObjectManager;
      // m_context: Torappu.Battle.Context;
      // m_buffPool: Torappu.ObjectPool.ObjectPool<Torappu.Battle.Buff>;
      // m_sortedActivePlayers: System.Collections.Generic.List<Torappu.PlayerSide>;
      // m_deckDict: Torappu.ListDict<Torappu.PlayerSide,Torappu.Battle.Deck>;
      // m_costDict: Torappu.ListDict<Torappu.PlayerSide,CodeStage.AntiCheat.ObscuredTypes.ObscuredInt>;
      // m_costTimerDict: Torappu.ListDict<Torappu.PlayerSide,Torappu.PrecisePeriodicTimer>;
      // m_logger: Torappu.Battle.BattleLogger;
      // m_replayController: Torappu.Battle.BattleController.ReplayController;
      // m_predefines: Torappu.LevelData.PredefinedData;
      // m_runeManager: Torappu.Battle.Runes.RuneManager;
      // m_playerOpQueue: Torappu.Battle.BattleController.PlayerOperationQueue;
      // m_fixedEventHandler: Torappu.Battle.FixedEventHandler<Torappu.IPtrObject>;
      // m_pendingGameReadyCallbacks: System.Action;
      // m_coroutineSimulator: Torappu.Battle.CoroutineSimulator;
      // m_hashCodeBuilder: Torappu.HashCodeBuilder;
      // m_snapshotBuilder: System.Text.StringBuilder;
      // m_playerOperationBuilder: System.Text.StringBuilder;
      // m_battleTweenMgr: Torappu.BattleTweenMgr;
      // m_gameMode: Torappu.Battle.GameMode.IGameMode;
      // m_antiCheatChecker: Torappu.Battle.ClientAntiCheatChecker;
      // m_operaController: Torappu.Battle.OperaController;
      // m_operaHoldEffect: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
      // m_tick: System.Action;
      // m_state: Torappu.Battle.BattleController.State;
      // m_result: Torappu.Battle.BattleController.GameResult;
      // m_speedLevel: Torappu.Battle.SpeedLevel;
      // m_speedLevelSlowFlag: System.Boolean;
      // m_maxLeftPoint: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      // m_lifePoint: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      // m_isPaused: System.Boolean;
      // m_pauseKeys: Torappu.ListSet<Torappu.Battle.Consts.BattlePauseKey>;
      // m_originTimeScale: System.Single;
      // m_realPlayTime: System.Single;
      // m_timeDeltaNoEnemy: Torappu.FP;
      // m_numCharacterLimit: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      // m_needPostprocess: System.Boolean;
      // m_isAutoReplayOn: System.Boolean;
      // <unitManager>k__BackingField: Torappu.Battle.UnitManager;
      // <disableDragCard>k__BackingField: System.Boolean;
      // <disableDragCardForced>k__BackingField: System.Boolean;
      // <disableToggleCard>k__BackingField: System.Boolean;
      // <levelId>k__BackingField: System.String;
      // m_lifePointLossByEnemy: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      // m_lifePointLossByOthers: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      // <>f__mg$cache0: Torappu.ListDict.Equality<Torappu.PlayerSide,Torappu.Battle.Deck>;
      // <>f__mg$cache1: Torappu.ListDict.Equality<Torappu.PlayerSide,CodeStage.AntiCheat.ObscuredTypes.ObscuredInt>;
      // <>f__mg$cache2: Torappu.ListDict.Equality<Torappu.PlayerSide,Torappu.PrecisePeriodicTimer>;
      // <>f__mg$cache3: System.Func<Torappu.Battle.Buff>;
      // <>f__am$cache0: System.Action;
      // <>f__am$cache1: System.Comparison<Torappu.PlayerSide>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_isDeterministic: XLua.DelegateBridge;
      // __Hotfix0_set_isDeterministic: XLua.DelegateBridge;
      // __Hotfix0_get_isOnline: XLua.DelegateBridge;
      // __Hotfix0_get_isMultiActivePlayers: XLua.DelegateBridge;
      // __Hotfix0_get_playerSide: XLua.DelegateBridge;
      // __Hotfix0_set_playerSide: XLua.DelegateBridge;
      // __Hotfix0_get_playerSideNext: XLua.DelegateBridge;
      // __Hotfix0_get_playerLayer: XLua.DelegateBridge;
      // __Hotfix0_get_isAtOwnLayer: XLua.DelegateBridge;
      // __Hotfix0_get_currentLayer: XLua.DelegateBridge;
      // __Hotfix0_get_fixedFrameCnt: XLua.DelegateBridge;
      // __Hotfix0_get_fixedPlayTime: XLua.DelegateBridge;
      // __Hotfix0_get_randomImp: XLua.DelegateBridge;
      // __Hotfix0_get_randomTrivial: XLua.DelegateBridge;
      // __Hotfix0_GenNextUniqueId: XLua.DelegateBridge;
      // __Hotfix0_AllocateEntityList_DISPOSE: XLua.DelegateBridge;
      // __Hotfix0_get_map: XLua.DelegateBridge;
      // __Hotfix0_GetDeck: XLua.DelegateBridge;
      // __Hotfix1_GetDeck: XLua.DelegateBridge;
      // __Hotfix0_ForeachActiveDecks: XLua.DelegateBridge;
      // __Hotfix0_get_scheduler: XLua.DelegateBridge;
      // __Hotfix0_get_gridRangeDrawer: XLua.DelegateBridge;
      // __Hotfix0_get_unitManager: XLua.DelegateBridge;
      // __Hotfix0_set_unitManager: XLua.DelegateBridge;
      // __Hotfix0_get_eventPool: XLua.DelegateBridge;
      // __Hotfix0_get_context: XLua.DelegateBridge;
      // __Hotfix0_get_factory: XLua.DelegateBridge;
      // __Hotfix0_get_logger: XLua.DelegateBridge;
      // __Hotfix0_get_dragPlane: XLua.DelegateBridge;
      // __Hotfix0_get_runeManager: XLua.DelegateBridge;
      // __Hotfix0_get_buffPool: XLua.DelegateBridge;
      // __Hotfix0_get_replayController: XLua.DelegateBridge;
      // __Hotfix0_get_gameMode: XLua.DelegateBridge;
      // __Hotfix0_get_antiCheatChecker: XLua.DelegateBridge;
      // __Hotfix0_get_operaController: XLua.DelegateBridge;
      // __Hotfix0_get_isPlaying: XLua.DelegateBridge;
      // __Hotfix0_get_isFinished: XLua.DelegateBridge;
      // __Hotfix0_get_isPausedOrNotPlaying: XLua.DelegateBridge;
      // __Hotfix0_get_isAutoReplayOn: XLua.DelegateBridge;
      // __Hotfix0_set_isAutoReplayOn: XLua.DelegateBridge;
      // __Hotfix0_get_isDisableSlowMotion: XLua.DelegateBridge;
      // __Hotfix0_get_disableDragCard: XLua.DelegateBridge;
      // __Hotfix0_set_disableDragCard: XLua.DelegateBridge;
      // __Hotfix0_get_disableDragCardForced: XLua.DelegateBridge;
      // __Hotfix0_set_disableDragCardForced: XLua.DelegateBridge;
      // __Hotfix0_get_disableToggleCard: XLua.DelegateBridge;
      // __Hotfix0_set_disableToggleCard: XLua.DelegateBridge;
      // __Hotfix0_get_numCharacterLimit: XLua.DelegateBridge;
      // __Hotfix0_GetRemainingAvailableCharacterCnt: XLua.DelegateBridge;
      // __Hotfix0_get_state: XLua.DelegateBridge;
      // __Hotfix0_set_state: XLua.DelegateBridge;
      // __Hotfix0_get_realPlayTime: XLua.DelegateBridge;
      // __Hotfix0_get_timeDeltaNoEnemy: XLua.DelegateBridge;
      // __Hotfix0_get_levelId: XLua.DelegateBridge;
      // __Hotfix0_set_levelId: XLua.DelegateBridge;
      // __Hotfix0_get_isActive: XLua.DelegateBridge;
      // __Hotfix0_set_isActive: XLua.DelegateBridge;
      // __Hotfix0_get_isPaused: XLua.DelegateBridge;
      // __Hotfix0_get_speedLevel: XLua.DelegateBridge;
      // __Hotfix0_set_speedLevel: XLua.DelegateBridge;
      // __Hotfix0_get_inSlowMotion: XLua.DelegateBridge;
      // __Hotfix0_get_maxLifePoint: XLua.DelegateBridge;
      // __Hotfix0_get_lifePoint: XLua.DelegateBridge;
      // __Hotfix0_set_lifePoint: XLua.DelegateBridge;
      // __Hotfix0_get_lifePointLossByEnemy: XLua.DelegateBridge;
      // __Hotfix0_set_lifePointLossByEnemy: XLua.DelegateBridge;
      // __Hotfix0_get_lifePointLossByOthers: XLua.DelegateBridge;
      // __Hotfix0_set_lifePointLossByOthers: XLua.DelegateBridge;
      // __Hotfix0_get_gameResult: XLua.DelegateBridge;
      // __Hotfix0_get_battleRank: XLua.DelegateBridge;
      // __Hotfix0_GetCost: XLua.DelegateBridge;
      // __Hotfix0_SetCost: XLua.DelegateBridge;
      // __Hotfix0_GetCostTimer: XLua.DelegateBridge;
      // __Hotfix0_GetCostTimerProgress: XLua.DelegateBridge;
      // __Hotfix1_GetCostTimerProgress: XLua.DelegateBridge;
      // __Hotfix0_get_costTimerPeriodTime: XLua.DelegateBridge;
      // __Hotfix0_get_remainingEnemiesCnt: XLua.DelegateBridge;
      // __Hotfix0_get_completeProgress: XLua.DelegateBridge;
      // __Hotfix0_get_timeScale: XLua.DelegateBridge;
      // __Hotfix0_set_timeScale: XLua.DelegateBridge;
      // __Hotfix0_SetPaused: XLua.DelegateBridge;
      // __Hotfix0_LoadGame: XLua.DelegateBridge;
      // __Hotfix0_LoadAutoReplayGame: XLua.DelegateBridge;
      // __Hotfix0_StartGame: XLua.DelegateBridge;
      // __Hotfix0_ResetAll: XLua.DelegateBridge;
      // __Hotfix0_FinishGame: XLua.DelegateBridge;
      // __Hotfix0_GiveUpGame: XLua.DelegateBridge;
      // __Hotfix0_LoadCamera: XLua.DelegateBridge;
      // __Hotfix0__PreLoadGameInternal: XLua.DelegateBridge;
      // __Hotfix0_ModifyCost: XLua.DelegateBridge;
      // __Hotfix0_ModifyCharacterLimit: XLua.DelegateBridge;
      // __Hotfix0_ModifyLifePoint: XLua.DelegateBridge;
      // __Hotfix0_EnsureMinCost: XLua.DelegateBridge;
      // __Hotfix0_PlayAudioSignal: XLua.DelegateBridge;
      // __Hotfix0_EnableBuildableHighlight: XLua.DelegateBridge;
      // __Hotfix0_DisableBuildableHighlight: XLua.DelegateBridge;
      // __Hotfix0_GetPredefinedLocationPosition: XLua.DelegateBridge;
      // __Hotfix0_ActivateInternalHiddenCard: XLua.DelegateBridge;
      // __Hotfix0_CriticalAlertAndForceExit: XLua.DelegateBridge;
      // __Hotfix0_TrigOrQueueFixedEntityEvent: XLua.DelegateBridge;
      // __Hotfix0_TrigOrQueueFixedPtrEvent: XLua.DelegateBridge;
      // __Hotfix0_TryAddDeckGlobalBuff: XLua.DelegateBridge;
      // __Hotfix0_ManualFrameTick: XLua.DelegateBridge;
      // __Hotfix0_BattleInitializerOnly_EarlyInit: XLua.DelegateBridge;
      // __Hotfix0_RegisterBObject: XLua.DelegateBridge;
      // __Hotfix0_UnregisterBObject: XLua.DelegateBridge;
      // __Hotfix0_RegisterUnit: XLua.DelegateBridge;
      // __Hotfix0_OnRallyPointReborn: XLua.DelegateBridge;
      // __Hotfix0_UnregisterUnit: XLua.DelegateBridge;
      // __Hotfix0_RegisterModule: XLua.DelegateBridge;
      // __Hotfix0_UnregisterModule: XLua.DelegateBridge;
      // __Hotfix0_RegisterMustInvokeGameReadyCallback: XLua.DelegateBridge;
      // __Hotfix0_PlayerOp_Withdraw: XLua.DelegateBridge;
      // __Hotfix0_PlayerOp_Spawn: XLua.DelegateBridge;
      // __Hotfix0_PlayerOp_TrigSkill: XLua.DelegateBridge;
      // __Hotfix0_SpawnPredefinedInstanceByAlias: XLua.DelegateBridge;
      // __Hotfix0_IsPredefinedAndNeedToTakeSnapshot: XLua.DelegateBridge;
      // __Hotfix0_GetPredefineCharacter: XLua.DelegateBridge;
      // __Hotfix0_SpawnBySkill: XLua.DelegateBridge;
      // __Hotfix0__SpawnInternal: XLua.DelegateBridge;
      // __Hotfix1__SpawnInternal: XLua.DelegateBridge;
      // __Hotfix0__WithdrawInternal: XLua.DelegateBridge;
      // __Hotfix1__WithdrawInternal: XLua.DelegateBridge;
      // __Hotfix0__OpTrigSkillInternal: XLua.DelegateBridge;
      // __Hotfix1__OpTrigSkillInternal: XLua.DelegateBridge;
      // __Hotfix0__FindCharacterBySignitureAndPos: XLua.DelegateBridge;
      // __Hotfix0_CreatePreviewCursor: XLua.DelegateBridge;
      // __Hotfix0_CreateEnemy: XLua.DelegateBridge;
      // __Hotfix1_CreateEnemy: XLua.DelegateBridge;
      // __Hotfix0_CreateCharacter: XLua.DelegateBridge;
      // __Hotfix0_CreateToken: XLua.DelegateBridge;
      // __Hotfix0_CreateRuntimeInstance: XLua.DelegateBridge;
      // __Hotfix0_CreateProjectile: XLua.DelegateBridge;
      // __Hotfix0_CreateProjectileFromProjectile: XLua.DelegateBridge;
      // __Hotfix0_CreateCharacterDummy: XLua.DelegateBridge;
      // __Hotfix0_CreateTokenDummy: XLua.DelegateBridge;
      // __Hotfix0_CreateSkill: XLua.DelegateBridge;
      // __Hotfix0_CreateEffect: XLua.DelegateBridge;
      // __Hotfix1_CreateEffect: XLua.DelegateBridge;
      // __Hotfix0_CreateEffectAtWorldPos: XLua.DelegateBridge;
      // __Hotfix1_CreateEffectAtWorldPos: XLua.DelegateBridge;
      // __Hotfix0_CreateEffectAtMapPos: XLua.DelegateBridge;
      // __Hotfix0_CreateEffectAtMapPosAndHold: XLua.DelegateBridge;
      // __Hotfix0_FinishOperaHoldEffectIfExist: XLua.DelegateBridge;
      // __Hotfix0_CreateMapEffect: XLua.DelegateBridge;
      // __Hotfix2_CreateEffect: XLua.DelegateBridge;
      // __Hotfix3_CreateEffect: XLua.DelegateBridge;
      // __Hotfix0_CreateCameraEffect: XLua.DelegateBridge;
      // __Hotfix0_CreateEffects: XLua.DelegateBridge;
      // __Hotfix1_CreateEffects: XLua.DelegateBridge;
      // __Hotfix2_CreateEffects: XLua.DelegateBridge;
      // __Hotfix0_CreateEffectsAtMapPos: XLua.DelegateBridge;
      // __Hotfix0_CreateMapEffects: XLua.DelegateBridge;
      // __Hotfix0_ThrowEffect: XLua.DelegateBridge;
      // __Hotfix0_PlayAudioAtPos: XLua.DelegateBridge;
      // __Hotfix0__PlayBattleFinishAudio: XLua.DelegateBridge;
      // __Hotfix0_StartBattleCoroutine: XLua.DelegateBridge;
      // __Hotfix0_StopBattleCoroutine: XLua.DelegateBridge;
      // __Hotfix0_StopAllBattleCoroutines: XLua.DelegateBridge;
      // __Hotfix0_StartBattleTween: XLua.DelegateBridge;
      // __Hotfix1_StartBattleTween: XLua.DelegateBridge;
      // __Hotfix0_TakeSnapshotAsHashCode: XLua.DelegateBridge;
      // __Hotfix0__LogSnapshot: XLua.DelegateBridge;
      // __Hotfix0_RecycleBuffNextFrame: XLua.DelegateBridge;
      // __Hotfix0__UpdateDelayToRecycleBuffContainer: XLua.DelegateBridge;
      // __Hotfix0_LogPlayerOperation: XLua.DelegateBridge;
      // __Hotfix0_AchieveBattleJournal: XLua.DelegateBridge;
      // __Hotfix0_CancelAutoReplayIfOn: XLua.DelegateBridge;
      // __Hotfix0_IsAutoBattleUnsync: XLua.DelegateBridge;
      // __Hotfix0_OnUnitPostInit: XLua.DelegateBridge;
      // __Hotfix0_OnUnitBorn: XLua.DelegateBridge;
      // __Hotfix0_OnUnitFinished: XLua.DelegateBridge;
      // __Hotfix0_OnCharacterLocate: XLua.DelegateBridge;
      // __Hotfix0_OnCharacterFinished: XLua.DelegateBridge;
      // __Hotfix0_OnCharacterAtkOrCbt: XLua.DelegateBridge;
      // __Hotfix0_OnEnemyReachedExit: XLua.DelegateBridge;
      // __Hotfix0_OnEnemyRecycled: XLua.DelegateBridge;
      // __Hotfix0_OnBossEnter: XLua.DelegateBridge;
      // __Hotfix0_OnBossFinish: XLua.DelegateBridge;
      // __Hotfix0_OnPredefinedLocationReached: XLua.DelegateBridge;
      // __Hotfix0__OnPauseToggled: XLua.DelegateBridge;
      // __Hotfix0__OnSpeedLevelChanged: XLua.DelegateBridge;
      // __Hotfix0__ParseBattleRank: XLua.DelegateBridge;
      // __Hotfix0__CreatePredefinedCharacter: XLua.DelegateBridge;
      // __Hotfix0__PreprocessPredefinedCharacter: XLua.DelegateBridge;
      // __Hotfix0__LoadPredefinedData: XLua.DelegateBridge;
      // __Hotfix0__InitRunes: XLua.DelegateBridge;
      // __Hotfix0__CreateAndInitGlobalBuffs: XLua.DelegateBridge;
      // __Hotfix0__SwitchState: XLua.DelegateBridge;
      // __Hotfix0__RegisterModules: XLua.DelegateBridge;
      // __Hotfix0__UpdateGameInfo: XLua.DelegateBridge;
      // __Hotfix0__UpdateCost: XLua.DelegateBridge;
      // __Hotfix0__UpdatePlayerOrReplayInput: XLua.DelegateBridge;
      // __Hotfix0__LoadGameInternal: XLua.DelegateBridge;
      // __Hotfix0__PostProcessCharacters: XLua.DelegateBridge;
      // __Hotfix0__InitCameraAndMapEffects: XLua.DelegateBridge;
      // __Hotfix0__GetFinalCameraEffect: XLua.DelegateBridge;
      // __Hotfix0__DoApplyGlobalModifier: XLua.DelegateBridge;
      // __Hotfix0__InitPostprocessSettings: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
      // __Hotfix0_Update: XLua.DelegateBridge;
      // __Hotfix0_FixedUpdate: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_OnDestroy: XLua.DelegateBridge;
    }
    export interface BattleFormula {
      MIN_ATK_FACTOR: Torappu.FP;
      MAX_ATTACK_SPEED: Torappu.FP;
      MIN_ATTACK_SPEED: Torappu.FP;
      ATTACK_SPEED_DIVIDER: Torappu.FP;
    }
    export interface BattleInitializer {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_DoPreProcess: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_GetDefaultMeta: XLua.DelegateBridge;
    }
    export interface BattleLauncher {
      _levelId: System.String;
      // _levelJson: UnityEngine.TextAsset;
      // _squadJson: UnityEngine.TextAsset;
      // _runeJson: UnityEngine.TextAsset;
      _operaConfig: Torappu.Battle.Opera.OperaConfig;
      // _relicJson: UnityEngine.TextAsset;
      _difficulty: Torappu.LevelData.Difficulty;
      _slots: System.Collections.Generic.List<Torappu.CharacterInst>;
      _forceReimportOnStart: System.Boolean;
      _includeDefaultGraphic: System.Boolean;
      _forceUseSquadFile: System.Boolean;
      _autoReplay: System.Boolean;
      // _logJson: UnityEngine.TextAsset;
      _roguelikeDevLocal: System.Boolean;
      _multiplayerDevLocal: System.Boolean;
      _playerSide: Torappu.PlayerSide;
      _enableAnother: System.Boolean;
      _playerSideAnother: Torappu.PlayerSide;
      // _squadAnotherJson: UnityEngine.TextAsset;
      _slotsAnother: System.Collections.Generic.List<Torappu.CharacterInst>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_roguelikeDevLocal: XLua.DelegateBridge;
      // __Hotfix0_get_isMultiplayerDevLocal: XLua.DelegateBridge;
      // __Hotfix0_get_IsMultiplayerDevLocalAndEnableAnother: XLua.DelegateBridge;
      // __Hotfix0_get_Slots: XLua.DelegateBridge;
      // __Hotfix0_LoadLevelData: XLua.DelegateBridge;
      // __Hotfix0_Start: XLua.DelegateBridge;
      // __Hotfix0_OnDestroy: XLua.DelegateBridge;
    }
    export interface AbstractBattleLoader {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_PrewarmFonts: XLua.DelegateBridge;
      // __Hotfix0_LoadSceneAsync: XLua.DelegateBridge;
      // __Hotfix0_LoadScene: XLua.DelegateBridge;
    }
    export interface BattleLoader {
      _minLoadingTime: System.Single;
      _collector: Torappu.Battle.ResourceCollector;
      // _loadingUI: Torappu.Battle.UI.UIBattleLoading;
      // m_startLoadingTime: System.Single;
      // m_configs: System.Collections.Generic.List<Torappu.ObjectPool.PoolManager.ObjectConfig>;
      // <>f__am$cache0: System.Action;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Start: XLua.DelegateBridge;
      // __Hotfix0__DoLoad: XLua.DelegateBridge;
      // __Hotfix0__DoMultiplayerLoad: XLua.DelegateBridge;
      // __Hotfix0__OnFailed: XLua.DelegateBridge;
      // __Hotfix0__LoadDummyLevel: XLua.DelegateBridge;
    }
    export interface BObject {
      // s_globalCounter: System.UInt32;
      // <instanceUid>k__BackingField: System.UInt32;
      // <side>k__BackingField: Torappu.Battle.SideType;
      // <playerSide>k__BackingField: Torappu.PlayerSide;
      // <inited>k__BackingField: System.Boolean;
      // <borned>k__BackingField: System.Boolean;
      // <isDisappeared>k__BackingField: System.Boolean;
    }
    export interface Buff {
      // s_globalCounter: System.UInt32;
      ABFLAGS_IS_AUTO_STATUS_RESISTABLE: Torappu.AbnormalFlag[];
      INFINITY_TIME: Torappu.FP;
      EVENT_NUM: System.Int32;
      // m_container: Torappu.Battle.Buff.BuffContainer;
      // m_source: Torappu.ObjectPtr<Torappu.Battle.Entity>;
      // m_ability: Torappu.ObjectPtr<Torappu.Battle.Ability>;
      // m_attributeMultipliers: Torappu.FP[];
      // m_attributeAdditions: Torappu.FP[];
      // m_attributeFinalAdditions: Torappu.FP[];
      // m_attributeFinalScalers: Torappu.FP[];
      // m_data: Torappu.BuffData;
      // m_lifeTime: Torappu.FP;
      // m_remainingTime: Torappu.FP;
      // m_triggerCnt: System.Int32;
      // m_stackCnt: System.Int32;
      // m_maxValidStackCnt: System.Int32;
      // m_triggerTimer: Torappu.PrecisePeriodicTimer;
      // m_actions: Torappu.Battle.Action.ActionNode[][];
      // m_blackboard: Torappu.Blackboard;
      // m_runtimeAttributesSnapshot: Torappu.Battle.RuntimeAttributesSnapshot;
      // m_isSilenceable: System.Boolean;
      // m_isStunnable: System.Boolean;
      // m_isStatusResistable: System.Boolean;
      // m_started: System.Boolean;
      // m_isFinished: System.Boolean;
      // m_isActuallyFinished: System.Boolean;
      // m_isActuallyEnabled: System.Boolean;
      // m_isManuallyEnabled: System.Boolean;
      // m_isValid: System.Boolean;
      // <key>k__BackingField: System.String;
      // <overrideKey>k__BackingField: System.String;
      // <instanceUid>k__BackingField: System.UInt32;
      // <priority>k__BackingField: System.Int32;
      // <attributeMask>k__BackingField: System.Int64;
      // <abnormalFlagMask>k__BackingField: System.Int64;
      // <abnormalImmuneMask>k__BackingField: System.Int64;
      // <abnormalAntiMask>k__BackingField: System.Int64;
      // <abnormalComboMask>k__BackingField: System.Int64;
      // <abnormalComboImmuneMask>k__BackingField: System.Int64;
      // <effectKey>k__BackingField: System.String;
      // <onEventPriority>k__BackingField: Torappu.BuffData.OnEventPriority;
      // <audioSignal>k__BackingField: System.String;
      // m_derivedBuffs: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Buff>>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_key: XLua.DelegateBridge;
      // __Hotfix0_set_key: XLua.DelegateBridge;
      // __Hotfix0_get_overrideKey: XLua.DelegateBridge;
      // __Hotfix0_set_overrideKey: XLua.DelegateBridge;
      // __Hotfix0_get_instanceUid: XLua.DelegateBridge;
      // __Hotfix0_set_instanceUid: XLua.DelegateBridge;
      // __Hotfix0_get_priority: XLua.DelegateBridge;
      // __Hotfix0_set_priority: XLua.DelegateBridge;
      // __Hotfix0_get_triggerCnt: XLua.DelegateBridge;
      // __Hotfix0_get_owner: XLua.DelegateBridge;
      // __Hotfix0_get_source: XLua.DelegateBridge;
      // __Hotfix0_get_context: XLua.DelegateBridge;
      // __Hotfix0_get_attributeMask: XLua.DelegateBridge;
      // __Hotfix0_set_attributeMask: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalFlagMask: XLua.DelegateBridge;
      // __Hotfix0_set_abnormalFlagMask: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalImmuneMask: XLua.DelegateBridge;
      // __Hotfix0_set_abnormalImmuneMask: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalAntiMask: XLua.DelegateBridge;
      // __Hotfix0_set_abnormalAntiMask: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalComboMask: XLua.DelegateBridge;
      // __Hotfix0_set_abnormalComboMask: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalComboImmuneMask: XLua.DelegateBridge;
      // __Hotfix0_set_abnormalComboImmuneMask: XLua.DelegateBridge;
      // __Hotfix0_get_blackboard: XLua.DelegateBridge;
      // __Hotfix0_get_runtimeAttributesSnapshot: XLua.DelegateBridge;
      // __Hotfix0_get_lifeTime: XLua.DelegateBridge;
      // __Hotfix0_get_remainingTime: XLua.DelegateBridge;
      // __Hotfix0_get_remainingRatio: XLua.DelegateBridge;
      // __Hotfix0_get_triggerInterval: XLua.DelegateBridge;
      // __Hotfix0_get_triggerTimer: XLua.DelegateBridge;
      // __Hotfix0_get_effectKey: XLua.DelegateBridge;
      // __Hotfix0_set_effectKey: XLua.DelegateBridge;
      // __Hotfix0_get_onEventPriority: XLua.DelegateBridge;
      // __Hotfix0_set_onEventPriority: XLua.DelegateBridge;
      // __Hotfix0_get_audioSignal: XLua.DelegateBridge;
      // __Hotfix0_set_audioSignal: XLua.DelegateBridge;
      // __Hotfix0_get_ability: XLua.DelegateBridge;
      // __Hotfix0_get_derivedBuffs: XLua.DelegateBridge;
      // __Hotfix0_get_isEnabled: XLua.DelegateBridge;
      // __Hotfix0_set_isEnabled: XLua.DelegateBridge;
      // __Hotfix0_get_isFinished: XLua.DelegateBridge;
      // __Hotfix0_get_isFinishedOrDisabled: XLua.DelegateBridge;
      // __Hotfix0_get_stackCnt: XLua.DelegateBridge;
      // __Hotfix0_get_overridableStackCnt: XLua.DelegateBridge;
      // __Hotfix0_get_isValid: XLua.DelegateBridge;
      // __Hotfix0_CompareTo: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_GetValue: XLua.DelegateBridge;
      // __Hotfix0_Trigger: XLua.DelegateBridge;
      // __Hotfix0_OverrideEffectKey: XLua.DelegateBridge;
      // __Hotfix0_MarkFinish: XLua.DelegateBridge;
      // __Hotfix0_DecStackCntOrMarkFinish: XLua.DelegateBridge;
      // __Hotfix0_SetAttributeModifier: XLua.DelegateBridge;
      // __Hotfix0_TryUpdateAttributeModifier: XLua.DelegateBridge;
      // __Hotfix1_TryUpdateAttributeModifier: XLua.DelegateBridge;
      // __Hotfix2_TryUpdateAttributeModifier: XLua.DelegateBridge;
      // __Hotfix3_TryUpdateAttributeModifier: XLua.DelegateBridge;
      // __Hotfix0_CheckAttributeModifier: XLua.DelegateBridge;
      // __Hotfix0_ToString: XLua.DelegateBridge;
      // __Hotfix0_FetchDuration: XLua.DelegateBridge;
      // __Hotfix0_AddDerivedBuffSafe: XLua.DelegateBridge;
      // __Hotfix0_OnAllocate: XLua.DelegateBridge;
      // __Hotfix0_OnRecycle: XLua.DelegateBridge;
      // __Hotfix0_OnEnable: XLua.DelegateBridge;
      // __Hotfix0_OnDisable: XLua.DelegateBridge;
      // __Hotfix0_OnStart: XLua.DelegateBridge;
      // __Hotfix0_OnFinish: XLua.DelegateBridge;
      // __Hotfix0_OnTrigger: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_AddDerivedBuff: XLua.DelegateBridge;
      // __Hotfix0_ContainsDerviedBuff: XLua.DelegateBridge;
      // __Hotfix0_OnOwnerBorn: XLua.DelegateBridge;
      // __Hotfix0_OnOwnerLocate: XLua.DelegateBridge;
      // __Hotfix0_OnOwnerFinish: XLua.DelegateBridge;
      // __Hotfix0_OnBeforeApplyingModifier: XLua.DelegateBridge;
      // __Hotfix0_OnApplyingModifier: XLua.DelegateBridge;
      // __Hotfix0_OnAppliedModifier: XLua.DelegateBridge;
      // __Hotfix0_OnOutputModifier: XLua.DelegateBridge;
      // __Hotfix0_OnAfterOutputDamage: XLua.DelegateBridge;
      // __Hotfix0_OnCalculateDamage: XLua.DelegateBridge;
      // __Hotfix0_OnTakeDamage: XLua.DelegateBridge;
      // __Hotfix0_OnOutputDamage: XLua.DelegateBridge;
      // __Hotfix0_OnOutputAtkOrHeal: XLua.DelegateBridge;
      // __Hotfix0_OnEvadeDamage: XLua.DelegateBridge;
      // __Hotfix0_OnTargetKilled: XLua.DelegateBridge;
      // __Hotfix0_OnAbilityStart: XLua.DelegateBridge;
      // __Hotfix0_OnAbilityFinish: XLua.DelegateBridge;
      // __Hotfix0_OnAbilitySpellOn: XLua.DelegateBridge;
      // __Hotfix0_OnAbilityCastOnTarget: XLua.DelegateBridge;
      // __Hotfix0_OnSkillFinish: XLua.DelegateBridge;
      // __Hotfix0_OnBeforeAttack: XLua.DelegateBridge;
      // __Hotfix0_OnAfterAttack: XLua.DelegateBridge;
      // __Hotfix0_OnBeforeTrySetHpZero: XLua.DelegateBridge;
      // __Hotfix0_OnBeforeDisappear: XLua.DelegateBridge;
      // __Hotfix0__RunActions: XLua.DelegateBridge;
      // __Hotfix0__LoadAttributesModifier: XLua.DelegateBridge;
      // __Hotfix0_CheckAbnormalFlagAnti: XLua.DelegateBridge;
      // __Hotfix0_TakeSnapshotToBuffAttribute: XLua.DelegateBridge;
      // __Hotfix0__LoadActions: XLua.DelegateBridge;
      // __Hotfix0__MarkAttributeDirty: XLua.DelegateBridge;
      // __Hotfix0__CalcAbnormalMask: XLua.DelegateBridge;
      // __Hotfix0__CalcAbnormalCombo: XLua.DelegateBridge;
      // __Hotfix0__CalculatePriority: XLua.DelegateBridge;
      // __Hotfix0__DoUpdateStack: XLua.DelegateBridge;
      // __Hotfix0__AddStack: XLua.DelegateBridge;
      // __Hotfix0__FillRemainingTime: XLua.DelegateBridge;
      // __Hotfix0__ExtendRemainingTime: XLua.DelegateBridge;
      // __Hotfix0__UpdateIsEnabledIfNotFinished: XLua.DelegateBridge;
      // __Hotfix0__InitIsStatusResistable: XLua.DelegateBridge;
      // __Hotfix0__AutoCalcIsStatusResistable: XLua.DelegateBridge;
      // __Hotfix0__PreprocessDeltaTime: XLua.DelegateBridge;
      // __Hotfix0_ClearDerivedBuffsIfNot: XLua.DelegateBridge;
      // __Hotfix0__UpdateOverrideMap: XLua.DelegateBridge;
    }
    export interface CameraController {
      // _camera: UnityEngine.Camera;
      // _fakeCamera: UnityEngine.Camera;
      // _uiPerspectiveCamera: UnityEngine.Camera;
      // _offset: UnityEngine.Transform;
      _moveTime: System.Single;
      // _easeType: DG.Tweening.Ease;
      // _placeholders: UnityEngine.Transform[];
      // _fromResolution: UnityEngine.Vector2;
      // _toResolution: UnityEngine.Vector2;
      // _fromLocalPosition: UnityEngine.Vector3;
      // _toLocalPosition: UnityEngine.Vector3;
      // m_originalLayer: Torappu.MapLayer;
      // <currentLayer>k__BackingField: Torappu.MapLayer;
      // m_layerOrigins: System.Collections.Generic.List<UnityEngine.Vector3>;
      // m_originPos: UnityEngine.Vector3;
      // m_cameraPosition: Torappu.Battle.CameraController.CameraPosition;
      // <plugin>k__BackingField: Torappu.Battle.CameraController.Plugin;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_currentLayer: XLua.DelegateBridge;
      // __Hotfix0_set_currentLayer: XLua.DelegateBridge;
      // __Hotfix0_get_currentLayerOrigin: XLua.DelegateBridge;
      // __Hotfix0_get_nextLayer: XLua.DelegateBridge;
      // __Hotfix0_get_camera: XLua.DelegateBridge;
      // __Hotfix0_get_uiPerspectiveCamera: XLua.DelegateBridge;
      // __Hotfix0_get_plugin: XLua.DelegateBridge;
      // __Hotfix0_set_plugin: XLua.DelegateBridge;
      // __Hotfix0_ResetAll: XLua.DelegateBridge;
      // __Hotfix0_SetCameraPosition: XLua.DelegateBridge;
      // __Hotfix0_SetCameraDefaultView: XLua.DelegateBridge;
      // __Hotfix1_SetCameraDefaultView: XLua.DelegateBridge;
      // __Hotfix0_ResetCameraPosition: XLua.DelegateBridge;
      // __Hotfix0_ShakeCamera: XLua.DelegateBridge;
      // __Hotfix0_ResetFocus: XLua.DelegateBridge;
      // __Hotfix0_Focus: XLua.DelegateBridge;
      // __Hotfix0__FocusInternal: XLua.DelegateBridge;
      // __Hotfix0_FaceToCamera: XLua.DelegateBridge;
      // __Hotfix0_FaceToCameraOnlyX: XLua.DelegateBridge;
      // __Hotfix0_WorldToViewportDirectionV2: XLua.DelegateBridge;
      // __Hotfix0__DoAdaptCameraPosition: XLua.DelegateBridge;
      // __Hotfix0__DoAdaptDefaultCameraPosition: XLua.DelegateBridge;
      // __Hotfix0_UpdateLayerCameraOrigins: XLua.DelegateBridge;
      // __Hotfix0_UpdateAudioListener: XLua.DelegateBridge;
      // __Hotfix0__TryCreatePluginByActivity: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
      // __Hotfix0_Start: XLua.DelegateBridge;
      // __Hotfix0_OnDestroy: XLua.DelegateBridge;
      // __Hotfix0_OnSafeRectUpdated: XLua.DelegateBridge;
    }
    export interface Context {
      INITIAL_STACK_CAPACITY: System.Int32;
      // m_source: Torappu.Battle.Context.ContextPtrStack<Torappu.Battle.Entity>;
      // m_target: Torappu.Battle.Context.ContextPtrStack<Torappu.Battle.Entity>;
      // m_buff: Torappu.Battle.Context.ContextPtrStack<Torappu.Battle.Buff>;
      // m_ability: Torappu.Battle.Context.ContextValueStack<Torappu.Battle.Ability>;
      // m_modifier: Torappu.Battle.Context.ContextValueStack<Torappu.Battle.Modifier>;
      // m_projectile: Torappu.Battle.Context.ContextPtrStack<Torappu.Battle.Projectile>;
      // m_tile: Torappu.Battle.Context.ContextPtrStack<Torappu.Battle.Tile>;
      // m_atkScale: Torappu.Battle.Context.ContextValueStack<Torappu.FP>;
      // m_mainTarget: Torappu.Battle.Context.ContextValueStack<Torappu.Battle.Entity>;
    }
    export interface Deck {
      // onCardListChanged: System.Action<Torappu.Battle.Deck.Card[]>;
      // onCardCostChanged: System.Action<Torappu.Battle.Deck.Card>;
      // m_cardMap: System.Collections.Generic.Dictionary<System.UInt32,Torappu.Battle.Deck.Card>;
      // m_tokenMap: System.Collections.Generic.Dictionary<System.UInt32,Torappu.Battle.Deck.TokenCard>;
      // m_cards: Torappu.Battle.Deck.Card[];
      // <initCostUp>k__BackingField: System.Int32;
      // <options>k__BackingField: Torappu.Battle.Deck.Options;
      // <playerSide>k__BackingField: Torappu.PlayerSide;
      // <>f__am$cache0: System.Comparison<Torappu.Battle.Deck.Card>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_cards: XLua.DelegateBridge;
      // __Hotfix0_get_initCostUp: XLua.DelegateBridge;
      // __Hotfix0_set_initCostUp: XLua.DelegateBridge;
      // __Hotfix0_get_options: XLua.DelegateBridge;
      // __Hotfix0_set_options: XLua.DelegateBridge;
      // __Hotfix0_get_playerSide: XLua.DelegateBridge;
      // __Hotfix0_set_playerSide: XLua.DelegateBridge;
      // __Hotfix0_RechargeToken: XLua.DelegateBridge;
      // __Hotfix0_ForceRechargeToken: XLua.DelegateBridge;
      // __Hotfix0_RecycleCard: XLua.DelegateBridge;
      // __Hotfix0_SpawnCharacterOrToken: XLua.DelegateBridge;
      // __Hotfix0_SpawnCharacterOrTokenFreely: XLua.DelegateBridge;
      // __Hotfix1_SpawnCharacterOrToken: XLua.DelegateBridge;
      // __Hotfix0_ActivateHiddenCard: XLua.DelegateBridge;
      // __Hotfix0_OnFixedUpdate: XLua.DelegateBridge;
      // __Hotfix0_FindCard: XLua.DelegateBridge;
      // __Hotfix0_FindCardById: XLua.DelegateBridge;
      // __Hotfix0_FindCardByAlias: XLua.DelegateBridge;
      // __Hotfix0__PostProcessDeckModifiers: XLua.DelegateBridge;
      // __Hotfix0__PostProcessDecklikeRuntimeCostModifiers: XLua.DelegateBridge;
      // __Hotfix0__TryGetToken: XLua.DelegateBridge;
      // __Hotfix0__OnCardListChanged: XLua.DelegateBridge;
      // __Hotfix0_OnCardCostChanged: XLua.DelegateBridge;
    }
    export interface DeckBuff {
      buff: Torappu.BuffData;
      blackboard: Torappu.Blackboard;
    }
    export interface DeckModifier {
      // <sourceCard>k__BackingField: Torappu.Battle.Deck.Card;
    }
    export interface IDeckSelector {
    }
    export interface DeckSelector {
      categoryMask: Torappu.ProfessionCategory;
      filterTag: System.String;
      onlySelectMe: System.Boolean;
      excludeMe: System.Boolean;
    }
    export interface CharacterSkinHooker {
      _replaceEffectPairs: Torappu.Battle.CharacterSkinHooker.ReplacePair[];
      _useFakeProjectile: System.Boolean;
      _fakeProjectileConfigs: Torappu.Battle.CharacterSkinHooker.FakeProjectileConfig[];
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_useFakeProjectile: XLua.DelegateBridge;
      // __Hotfix0_TryHookEffect: XLua.DelegateBridge;
      // __Hotfix0_TryHookProjectile: XLua.DelegateBridge;
      // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      // __Hotfix0_GatherProjectiles: XLua.DelegateBridge;
    }
    export interface SpineEffectEmitter {
      _spineEffectPresets: Torappu.Battle.SpineEffectEmitter.SpineEffectPreset[];
      // m_owner: Torappu.Battle.Unit;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_PlayEffect: XLua.DelegateBridge;
      // __Hotfix0_GatherEffects: XLua.DelegateBridge;
    }
    export interface ReadyEnemySkillEffect {
      _effect: System.String;
      _stopBeforeCast: System.Boolean;
      // m_effectPtr: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      // __Hotfix0_OnAttach: XLua.DelegateBridge;
      // __Hotfix0_OnDetach: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_OnCastStart: XLua.DelegateBridge;
      // __Hotfix0_OnCastFinish: XLua.DelegateBridge;
      // __Hotfix0__ClearEffect: XLua.DelegateBridge;
    }
    export interface EnemySkill {
      _familyMask: Torappu.Battle.Ability.FamilyGroupMask;
      _trigger: Torappu.Battle.TargetTrigger;
      _checkParentActive: System.Boolean;
      _maxTriggerTime: System.Int32;
      _resetMainAbilityCdWhenCastEnd: System.Boolean;
      _overwriteInitCooldown: System.Int32;
      _ignoreSilence: System.Boolean;
      _immuneStunWhenAffecting: System.Boolean;
      _addEnemyIdToSignalId: System.Boolean;
      // m_spCost: System.Int32;
      // m_triggerCnt: System.Int32;
      // m_cooldownTimer: Torappu.PeriodicTimer;
      // m_finishCb: Torappu.Battle.Ability.FinishCallbackDelegate;
      // m_mainAbility: Torappu.Battle.Ability;
      // m_registeredAsModifier: System.Boolean;
      // m_behaviours: Torappu.Battle.EnemySkill.Behaviour[];
      // <ability>k__BackingField: Torappu.Battle.Ability;
      // <parentMode>k__BackingField: Torappu.Battle.UnitMode;
      // <data>k__BackingField: Torappu.LevelData.EnemyData.ESkillData;
      // <owner>k__BackingField: Torappu.Battle.Enemy;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_isEnabled: XLua.DelegateBridge;
      // __Hotfix0_set_isEnabled: XLua.DelegateBridge;
      // __Hotfix0_get_skillKey: XLua.DelegateBridge;
      // __Hotfix0_get_priority: XLua.DelegateBridge;
      // __Hotfix0_get_ability: XLua.DelegateBridge;
      // __Hotfix0_set_ability: XLua.DelegateBridge;
      // __Hotfix0_get_trigger: XLua.DelegateBridge;
      // __Hotfix0_get_isUsedUp: XLua.DelegateBridge;
      // __Hotfix0_get_resetMainAbilityCdWhenCastEnd: XLua.DelegateBridge;
      // __Hotfix0_get_parentMode: XLua.DelegateBridge;
      // __Hotfix0_set_parentMode: XLua.DelegateBridge;
      // __Hotfix0_get_isRoot: XLua.DelegateBridge;
      // __Hotfix0_get_data: XLua.DelegateBridge;
      // __Hotfix0_set_data: XLua.DelegateBridge;
      // __Hotfix0_get_owner: XLua.DelegateBridge;
      // __Hotfix0_set_owner: XLua.DelegateBridge;
      // __Hotfix0_get_recoverSpWhenAffecting: XLua.DelegateBridge;
      // __Hotfix0_get_immuneStunWhenAffecting: XLua.DelegateBridge;
      // __Hotfix0_get_registeredAsModifier: XLua.DelegateBridge;
      // __Hotfix0_set_registeredAsModifier: XLua.DelegateBridge;
      // __Hotfix0_get_attributeMask: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalFlagMask: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalImmuneMask: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalAntiMask: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalComboMask: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalComboImmuneMask: XLua.DelegateBridge;
      // __Hotfix0_GetValue: XLua.DelegateBridge;
      // __Hotfix0_AssignData: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_Attach: XLua.DelegateBridge;
      // __Hotfix0_Detach: XLua.DelegateBridge;
      // __Hotfix0_CastToTarget: XLua.DelegateBridge;
      // __Hotfix0_ResetSkillCooldownIfNeeded: XLua.DelegateBridge;
      // __Hotfix0_CheckFamilyMask: XLua.DelegateBridge;
      // __Hotfix0_SetParentMode: XLua.DelegateBridge;
      // __Hotfix0_CheckTrigger: XLua.DelegateBridge;
      // __Hotfix0_CheckAvailable: XLua.DelegateBridge;
      // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      // __Hotfix0_Tick: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_OnCastSucceed: XLua.DelegateBridge;
      // __Hotfix0_SetEnabledInternal: XLua.DelegateBridge;
      // __Hotfix0_TryReduceSp: XLua.DelegateBridge;
      // __Hotfix0__GetRangeRadius: XLua.DelegateBridge;
      // __Hotfix0__OnCastStart: XLua.DelegateBridge;
      // __Hotfix0__OnCastFinish: XLua.DelegateBridge;
      // __Hotfix0__UpdateRegisterAsModifier: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
    }
    export interface EnemySkillWithCooldownVariable {
      // m_cooldownSequenceList: System.Collections.Generic.List<System.Single>;
      // m_currentIndex: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_AssignData: XLua.DelegateBridge;
      // __Hotfix0__CollectCooldownList: XLua.DelegateBridge;
      // __Hotfix0_ResetSkillCooldownIfNeeded: XLua.DelegateBridge;
    }
    export interface Entity {
      FACE_TO_TARGET_MIN_DISTANCE_SQR: System.Single;
      // m_stateMachine: Torappu.StateMachine;
      // m_hp: Torappu.FP;
      // m_sp: Torappu.ObscuredFP;
      // m_ep: Torappu.FP;
      // m_isLocated: System.Boolean;
      // m_startIniting: System.Boolean;
      // m_faceTo: UnityEngine.Vector2;
      // m_attributes: Torappu.Battle.Attributes;
      // m_eventPool: Torappu.EventPool<Torappu.Battle.Entity.Event>;
      // m_hpRecoverTimer: Torappu.PrecisePeriodicTimer;
      // m_holdEffects: System.Collections.Generic.HashSet<Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>>;
      // m_colorModifiers: System.Collections.Generic.List<Torappu.Battle.Effects.ColorModifier>;
      // m_epRecoverTimer: Torappu.PrecisePeriodicTimer;
      // m_abilities: Torappu.ListSet<Torappu.Battle.Ability>;
      // m_cachedAbilities: System.Collections.Generic.List<Torappu.Battle.Ability>;
      // m_spController: Torappu.Battle.Entity.SpController;
      // m_epController: Torappu.Battle.Entity.EPController;
      // m_buffEffects: System.Collections.Generic.Dictionary<System.String,Torappu.Battle.Entity.BuffEffectHolder>;
      // m_abilityAttachments: System.Collections.Generic.List<Torappu.Battle.IAbilityAttachment>[];
      // <id>k__BackingField: System.String;
      // <tmplId>k__BackingField: System.String;
      // <finishReason>k__BackingField: Torappu.Battle.Entity.FinishReason;
      // <pathMotionMode>k__BackingField: Torappu.MotionMode;
      // <changeableMotionMode>k__BackingField: Torappu.MotionMode;
      // <direction>k__BackingField: Torappu.SharedConsts.Direction;
      // <buffContainer>k__BackingField: Torappu.Battle.Buff.BuffContainer;
      // <mapLayer>k__BackingField: Torappu.MapLayer;
      // <maxSp>k__BackingField: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_id: XLua.DelegateBridge;
      // __Hotfix0_set_id: XLua.DelegateBridge;
      // __Hotfix0_get_tmplId: XLua.DelegateBridge;
      // __Hotfix0_set_tmplId: XLua.DelegateBridge;
      // __Hotfix0_get_isMine: XLua.DelegateBridge;
      // __Hotfix0_get_alive: XLua.DelegateBridge;
      // __Hotfix0_get_isStateRunning: XLua.DelegateBridge;
      // __Hotfix0_get_hpIsFull: XLua.DelegateBridge;
      // __Hotfix0_get_epIsFull: XLua.DelegateBridge;
      // __Hotfix0_get_isInEpBreakRecovery: XLua.DelegateBridge;
      // __Hotfix0_get_attributes: XLua.DelegateBridge;
      // __Hotfix0_get_eventPool: XLua.DelegateBridge;
      // __Hotfix0_get_finishReason: XLua.DelegateBridge;
      // __Hotfix0_set_finishReason: XLua.DelegateBridge;
      // __Hotfix0_get_context: XLua.DelegateBridge;
      // __Hotfix0_get_faceTo: XLua.DelegateBridge;
      // __Hotfix0_get_faceDirection: XLua.DelegateBridge;
      // __Hotfix0_get_faceSign: XLua.DelegateBridge;
      // __Hotfix0_get_faceVector: XLua.DelegateBridge;
      // __Hotfix0_get_faceToBack: XLua.DelegateBridge;
      // __Hotfix0_get_pathMotionMode: XLua.DelegateBridge;
      // __Hotfix0_set_pathMotionMode: XLua.DelegateBridge;
      // __Hotfix0_get_changeableMotionMode: XLua.DelegateBridge;
      // __Hotfix0_set_changeableMotionMode: XLua.DelegateBridge;
      // __Hotfix0_get_isOnHighland: XLua.DelegateBridge;
      // __Hotfix0_get_spController: XLua.DelegateBridge;
      // __Hotfix0_get_epController: XLua.DelegateBridge;
      // __Hotfix0_get_unfinished: XLua.DelegateBridge;
      // __Hotfix0_get_isLocated: XLua.DelegateBridge;
      // __Hotfix0_get_direction: XLua.DelegateBridge;
      // __Hotfix0_set_direction: XLua.DelegateBridge;
      // __Hotfix0_get_faceLOrR: XLua.DelegateBridge;
      // __Hotfix0_get_bodyTransform: XLua.DelegateBridge;
      // __Hotfix0_get_graphicTransform: XLua.DelegateBridge;
      // __Hotfix0_get_directionTransform: XLua.DelegateBridge;
      // __Hotfix0_get_stateDebugStr: XLua.DelegateBridge;
      // __Hotfix0_get_buffContainer: XLua.DelegateBridge;
      // __Hotfix0_set_buffContainer: XLua.DelegateBridge;
      // __Hotfix0_get_mapLayer: XLua.DelegateBridge;
      // __Hotfix0_set_mapLayer: XLua.DelegateBridge;
      // __Hotfix0_get_isNotAliveAndStartFinishing: XLua.DelegateBridge;
      // __Hotfix0_get_startIniting: XLua.DelegateBridge;
      // __Hotfix0_get_canRecoverHp: XLua.DelegateBridge;
      // __Hotfix0_get_canRecoverSp: XLua.DelegateBridge;
      // __Hotfix0_get_canRecoverEp: XLua.DelegateBridge;
      // __Hotfix0_get_canUseAbility: XLua.DelegateBridge;
      // __Hotfix0_get_canUseAtkOrCbt: XLua.DelegateBridge;
      // __Hotfix0_get_canMove: XLua.DelegateBridge;
      // __Hotfix0_get_delayToRecycle: XLua.DelegateBridge;
      // __Hotfix0_get_initState: XLua.DelegateBridge;
      // __Hotfix0_get_defaultBodyColor: XLua.DelegateBridge;
      // __Hotfix0_get_effectTransform: XLua.DelegateBridge;
      // __Hotfix0_get_footMountPoint: XLua.DelegateBridge;
      // __Hotfix0_get_hitMountPoint: XLua.DelegateBridge;
      // __Hotfix0_get_muzzleMountPoint: XLua.DelegateBridge;
      // __Hotfix0_get_headMountPoint: XLua.DelegateBridge;
      // __Hotfix0_get_uiMountPoint: XLua.DelegateBridge;
      // __Hotfix0_get_hp: XLua.DelegateBridge;
      // __Hotfix0_set_hp: XLua.DelegateBridge;
      // __Hotfix0_get_hpRatio: XLua.DelegateBridge;
      // __Hotfix0_get_sp: XLua.DelegateBridge;
      // __Hotfix0_set_sp: XLua.DelegateBridge;
      // __Hotfix0_get_maxSp: XLua.DelegateBridge;
      // __Hotfix0_set_maxSp: XLua.DelegateBridge;
      // __Hotfix0_get_spRatio: XLua.DelegateBridge;
      // __Hotfix0_get_ep: XLua.DelegateBridge;
      // __Hotfix0_set_ep: XLua.DelegateBridge;
      // __Hotfix0_get_maxEp: XLua.DelegateBridge;
      // __Hotfix0_get_attackTime: XLua.DelegateBridge;
      // __Hotfix0_get_maxHp: XLua.DelegateBridge;
      // __Hotfix0_get_atk: XLua.DelegateBridge;
      // __Hotfix0_get_def: XLua.DelegateBridge;
      // __Hotfix0_get_magicResistance: XLua.DelegateBridge;
      // __Hotfix0_get_cost: XLua.DelegateBridge;
      // __Hotfix0_get_blockCnt: XLua.DelegateBridge;
      // __Hotfix0_get_moveSpeed: XLua.DelegateBridge;
      // __Hotfix0_get_attackSpeed: XLua.DelegateBridge;
      // __Hotfix0_get_baseAttackTime: XLua.DelegateBridge;
      // __Hotfix0_get_defPenetrateRatio: XLua.DelegateBridge;
      // __Hotfix0_get_defPenetrateFixed: XLua.DelegateBridge;
      // __Hotfix0_get_magicResistPenetrate: XLua.DelegateBridge;
      // __Hotfix0_get_magicResistPenetrateFixed: XLua.DelegateBridge;
      // __Hotfix0_get_oneMinusStatusResistance: XLua.DelegateBridge;
      // __Hotfix0_get_sumUpHpRecoveryPerSec: XLua.DelegateBridge;
      // __Hotfix0_get_spRecoveryPerSec: XLua.DelegateBridge;
      // __Hotfix0_get_sumUpEpRecoveryPerSec: XLua.DelegateBridge;
      // __Hotfix0_get_abilityRangeForwardExtend: XLua.DelegateBridge;
      // __Hotfix0_get_tauntLevel: XLua.DelegateBridge;
      // __Hotfix0_get_baseForceLevel: XLua.DelegateBridge;
      // __Hotfix0_get_isStunned: XLua.DelegateBridge;
      // __Hotfix0_get_isUnmovable: XLua.DelegateBridge;
      // __Hotfix0_get_spRecoverStopped: XLua.DelegateBridge;
      // __Hotfix0_get_isTargetFree: XLua.DelegateBridge;
      // __Hotfix0_isStillTargetFreeWithImmuneFlag: XLua.DelegateBridge;
      // __Hotfix0_isTargetFreeWithImmuneFlag: XLua.DelegateBridge;
      // __Hotfix0_get_isBlockFree: XLua.DelegateBridge;
      // __Hotfix0_get_isHidden: XLua.DelegateBridge;
      // __Hotfix0_get_isInvincible: XLua.DelegateBridge;
      // __Hotfix0_get_isUndeadable: XLua.DelegateBridge;
      // __Hotfix0_get_isHealFree: XLua.DelegateBridge;
      // __Hotfix0_get_isAllyTargetFree: XLua.DelegateBridge;
      // __Hotfix0_get_isEPDamageFree: XLua.DelegateBridge;
      // __Hotfix0_get_isUnbalanceImmune: XLua.DelegateBridge;
      // __Hotfix0_get_isDisarmed: XLua.DelegateBridge;
      // __Hotfix0_get_isSilenced: XLua.DelegateBridge;
      // __Hotfix0_get_isSilencedOrStunned: XLua.DelegateBridge;
      // __Hotfix0_get_isFrozen: XLua.DelegateBridge;
      // __Hotfix0_get_isCamouflage: XLua.DelegateBridge;
      // __Hotfix0_isUnhurtableWithModifier: XLua.DelegateBridge;
      // __Hotfix0_FaceToDirection: XLua.DelegateBridge;
      // __Hotfix0_FaceToFront: XLua.DelegateBridge;
      // __Hotfix0_FaceToBack: XLua.DelegateBridge;
      // __Hotfix0_FaceTo: XLua.DelegateBridge;
      // __Hotfix0_FaceToTarget: XLua.DelegateBridge;
      // __Hotfix0_SetBodyDirection: XLua.DelegateBridge;
      // __Hotfix1_SetBodyDirection: XLua.DelegateBridge;
      // __Hotfix0_SetBodyAndFaceDirection: XLua.DelegateBridge;
      // __Hotfix0_ApplyModifier: XLua.DelegateBridge;
      // __Hotfix0_GetMountPoint: XLua.DelegateBridge;
      // __Hotfix0_AddBuff: XLua.DelegateBridge;
      // __Hotfix1_AddBuff: XLua.DelegateBridge;
      // __Hotfix0_AddBuffs: XLua.DelegateBridge;
      // __Hotfix0_AddBuffsToIdList: XLua.DelegateBridge;
      // __Hotfix0_AddBuffById: XLua.DelegateBridge;
      // __Hotfix0_RemoveBuff: XLua.DelegateBridge;
      // __Hotfix0_RemoveBuffs: XLua.DelegateBridge;
      // __Hotfix1_RemoveBuffs: XLua.DelegateBridge;
      // __Hotfix2_RemoveBuffs: XLua.DelegateBridge;
      // __Hotfix0_GetBuffByUid: XLua.DelegateBridge;
      // __Hotfix0_ContainsBuff: XLua.DelegateBridge;
      // __Hotfix0_ContainsStatusResistableBuff: XLua.DelegateBridge;
      // __Hotfix0_GetBuffStackCount: XLua.DelegateBridge;
      // __Hotfix0_Suicide: XLua.DelegateBridge;
      // __Hotfix0_FinishWithNoReason: XLua.DelegateBridge;
      // __Hotfix0_ShowDebugLog: XLua.DelegateBridge;
      // __Hotfix0_GetBuffEffect: XLua.DelegateBridge;
      // __Hotfix0_HoldEffect: XLua.DelegateBridge;
      // __Hotfix0_HoldColorModifier: XLua.DelegateBridge;
      // __Hotfix0_ReleaseColorModifier: XLua.DelegateBridge;
      // __Hotfix0_GetBodyColor: XLua.DelegateBridge;
      // __Hotfix0_EnsureMinSp: XLua.DelegateBridge;
      // __Hotfix0_TryFindFirstAttachedAbility: XLua.DelegateBridge;
      // __Hotfix0_FindAttachedAbilities: XLua.DelegateBridge;
      // __Hotfix0_ChangeMotionMode: XLua.DelegateBridge;
      // __Hotfix0_ResetMotionMode: XLua.DelegateBridge;
      // __Hotfix0_CheckOneOfFilterTags: XLua.DelegateBridge;
      // __Hotfix0_CheckOneOfFilterBuffs: XLua.DelegateBridge;
      // __Hotfix0_UpdateSpData: XLua.DelegateBridge;
      // __Hotfix0_UpdateBodyColor: XLua.DelegateBridge;
      // __Hotfix0_GetAbilityAttachments: XLua.DelegateBridge;
      // __Hotfix0_RegisterAbilityAttachment: XLua.DelegateBridge;
      // __Hotfix0_UnregisterAbilityAttachment: XLua.DelegateBridge;
      // __Hotfix1_UnregisterAbilityAttachment: XLua.DelegateBridge;
      // __Hotfix0__ClearAbilityAttachment: XLua.DelegateBridge;
      // __Hotfix1__ClearAbilityAttachment: XLua.DelegateBridge;
      // __Hotfix0_TryHookEffect: XLua.DelegateBridge;
      // __Hotfix0_TryHookAudio: XLua.DelegateBridge;
      // __Hotfix0_TryHookProjectile: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix1_Init: XLua.DelegateBridge;
      // __Hotfix0_SetHpInternal: XLua.DelegateBridge;
      // __Hotfix0_SetSpInternal: XLua.DelegateBridge;
      // __Hotfix0_SetEpInternal: XLua.DelegateBridge;
      // __Hotfix0_DoSetSpInternal: XLua.DelegateBridge;
      // __Hotfix0_FinishMe: XLua.DelegateBridge;
      // __Hotfix0_AddBuffEffect: XLua.DelegateBridge;
      // __Hotfix0_RemoveBuffEffect: XLua.DelegateBridge;
      // __Hotfix0_ClearAbilities: XLua.DelegateBridge;
      // __Hotfix0_ClearHoldEffects: XLua.DelegateBridge;
      // __Hotfix0__UpdateHpRecovery: XLua.DelegateBridge;
      // __Hotfix0__UpdateEpRecovery: XLua.DelegateBridge;
      // __Hotfix0__InternalOnly_AttachAbility: XLua.DelegateBridge;
      // __Hotfix0__InternalOnly_DetachAbility: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_OnBorn: XLua.DelegateBridge;
      // __Hotfix0_OnLocate: XLua.DelegateBridge;
      // __Hotfix0_OnHpZero: XLua.DelegateBridge;
      // __Hotfix0_OnEpZero: XLua.DelegateBridge;
      // __Hotfix0_OnFinish: XLua.DelegateBridge;
      // __Hotfix0_OnBeforeDisappearChanged: XLua.DelegateBridge;
      // __Hotfix0_OnDisappearChanged: XLua.DelegateBridge;
      // __Hotfix0_OnRecycle: XLua.DelegateBridge;
      // __Hotfix0_OnCalculateDamage: XLua.DelegateBridge;
      // __Hotfix0__OnBeforeApplyingModifier: XLua.DelegateBridge;
      // __Hotfix0__OnApplyingModifier: XLua.DelegateBridge;
      // __Hotfix0_OnAppliedModifier: XLua.DelegateBridge;
      // __Hotfix0__OnOutputDamage: XLua.DelegateBridge;
      // __Hotfix0_OnOutputModifier: XLua.DelegateBridge;
      // __Hotfix0_OnAfterOutputDamage: XLua.DelegateBridge;
      // __Hotfix0_OnEvadeDamage: XLua.DelegateBridge;
      // __Hotfix0_OnOutputAttackOrHeal: XLua.DelegateBridge;
      // __Hotfix0_DoApplyModifier: XLua.DelegateBridge;
      // __Hotfix0_OnBuffStart: XLua.DelegateBridge;
      // __Hotfix0_OnBuffFinish: XLua.DelegateBridge;
      // __Hotfix0_OnBuffTrigger: XLua.DelegateBridge;
      // __Hotfix0_OnBuffExtend: XLua.DelegateBridge;
      // __Hotfix0_OnAbilityStart: XLua.DelegateBridge;
      // __Hotfix0_OnAbilityFinish: XLua.DelegateBridge;
      // __Hotfix0_OnAbilitySpellOn: XLua.DelegateBridge;
      // __Hotfix0_OnAbilityCastOnTarget: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_OnAttributeDirty: XLua.DelegateBridge;
      // __Hotfix0_OnFaceChanged: XLua.DelegateBridge;
      // __Hotfix0_OnTargetKilled: XLua.DelegateBridge;
      // __Hotfix0_OnTakeDamage: XLua.DelegateBridge;
      // __Hotfix0_OnTakeHeal: XLua.DelegateBridge;
      // __Hotfix0_OnTakeEPDamage: XLua.DelegateBridge;
      // __Hotfix0_IfReasonIsDeath: XLua.DelegateBridge;
      // __Hotfix0_EmitEvent: XLua.DelegateBridge;
      // __Hotfix1_EmitEvent: XLua.DelegateBridge;
      // __Hotfix2_EmitEvent: XLua.DelegateBridge;
      // __Hotfix0_CompareTo: XLua.DelegateBridge;
    }
    export interface FixedMountPoint {
      // _targetBone: UnityEngine.GameObject;
      // _animation: UnityEngine.Animation;
      // _clip: UnityEngine.AnimationClip;
      _snapshotTime: System.Single;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
    }
    export interface FixedPosition {
      // <mapPositionV3>k__BackingField: UnityEngine.Vector3;
      // <worldPosition>k__BackingField: UnityEngine.Vector3;
      // <gridPosition>k__BackingField: Torappu.GridPosition;
      // <faceTo>k__BackingField: UnityEngine.Vector2;
    }
    export interface IBattleModule {
    }
    export interface ILocatable {
    }
    export interface IMovable {
    }
    export interface IBuildable {
    }
    export interface IDrawableRange {
    }
    export interface IEffectSource {
    }
    export interface IProjectileSource {
    }
    export interface IAbilitySource {
    }
    export interface IActionNodeSource {
    }
    export interface IBuffSource {
    }
    export interface IUpdateable {
    }
    export interface ISpecialAudioSignalSource {
    }
    export interface IExcludeTarget {
    }
    export interface IChargeAttack {
    }
    export interface IAlwaysTrigger {
    }
    export interface IOperaAudioSource {
    }
    export interface IOperaEffectSource {
    }
    export interface BattleLogger {
      MAX_SNAPSHOTS_FOR_SINGLE_CHARACTER: System.Int32;
      MAX_SNAPSHOTS_FOR_SAME_ENEMY: System.Int32;
      // m_randomSeed: System.Int32;
      // m_controller: Torappu.Battle.BattleController;
      // m_logs: System.Collections.Generic.List<Torappu.Battle.BattleLogger.LogItem>;
      // m_squad: System.Collections.Generic.List<Torappu.Battle.BattleLogger.CharInfo>;
      // m_stats: Torappu.Battle.BattleLogger.BattleStats;
      // m_verboseRecorder: Torappu.Battle.BattleVerboseRecorder;
    }
    export interface BattleVerboseRecorder {
      SAVE_DIR: System.String;
      FILENAME_FORMAT: System.String;
      // m_detailLogs: System.Collections.Generic.List<Torappu.Battle.BattleVerboseRecorder.LogItem>;
      // m_debugPrinter: Torappu.Battle.BattleVerboseRecorder.DebugPrinter;
      // m_logger: Torappu.FileLogger;
    }
    export interface DeathArea {
      EXTEND_LENGTH: System.Int32;
      // _up: UnityEngine.BoxCollider2D;
      // _down: UnityEngine.BoxCollider2D;
      // _left: UnityEngine.BoxCollider2D;
      // _right: UnityEngine.BoxCollider2D;
    }
    export interface GlobalBuff {
      _options: Torappu.Battle.TargetOptions;
      _buffs: Torappu.BuffData[];
      _overrideCameraEffect: System.String;
      _deckBuffs: Torappu.Battle.DeckBuff[];
      _sourceType: Torappu.Battle.SideTypeIndex;
      // m_layerMask: System.Int32;
      // m_blackboard: Torappu.Blackboard;
      // m_overrideCameraEffect: System.String;
    }
    export interface Map {
      // _anchorTransform: UnityEngine.Transform;
      // _tilesContainer: UnityEngine.Transform;
      // _graphicContainer: UnityEngine.Transform;
      _tiles: Torappu.Battle.Map.Tiles2D;
      _blockedEdges: Torappu.MapData.Edge[];
      _deathArea: Torappu.Battle.DeathArea;
      _graphic: Torappu.Battle.MapGraphic;
      // m_data: Torappu.MapData;
      // m_widgets: Torappu.Battle.MapWidget[];
      // m_passableMaps: System.Boolean[][][];
      // m_routes: Torappu.Battle.Route[];
      // m_extraRoutes: Torappu.Battle.Route[];
      // m_runtimeRoutes: Torappu.ListDict<System.UInt32,Torappu.Battle.Route>;
      // m_hitResults: UnityEngine.RaycastHit[];
      // m_updateableTiles: System.Collections.Generic.List<Torappu.Battle.IUpdateable>;
      // m_random: System.Random;
      // m_pathFinding: Torappu.Battle.IPathFinding;
      // m_themeController: Torappu.Battle.MapThemeController;
      // m_bindKeyToTilesDict: Torappu.ListDict<System.String,System.Collections.Generic.List<Torappu.Battle.Tile>>;
      // m_tileToBindingTilesDict: Torappu.ListDict<Torappu.Battle.Tile,System.Collections.Generic.List<Torappu.Battle.Tile>>;
      // m_mapLayerRects: System.Collections.Generic.List<UnityEngine.Rect>;
      // m_mapLayerCenters: System.Collections.Generic.List<UnityEngine.Vector3>;
      // m_sceneEffects: Torappu.Rendering.BaseSceneEffect[];
      // <data>k__BackingField: Torappu.MapData;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_isMultiLayerMap: XLua.DelegateBridge;
      // __Hotfix0_get_width: XLua.DelegateBridge;
      // __Hotfix0_get_height: XLua.DelegateBridge;
      // __Hotfix0_get_isValid: XLua.DelegateBridge;
      // __Hotfix0_get_cameraView: XLua.DelegateBridge;
      // __Hotfix0_get_anchorTransform: XLua.DelegateBridge;
      // __Hotfix0_get_tilesContainer: XLua.DelegateBridge;
      // __Hotfix0_get_graphicContainer: XLua.DelegateBridge;
      // __Hotfix0_get_Item: XLua.DelegateBridge;
      // __Hotfix1_get_Item: XLua.DelegateBridge;
      // __Hotfix0_get_graphic: XLua.DelegateBridge;
      // __Hotfix0_get_themeController: XLua.DelegateBridge;
      // __Hotfix0_get_random: XLua.DelegateBridge;
      // __Hotfix0_get_mapTheme: XLua.DelegateBridge;
      // __Hotfix0_get_data: XLua.DelegateBridge;
      // __Hotfix0_set_data: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_UpdateAllRoutes: XLua.DelegateBridge;
      // __Hotfix0_UpdateRoutes: XLua.DelegateBridge;
      // __Hotfix0_CheckAllRoutesReachable: XLua.DelegateBridge;
      // __Hotfix0_GetPassableMap: XLua.DelegateBridge;
      // __Hotfix0_CheckPassable: XLua.DelegateBridge;
      // __Hotfix0_CheckObstacleLikeOrUnpassable: XLua.DelegateBridge;
      // __Hotfix0_UpdatePassableMap: XLua.DelegateBridge;
      // __Hotfix0_TryGetInitialLOrR: XLua.DelegateBridge;
      // __Hotfix0_ImportData: XLua.DelegateBridge;
      // __Hotfix0_FilterTiles: XLua.DelegateBridge;
      // __Hotfix1_FilterTiles: XLua.DelegateBridge;
      // __Hotfix0_GetTileHeight: XLua.DelegateBridge;
      // __Hotfix0_TryGetCameraView: XLua.DelegateBridge;
      // __Hotfix0_CheckHasTag: XLua.DelegateBridge;
      // __Hotfix0_CheckOneOfTags: XLua.DelegateBridge;
      // __Hotfix0_GetMapLayerCount: XLua.DelegateBridge;
      // __Hotfix0__InitMapLayers: XLua.DelegateBridge;
      // __Hotfix0__InitSceneEffects: XLua.DelegateBridge;
      // __Hotfix0_GetLayerCenters: XLua.DelegateBridge;
      // __Hotfix1_GetLayerCenters: XLua.DelegateBridge;
      // __Hotfix0_GetPlayerSide: XLua.DelegateBridge;
      // __Hotfix0_GetPlayerLayer: XLua.DelegateBridge;
      // __Hotfix0_TryGetNextLayersTile: XLua.DelegateBridge;
      // __Hotfix0_OnFixedUpdate: XLua.DelegateBridge;
      // __Hotfix0_OnDestroy: XLua.DelegateBridge;
      // __Hotfix0__InitTilesAndWidgets: XLua.DelegateBridge;
      // __Hotfix0__InitRoutesAndPassableMaps: XLua.DelegateBridge;
      // __Hotfix0__VerifyData: XLua.DelegateBridge;
      // __Hotfix0_RefreshMeshThemeConfig: XLua.DelegateBridge;
      // __Hotfix0_GenerateRuntimeRoute: XLua.DelegateBridge;
      // __Hotfix0_TryRemoveRuntimeRoute: XLua.DelegateBridge;
      // __Hotfix0_MapToWorldPosition: XLua.DelegateBridge;
      // __Hotfix0_WorldToMapPosition: XLua.DelegateBridge;
      // __Hotfix0_MapToWorldPositionV3: XLua.DelegateBridge;
      // __Hotfix0_WorldToMapPositionV3: XLua.DelegateBridge;
      // __Hotfix0_GetTileByScreenPos: XLua.DelegateBridge;
      // __Hotfix0_GetMapPosByScreenPos: XLua.DelegateBridge;
      // __Hotfix0_GetWorldPosByScreenPos: XLua.DelegateBridge;
      // __Hotfix0_RegisterTileBind: XLua.DelegateBridge;
      // __Hotfix0__ProcessTileBind: XLua.DelegateBridge;
      // __Hotfix0_GetBindingTiles: XLua.DelegateBridge;
      // __Hotfix0_CheckGridValid: XLua.DelegateBridge;
      // __Hotfix0_CheckWithinLayerRect: XLua.DelegateBridge;
      // __Hotfix0_TryGetTile: XLua.DelegateBridge;
      // __Hotfix0_TryGetCharacterByPos: XLua.DelegateBridge;
      // __Hotfix0_GetTile: XLua.DelegateBridge;
      // __Hotfix1_GetTile: XLua.DelegateBridge;
      // __Hotfix0_GetRouteOrNull: XLua.DelegateBridge;
      // __Hotfix0_GetRouteIndex: XLua.DelegateBridge;
      // __Hotfix0_GetGotoDirectionalPassableMask: XLua.DelegateBridge;
      // __Hotfix0_GetDirectionToGoBackFromInvalidPos: XLua.DelegateBridge;
      // __Hotfix0__UpdateAnchorToCenter: XLua.DelegateBridge;
      // __Hotfix0__CreateTile: XLua.DelegateBridge;
    }
    export interface MapAttachment {
      _attachedTiles: Torappu.GridPosition[];
    }
    export interface MapGraphic {
      _mapSettings: Torappu.Battle.MapGraphic.MapSettings;
      _lightmapSettings: Torappu.Battle.MapGraphic.LightmapSettings;
      _effectSettings: Torappu.Battle.MapGraphic.EffectSettings;
      _graphics: Torappu.Battle.TileGraphic[];
    }
    export interface MapWidget {
      _anchorPos: Torappu.GridPosition;
    }
    export interface BasicCursor {
      // m_route: Torappu.Battle.Route;
      // m_cursor: System.Int32;
      // m_checkpoints: Torappu.Battle.BasicCursor.Checkpoint[];
      // m_obj: Torappu.Battle.BObject;
      // <ignoreAllButMoveCp>k__BackingField: System.Boolean;
      // <visitEveryTileCenter>k__BackingField: System.Boolean;
      // <visitEveryNodeCenter>k__BackingField: System.Boolean;
      // <snapshot>k__BackingField: Torappu.Battle.Scheduler.SchedulerSnapshot;
      // <visitEveryNodeStably>k__BackingField: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreAllButMoveCp: XLua.DelegateBridge;
      // __Hotfix0_set_ignoreAllButMoveCp: XLua.DelegateBridge;
      // __Hotfix0_get_visitEveryTileCenter: XLua.DelegateBridge;
      // __Hotfix0_set_visitEveryTileCenter: XLua.DelegateBridge;
      // __Hotfix0_get_visitEveryNodeCenter: XLua.DelegateBridge;
      // __Hotfix0_set_visitEveryNodeCenter: XLua.DelegateBridge;
      // __Hotfix0_get_motionMode: XLua.DelegateBridge;
      // __Hotfix0_get_route: XLua.DelegateBridge;
      // __Hotfix0_get_snapshot: XLua.DelegateBridge;
      // __Hotfix0_set_snapshot: XLua.DelegateBridge;
      // __Hotfix0_get_random: XLua.DelegateBridge;
      // __Hotfix0_get_visitEveryNodeStably: XLua.DelegateBridge;
      // __Hotfix0_set_visitEveryNodeStably: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_GetContDirectionAfterEnd: XLua.DelegateBridge;
      // __Hotfix0__MoveNext: XLua.DelegateBridge;
      // __Hotfix0__CreateCheckpoint: XLua.DelegateBridge;
    }
    export interface DirectionCursor {
      // m_visitedMap: System.Boolean[][];
      // m_offset: UnityEngine.Vector2;
      // m_nextGrid: Torappu.GridPosition;
      // <totalDist>k__BackingField: System.Single;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_distToExit: XLua.DelegateBridge;
      // __Hotfix0_get_totalDist: XLua.DelegateBridge;
      // __Hotfix0_set_totalDist: XLua.DelegateBridge;
      // __Hotfix0_get_cursorIndex: XLua.DelegateBridge;
      // __Hotfix0_AssignHostRouteProgress: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_CheckReached: XLua.DelegateBridge;
      // __Hotfix0_PredictReached: XLua.DelegateBridge;
      // __Hotfix0_GetNextTarget: XLua.DelegateBridge;
      // __Hotfix0__GetNextTarget: XLua.DelegateBridge;
      // __Hotfix0_GetNextDirection: XLua.DelegateBridge;
      // __Hotfix0_GetNextTurn: XLua.DelegateBridge;
      // __Hotfix0_PredictFuturePosition: XLua.DelegateBridge;
      // __Hotfix0_TryGetDistanceToNextCheckpoint: XLua.DelegateBridge;
      // __Hotfix0__CheckNextCpShouldNotSkip: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0__GetNextGrid: XLua.DelegateBridge;
      // __Hotfix0_GetLocatorPosition: XLua.DelegateBridge;
    }
    export interface GridCursor {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_CheckReached: XLua.DelegateBridge;
      // __Hotfix0_GetNextGrid: XLua.DelegateBridge;
    }
    export interface PathRequest {
      targetPos: Torappu.GridPosition;
      motionMode: Torappu.MotionMode;
      allowDiagonalMove: System.Boolean;
    }
    export interface IPathFinding {
    }
    export interface SPFA {
      // m_openList: System.Collections.Generic.Queue<Torappu.Battle.Route.Node>;
      // m_map: Torappu.Battle.Map;
      // m_cacheMap: System.Collections.Generic.Dictionary<Torappu.Battle.PathRequest,Torappu.Battle.Route.Node[][]>[];
    }
    export interface Route {
      // s_sharedSingleNode: Torappu.GridPosition[];
      // m_map: Torappu.Battle.Map;
      // m_data: Torappu.RouteData;
      // m_pathFinder: Torappu.Battle.IPathFinding;
      // m_targetNextMap: Torappu.Battle.Route.Node[][];
      // m_checkpointsNextMap: Torappu.Battle.Route.Node[][][];
    }
    export interface MapThemeController {
      // <data>k__BackingField: Torappu.MapThemeData;
      // <map>k__BackingField: Torappu.Battle.Map;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_data: XLua.DelegateBridge;
      // __Hotfix0_set_data: XLua.DelegateBridge;
      // __Hotfix0_get_map: XLua.DelegateBridge;
      // __Hotfix0_set_map: XLua.DelegateBridge;
      // __Hotfix0_GetThemeUnitColor: XLua.DelegateBridge;
      // __Hotfix0_GetThemeBuildableColor: XLua.DelegateBridge;
    }
    export interface MapThemeFactory {
      WATER_THEME_TYPE: System.String;
    }
    export interface BuffTile {
      EMPTY_IDS: System.Collections.Generic.List<System.UInt32>;
      _targetOptions: Torappu.Battle.TargetOptions;
      _sourceSide: Torappu.Battle.SideType;
      _buffs: Torappu.BuffData[];
      _clearBuffsWhenLeft: System.Boolean;
      // m_charBuffUids: System.Collections.Generic.List<System.UInt32>;
      // m_enemyBuffUids: System.Collections.Generic.Dictionary<Torappu.ObjectPtr<Torappu.Battle.Entity>,System.Collections.Generic.List<System.UInt32>>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_traceBuffUids: XLua.DelegateBridge;
      // __Hotfix0_get_applyToCharacter: XLua.DelegateBridge;
      // __Hotfix0_get_applyToEnemy: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
      // __Hotfix0_OnCharacterEnter: XLua.DelegateBridge;
      // __Hotfix0_OnCharacterLeave: XLua.DelegateBridge;
      // __Hotfix0_OnRallyPointReborn: XLua.DelegateBridge;
      // __Hotfix0_OnEnemyEnter: XLua.DelegateBridge;
      // __Hotfix0_OnEnemyLeave: XLua.DelegateBridge;
      // __Hotfix0_ApplyBuffs: XLua.DelegateBridge;
      // __Hotfix0_ClearBuffs: XLua.DelegateBridge;
      // __Hotfix0_EnsureEnemyBuffList: XLua.DelegateBridge;
      // __Hotfix0_PreloadBuffAssets: XLua.DelegateBridge;
    }
    export interface CastTile {
      _targetOptions: Torappu.Battle.TargetOptions;
      _sourceSide: Torappu.Battle.SideType;
      // _actions: ActionArray;
      // _actionsOnTrigger: ActionArray;
      _castEffect: System.String;
      _hitEffect: System.String;
      _castMaxCnt: System.Int32;
      _extraTargetRange: Torappu.Battle.Range;
      _onlyCombatEnemyInExtraRange: System.Boolean;
      // m_verifyKey: System.String;
      // m_holdTileEffect: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_maxTriggerCnt: XLua.DelegateBridge;
      // __Hotfix0_HoldEffect: XLua.DelegateBridge;
      // __Hotfix0_FinishHoldEffect: XLua.DelegateBridge;
      // __Hotfix0_CheckHasHoldEffect: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_GatherActionNodes: XLua.DelegateBridge;
      // __Hotfix0_OnTrigger: XLua.DelegateBridge;
      // __Hotfix0__TryCastOnTarget: XLua.DelegateBridge;
      // __Hotfix0__TryFindExtraTargets: XLua.DelegateBridge;
      // __Hotfix0__CheckExtraTarget: XLua.DelegateBridge;
      // __Hotfix0_PreloadAssets: XLua.DelegateBridge;
    }
    export interface DynamicBuffTile {
      _modeIndex: System.Int32;
      _dynamicBuffs: Torappu.Battle.DynamicBuffTile.TileBuffsAndEffectsPair[];
      // m_charDynamicBuffUids: System.Collections.Generic.List<System.UInt32>;
      // m_enemyDynamicBuffUids: System.Collections.Generic.Dictionary<Torappu.ObjectPtr<Torappu.Battle.Entity>,System.Collections.Generic.List<System.UInt32>>;
      // m_currentTileEffects: System.Collections.Generic.List<Torappu.Battle.Effects.Effect>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_traceBuffUids: XLua.DelegateBridge;
      // __Hotfix0_get_dynamicBuffs: XLua.DelegateBridge;
      // __Hotfix0_get_dynamicBuffEffects: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_SwitchMode: XLua.DelegateBridge;
      // __Hotfix0__UpdateEffects: XLua.DelegateBridge;
      // __Hotfix0__ClearEffects: XLua.DelegateBridge;
      // __Hotfix0__ApplyDynamicBuffs: XLua.DelegateBridge;
      // __Hotfix0_OnCharacterEnter: XLua.DelegateBridge;
      // __Hotfix0_OnCharacterLeave: XLua.DelegateBridge;
      // __Hotfix0_OnRallyPointReborn: XLua.DelegateBridge;
      // __Hotfix0_OnRallyPointFakeDeath: XLua.DelegateBridge;
      // __Hotfix0_OnEnemyEnter: XLua.DelegateBridge;
      // __Hotfix0_OnEnemyLeave: XLua.DelegateBridge;
      // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
      // __Hotfix0_PreloadBuffAssets: XLua.DelegateBridge;
    }
    export interface HoleTile {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_moveCost: XLua.DelegateBridge;
      // __Hotfix0_get_isObstacleLike: XLua.DelegateBridge;
      // __Hotfix0_OnEnemyEnter: XLua.DelegateBridge;
    }
    export interface InteractableTile {
      // m_triggerCost: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_triggerable: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_Interact: XLua.DelegateBridge;
    }
    export interface ITileListener {
    }
    export interface Tile {
      // s_tileInstCounter: System.UInt32;
      _tileKey: System.String;
      _height: System.Single;
      _locateHeightOffset: System.Single;
      _forceBoxCollider: System.Boolean;
      _graphic: Torappu.Battle.TileGraphic;
      _allGraphicList: System.Collections.Generic.List<Torappu.Battle.TileGraphic>;
      _effect: System.String;
      _data: Torappu.TileData;
      _mapLayer: Torappu.MapLayer;
      _injectEnvDmgFlagToBlackboard: System.Boolean;
      // m_triggerCnt: System.Int32;
      // m_blackboard: Torappu.Blackboard;
      // m_data: Torappu.TileData;
      // m_originOptions: Torappu.Battle.Tile.Options;
      // m_cachedOptions: Torappu.Battle.Tile.Options;
      // m_tileInfo: Torappu.TileAppendInfo;
      // m_buildSlot: Torappu.ObjectPtr<Torappu.Battle.Character>;
      // m_enemies: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Enemy>>;
      // m_listeners: System.Collections.Generic.List<Torappu.Battle.ITileListener>;
      // m_gotoDirectionalPassableMask: System.Int32[];
      // m_behaviours: Torappu.Battle.Tile.Behaviour[];
      // <instanceUid>k__BackingField: System.UInt32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_instanceUid: XLua.DelegateBridge;
      // __Hotfix0_set_instanceUid: XLua.DelegateBridge;
      // __Hotfix0_get_height: XLua.DelegateBridge;
      // __Hotfix0_get_locateHeight: XLua.DelegateBridge;
      // __Hotfix0_get_tileKey: XLua.DelegateBridge;
      // __Hotfix0_get_tileName: XLua.DelegateBridge;
      // __Hotfix0_get_tileDescription: XLua.DelegateBridge;
      // __Hotfix0_get_isFunctional: XLua.DelegateBridge;
      // __Hotfix0_get_graphic: XLua.DelegateBridge;
      // __Hotfix0_get_buildableType: XLua.DelegateBridge;
      // __Hotfix0_get_passableMask: XLua.DelegateBridge;
      // __Hotfix0_get_heightType: XLua.DelegateBridge;
      // __Hotfix0_get_playerSideMask: XLua.DelegateBridge;
      // __Hotfix0_get_mapLayer: XLua.DelegateBridge;
      // __Hotfix0_get_isHighland: XLua.DelegateBridge;
      // __Hotfix0_get_isLowland: XLua.DelegateBridge;
      // __Hotfix0_get_highlightType: XLua.DelegateBridge;
      // __Hotfix0_set_highlightType: XLua.DelegateBridge;
      // __Hotfix0_get_moveCost: XLua.DelegateBridge;
      // __Hotfix0_get_isObstacleLike: XLua.DelegateBridge;
      // __Hotfix0_get_triggerable: XLua.DelegateBridge;
      // __Hotfix0_get_maxTriggerCnt: XLua.DelegateBridge;
      // __Hotfix0_get_data: XLua.DelegateBridge;
      // __Hotfix0_get_blackboard: XLua.DelegateBridge;
      // __Hotfix0_get_effectHolder: XLua.DelegateBridge;
      // __Hotfix0_CompareTo: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_AddListener: XLua.DelegateBridge;
      // __Hotfix0_RemoveListener: XLua.DelegateBridge;
      // __Hotfix0_IsPassable: XLua.DelegateBridge;
      // __Hotfix0_IsPassableGoTo: XLua.DelegateBridge;
      // __Hotfix0_OverwriteBuildableType: XLua.DelegateBridge;
      // __Hotfix0_CheckBuildable: XLua.DelegateBridge;
      // __Hotfix0_GetCharacter: XLua.DelegateBridge;
      // __Hotfix0_GetEnemies: XLua.DelegateBridge;
      // __Hotfix0_HasWalkEnemy: XLua.DelegateBridge;
      // __Hotfix0_ClearCharacterIfExists: XLua.DelegateBridge;
      // __Hotfix0_GetLocatePosition: XLua.DelegateBridge;
      // __Hotfix0_OnCharacterFinished: XLua.DelegateBridge;
      // __Hotfix0_LocateCharacter: XLua.DelegateBridge;
      // __Hotfix0_AddEnemy: XLua.DelegateBridge;
      // __Hotfix0_RemoveEnemy: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
      // __Hotfix0_ReplaceGraphicFromScene: XLua.DelegateBridge;
      // __Hotfix0_ClearAllGraphic: XLua.DelegateBridge;
      // __Hotfix0_Trigger: XLua.DelegateBridge;
      // __Hotfix0_TryUpdateOptions: XLua.DelegateBridge;
      // __Hotfix0_RewriteOptions: XLua.DelegateBridge;
      // __Hotfix0_PreloadAssets: XLua.DelegateBridge;
      // __Hotfix0__InitCollider: XLua.DelegateBridge;
      // __Hotfix0_OnGameStart: XLua.DelegateBridge;
      // __Hotfix0_OnGameOver: XLua.DelegateBridge;
      // __Hotfix0_OnCharacterEnter: XLua.DelegateBridge;
      // __Hotfix0_OnCharacterLeave: XLua.DelegateBridge;
      // __Hotfix0_OnRallyPointReborn: XLua.DelegateBridge;
      // __Hotfix0_OnRallyPointFakeDeath: XLua.DelegateBridge;
      // __Hotfix0_OnEnemyEnter: XLua.DelegateBridge;
      // __Hotfix0_OnEnemyLeave: XLua.DelegateBridge;
      // __Hotfix0_HoldEffect: XLua.DelegateBridge;
      // __Hotfix0_FinishHoldEffect: XLua.DelegateBridge;
      // __Hotfix0_CheckHasHoldEffect: XLua.DelegateBridge;
      // __Hotfix0_OnTrapLocated: XLua.DelegateBridge;
      // __Hotfix0_OnTrapFinished: XLua.DelegateBridge;
      // __Hotfix0_OnEntityEnter: XLua.DelegateBridge;
      // __Hotfix0_OnEntityLeave: XLua.DelegateBridge;
      // __Hotfix0_OnTrigger: XLua.DelegateBridge;
      // __Hotfix0_HandleMapEffect: XLua.DelegateBridge;
      // __Hotfix0__EnsureAppendInfo: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
      // __Hotfix0_Start: XLua.DelegateBridge;
    }
    export interface TileGraphic {
      _tile: Torappu.Battle.Tile;
      _gridPos: Torappu.GridPosition;
      // _mapOffset: UnityEngine.Vector2;
      // m_highlightType: Torappu.Battle.TileGraphic.HighlightType;
    }
    export interface ToggleTile {
      _toggleOptions: Torappu.Battle.Tile.Options;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_maxTriggerCnt: XLua.DelegateBridge;
      // __Hotfix0_OnTrigger: XLua.DelegateBridge;
    }
    export interface PeriodicTickerNoUpdateNeeded {
      // m_tickPeriod: System.UInt32;
      // m_nextReadyFrame: System.UInt32;
    }
    export interface CompoundPeriodicTicker {
      // m_tranditionalFindTargetTicker: Torappu.PeriodicTicker;
      // m_deterministicFindTargetTicker: Torappu.Battle.PeriodicTickerNoUpdateNeeded;
      // m_findTargetTicker: Torappu.IPeriodicTicker;
      // m_cachedPeriod: System.Int32;
    }
    export interface Modifier {
      IS_CONTINUOUS_FLAG: System.Int16;
      FORCE_TO_DISPLAY_NUMBER_FLAG: System.Int16;
      FORCE_NOT_TO_DISPLAY_SP_FLAG: System.Int16;
      DAMAGE_IS_UNDEADABLE_THIS_TIME: System.Int16;
      DAMAGE_WITHOUT_MODIFY: System.Int16;
      IS_ENVIRONMENT_DAMAGE: System.Int16;
      FORCE_TO_DISPLAY_NEGATIVE_NUMBER_FLAG: System.Int16;
      SKIP_MODIFIER_EVENT: System.Int16;
      DAMAGE_CAN_HURT_SLEEPING_ENTITY: System.Int16;
      EMPTY: Torappu.Battle.Modifier;
      // m_source: Torappu.ObjectPtr<Torappu.Battle.Entity>;
      // m_target: Torappu.ObjectPtr<Torappu.Battle.Entity>;
      value: Torappu.FP;
      ignoreForSp: System.Boolean;
      sharedFlagMask: System.Int16;
      realDelta: Torappu.FP;
      extraData: Torappu.FP;
      // <targetType>k__BackingField: Torappu.Battle.Modifier.TargetType;
      // <deltaType>k__BackingField: Torappu.Battle.Modifier.DeltaType;
      // <damageType>k__BackingField: Torappu.Battle.DamageType;
      // <applyWay>k__BackingField: Torappu.Battle.Modifier.SourceApplyWay;
      // <cancelReason>k__BackingField: Torappu.Battle.Modifier.CancelReason;
      // <attackType>k__BackingField: Torappu.Battle.Modifier.SourceAttackType;
      // <elmentType>k__BackingField: Torappu.Battle.ElementType;
      // <originValue>k__BackingField: Torappu.FP;
      // <playerSide>k__BackingField: Torappu.PlayerSide;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // _c__Hotfix1_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_targetType: XLua.DelegateBridge;
      // __Hotfix0_set_targetType: XLua.DelegateBridge;
      // __Hotfix0_get_deltaType: XLua.DelegateBridge;
      // __Hotfix0_set_deltaType: XLua.DelegateBridge;
      // __Hotfix0_get_isCancelled: XLua.DelegateBridge;
      // __Hotfix0_get_isCritical: XLua.DelegateBridge;
      // __Hotfix0_get_isDamage: XLua.DelegateBridge;
      // __Hotfix0_get_isHeal: XLua.DelegateBridge;
      // __Hotfix0_get_isElementDamage: XLua.DelegateBridge;
      // __Hotfix0_get_source: XLua.DelegateBridge;
      // __Hotfix0_get_target: XLua.DelegateBridge;
      // __Hotfix0_get_damageType: XLua.DelegateBridge;
      // __Hotfix0_set_damageType: XLua.DelegateBridge;
      // __Hotfix0_get_applyWay: XLua.DelegateBridge;
      // __Hotfix0_set_applyWay: XLua.DelegateBridge;
      // __Hotfix0_get_cancelReason: XLua.DelegateBridge;
      // __Hotfix0_set_cancelReason: XLua.DelegateBridge;
      // __Hotfix0_get_attackType: XLua.DelegateBridge;
      // __Hotfix0_set_attackType: XLua.DelegateBridge;
      // __Hotfix0_get_elmentType: XLua.DelegateBridge;
      // __Hotfix0_set_elmentType: XLua.DelegateBridge;
      // __Hotfix0_get_originValue: XLua.DelegateBridge;
      // __Hotfix0_set_originValue: XLua.DelegateBridge;
      // __Hotfix0_get_finalDelta: XLua.DelegateBridge;
      // __Hotfix0_get_playerSide: XLua.DelegateBridge;
      // __Hotfix0_set_playerSide: XLua.DelegateBridge;
      // __Hotfix0_Cancel: XLua.DelegateBridge;
      // __Hotfix0_Assign: XLua.DelegateBridge;
      // __Hotfix0_Split: XLua.DelegateBridge;
      // __Hotfix0_SetSharedFlag: XLua.DelegateBridge;
      // __Hotfix1_SetSharedFlag: XLua.DelegateBridge;
      // __Hotfix0_CheckSharedFlag: XLua.DelegateBridge;
      // __Hotfix1_CheckSharedFlag: XLua.DelegateBridge;
      // __Hotfix0_NewDamageModifierAfterCalculate: XLua.DelegateBridge;
      // __Hotfix1_NewDamageModifierAfterCalculate: XLua.DelegateBridge;
      // __Hotfix0_NewElementDamageModifierAfterCalculate: XLua.DelegateBridge;
      // __Hotfix0_NewHeal: XLua.DelegateBridge;
      // __Hotfix0_NewSp: XLua.DelegateBridge;
      // __Hotfix0_NewCost: XLua.DelegateBridge;
      // __Hotfix0_NewCharacterLimitDelta: XLua.DelegateBridge;
      // __Hotfix0_NewLifePointDelta: XLua.DelegateBridge;
    }
    export interface ModifierSplitter {
      // <options>k__BackingField: Torappu.Battle.ModifierSplitter.Options;
      // m_damageNode: Torappu.Battle.Action.Nodes.ApplyDamage;
      // m_cachedSplittedModifiers: Torappu.ListDict<Torappu.ObjectPtr<Torappu.Battle.Entity>,System.Collections.Generic.KeyValuePair<Torappu.Battle.Modifier,Torappu.Battle.Action.Nodes.ApplyModifier>>;
    }
    export interface MeleeModifierSplitter {
      // m_sharedSplittedNode: Torappu.Battle.Action.Nodes.ApplyModifier;
    }
    export interface RangedModifierSplitter {
      damageNodeIndex: System.Int32;
      // m_actions: System.Collections.Generic.IList<Torappu.Battle.Action.ActionNode>;
    }
    export interface MountPoint {
      INVALID: Torappu.Battle.MountPoint;
      // m_transform: UnityEngine.Transform;
      // m_entity: Torappu.ObjectPtr<Torappu.Battle.Entity>;
    }
    export interface MoveController {
      OBSTACLE_AVOID_TICK_PERIOD: System.Int32;
      OBSTACLE_AVOID_FORCE_FACTOR: System.Single;
      MIN_OBSTACLE_AVOID_INFLUENCE_FACTOR: System.Single;
      SEPARATION_TICK_PERIOD: System.Int32;
      SEPARATION_FORCE_FACTOR: System.Single;
      SEPARATION_RADIUS: System.Single;
      MIN_SEPARATION_SUM_DELTA: System.Single;
      TILE_NEAR_THRESHOLD: System.Single;
      _steeringFactor: System.Single;
      _maxSteeringForce: System.Single;
      _halfBodyWidth: System.Single;
      // m_target: Torappu.Battle.IMovable;
      // m_footOffset: UnityEngine.Vector2;
      // m_lastVelocity: UnityEngine.Vector2;
      // m_lastObstacleAvoidForce: UnityEngine.Vector2;
      // m_lastSeparationForce: UnityEngine.Vector2;
      // m_obstacleAvoidTicker: Torappu.PeriodicTicker;
      // m_separationTicker: Torappu.PeriodicTicker;
    }
    export interface ObjectManager {
      // m_objects: Torappu.PriorityQueue<Torappu.Battle.BObject>;
      // m_cachedList: System.Collections.Generic.List<Torappu.Battle.BObject>;
    }
    export interface BounceProjectile {
      _lifeTimeType: Torappu.LifeType;
      _lifeTime: System.Single;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_stopAfterMaxHit: XLua.DelegateBridge;
      // __Hotfix0_get_stopAfterFirstHit: XLua.DelegateBridge;
      // __Hotfix0_get_stopWhenSourceInvalid: XLua.DelegateBridge;
      // __Hotfix0_get_alwaysHitTraceTargetInTheEnd: XLua.DelegateBridge;
      // __Hotfix0_get_alwaysHitTraceTargetWhenReached: XLua.DelegateBridge;
      // __Hotfix0_get_alwaysReachInTheEnd: XLua.DelegateBridge;
      // __Hotfix0_GetLifeTime: XLua.DelegateBridge;
      // __Hotfix0_GetMaxHitNum: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetAlreadyHitAndUpdate: XLua.DelegateBridge;
    }
    export interface HarpoonProjectile {
      _pullForceLevel: System.Int32;
      _pullSourceOffset: System.Single;
      _stopAfterPulledBack: System.Boolean;
      // m_pullForceLevel: System.Int32;
      // m_pullBackDestination: UnityEngine.Vector2;
      // m_isPullStopped: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_pullForceLevel: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_OnProjectileStop: XLua.DelegateBridge;
      // __Hotfix0_SetPullForceLevel: XLua.DelegateBridge;
      // __Hotfix0_DoLink: XLua.DelegateBridge;
    }
    export interface LaserProjectile {
      _unlimitedAlreadyHit: System.Boolean;
      _ignoreTargetDead: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_DoLink: XLua.DelegateBridge;
      // __Hotfix0_GetMaxHitNum: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetAlreadyHitAndUpdate: XLua.DelegateBridge;
      // __Hotfix0_OnHitTarget: XLua.DelegateBridge;
    }
    export interface LassoProjectile {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_DoLink: XLua.DelegateBridge;
      // __Hotfix0__ValidForLassoProjectile: XLua.DelegateBridge;
    }
    export interface LinkProjectile {
      _lifeTimeType: Torappu.LifeType;
      _lifeTime: System.Single;
      _linkDuration: System.Single;
      _isSilenceable: System.Boolean;
      _keepHitTarget: System.Boolean;
      _splitDamage: System.Boolean;
      // m_maxHitTimes: System.Int32;
      // m_curHitTimes: System.Int32;
      // m_linkDuration: System.Single;
      // m_linkTarget: Torappu.ObjectPtr<Torappu.Battle.Entity>;
      // m_isAttachedToTarget: System.Boolean;
      // m_damageSplitter: Torappu.Battle.MeleeModifierSplitter;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_IsLifeTimeLimited: XLua.DelegateBridge;
      // __Hotfix0_get_linkDuration: XLua.DelegateBridge;
      // __Hotfix0_get_hasSplittedDamage: XLua.DelegateBridge;
      // __Hotfix0_get_stopAfterMaxHit: XLua.DelegateBridge;
      // __Hotfix0_get_stopAfterFirstHit: XLua.DelegateBridge;
      // __Hotfix0_get_stopWhenSourceInvalid: XLua.DelegateBridge;
      // __Hotfix0_get_alwaysHitTraceTargetInTheEnd: XLua.DelegateBridge;
      // __Hotfix0_get_alwaysHitTraceTargetWhenReached: XLua.DelegateBridge;
      // __Hotfix0_get_alwaysReachInTheEnd: XLua.DelegateBridge;
      // __Hotfix0_GetLifeTime: XLua.DelegateBridge;
      // __Hotfix0_GetMaxHitNum: XLua.DelegateBridge;
      // __Hotfix0_GetKeepAlreadyHitTime: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_OnProjectileBorn: XLua.DelegateBridge;
      // __Hotfix0_OnHitTarget: XLua.DelegateBridge;
      // __Hotfix0_DoLink: XLua.DelegateBridge;
      // __Hotfix0__InitDamageSplitter: XLua.DelegateBridge;
    }
    export interface BasicMovement {
      _rotateToTarget: System.Boolean;
      _forceReachedWhenTimeup: System.Boolean;
      _useSourceDirection: System.Boolean;
      _freezeRotationZ: System.Boolean;
      _exactMatchCameraForward: System.Boolean;
      _resetToTargetPosWhenReached: System.Boolean;
      // m_originPos: UnityEngine.Vector3;
      // m_targetPos: UnityEngine.Vector3;
      // m_reachedTarget: System.Boolean;
      // m_targetMountPoint: Torappu.Battle.MountPoint;
      // m_startMountPoint: Torappu.Battle.MountPoint;
      // <direction>k__BackingField: UnityEngine.Vector3;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_direction: XLua.DelegateBridge;
      // __Hotfix0_set_direction: XLua.DelegateBridge;
      // __Hotfix0_get_position: XLua.DelegateBridge;
      // __Hotfix0_set_position: XLua.DelegateBridge;
      // __Hotfix0_get_rotateToTarget: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_OnProjectileStop: XLua.DelegateBridge;
      // __Hotfix0_OnInitPose: XLua.DelegateBridge;
      // __Hotfix0_DealReached: XLua.DelegateBridge;
      // __Hotfix0_CheckReached: XLua.DelegateBridge;
      // __Hotfix0_DoCheckReachedInternal: XLua.DelegateBridge;
      // __Hotfix0_GetTraceTargetMapPosition: XLua.DelegateBridge;
      // __Hotfix0_SmoothLerpDirection: XLua.DelegateBridge;
      // __Hotfix0_DoUpdateRotation: XLua.DelegateBridge;
      // __Hotfix0_RotateToCertainDirection: XLua.DelegateBridge;
    }
    export interface NetCatcherProjectile {
      _pullForceLevel: System.Int32;
      _firstPartTime: System.Single;
      _stopAfterFirstPulledBack: System.Boolean;
      _allowInputTargetDead: System.Boolean;
      _secondPullSourceOffset: System.Single;
      _secondPartTime: System.Single;
      _stopAfterSecondPulledBack: System.Boolean;
      _maxRandomOffset: System.Single;
      // m_pullForceLevel: System.Int32;
      // m_firstPullBackDestination: UnityEngine.Vector2;
      // m_secondPullBackDestination: UnityEngine.Vector2;
      // m_lastInputTargetMapPosition: UnityEngine.Vector2;
      // m_isFirstPart: System.Boolean;
      // m_isPullStopped: System.Boolean;
      FILTER_TOO_HEAVY_MASS_LEVEL: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_firstPullBackDestination: XLua.DelegateBridge;
      // __Hotfix0_get_isFirstPart: XLua.DelegateBridge;
      // __Hotfix0_get_pullForceLevel: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_OnProjectileStop: XLua.DelegateBridge;
      // __Hotfix0_SetPullForceLevel: XLua.DelegateBridge;
      // __Hotfix0_ExtraCheckToFinish: XLua.DelegateBridge;
      // __Hotfix0__StopForceOnEnemy: XLua.DelegateBridge;
      // __Hotfix0_StartSecondPartProjectile: XLua.DelegateBridge;
      // __Hotfix0_DoLink: XLua.DelegateBridge;
      // __Hotfix0_DoLink_SecondPart: XLua.DelegateBridge;
      // __Hotfix0_SetPullTime: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0__DoPull: XLua.DelegateBridge;
      // __Hotfix0_GetEffectFollowTarget: XLua.DelegateBridge;
    }
    export interface Projectile {
      INFINITE_TIME: System.Single;
      _randomDelayToBorn: System.Single;
      // _bodyTransform: UnityEngine.Transform;
      _keepAlreadyHitTime: System.Single;
      _mainEffect: System.String;
      _clearMainEffectWhenReached: System.Boolean;
      _actionController: Torappu.Battle.Projectile.ActionController;
      // m_eventCallbacks: System.Action<Torappu.Battle.Projectile>[];
      // m_lifeTime: Torappu.FP;
      // m_maxHitNum: System.Int32;
      // m_isStopped: System.Boolean;
      // m_hasReached: System.Boolean;
      // m_hasHitTraceTarget: System.Boolean;
      // m_currentHitNum: System.Int32;
      // m_keepAlreadyHitTime: System.Single;
      // m_mainEffect: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
      // m_type: Torappu.Battle.Projectile.Type;
      // m_source: Torappu.ObjectPtr<Torappu.Battle.Entity>;
      // m_traceTarget: Torappu.ObjectPtr<Torappu.Battle.Entity>;
      // m_ability: Torappu.ObjectPtr<Torappu.Battle.Ability>;
      // m_behaviours: Torappu.Battle.Projectile.Behaviour[];
      // m_behavioursInited: System.Boolean;
      // m_targetsAlreadyHit: System.Collections.Generic.Dictionary<Torappu.ObjectPtr<Torappu.Battle.Entity>,Torappu.FP>;
      // <currentTime>k__BackingField: Torappu.FP;
      // <targetTransform>k__BackingField: UnityEngine.Transform;
      // <key>k__BackingField: System.String;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_mainEffect: XLua.DelegateBridge;
      // __Hotfix0_get_currentTime: XLua.DelegateBridge;
      // __Hotfix0_set_currentTime: XLua.DelegateBridge;
      // __Hotfix0_get_lifeTime: XLua.DelegateBridge;
      // __Hotfix0_get_remainingTime: XLua.DelegateBridge;
      // __Hotfix0_get_bodyTransform: XLua.DelegateBridge;
      // __Hotfix0_get_source: XLua.DelegateBridge;
      // __Hotfix0_get_traceTarget: XLua.DelegateBridge;
      // __Hotfix0_get_ability: XLua.DelegateBridge;
      // __Hotfix0_get_type: XLua.DelegateBridge;
      // __Hotfix0_get_timeRatio: XLua.DelegateBridge;
      // __Hotfix0_get_targetTransform: XLua.DelegateBridge;
      // __Hotfix0_set_targetTransform: XLua.DelegateBridge;
      // __Hotfix0_get_context: XLua.DelegateBridge;
      // __Hotfix0_get_blackboard: XLua.DelegateBridge;
      // __Hotfix0_get_key: XLua.DelegateBridge;
      // __Hotfix0_set_key: XLua.DelegateBridge;
      // __Hotfix0_get_isStopped: XLua.DelegateBridge;
      // __Hotfix0_get_hasReached: XLua.DelegateBridge;
      // __Hotfix0_get_behaviours: XLua.DelegateBridge;
      // __Hotfix0_OnAllocate: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix1_Init: XLua.DelegateBridge;
      // __Hotfix0__InitInline: XLua.DelegateBridge;
      // __Hotfix0_SetTraceTarget: XLua.DelegateBridge;
      // __Hotfix0_Interrupt: XLua.DelegateBridge;
      // __Hotfix0_RegisterActions: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_ExtraCheckToFinish: XLua.DelegateBridge;
      // __Hotfix0_DealHitTarget: XLua.DelegateBridge;
      // __Hotfix0_DealHitTargetLeft: XLua.DelegateBridge;
      // __Hotfix0_EnsureLifeTime: XLua.DelegateBridge;
      // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
      // __Hotfix0_RegisterEventCallback: XLua.DelegateBridge;
      // __Hotfix0_ApplyAtkScaleToDamageNode: XLua.DelegateBridge;
      // __Hotfix0_PlayBehaviourAudio: XLua.DelegateBridge;
      // __Hotfix0_OnAttackTimeChanged: XLua.DelegateBridge;
      // __Hotfix0_ResetAll: XLua.DelegateBridge;
      // __Hotfix0_GetKeepAlreadyHitTime: XLua.DelegateBridge;
      // __Hotfix0_OnProjectileBorn: XLua.DelegateBridge;
      // __Hotfix0_OnProjectileStop: XLua.DelegateBridge;
      // __Hotfix0_OnHitTarget: XLua.DelegateBridge;
      // __Hotfix0_OnBehavioursHitTarget: XLua.DelegateBridge;
      // __Hotfix0_OnHitTargetLeft: XLua.DelegateBridge;
      // __Hotfix0_OnProjectileReached: XLua.DelegateBridge;
      // __Hotfix0_DealProjectileReached: XLua.DelegateBridge;
      // __Hotfix0_SetHasReached: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetAlreadyHitAndUpdate: XLua.DelegateBridge;
      // __Hotfix0_UpdateAlreadyHit: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetAlreadyHit: XLua.DelegateBridge;
      // __Hotfix0_StopMe: XLua.DelegateBridge;
      // __Hotfix0__DealHitTraceTarget: XLua.DelegateBridge;
      // __Hotfix0__DelayToBorn: XLua.DelegateBridge;
      // __Hotfix0__CreateMainEffect: XLua.DelegateBridge;
      // __Hotfix0__ClearMainEffectIfNot: XLua.DelegateBridge;
      // __Hotfix0_ReplaceMainEffect: XLua.DelegateBridge;
      // __Hotfix0__TryClearMainEffectWhenReachedIfNot: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
      // __Hotfix0_ReplaceActionNodes: XLua.DelegateBridge;
      // __Hotfix0_GetActionNodes: XLua.DelegateBridge;
      // __Hotfix0_RunActions: XLua.DelegateBridge;
    }
    export interface SimpleProjectile {
      _lifeTimeType: Torappu.LifeType;
      _lifeTime: System.Single;
      _hitNumType: Torappu.LifeType;
      _maxHitNum: System.Int32;
      _stopAfterMaxHit: System.Boolean;
      _stopAfterFirstHit: System.Boolean;
      _stopWhenSourceInvalid: System.Boolean;
      _alwaysHitTraceTargetInTheEnd: System.Boolean;
      _alwaysReachInTheEnd: System.Boolean;
      _limitedMaxHitNumToSourceBlockedCnt: System.Boolean;
      _allowZeroBlockCntLimit: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_limitedHitNum: XLua.DelegateBridge;
      // __Hotfix0_get_stopAfterMaxHit: XLua.DelegateBridge;
      // __Hotfix0_get_stopAfterFirstHit: XLua.DelegateBridge;
      // __Hotfix0_get_stopWhenSourceInvalid: XLua.DelegateBridge;
      // __Hotfix0_get_alwaysHitTraceTargetInTheEnd: XLua.DelegateBridge;
      // __Hotfix0_get_alwaysHitTraceTargetWhenReached: XLua.DelegateBridge;
      // __Hotfix0_get_alwaysReachInTheEnd: XLua.DelegateBridge;
      // __Hotfix0_GetLifeTime: XLua.DelegateBridge;
      // __Hotfix0_GetMaxHitNum: XLua.DelegateBridge;
    }
    export interface BattleAudioLoader {
      BATTLE_CHARWORD_TYPES: Torappu.CharWordShowType[];
      _extraUISignals: System.String[];
      // m_sharedList: System.Collections.Generic.List<System.String>;
      // m_sharedAbilityList: System.Collections.Generic.List<Torappu.Battle.Ability>;
      // m_sharedBuffList: System.Collections.Generic.List<Torappu.BuffData>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_PreloadOthers: XLua.DelegateBridge;
      // __Hotfix0_PreloadCustomTrigger: XLua.DelegateBridge;
      // __Hotfix0_PreloadProjectile: XLua.DelegateBridge;
      // __Hotfix0_PreloadAbility: XLua.DelegateBridge;
      // __Hotfix0_PreloadCharacter: XLua.DelegateBridge;
      // __Hotfix0_PreloadUnit: XLua.DelegateBridge;
      // __Hotfix0_PreloadEnemy: XLua.DelegateBridge;
      // __Hotfix0_PreloadSkill: XLua.DelegateBridge;
      // __Hotfix0_PreloadBuffs: XLua.DelegateBridge;
      // __Hotfix0_PreloadSkin: XLua.DelegateBridge;
      // __Hotfix0_PreloadOperaRes: XLua.DelegateBridge;
      // __Hotfix0_UnloadPreloadedAssets: XLua.DelegateBridge;
      // __Hotfix0_UnloadOtherPersistTags: XLua.DelegateBridge;
      // __Hotfix0__PreloadSignal: XLua.DelegateBridge;
      // __Hotfix0__PreloadBuffSource: XLua.DelegateBridge;
      // __Hotfix0__PreloadSpineEventSignal: XLua.DelegateBridge;
      // __Hotfix0_OnDestroy: XLua.DelegateBridge;
    }
    export interface BattleFactory {
      _walkCursor: Torappu.Battle.PreviewCursor;
      _flyCursor: Torappu.Battle.PreviewCursor;
      // _enemyFolder: UnityEngine.Transform;
      // _characterFolder: UnityEngine.Transform;
      // _miscFolder: UnityEngine.Transform;
      // _projectileFolder: UnityEngine.Transform;
      // _effectFolder: UnityEngine.Transform;
      // _mapWidgetFolder: UnityEngine.Transform;
      // _cameraFolder: UnityEngine.Transform;
      CAMERA_WITH_POSTPROCESS: System.String;
      CAMERA_WITHOUT_POSTPROCESS: System.String;
    }
    export interface ResourceCollector {
      EFFECT_PRELOAD_DEFAULT_CNT: System.Int32;
      ENEMY_PRELOAD_CNT: System.Int32;
      PROJECTILE_PRELOAD_CNT: System.Int32;
      EFFECT_AUTO_REUSE_CAPACITY: System.Int32;
      DYNAMIC_ABILITY_CNT: System.Int32;
      NULL_YIELD_COUNT: System.Int32;
      // s_sharedBuffList: System.Collections.Generic.List<Torappu.BuffData>;
      // s_sharedActionList: System.Collections.Generic.List<Torappu.Battle.Action.ActionNode>;
      _extraEffects: System.String[];
      _audioLoader: Torappu.Battle.BattleAudioLoader;
      // m_assetLoader: Torappu.Resource.AbstractAssetLoader;
      // m_configs: System.Collections.Generic.List<Torappu.ObjectPool.PoolManager.ObjectConfig>;
      // m_hashSet: System.Collections.Generic.HashSet<System.String>;
      // m_taskQueue: System.Collections.Generic.Queue<UnityEngine.Coroutine>;
      // m_yieldCnt: System.Int32;
    }
    export interface ResourceRouter {
      ENEMY_FOLDER: System.String;
      CHARACTER_FOLDER: System.String;
      TOKEN_FOLDER: System.String;
      PROJECTILE_FOLDER: System.String;
      SKILL_FOLDER: System.String;
      TILE_FOLDER: System.String;
      GLOBAL_BUFF_PATH: System.String;
      DYNAMIC_ABILITY_PATH: System.String;
      EFFECT_FOLDER: System.String;
      UNIT_SKIN_FOLDER: System.String;
      LEVEL_DATA_PATH: System.String;
      MAP_DATA_PATH: System.String;
      MAP_SCENE_PATH: System.String;
      LEVEL_OPERA_CONFIG_PATH: System.String;
      CAMERA_PATH: System.String;
    }
    export interface RuntimeAttributesSnapshot {
      maxHp: Torappu.ObscuredFP;
      atk: Torappu.ObscuredFP;
      def: Torappu.ObscuredFP;
      magicResistance: Torappu.ObscuredFP;
      // cost: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      // blockCnt: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      attackSpeed: Torappu.ObscuredFP;
      baseAttackTime: Torappu.ObscuredFP;
      // respawnTime: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
    }
    export interface Scheduler {
      PREVIEW_CURSOR_COUNT: System.Int32;
      PREVIEW_CURSOR_PRE_DELAY: System.Single;
      PREVIEW_CURSOR_INTERVAL: System.Single;
      // m_blockCounter: System.Int32;
      // m_spawnedEnemiesCnt: System.UInt32;
      // m_spawnedWavesCnt: System.Int32;
      // m_finishedEnemiesCnt: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      // m_killedEnemiesCnt: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      // m_validFinishedEnemiesCnt: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      // m_validKilledEnemiesCnt: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      // m_validMissedEnemiesCnt: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      // m_waveStartTime: Torappu.FP;
      // m_fragmentStartTime: Torappu.FP;
      // m_waves: Torappu.LevelData.WaveData[];
      // m_enemyMap: System.Collections.Generic.Dictionary<System.String,Torappu.Battle.Scheduler.EnemyItem>;
      // m_actionExecutors: System.Func<Torappu.LevelData.WaveData.FragmentData.ActionData,System.Action<Torappu.LevelData.WaveData.FragmentData.ActionData>,System.Collections.IEnumerator>[];
      // m_actionQueue: System.Collections.Generic.List<Torappu.Battle.Scheduler.ActionItem>;
      // m_managedWaveEnemies: System.Collections.Generic.List<Torappu.Battle.Enemy>;
      // m_managedFinalEnemies: System.Collections.Generic.List<Torappu.Battle.Enemy>;
      // m_brancheMap: Torappu.ListDict<System.String,Torappu.Battle.Scheduler.BranchRuntime>;
      // m_enabledHiddenGroups: Torappu.ListSet<System.String>;
      // m_cachedEnemies: Torappu.ListSet<Torappu.Battle.Enemy>;
      // m_cachedEnemiesWaveToAdd: System.Int32;
      // <totalEnemiesCnt>k__BackingField: System.Int32;
      // <battleController>k__BackingField: Torappu.Battle.BattleController;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_totalEnemiesCnt: XLua.DelegateBridge;
      // __Hotfix0_set_totalEnemiesCnt: XLua.DelegateBridge;
      // __Hotfix0_get_totalWavesCnt: XLua.DelegateBridge;
      // __Hotfix0_get_remainingEnemiesCnt: XLua.DelegateBridge;
      // __Hotfix0_get_finishedEnemiesCnt: XLua.DelegateBridge;
      // __Hotfix0_get_spawnedEnemiesCnt: XLua.DelegateBridge;
      // __Hotfix0_get_spawnedWavesCnt: XLua.DelegateBridge;
      // __Hotfix0_get_killedEnemiesCnt: XLua.DelegateBridge;
      // __Hotfix0_get_validKilledEnemiesCnt: XLua.DelegateBridge;
      // __Hotfix0_get_validFinishedEnemiesCnt: XLua.DelegateBridge;
      // __Hotfix0_get_validMissedEnemiesCnt: XLua.DelegateBridge;
      // __Hotfix0_get_completeProgress: XLua.DelegateBridge;
      // __Hotfix0_get_battleController: XLua.DelegateBridge;
      // __Hotfix0_set_battleController: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_OnGameInit: XLua.DelegateBridge;
      // __Hotfix0_OnGameReady: XLua.DelegateBridge;
      // __Hotfix0_OnGameStart: XLua.DelegateBridge;
      // __Hotfix0_OnGameReset: XLua.DelegateBridge;
      // __Hotfix0_OnGameOver: XLua.DelegateBridge;
      // __Hotfix0_CheckBranchIsReadyToMoveNext: XLua.DelegateBridge;
      // __Hotfix0_CheckBranchIsNotEmpty: XLua.DelegateBridge;
      // __Hotfix0_TryMoveNextBranch: XLua.DelegateBridge;
      // __Hotfix0_TryPickRandomBranch: XLua.DelegateBridge;
      // __Hotfix0_TakeSnapshot: XLua.DelegateBridge;
      // __Hotfix0_FinishCurrentWave: XLua.DelegateBridge;
      // __Hotfix0_TrackEnemyAtNextWave: XLua.DelegateBridge;
      // __Hotfix0__DoSchedule: XLua.DelegateBridge;
      // __Hotfix0__DealWave: XLua.DelegateBridge;
      // __Hotfix0__DealFragment: XLua.DelegateBridge;
      // __Hotfix0__DealBranchPhase: XLua.DelegateBridge;
      // __Hotfix0__DealAction: XLua.DelegateBridge;
      // __Hotfix0__DoSpawn: XLua.DelegateBridge;
      // __Hotfix0_SpawnSummonedEnemy: XLua.DelegateBridge;
      // __Hotfix0_SpawnSummonedEnemyWithRuntimeRoute: XLua.DelegateBridge;
      // __Hotfix0__DoPreviewCursor: XLua.DelegateBridge;
      // __Hotfix0__DoStory: XLua.DelegateBridge;
      // __Hotfix0__DoTutorial: XLua.DelegateBridge;
      // __Hotfix0__DoPlayBGM: XLua.DelegateBridge;
      // __Hotfix0__DoDisplayEnemyInfo: XLua.DelegateBridge;
      // __Hotfix0__DoActivatePredefined: XLua.DelegateBridge;
      // __Hotfix0__DoPlayOpera: XLua.DelegateBridge;
      // __Hotfix0__DoTriggerPredefined: XLua.DelegateBridge;
      // __Hotfix0__CreateEnemyItem: XLua.DelegateBridge;
      // __Hotfix0__OnActionExecuted: XLua.DelegateBridge;
      // __Hotfix0__CheckWaveNotFinish: XLua.DelegateBridge;
      // __Hotfix0__CheckFinalNotFinish: XLua.DelegateBridge;
      // __Hotfix0__OnUnitDestroyed: XLua.DelegateBridge;
      // __Hotfix0__OnEnemyRecycled: XLua.DelegateBridge;
      // __Hotfix0__CheckActionEnabled: XLua.DelegateBridge;
      // __Hotfix0__RegisterActionExecutors: XLua.DelegateBridge;
    }
    export interface AdvancedToggleSkill {
      _endAnim: System.String;
      _endEffect: System.String[];
      _playExtraSignalAtSkillBegin: System.Boolean;
      // m_skillBeginAnimAlreadyOn: System.Boolean;
      // m_hasPlayedBeginAnim: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_beginAnim: XLua.DelegateBridge;
      // __Hotfix0_get_beginEffect: XLua.DelegateBridge;
      // __Hotfix0_get_hasPlayedBeginAnim: XLua.DelegateBridge;
      // __Hotfix0_get_canSkipReduceSp: XLua.DelegateBridge;
      // __Hotfix0_IsClickable: XLua.DelegateBridge;
      // __Hotfix0_get_isAffecting: XLua.DelegateBridge;
      // __Hotfix0_get_remainingProgress: XLua.DelegateBridge;
      // __Hotfix0_OnBeforeSkillBeginAnim: XLua.DelegateBridge;
      // __Hotfix0_OnEnterSkillState: XLua.DelegateBridge;
      // __Hotfix0_OnSkillEnd: XLua.DelegateBridge;
      // __Hotfix0_InterruptIfNot: XLua.DelegateBridge;
      // __Hotfix0_UseSkill: XLua.DelegateBridge;
      // __Hotfix0_PlayBeginEffectAndAudio: XLua.DelegateBridge;
    }
    export interface AppearSkill {
      _overrideStartEffect: System.String;
      _switchToState: System.Boolean;
      _castOnLocate: System.Boolean;
      _overrideAudioSignalId: System.Boolean;
      // m_available: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_IsAvailable: XLua.DelegateBridge;
      // __Hotfix0_get_overrideStartEffect: XLua.DelegateBridge;
      // __Hotfix0_get_overrideAudioSignalId: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_DoCast: XLua.DelegateBridge;
      // __Hotfix0_UseSkill: XLua.DelegateBridge;
      // __Hotfix0_OnBorn: XLua.DelegateBridge;
      // __Hotfix0_OnLocate: XLua.DelegateBridge;
      // __Hotfix0_GatherEffects: XLua.DelegateBridge;
    }
    export interface AttachOrDetachSkill {
      INFINITY_TIME: Torappu.FP;
      _switchToState: System.Boolean;
      _isInfinity: System.Boolean;
      // m_abilities: Torappu.Battle.Ability[];
      // m_duration: Torappu.FP;
      // m_remainingTime: Torappu.FP;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_IsAvailable: XLua.DelegateBridge;
      // __Hotfix0_get_isAffecting: XLua.DelegateBridge;
      // __Hotfix0_get_remainingTime: XLua.DelegateBridge;
      // __Hotfix0_get_remainingProgress: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_OnOwnerFinish: XLua.DelegateBridge;
      // __Hotfix0_AssignData: XLua.DelegateBridge;
      // __Hotfix0_DoCast: XLua.DelegateBridge;
      // __Hotfix0_OnCastSucceed: XLua.DelegateBridge;
      // __Hotfix0_UseSkill: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
      // __Hotfix0__DetachSkill: XLua.DelegateBridge;
    }
    export interface BasicSkill {
      _maxTriggerTime: System.Int32;
      _limitGlobalTriggerTime: System.Boolean;
      _hidden: System.Boolean;
      _playCharWordVoice: System.Boolean;
      _canCastWithNoSp: System.Boolean;
      _canSilenced: System.Boolean;
      _defaultModeIndex: System.Int32;
      _attackBlackboardModeIndex: System.Int32;
      _rangeIdModeIndex: System.Int32;
      _rangeIdUsageType: Torappu.RangeIdUsage;
      _writeDurationToAttackBlackboard: System.Boolean;
      _attachSignalIds: System.Boolean;
      _extraAbilities: Torappu.Battle.Ability[];
      _useEscapeTime: System.Boolean;
      _earlySkillFinishAtAttackFinished: System.Boolean;
      _playSkillBeginAnim: System.Boolean;
      _beginAnim: System.String;
      _beginEffect: System.String[];
      _useFaceVector: System.Boolean;
      // m_triggerCnt: System.Int32;
      // m_waitForSkillEnd: System.Boolean;
      // m_isEarlyFinished: System.Boolean;
      // m_owner: Torappu.Battle.Character;
      // m_data: Torappu.SkillData;
      // m_attackBlackboard: Torappu.Blackboard;
      // m_ability: Torappu.Battle.Ability;
      // m_registeredAsModifier: System.Boolean;
      // m_maxTriggerTime: System.Int32;
      // m_beginEffects: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>>;
      // m_behaviours: Torappu.Battle.BasicSkill.Behaviour[];
      // <cachedOperationSide>k__BackingField: Torappu.PlayerSide;
      // <blackboard>k__BackingField: Torappu.Blackboard;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_attributeMask: XLua.DelegateBridge;
      // __Hotfix0_get_triggerCnt: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalFlagMask: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalImmuneMask: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalAntiMask: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalComboMask: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalComboImmuneMask: XLua.DelegateBridge;
      // __Hotfix0_get_recoverSpWhenAffecting: XLua.DelegateBridge;
      // __Hotfix0_get_defaultModeIndex: XLua.DelegateBridge;
      // __Hotfix0_get_rangeIdModeIndex: XLua.DelegateBridge;
      // __Hotfix0_get_hasUniqueAttackBlackboard: XLua.DelegateBridge;
      // __Hotfix0_IsAvailable: XLua.DelegateBridge;
      // __Hotfix0_get_OwnerNotInAbnormalState: XLua.DelegateBridge;
      // __Hotfix0_IsTriggerable: XLua.DelegateBridge;
      // __Hotfix0_IsOpTriggerable: XLua.DelegateBridge;
      // __Hotfix0_IsClickable: XLua.DelegateBridge;
      // __Hotfix0_IsDiscardable: XLua.DelegateBridge;
      // __Hotfix0_get_isAffecting: XLua.DelegateBridge;
      // __Hotfix0_get_cachedOperationSide: XLua.DelegateBridge;
      // __Hotfix0_set_cachedOperationSide: XLua.DelegateBridge;
      // __Hotfix0_get_shouldCastLikeAttack: XLua.DelegateBridge;
      // __Hotfix0_get_overrideAudioSignalId: XLua.DelegateBridge;
      // __Hotfix0_get_remainingTime: XLua.DelegateBridge;
      // __Hotfix0_get_remainingProgress: XLua.DelegateBridge;
      // __Hotfix0_get_availableCnt: XLua.DelegateBridge;
      // __Hotfix0_get_blackboard: XLua.DelegateBridge;
      // __Hotfix0_set_blackboard: XLua.DelegateBridge;
      // __Hotfix0_get_ability: XLua.DelegateBridge;
      // __Hotfix0_get_rangeToShow: XLua.DelegateBridge;
      // __Hotfix0_get_playCharWordVoice: XLua.DelegateBridge;
      // __Hotfix0_get_canCastWithNoSp: XLua.DelegateBridge;
      // __Hotfix0_get_canSkipReduceSp: XLua.DelegateBridge;
      // __Hotfix0_get_forceToShowRange: XLua.DelegateBridge;
      // __Hotfix0_get_isUsedUp: XLua.DelegateBridge;
      // __Hotfix0_get_registeredAsModifier: XLua.DelegateBridge;
      // __Hotfix0_set_registeredAsModifier: XLua.DelegateBridge;
      // __Hotfix0_get_useRangeIdModeIndex: XLua.DelegateBridge;
      // __Hotfix0_get_data: XLua.DelegateBridge;
      // __Hotfix0_get_hidden: XLua.DelegateBridge;
      // __Hotfix0_get_needToDisplay: XLua.DelegateBridge;
      // __Hotfix0_get_isRemoteControlled: XLua.DelegateBridge;
      // __Hotfix0_get_hideProgressFlag: XLua.DelegateBridge;
      // __Hotfix0_get_hasPlayedBeginAnim: XLua.DelegateBridge;
      // __Hotfix0_get_rangeidUsageType: XLua.DelegateBridge;
      // __Hotfix0_get_owner: XLua.DelegateBridge;
      // __Hotfix0_get_escapeTime: XLua.DelegateBridge;
      // __Hotfix0_get_playSkillBeginAnim: XLua.DelegateBridge;
      // __Hotfix0_get_beginAnim: XLua.DelegateBridge;
      // __Hotfix0_get_beginEffect: XLua.DelegateBridge;
      // __Hotfix0_AssignData: XLua.DelegateBridge;
      // __Hotfix0_Cast: XLua.DelegateBridge;
      // __Hotfix0_Tick: XLua.DelegateBridge;
      // __Hotfix0_OnSkillStart: XLua.DelegateBridge;
      // __Hotfix0_OnSkillEnd: XLua.DelegateBridge;
      // __Hotfix0_InterruptIfNot: XLua.DelegateBridge;
      // __Hotfix0_OnEnterSkillState: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_OnBorn: XLua.DelegateBridge;
      // __Hotfix0_OnLocate: XLua.DelegateBridge;
      // __Hotfix0_OnOwnerFinish: XLua.DelegateBridge;
      // __Hotfix0_OnCastSucceed: XLua.DelegateBridge;
      // __Hotfix0_OnBeforeAttack: XLua.DelegateBridge;
      // __Hotfix0_OnAfterAttack: XLua.DelegateBridge;
      // __Hotfix0_GetValue: XLua.DelegateBridge;
      // __Hotfix0_GetAttackBlackboard: XLua.DelegateBridge;
      // __Hotfix0_PlayBeginEffectAndAudio: XLua.DelegateBridge;
      // __Hotfix0_OnBeforeSkillBeginAnim: XLua.DelegateBridge;
      // __Hotfix0_ClearBeginEffect: XLua.DelegateBridge;
      // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      // __Hotfix0_GatherProjectiles: XLua.DelegateBridge;
      // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
      // __Hotfix0_GatherActionNodes: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_ReduceSp: XLua.DelegateBridge;
      // __Hotfix0_UpdateSpRecovery: XLua.DelegateBridge;
      // __Hotfix0_OnCastFinish: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
      // __Hotfix0__GenerateSignalId: XLua.DelegateBridge;
      // __Hotfix0__OnReceiveAttackFinishEvent: XLua.DelegateBridge;
      // __Hotfix0__ApplyModifierToData: XLua.DelegateBridge;
      // __Hotfix0_PostprocessData: XLua.DelegateBridge;
    }
    export interface CastSkill {
      _trigger: Torappu.Battle.TargetTrigger;
      _switchToState: System.Boolean;
      _canSwitchDuringBorn: System.Boolean;
      _useTriggerInManualMode: System.Boolean;
      _allowNoTarget: System.Boolean;
      _shouldCastLikeAttack: System.Boolean;
      _isRemoteControlled: System.Boolean;
      _hideRangeToShow: System.Boolean;
      _rangeToShow: Torappu.Battle.TargetSelector;
      _recoverSpIfNoTarget: System.Boolean;
      _resetAbilityCooldownWhenCastEnd: System.Boolean;
      _onlyAvailableWhenTokenValid: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_NotHideRangeToShow: XLua.DelegateBridge;
      // __Hotfix0_IsAvailable: XLua.DelegateBridge;
      // __Hotfix0__IsTokenValid: XLua.DelegateBridge;
      // __Hotfix0_get_isAvailableToShowStackCount: XLua.DelegateBridge;
      // __Hotfix0_get_shouldCastLikeAttack: XLua.DelegateBridge;
      // __Hotfix0_get_isRemoteControlled: XLua.DelegateBridge;
      // __Hotfix0_get_rangeToShow: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_AssignData: XLua.DelegateBridge;
      // __Hotfix0_DoCast: XLua.DelegateBridge;
      // __Hotfix0_OnCastFinish: XLua.DelegateBridge;
      // __Hotfix0_UseSkill: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0__RecoverSp: XLua.DelegateBridge;
    }
    export interface CastSkillWithCost {
      // m_requiredCost: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_requiredCost: XLua.DelegateBridge;
      // __Hotfix0_IsAvailable: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_DoCast: XLua.DelegateBridge;
    }
    export interface CastSkillWithLimitTimes {
      _progressSource: Torappu.Battle.Abilities.AbilityEventCounter;
      _fetchFromMainAttack: System.Boolean;
      _modeIndex: System.Int32;
      _finishSkillWithProgress: System.Boolean;
      _canDiscardRemainingCount: System.Boolean;
      _hideProgressOnAffect: System.Boolean;
      // m_progressSource: Torappu.Battle.Abilities.AbilityEventCounter;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_fetchFromMainAttack: XLua.DelegateBridge;
      // __Hotfix0_get_remainingProgress: XLua.DelegateBridge;
      // __Hotfix0_get_hideProgressFlag: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0__FetchCounterSource: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_IsDiscardable: XLua.DelegateBridge;
      // __Hotfix0_UseSkill: XLua.DelegateBridge;
    }
    export interface CastTokenSkill {
      _stopSpWhenTokenIsFull: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_UpdateSpRecovery: XLua.DelegateBridge;
    }
    export interface ContinuousSkill {
      DEFAULT_SP_COST_PER_SEC: System.Single;
      // m_spContinuousCostTimer: Torappu.PrecisePeriodicTimer;
      // m_spCostPerSpec: System.Single;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_AssignData: XLua.DelegateBridge;
      // __Hotfix0_DoCast: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
    }
    export interface NextAtkAdditionSkill {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_CheckIfToModify: XLua.DelegateBridge;
      // __Hotfix0_ApplyModification: XLua.DelegateBridge;
      // __Hotfix0_CancelAfterAttack: XLua.DelegateBridge;
    }
    export interface NextAttackOrCombatSkill {
      _trigger: Torappu.Battle.TargetTrigger;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_trigger: XLua.DelegateBridge;
      // __Hotfix0_get_rangeToShow: XLua.DelegateBridge;
      // __Hotfix0_AssignData: XLua.DelegateBridge;
      // __Hotfix0_OnBeforeAttack: XLua.DelegateBridge;
      // __Hotfix0_UseSkill: XLua.DelegateBridge;
      // __Hotfix0_DoCast: XLua.DelegateBridge;
      // __Hotfix0_OnAfterAttack: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
    }
    export interface PassiveSkill {
      _attachInDummy: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_DoCast: XLua.DelegateBridge;
      // __Hotfix0_UseSkill: XLua.DelegateBridge;
    }
    export interface ReplacementSkill {
      _cancelIfSearchTargetFailed: System.Boolean;
      _recoverSpIfTargetDead: System.Boolean;
      _rangeToShow: Torappu.Battle.TargetSelector;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_rangeToShow: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_CheckIfToModify: XLua.DelegateBridge;
      // __Hotfix0_DoCast: XLua.DelegateBridge;
      // __Hotfix0_ApplyModification: XLua.DelegateBridge;
      // __Hotfix0_CancelAfterAttack: XLua.DelegateBridge;
      // __Hotfix0_OnCastFinish: XLua.DelegateBridge;
      // __Hotfix0_TryHookSearchTarget: XLua.DelegateBridge;
      // __Hotfix0__RecoverSp: XLua.DelegateBridge;
    }
    export interface ToggleSkill {
      _switchToMode: System.Int32;
      _switchToState: System.Boolean;
      _restartFSM: System.Boolean;
      _skipAudioWhenToggleInternal: System.Boolean;
      // m_toggled: System.Boolean;
      // m_defaultModeIndex: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_IsAvailable: XLua.DelegateBridge;
      // __Hotfix0_get_toggled: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_DoCast: XLua.DelegateBridge;
      // __Hotfix0_UseSkill: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0__SetToggledInternal: XLua.DelegateBridge;
    }
    export interface CharacterAudioHooker {
      _replaceAudioPairs: Torappu.Battle.CharacterAudioHooker.ReplacePair[];
    }
    export interface CharacterSkin {
      _overrideEffects: System.Collections.Generic.KeyValuePair<System.String,System.String>[];
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_TryLoadEffectOverrideMap: XLua.DelegateBridge;
    }
    export interface AppearTalent {
      _castOnLocate: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_DoAttach: XLua.DelegateBridge;
      // __Hotfix0_DoDetach: XLua.DelegateBridge;
      // __Hotfix0__OnBorn: XLua.DelegateBridge;
      // __Hotfix0__OnLocate: XLua.DelegateBridge;
    }
    export interface BasicTalent {
      // m_owner: Torappu.Battle.Unit;
      // m_ability: Torappu.Battle.Ability;
      // <parentMode>k__BackingField: Torappu.Battle.UnitMode;
      // <data>k__BackingField: Torappu.TalentData;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_isValid: XLua.DelegateBridge;
      // __Hotfix0_get_isAttached: XLua.DelegateBridge;
      // __Hotfix0_get_attachInDummy: XLua.DelegateBridge;
      // __Hotfix0_get_overrideDefaultRangeId: XLua.DelegateBridge;
      // __Hotfix0_get_applyTalentScale: XLua.DelegateBridge;
      // __Hotfix0_get_scaleCertainKeyFlag: XLua.DelegateBridge;
      // __Hotfix0_get_scaleCertainKeyList: XLua.DelegateBridge;
      // __Hotfix0_get_applyTalentRangeBySkill: XLua.DelegateBridge;
      // __Hotfix0_get_applyBlackboardBySkill: XLua.DelegateBridge;
      // __Hotfix0_get_writeRangeIdToProjectileBlackboard: XLua.DelegateBridge;
      // __Hotfix0_get_applyDataModifier: XLua.DelegateBridge;
      // __Hotfix0_get_isRootTalent: XLua.DelegateBridge;
      // __Hotfix0_get_isValidRootTalent: XLua.DelegateBridge;
      // __Hotfix0_get_defaultModeIndex: XLua.DelegateBridge;
      // __Hotfix0_get_talentKey: XLua.DelegateBridge;
      // __Hotfix0_get_rangeId: XLua.DelegateBridge;
      // __Hotfix0_get_parentMode: XLua.DelegateBridge;
      // __Hotfix0_set_parentMode: XLua.DelegateBridge;
      // __Hotfix0_get_data: XLua.DelegateBridge;
      // __Hotfix0_set_data: XLua.DelegateBridge;
      // __Hotfix0_get_owner: XLua.DelegateBridge;
      // __Hotfix0_set_owner: XLua.DelegateBridge;
      // __Hotfix0_get_internalBlackboard: XLua.DelegateBridge;
      // __Hotfix0_get_ability: XLua.DelegateBridge;
      // __Hotfix0_AssignData: XLua.DelegateBridge;
      // __Hotfix0_GenerateAttackBlackboard: XLua.DelegateBridge;
      // __Hotfix0_GetSkillBlackboardFromRawData: XLua.DelegateBridge;
      // __Hotfix0_Attach: XLua.DelegateBridge;
      // __Hotfix0_Detach: XLua.DelegateBridge;
      // __Hotfix0_OnBeforeAttack: XLua.DelegateBridge;
      // __Hotfix0_OnAfterAttack: XLua.DelegateBridge;
      // __Hotfix0_CheckReborn: XLua.DelegateBridge;
      // __Hotfix0_MarkInvalid: XLua.DelegateBridge;
      // __Hotfix0_SetParentMode: XLua.DelegateBridge;
      // __Hotfix0_CheckRootOrValidModeTalent: XLua.DelegateBridge;
      // __Hotfix0_ProcessTraitBlackboard: XLua.DelegateBridge;
      // __Hotfix0_OnRecycle: XLua.DelegateBridge;
      // __Hotfix0_DoAttach: XLua.DelegateBridge;
      // __Hotfix0_DoDetach: XLua.DelegateBridge;
      // __Hotfix0__GetRangeRadius: XLua.DelegateBridge;
      // __Hotfix0__CreateBlackboard: XLua.DelegateBridge;
      // __Hotfix0__GenerateBlackboardByTalentScale: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
    }
    export interface ConstrainedTalent {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_OnBeforeAttack: XLua.DelegateBridge;
      // __Hotfix0_OnAfterAttack: XLua.DelegateBridge;
      // __Hotfix0_CheckReborn: XLua.DelegateBridge;
      // __Hotfix0_ProcessTraitBlackboard: XLua.DelegateBridge;
    }
    export interface DeckBuffTalent {
      _options: Torappu.Battle.DeckBuffTalent.Options;
      _deckBuffs: Torappu.Battle.DeckBuff[];
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_AssignData: XLua.DelegateBridge;
      // __Hotfix0_CreateDeckModifier: XLua.DelegateBridge;
    }
    export interface DecklikeRuntimeCostTalent {
      _options: Torappu.Battle.DecklikeRuntimeCostTalent.Options;
      _runtimeCost: System.Int32;
      // m_runtimeCost: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_attachInDummy: XLua.DelegateBridge;
      // __Hotfix0_AssignData: XLua.DelegateBridge;
      // __Hotfix0_CreateDecklikeRuntimeCostModifier: XLua.DelegateBridge;
    }
    export interface DeckTalent {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_attachInDummy: XLua.DelegateBridge;
    }
    export interface DeckTalentToAddCardCost {
      _selector: Torappu.Battle.DeckSelector;
      // m_cost: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_AssignData: XLua.DelegateBridge;
      // __Hotfix0_CreateDeckModifier: XLua.DelegateBridge;
    }
    export interface DeckTalentToAddMaxCost {
      // m_cost: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_AssignData: XLua.DelegateBridge;
      // __Hotfix0_CreateDeckModifier: XLua.DelegateBridge;
    }
    export interface DeckTalentToModifyHealScaleByCost {
      _maxCost: System.Int32;
      // m_maxCost: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_AssignData: XLua.DelegateBridge;
      // __Hotfix0_CreateDeckModifier: XLua.DelegateBridge;
    }
    export interface DeckTalentToModifyRespawnMaxMultiplier {
      _selector: Torappu.Battle.DeckSelector;
      // m_maxMultiplier: System.Single;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_AssignData: XLua.DelegateBridge;
      // __Hotfix0_CreateDeckModifier: XLua.DelegateBridge;
    }
    export interface OverrideAttackOrCombatTalent {
      _overrideAttack: System.Boolean;
      _overrideCombat: System.Boolean;
      _trigger: Torappu.Battle.TargetTrigger;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_DoAttach: XLua.DelegateBridge;
      // __Hotfix0_DoDetach: XLua.DelegateBridge;
    }
    export interface ProbAdditionNextAtkTalent {
      _familyMask: Torappu.Battle.Ability.FamilyGroupMask;
      _probKey: System.String;
      // m_prob: System.Single;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_AssignData: XLua.DelegateBridge;
      // __Hotfix0_DoAttach: XLua.DelegateBridge;
      // __Hotfix0_DoDetach: XLua.DelegateBridge;
      // __Hotfix0_OnBeforeAttack: XLua.DelegateBridge;
      // __Hotfix0_OnAfterAttack: XLua.DelegateBridge;
    }
    export interface ProbReplaceNextAtkTalent {
      _trigger: Torappu.Battle.TargetTrigger;
      _familyMask: Torappu.Battle.Ability.FamilyGroupMask;
      _probKey: System.String;
      // m_prob: System.Single;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_trigger: XLua.DelegateBridge;
      // __Hotfix0_AssignData: XLua.DelegateBridge;
      // __Hotfix0_DoAttach: XLua.DelegateBridge;
      // __Hotfix0_DoDetach: XLua.DelegateBridge;
      // __Hotfix0_OnBeforeAttack: XLua.DelegateBridge;
      // __Hotfix0_OnAfterAttack: XLua.DelegateBridge;
      // __Hotfix0_TryHookSearchTarget: XLua.DelegateBridge;
    }
    export interface RallyPointRebornTalent {
      // m_rebornBuff: Torappu.Battle.Buff;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_DoAttach: XLua.DelegateBridge;
      // __Hotfix0__FetchFirstPassiveBuffUids: XLua.DelegateBridge;
      // __Hotfix0_get_rebornProgress: XLua.DelegateBridge;
    }
    export interface RebornTalent {
      _maxRespawnCnt: System.Int32;
      _modeIndex: System.Int32;
      _buffs: Torappu.BuffData[];
      _effects: System.String[];
      _useAbilityToHandle: System.Boolean;
      _abilityName: System.String;
      _hpRechargeRatio: System.Single;
      _buffsRetainedWhenReborn: System.Collections.Generic.List<System.String>;
      _extraRebornDataPresets: System.Collections.Generic.List<Torappu.Battle.RebornTalent.AdvancedRebornData>;
      // m_respawnCnt: System.Int32;
      // m_defaultRespawnData: Torappu.Battle.Unit.RebornData;
      // m_respawnDataList: System.Collections.Generic.List<Torappu.Battle.Unit.RebornData>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_useAbilityToHandle: XLua.DelegateBridge;
      // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
      // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      // __Hotfix0_AssignData: XLua.DelegateBridge;
      // __Hotfix0_DoAttach: XLua.DelegateBridge;
      // __Hotfix0_DoDetach: XLua.DelegateBridge;
      // __Hotfix0_CheckReborn: XLua.DelegateBridge;
      // __Hotfix0_ModifyHpRatio: XLua.DelegateBridge;
      // __Hotfix0__OnRebornAfterFakeDeath: XLua.DelegateBridge;
    }
    export interface SilenceableTalent {
      _isSilenceable: System.Boolean;
      // m_isManuallyAttached: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_DoAttach: XLua.DelegateBridge;
      // __Hotfix0_DoDetach: XLua.DelegateBridge;
      // __Hotfix0__UpdateInternalAbilityAttachStatus: XLua.DelegateBridge;
      // __Hotfix0__OnAbnormalFlagPossiblyChanged: XLua.DelegateBridge;
      // __Hotfix0_OnRecycle: XLua.DelegateBridge;
    }
    export interface SkillInfluencedTalent {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetSkillBlackboardFromRawData: XLua.DelegateBridge;
    }
    export interface SkillSyncedTalent {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_DoAttach: XLua.DelegateBridge;
      // __Hotfix0_DoDetach: XLua.DelegateBridge;
      // __Hotfix0__OnSkillStart: XLua.DelegateBridge;
      // __Hotfix0__OnSkillFinish: XLua.DelegateBridge;
    }
    export interface Talent {
      _overwriteTalentKey: System.String;
      _attachInDummy: System.Boolean;
      _defaultModeIndex: System.Int32;
      _attackBlackboardModeIndex: System.Int32;
      _overrideDefaultRangeId: System.Boolean;
      _applyTalentScale: System.Boolean;
      _applyTalentRange: System.Boolean;
      _applyBlackboardBySkill: System.Boolean;
      _writeRangeIdToProjectileBlackboard: System.Boolean;
      _scaleCertainKeyFlag: System.Boolean;
      _scaleCertainKeyList: System.String[];
      _applyDataModifier: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_attachInDummy: XLua.DelegateBridge;
      // __Hotfix0_get_overrideDefaultRangeId: XLua.DelegateBridge;
      // __Hotfix0_get_applyTalentScale: XLua.DelegateBridge;
      // __Hotfix0_get_defaultModeIndex: XLua.DelegateBridge;
      // __Hotfix0_get_scaleCertainKeyFlag: XLua.DelegateBridge;
      // __Hotfix0_get_scaleCertainKeyList: XLua.DelegateBridge;
      // __Hotfix0_get_applyTalentRangeBySkill: XLua.DelegateBridge;
      // __Hotfix0_get_applyBlackboardBySkill: XLua.DelegateBridge;
      // __Hotfix0_get_writeRangeIdToProjectileBlackboard: XLua.DelegateBridge;
      // __Hotfix0_get_applyDataModifier: XLua.DelegateBridge;
      // __Hotfix0_get_talentKey: XLua.DelegateBridge;
      // __Hotfix0_GenerateAttackBlackboard: XLua.DelegateBridge;
    }
    export interface TraitTalent {
      _modifiers: Torappu.Battle.TraitTalent.TraitModifier[];
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_ProcessTraitBlackboard: XLua.DelegateBridge;
    }
    export interface AutoLoadBoxRange {
      // m_loadedRangeId: System.String;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_loadedRangeId: XLua.DelegateBridge;
      // __Hotfix0_FetchColliders: XLua.DelegateBridge;
      // __Hotfix0_InitCollidersIfNot: XLua.DelegateBridge;
      // __Hotfix0_FetchCollidersByRangeId: XLua.DelegateBridge;
      // __Hotfix0_InitColliderIfNotByRangeId: XLua.DelegateBridge;
    }
    export interface Box2dPhysicsUtil {
      // s_sharedSet: System.Collections.Generic.HashSet<System.UInt32>;
      // s_sharedColliders: UnityEngine.Collider2D[];
      // s_sharedTiles: System.Collections.Generic.List<Torappu.Battle.Tile>;
    }
    export interface CircleRange {
      _scaleble: System.Boolean;
      // m_circleCollider: UnityEngine.CircleCollider2D;
      // m_originRadius: System.Single;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_FetchColliders: XLua.DelegateBridge;
      // __Hotfix0_InitCollidersIfNot: XLua.DelegateBridge;
    }
    export interface ConstBoxRange {
      _rangeId: System.String;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_FetchColliders: XLua.DelegateBridge;
      // __Hotfix0_InitCollidersIfNot: XLua.DelegateBridge;
    }
    export interface EmptyRange {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_extendable: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetIn: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
      // __Hotfix0_FindTiles: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_UpdateExtend: XLua.DelegateBridge;
    }
    export interface EntityLocateRange {
      // m_colliders: UnityEngine.Collider2D[];
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_extendable: XLua.DelegateBridge;
      // __Hotfix0_get_colliders: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_UpdateExtend: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
      // __Hotfix0_FindTiles: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetIn: XLua.DelegateBridge;
      // __Hotfix0_FetchColliders: XLua.DelegateBridge;
    }
    export interface GlobalRange {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_extendable: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetIn: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
      // __Hotfix0_FindTiles: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_UpdateExtend: XLua.DelegateBridge;
    }
    export interface LitePhysicsUtil {
      // s_sharedSet: System.Collections.Generic.HashSet<Torappu.GridPosition>;
      // s_sharedTiles: System.Collections.Generic.List<Torappu.Battle.Tile>;
    }
    export interface PhysicsRange {
      _extendable: System.Boolean;
      // m_colliders: UnityEngine.Collider2D[];
      // m_originBoxColliderData: Torappu.Battle.PhysicsRange.BoxColliderData[];
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_extendable: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_UpdateExtend: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
      // __Hotfix0_FindTiles: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetIn: XLua.DelegateBridge;
      // __Hotfix0_FetchColliders: XLua.DelegateBridge;
      // __Hotfix0_InitCollidersIfNot: XLua.DelegateBridge;
    }
    export interface Range {
      // m_currentExtend: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_ability: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_UpdateExtend: XLua.DelegateBridge;
      // __Hotfix0_FindTargets_DISPOSE: XLua.DelegateBridge;
      // __Hotfix1_FindTargets_DISPOSE: XLua.DelegateBridge;
    }
    export interface AdvancedSelector {
      _targetSide: Torappu.Battle.SideType;
      _targetMotion: Torappu.MotionMask;
      _targetCategory: Torappu.Battle.EntityCategory;
      _postFilter: Torappu.Battle.FilterUtil.FilterType;
      _ignoreTargetFree: System.Boolean;
      _onlyIgnoreSomeOfTargetFreeCase: System.Boolean;
      _abnormalFlag: Torappu.AbnormalFlag;
      _abnormalCombo: Torappu.AbnormalCombo;
      _needProfessionMask: System.Boolean;
      _professionMask: Torappu.ProfessionCategory;
      _limitTargetNum: System.Boolean;
      _maxNum: System.Int32;
      _excludeOwner: System.Boolean;
      _sortByTauntAtLast: System.Boolean;
      // m_maxTargetNum: System.Int32;
      // m_excludeTargetList: Torappu.ListSet<Torappu.Battle.Entity>;
      // <>f__am$cache0: System.Comparison<Torappu.Battle.Entity>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_limitTargetNum: XLua.DelegateBridge;
      // __Hotfix0_get_targetSide: XLua.DelegateBridge;
      // __Hotfix0_get_targetMotion: XLua.DelegateBridge;
      // __Hotfix0_get_targetCategory: XLua.DelegateBridge;
      // __Hotfix0_get_maxTargetNum: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreTargetFree: XLua.DelegateBridge;
      // __Hotfix0_get_onlyIgnoreSomeOfTargetFreeCase: XLua.DelegateBridge;
      // __Hotfix0_get_needProfessionMask: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalFlag: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalCombo: XLua.DelegateBridge;
      // __Hotfix0_get_professionMask: XLua.DelegateBridge;
      // __Hotfix0_get_filterTypeAllAndLimitTargetNum: XLua.DelegateBridge;
      // __Hotfix0_get_isAlly: XLua.DelegateBridge;
      // __Hotfix0_get_dontExcludeOwner: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
      // __Hotfix1_OnPostFilter: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
      // __Hotfix0_ValidateTarget: XLua.DelegateBridge;
      // __Hotfix0_AddExcludeTarget: XLua.DelegateBridge;
      // __Hotfix0_ClearExcludeTarget: XLua.DelegateBridge;
    }
    export interface AdvancedSelectorBaseOnOwnerTile {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
    }
    export interface AdvancedSelectorWithBuildableType {
      _buildableType: Torappu.BuildableType;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
    }
    export interface AdvancedSelectorWithinHpRatio {
      _filerMaxHp: System.Boolean;
      _maxHpRatio: System.Single;
      _filterMinHp: System.Boolean;
      _minHpRatio: System.Single;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_ValidateTarget: XLua.DelegateBridge;
      // __Hotfix0__CheckHpRatio: XLua.DelegateBridge;
    }
    export interface AdvancedSelectorWithinHpRatioInBb {
      _filerMaxHp: System.Boolean;
      _maxHpRatio: System.Single;
      _loadMaxHpRatioFromBb: System.Boolean;
      // m_maxHpRatio: System.Single;
      _filterMinHp: System.Boolean;
      _minHpRatio: System.Single;
      _loadMinHpRatioFromBb: System.Boolean;
      // m_minHpRatio: System.Single;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
      // __Hotfix0_ValidateTarget: XLua.DelegateBridge;
      // __Hotfix0__CheckHpRatio: XLua.DelegateBridge;
    }
    export interface AdvancedSelectorWithOffsetFromTileBind {
      _tagExcluded: System.Boolean;
      _filterTag: System.String;
      _excludeRootTile: System.Boolean;
      _ignoreMapLayer: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreMapLayer: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
    }
    export interface AdvancedSelectorWithRandomTarget {
      _additionalNum: System.Int32;
      // m_prob: System.Single;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
    }
    export interface AdvancedSelectorWithTagAndBuffKey {
      _tagExcluded: System.Boolean;
      _filterTag: System.String;
      _buffKeyExcluded: System.Boolean;
      _buffKey: System.String;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
    }
    export interface AdvancedSelectorWithTagAndBuffWithinHpRatio {
      _tagExcluded: System.Boolean;
      _filterTag: System.String;
      _buffKeyExcluded: System.Boolean;
      _buffKey: System.String;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
    }
    export interface AdvancedSelectorWithTagFilteredWithCreatedTime {
      _compareWithOwnerCreatedTime: Torappu.CompareType;
      _tagExcluded: System.Boolean;
      _filterTag: System.String;
      // m_ownerCreatedTime: Torappu.FP;
      // m_instanceUid: System.UInt32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
    }
    export interface AllyBlockedAdvancedSelector {
      // m_tmpList: System.Collections.Generic.List<Torappu.Battle.Entity>;
      // m_character: Torappu.Battle.Character;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
      // __Hotfix0_ValidateEnemyTarget: XLua.DelegateBridge;
      // __Hotfix0_ValidateAllyTarget: XLua.DelegateBridge;
    }
    export interface BlemshSleepingFirstSelector {
      _abnormalComboWithHighPriority: Torappu.AbnormalCombo;
      _selectBlockRadiusSquareWithHighPrior: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
      // __Hotfix0__CheckEnemyHasAbnormalComboAndInBlockableRange: XLua.DelegateBridge;
    }
    export interface BlockedAndAdvancedSelectorWithRestPostSort {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
    }
    export interface BlockedBaseSelector {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_ValidateTarget: XLua.DelegateBridge;
      // __Hotfix0__ValidateWithTargetFree: XLua.DelegateBridge;
    }
    export interface BlockedOrAdvancedSelector {
      _limitedMaxTargetNumToBlockedCnt: System.Boolean;
      _allowZeroBlockCntLimit: System.Boolean;
      // m_tmpList: System.Collections.Generic.List<Torappu.Battle.Entity>;
      // <character>k__BackingField: Torappu.Battle.Character;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_character: XLua.DelegateBridge;
      // __Hotfix0_set_character: XLua.DelegateBridge;
      // __Hotfix0_get_limitedMaxTargetNumToBlockedCnt: XLua.DelegateBridge;
      // __Hotfix0_get_allowZeroBlockCntLimit: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
      // __Hotfix0_DoBaseFindTargets: XLua.DelegateBridge;
      // __Hotfix0_ValidateTarget: XLua.DelegateBridge;
    }
    export interface BlockedOrAdvancedSelectorWithRestPostSort {
      _postSortTag: System.String;
      _excludeBuffKey: System.String;
      _hasPriorAbnormalFlag: System.Boolean;
      _priorAbnormalFlag: Torappu.AbnormalFlag;
      // <>f__am$cache0: System.Comparison<Torappu.Battle.Entity>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_hasPriorAbnormalFlag: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
    }
    export interface BlockedOrRandomSelector {
      // m_character: Torappu.Battle.Character;
      _selectTargetInRageWhenHasBlockee: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
    }
    export interface BlockedSelector {
      _maxTargetNum: System.Int32;
      // m_targetOptions: Torappu.Battle.TargetOptions;
      // <character>k__BackingField: Torappu.Battle.Character;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_character: XLua.DelegateBridge;
      // __Hotfix0_set_character: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreTargetFree: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreAllyTargetFree: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreHealFree: XLua.DelegateBridge;
      // __Hotfix0_get_onlyIgnoreSomeOfTargetFreeCase: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalFlag: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalCombo: XLua.DelegateBridge;
      // __Hotfix0_get_maxTargetNum: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
      // __Hotfix0_FindTiles: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetIn: XLua.DelegateBridge;
      // __Hotfix0_ValidateTarget: XLua.DelegateBridge;
    }
    export interface BlockedTargetAdvancedSelector {
      _shrinkInTheEnd: System.Boolean;
      _shrinkNum: System.Int32;
      _pickMyTokenFirst: System.Boolean;
      // m_character: Torappu.Battle.Character;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_shrinkInTheEnd: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
    }
    export interface ChainedSelector {
      _targetSide: Torappu.Battle.SideType;
      _targetMotion: Torappu.MotionMask;
      _targetCategory: Torappu.Battle.EntityCategory;
      _ignoreTargetFree: System.Boolean;
      _maxTarget: System.Int32;
      _useChainPrefix: System.Boolean;
      // m_targets: System.Collections.Generic.List<Torappu.Battle.Entity>;
      // m_maxTarget: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_targetSide: XLua.DelegateBridge;
      // __Hotfix0_get_targetMotion: XLua.DelegateBridge;
      // __Hotfix0_get_targetCategory: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreTargetFree: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
      // __Hotfix1_OnPostFilter: XLua.DelegateBridge;
      // __Hotfix0_FindNearestTarget: XLua.DelegateBridge;
      // __Hotfix0__GetNearestTargetIndex: XLua.DelegateBridge;
    }
    export interface EmptyRangeSelector {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_limitTargetNum: XLua.DelegateBridge;
      // __Hotfix0_get_targetSide: XLua.DelegateBridge;
      // __Hotfix0_get_targetMotion: XLua.DelegateBridge;
      // __Hotfix0_get_targetCategory: XLua.DelegateBridge;
      // __Hotfix0_get_maxTargetNum: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreTargetFree: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
      // __Hotfix1_OnPostFilter: XLua.DelegateBridge;
    }
    export interface EnemyHostSelector {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
      // __Hotfix0_FindTiles: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetIn: XLua.DelegateBridge;
    }
    export interface FilterUtil {
      DISTANCE_WEIGHT_SMALL_ENOUGH_GAP: Torappu.FP;
      HATRED_WEIGHT_SMALL_ENOUGH_GAP: Torappu.FP;
      DEFAULT_SMALL_ENOUGH_GAP: Torappu.FP;
      // s_weightQueue: Torappu.PriorityQueue<Torappu.Battle.FilterUtil.WeightedTarget<Torappu.Battle.Entity>>;
      // s_tileWeightQueue: Torappu.PriorityQueue<Torappu.Battle.FilterUtil.WeightedTarget<Torappu.Battle.Tile>>;
      // s_sharedList: System.Collections.Generic.List<Torappu.Battle.Entity>;
      // <>f__mg$cache0: Torappu.Battle.FilterUtil.FilterFunc;
      // <>f__mg$cache1: Torappu.Battle.FilterUtil.FilterFunc;
      // <>f__mg$cache2: Torappu.Battle.FilterUtil.FilterFunc;
      // <>f__mg$cache3: Torappu.Battle.FilterUtil.FilterFunc;
      // <>f__mg$cache4: Torappu.Battle.FilterUtil.FilterFunc;
      // <>f__mg$cache5: Torappu.Battle.FilterUtil.FilterFunc;
      // <>f__mg$cache6: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache7: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache8: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache9: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cacheA: Torappu.Battle.FilterUtil.FilterFunc;
      // <>f__mg$cacheB: Torappu.Battle.FilterUtil.FilterFunc;
      // <>f__mg$cacheC: Torappu.Battle.FilterUtil.FilterFunc;
      // <>f__mg$cacheD: Torappu.Battle.FilterUtil.FilterFunc;
      // <>f__mg$cacheE: Torappu.Battle.FilterUtil.FilterFunc;
      // <>f__mg$cacheF: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache10: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache11: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache12: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache13: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache14: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache15: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache16: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache17: Torappu.Battle.FilterUtil.FilterFunc;
      // <>f__mg$cache18: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache19: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache1A: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache1B: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache1C: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache1D: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache1E: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache1F: Torappu.Battle.FilterUtil.FilterFunc;
      // <>f__mg$cache20: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache21: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // <>f__mg$cache22: Torappu.Battle.FilterUtil.FilterFunc;
      // <>f__mg$cache23: Torappu.Battle.FilterUtil.FilterFunc;
      // <>f__mg$cache24: Torappu.Battle.FilterUtil.FilterFuncWithPriorWeight;
      // __Hotfix0_Filter: XLua.DelegateBridge;
      // __Hotfix1_Filter: XLua.DelegateBridge;
      // __Hotfix2_Filter: XLua.DelegateBridge;
      // __Hotfix3_Filter: XLua.DelegateBridge;
      // __Hotfix0_FilterWithVolumne: XLua.DelegateBridge;
      // __Hotfix1_FilterWithVolumne: XLua.DelegateBridge;
      // __Hotfix0_FilterTileWithinSliceInplace: XLua.DelegateBridge;
      // __Hotfix1_FilterTileWithinSliceInplace: XLua.DelegateBridge;
      // __Hotfix4_Filter: XLua.DelegateBridge;
      // __Hotfix0_FilterWithFilterByPriorCompFunc: XLua.DelegateBridge;
      // __Hotfix0_ClearStaticVariables: XLua.DelegateBridge;
      // __Hotfix0__Filter_All: XLua.DelegateBridge;
      // __Hotfix0__Filter_HpRatioNotFullAsc: XLua.DelegateBridge;
      // __Hotfix0__Filter_HpRatioAsc: XLua.DelegateBridge;
      // __Hotfix0__Filter_HpRatioNotFull: XLua.DelegateBridge;
      // __Hotfix0__Filter_DistToExitAsc: XLua.DelegateBridge;
      // __Hotfix0__Filter_HatredDes: XLua.DelegateBridge;
      // __Hotfix0__Filter_NotStunnedHatredDes: XLua.DelegateBridge;
      // __Hotfix0__Filter_DefDes: XLua.DelegateBridge;
      // __Hotfix0__Filter_DefAsc: XLua.DelegateBridge;
      // __Hotfix0__Filter_HatredDesFlyFirst: XLua.DelegateBridge;
      // __Hotfix0__Filter_HatredDesRangedFirst: XLua.DelegateBridge;
      // __Hotfix0__Filter_DistToSourceAsc: XLua.DelegateBridge;
      // __Hotfix0__Filter_DistToSourceDes: XLua.DelegateBridge;
      // __Hotfix0__Filter_Haak_Only_ForwardFirstManhattanAsc: XLua.DelegateBridge;
      // __Hotfix0__Filter_DirectionalDistToSourceAsc: XLua.DelegateBridge;
      // __Hotfix0__Filter_Random: XLua.DelegateBridge;
      // __Hotfix0__Filter_HpDes: XLua.DelegateBridge;
      // __Hotfix0__Filter_EpDes: XLua.DelegateBridge;
      // __Hotfix0__Filter_HpAsc: XLua.DelegateBridge;
      // __Hotfix0__Filter_AtkDes: XLua.DelegateBridge;
      // __Hotfix0__Filter_AtkAsc: XLua.DelegateBridge;
      // __Hotfix0__Filter_MaxHpDes: XLua.DelegateBridge;
      // __Hotfix0__Filter_MaxHpAsc: XLua.DelegateBridge;
      // __Hotfix0__Filter_HatredDesUnblockedFirst: XLua.DelegateBridge;
      // __Hotfix0__Filter_HatredDesBlockedFirst: XLua.DelegateBridge;
      // __Hotfix0__Filter_HpNotFullRandom: XLua.DelegateBridge;
      // __Hotfix0__Filter_HatredDesInvisibleFirst: XLua.DelegateBridge;
      // __Hotfix0__Filter_HatredDesSleepingFirst: XLua.DelegateBridge;
      // __Hotfix0__Filter_HatredDesExcludeImmuneSleeping: XLua.DelegateBridge;
      // __Hotfix0__Filter_HpRatioAscContainsStatusResistableBuffFirst: XLua.DelegateBridge;
      // __Hotfix0__Filter_HatredDesDistFartherFirst: XLua.DelegateBridge;
      // __Hotfix0__Filter_HatredDesDistNearerFirst: XLua.DelegateBridge;
      // __Hotfix0__Filter_MassDes: XLua.DelegateBridge;
      // __Hotfix0__Filter_MassAsc: XLua.DelegateBridge;
      // __Hotfix0__Filter_CreatedTimeDes: XLua.DelegateBridge;
      // __Hotfix0__Filter_CreatedTimeAsc: XLua.DelegateBridge;
      // __Hotfix0__Filter_HpRatioNotFullAscMyTokenOrMeFirst: XLua.DelegateBridge;
    }
    export interface InputTargetOnlySelector {
      _targetSide: Torappu.Battle.SideType;
      _targetMotion: Torappu.MotionMask;
      _targetCategory: Torappu.Battle.EntityCategory;
      _ignoreTargetFree: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_targetSide: XLua.DelegateBridge;
      // __Hotfix0_get_targetMotion: XLua.DelegateBridge;
      // __Hotfix0_get_targetCategory: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreTargetFree: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
      // __Hotfix1_OnPostFilter: XLua.DelegateBridge;
    }
    export interface NearestRangeSelector {
      _targetSide: Torappu.Battle.SideType;
      _targetMotion: Torappu.MotionMask;
      _targetCategory: Torappu.Battle.EntityCategory;
      _ignoreTargetFree: System.Boolean;
      _limitTargetNum: System.Boolean;
      _maxTargetNum: System.Int32;
      // m_maxTargetNum: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_IsLimitTargetNum: XLua.DelegateBridge;
      // __Hotfix0_get_targetSide: XLua.DelegateBridge;
      // __Hotfix0_get_targetMotion: XLua.DelegateBridge;
      // __Hotfix0_get_targetCategory: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreTargetFree: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
      // __Hotfix1_OnPostFilter: XLua.DelegateBridge;
    }
    export interface OneOfAllBlockedOrAdvancedSelector {
      // <character>k__BackingField: Torappu.Battle.Character;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_character: XLua.DelegateBridge;
      // __Hotfix0_set_character: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
    }
    export interface RandomSelector {
      _targetSide: Torappu.Battle.SideType;
      _targetMotion: Torappu.MotionMask;
      _targetCategory: Torappu.Battle.EntityCategory;
      _selectNum: System.Int32;
      _excludeSelf: System.Boolean;
      _alwaysAppendSelf: System.Boolean;
      _ignoreTargetFree: System.Boolean;
      _ignoreHealFree: System.Boolean;
      // m_selectNum: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_limitTargetNum: XLua.DelegateBridge;
      // __Hotfix0_get_targetSide: XLua.DelegateBridge;
      // __Hotfix0_get_targetMotion: XLua.DelegateBridge;
      // __Hotfix0_get_targetCategory: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreTargetFree: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreHealFree: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
      // __Hotfix1_OnPostFilter: XLua.DelegateBridge;
    }
    export interface RangeSelector {
      // m_range: Torappu.Battle.Range;
      // m_targetOptions: Torappu.Battle.TargetOptions;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreAllyTargetFree: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreHealFree: XLua.DelegateBridge;
      // __Hotfix0_get_onlyIgnoreSomeOfTargetFreeCase: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalFlag: XLua.DelegateBridge;
      // __Hotfix0_get_abnormalCombo: XLua.DelegateBridge;
      // __Hotfix0_get_professionMask: XLua.DelegateBridge;
      // __Hotfix0_get_targetOptions: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_OnAbilityExtendUpdated: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
      // __Hotfix0_FindTiles: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetIn: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
    }
    export interface SecondaryFilterAdvancedSelector {
      _secondaryFilter: Torappu.Battle.SecondaryFilterAdvancedSelector.SecondaryFilterType;
      _filterTag: System.String;
      _buffKey: System.String;
      _buffKeyPairs: Torappu.Battle.SecondaryFilterAdvancedSelector.BuffKeyPair[];
      // <>f__am$cache0: System.Comparison<Torappu.Battle.Entity>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_IsFilterTag: XLua.DelegateBridge;
      // __Hotfix0_get_IsFilterBuff: XLua.DelegateBridge;
      // __Hotfix0_get_IsFilterBuffPairOr: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
      // __Hotfix0__CheckSecondFilter: XLua.DelegateBridge;
    }
    export interface SecondaryFilterExAdvancedSelector {
      _secondaryFilterEx: Torappu.Battle.SecondaryFilterExAdvancedSelector.SecondaryFilterExType;
      // <>f__am$cache0: System.Comparison<Torappu.Battle.Entity>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
      // __Hotfix0__CheckSecondFilter: XLua.DelegateBridge;
    }
    export interface SelfSelector {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_maxTargetNum: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
      // __Hotfix0_FindTiles: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetIn: XLua.DelegateBridge;
    }
    export interface SelfSelectorInCertainCondition {
      _checkHpRatioCondition: System.Boolean;
      _maxRatio: System.Single;
      // m_maxRatio: Torappu.FP;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
      // __Hotfix0__CheckSelfMeetCertainConditions: XLua.DelegateBridge;
    }
    export interface SequenceGroupSelector {
      _firstOrderSelector: Torappu.Battle.RangeSelector;
      _appendOrderSelector: Torappu.Battle.RangeSelector;
      _limitTargetNum: System.Boolean;
      _maxNum: System.Int32;
      _maxNumBlackboardKey: System.String;
      // m_maxTargetNum: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_limitTargetNum: XLua.DelegateBridge;
      // __Hotfix0_get_targetSide: XLua.DelegateBridge;
      // __Hotfix0_get_targetMotion: XLua.DelegateBridge;
      // __Hotfix0_get_targetCategory: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreTargetFree: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
      // __Hotfix1_OnPostFilter: XLua.DelegateBridge;
    }
    export interface EmpgrdTalentSelector {
      _damageRecorderBuffKey: System.String;
      _lowPriorityBuffKey: System.String;
      _maxTargetNum: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_targetSide: XLua.DelegateBridge;
      // __Hotfix0_get_targetMotion: XLua.DelegateBridge;
      // __Hotfix0_get_targetCategory: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreTargetFree: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
      // __Hotfix1_OnPostFilter: XLua.DelegateBridge;
      // __Hotfix0__GetSafeKey: XLua.DelegateBridge;
      // __Hotfix0__CalculateDamageWeight: XLua.DelegateBridge;
    }
    export interface TargetOptions {
      targetSide: Torappu.Battle.SideType;
      targetMotion: Torappu.MotionMask;
      targetCategory: Torappu.Battle.EntityCategory;
      enableAdvancedOptions: System.Boolean;
      ignoreTargetFree: System.Boolean;
      ignoreAllyTargetFree: System.Boolean;
      ignoreHealFree: System.Boolean;
      ignoreTargetSide: System.Boolean;
      purposeMask: Torappu.Battle.ActionPurposeMask;
      professionMask: Torappu.ProfessionCategory;
      onlyIgnoreSomeOfTargetFreeCase: System.Boolean;
      abnormalFlag: Torappu.AbnormalFlag;
      abnormalCombo: Torappu.AbnormalCombo;
      // m_sourceSide: Torappu.Battle.SideType;
      // m_originTargetSide: System.Nullable<Torappu.Battle.SideType>;
      // m_targetSideMask: Torappu.Battle.SideType;
      // m_sourcePlayerSideMask: Torappu.PlayerSideMask;
    }
    export interface TargetSelector {
      // m_validator: System.Func<Torappu.Battle.Entity,System.Boolean>;
      // <owner>k__BackingField: Torappu.Battle.Entity;
      // <ability>k__BackingField: Torappu.Battle.Ability;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_owner: XLua.DelegateBridge;
      // __Hotfix0_set_owner: XLua.DelegateBridge;
      // __Hotfix0_get_ability: XLua.DelegateBridge;
      // __Hotfix0_set_ability: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreMapLayer: XLua.DelegateBridge;
      // __Hotfix0_get_validator: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_FindTargets_DISPOSE: XLua.DelegateBridge;
      // __Hotfix1_FindTargets_DISPOSE: XLua.DelegateBridge;
      // __Hotfix0_ValidateTarget: XLua.DelegateBridge;
      // __Hotfix0_ValidateTile: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
      // __Hotfix0_OnCastedOnTarget: XLua.DelegateBridge;
      // __Hotfix0_OnAbilityExtendUpdated: XLua.DelegateBridge;
    }
    export interface TileSelector {
      MAX_SURROUND_DISTANCE: System.Single;
      _options: Torappu.Battle.TileSelector.Options;
      _filterType: Torappu.Battle.TileSelector.FilterType;
      _limitTargetNum: System.Boolean;
      _maxNum: System.Int32;
      _tileOrTokenIdListPreferred: System.String[];
      _targetSide: Torappu.Battle.SideType;
      _targetMotion: Torappu.MotionMask;
      _targetCategory: Torappu.Battle.EntityCategory;
      // m_maxTileNum: System.Int32;
      // m_sideType: Torappu.Battle.SideType;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_limitTargetNum: XLua.DelegateBridge;
      // __Hotfix0_get_isCertainTileKeyListPreferred: XLua.DelegateBridge;
      // __Hotfix0_get_targetCategory: XLua.DelegateBridge;
      // __Hotfix0_get_targetMotion: XLua.DelegateBridge;
      // __Hotfix0_get_targetSide: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreTargetFree: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_OnPostFilter: XLua.DelegateBridge;
      // __Hotfix1_OnPostFilter: XLua.DelegateBridge;
      // __Hotfix0_ValidateTile: XLua.DelegateBridge;
      // __Hotfix0__DoFilter: XLua.DelegateBridge;
      // __Hotfix0__GetNearestTile: XLua.DelegateBridge;
      // __Hotfix0__CollectSurroundTile: XLua.DelegateBridge;
      // __Hotfix0__CheckHatredEntityOnTile: XLua.DelegateBridge;
      // __Hotfix0__CheckCharacter: XLua.DelegateBridge;
      // __Hotfix0__CheckEnemies: XLua.DelegateBridge;
    }
    export interface TokenOrAdvancedSelector {
      _includeOwner: System.Boolean;
      // <character>k__BackingField: Torappu.Battle.Character;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_character: XLua.DelegateBridge;
      // __Hotfix0_set_character: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetIn: XLua.DelegateBridge;
    }
    export interface TokenOrHostSelector {
      _maxTargetNum: System.Int32;
      // <character>k__BackingField: Torappu.Battle.Character;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_character: XLua.DelegateBridge;
      // __Hotfix0_set_character: XLua.DelegateBridge;
      // __Hotfix0_get_maxTargetNum: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_DoFindTargets: XLua.DelegateBridge;
      // __Hotfix0_FindTiles: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetIn: XLua.DelegateBridge;
    }
    export interface AlwaysTrigger {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_target: XLua.DelegateBridge;
      // __Hotfix0_get_isReadyToTrig: XLua.DelegateBridge;
      // __Hotfix0_Search: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetIn: XLua.DelegateBridge;
    }
    export interface LevelBranchTrigger {
      _isLoop: System.Boolean;
      _branchId: System.String;
      // m_branchId: System.String;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_target: XLua.DelegateBridge;
      // __Hotfix0_get_isReadyToTrig: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
      // __Hotfix0_Search: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetIn: XLua.DelegateBridge;
    }
    export interface NeverTrigger {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_target: XLua.DelegateBridge;
      // __Hotfix0_Search: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetIn: XLua.DelegateBridge;
    }
    export interface RangedSelectorTrigger {
      // m_rangeSelector: Torappu.Battle.RangeSelector;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Validator: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
    }
    export interface SelectorOrAlwaysTrigger {
      // m_ability: Torappu.Battle.IAlwaysTrigger;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_isReadyToTrig: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
      // __Hotfix0_Search: XLua.DelegateBridge;
    }
    export interface SelectorTrigger {
      SEARCH_TARGET_TICK: System.Int32;
      _keepTarget: System.Boolean;
      _minTargetNum: System.Int32;
      _overrideSearchTargetTick: System.Int32;
      // m_selector: Torappu.Battle.TargetSelector;
      // m_lastTarget: Torappu.ObjectPtr<Torappu.Battle.Entity>;
      // m_findTargetTicker: Torappu.Battle.CompoundPeriodicTicker;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_target: XLua.DelegateBridge;
      // __Hotfix0_get_owner: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_Search: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetIn: XLua.DelegateBridge;
      // __Hotfix0_OnAbilityExtendUpdated: XLua.DelegateBridge;
      // __Hotfix0_Validator: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
      // __Hotfix0_FixedUpdate: XLua.DelegateBridge;
    }
    export interface TargetTrigger {
      // <ability>k__BackingField: Torappu.Battle.Ability;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_ability: XLua.DelegateBridge;
      // __Hotfix0_set_ability: XLua.DelegateBridge;
      // __Hotfix0_get_isReadyToTrig: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_OnAbilityExtendUpdated: XLua.DelegateBridge;
    }
    export interface TileTrigger {
      SEARCH_TARGET_TICK: System.Int32;
      _minTileNum: System.Int32;
      // m_selector: Torappu.Battle.TileSelector;
      // m_findTargetTicker: Torappu.Battle.CompoundPeriodicTicker;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_target: XLua.DelegateBridge;
      // __Hotfix0_get_owner: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_Search: XLua.DelegateBridge;
      // __Hotfix0_CheckTargetIn: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
      // __Hotfix0_FixedUpdate: XLua.DelegateBridge;
    }
    export interface AdvancedCharacterValidator {
      _buildableType: Torappu.BuildableType;
      _rarityMask: Torappu.RarityRankMask;
    }
    export interface AttributeTargetValidator {
      _blackboardPrefix: System.String;
      _conditions: Torappu.Battle.AttributeTargetValidator.AttributeCondition[];
    }
    export interface FilterBuffTargetValidator {
      _excludeKey: System.Boolean;
      _buffs: System.String[];
    }
    export interface FilterGroupTagTargetValidator {
      _tags: System.String[];
    }
    export interface FilterTagTargetValidator {
      _tags: System.String[];
    }
    export interface OriginCostTargetValidator {
      _blackboardPrefix: System.String;
      _compareType: Torappu.CompareType;
      // m_conditonCost: System.Int32;
    }
    export interface SingleIdTargetValidator {
      _targetId: System.String;
    }
    export interface TargetValidator {
      _targetOptions: Torappu.Battle.TargetOptions;
      // m_owner: Torappu.ObjectPtr<Torappu.Battle.Entity>;
      // m_ignoreTargetSide: System.Boolean;
      // m_inited: System.Boolean;
    }
    export interface TokenOrHostTargetValidator {
    }
    export interface Character {
      // LOG_SNAPSHOT_PERIOD_RANGE: UnityEngine.Vector2;
      FIND_BLOCKEE_TICK: System.Int32;
      HATRED_VALUE_GAP: Torappu.FP;
      // _skinHolder: UnityEngine.Transform;
      _motionMode: Torappu.MotionMode;
      _isFixedRotation: System.Boolean;
      _occupiedRemainingCharacterCnt: System.Boolean;
      _useRealBornTimeFromAnim: System.Boolean;
      _buildCondition: Torappu.Battle.BuildCondition;
      _traitAbility: Torappu.Battle.Ability;
      _withdrawCostRecoverRatio: System.Single;
      _maxWithdrawCostRatioOfRawCost: System.Single;
      // _directionTransform: UnityEngine.Transform;
      // _directionIndicator: UnityEngine.Transform;
      _startEffect: System.String;
      _deadEffect: System.String;
      _playStartVocal: System.Boolean;
      _showDeadTweenColor: System.Boolean;
      _useSpecificDeadAnim: System.Boolean;
      _disableRotateWhenDead: System.Boolean;
      _useIdForAudioSignalMask: Torappu.Battle.Character.UseIdForAudioSignalMask;
      _preprocessData: System.Boolean;
      _disableClickCharacterInfo: System.Boolean;
      // m_isBuiltPredefined: System.Boolean;
      // m_defaultRangeId: System.String;
      // m_defaultModeIndex: System.Int32;
      // m_hatred: Torappu.FP;
      // m_createdTime: Torappu.FP;
      // m_talentRange: System.String;
      // m_rootTile: Torappu.Battle.Tile;
      // m_blockedEnemyMgr: Torappu.Battle.Character.BlockedEnemyManager;
      // m_findBlockeeTicker: Torappu.PeriodicTicker;
      // m_snapshotTimer: Torappu.PeriodicTimer;
      // m_replacement: Torappu.Battle.Character.IReplacement;
      // m_skill: Torappu.Battle.BasicSkill;
      // m_skillData: Torappu.SkillData;
      // m_effectOverrideMap: Torappu.ListDict<System.String,System.String>;
      // m_currentSkin: Torappu.Battle.UnitAnimator;
      // m_deckBuffs: System.Collections.Generic.IList<Torappu.Battle.DeckBuff>;
      // m_delayToRecycle: System.Single;
      // m_dataFlowConfig: Torappu.Battle.UnitDataFlowConfig;
      // <cardUid>k__BackingField: System.UInt32;
      // <data>k__BackingField: Torappu.Battle.BattleCharacterData;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_initSideType: XLua.DelegateBridge;
      // __Hotfix0_get_alive: XLua.DelegateBridge;
      // __Hotfix0_get_disableClickCharacterInfo: XLua.DelegateBridge;
      // __Hotfix0_get_defaultMode: XLua.DelegateBridge;
      // __Hotfix0_get_cardUid: XLua.DelegateBridge;
      // __Hotfix0_set_cardUid: XLua.DelegateBridge;
      // __Hotfix0_get_tokenOrHostUid: XLua.DelegateBridge;
      // __Hotfix0_get_characterId: XLua.DelegateBridge;
      // __Hotfix0_get_playStartVocal: XLua.DelegateBridge;
      // __Hotfix0_get_rootTile: XLua.DelegateBridge;
      // __Hotfix0_get_animator: XLua.DelegateBridge;
      // __Hotfix0_get_isInCombat: XLua.DelegateBridge;
      // __Hotfix0_get_hatred: XLua.DelegateBridge;
      // __Hotfix0_get_talentRange: XLua.DelegateBridge;
      // __Hotfix0_get_buildCondition: XLua.DelegateBridge;
      // __Hotfix0_get_attack: XLua.DelegateBridge;
      // __Hotfix0_get_rawAttackWithoutReplacement: XLua.DelegateBridge;
      // __Hotfix0_get_combat: XLua.DelegateBridge;
      // __Hotfix0_get_rawCombatWithoutReplacement: XLua.DelegateBridge;
      // __Hotfix0_get_attackTrigger: XLua.DelegateBridge;
      // __Hotfix0_get_skill: XLua.DelegateBridge;
      // __Hotfix0_get_skillData: XLua.DelegateBridge;
      // __Hotfix0_get_hideTileOption: XLua.DelegateBridge;
      // __Hotfix0_get_hasSkill: XLua.DelegateBridge;
      // __Hotfix0_get_traitAbility: XLua.DelegateBridge;
      // __Hotfix0_get_traitAsTalent: XLua.DelegateBridge;
      // __Hotfix0_get_rangeToShow: XLua.DelegateBridge;
      // __Hotfix0_get_defaultRangeId: XLua.DelegateBridge;
      // __Hotfix0_get_isToken: XLua.DelegateBridge;
      // __Hotfix0_get_occupiedRemainingCharacterCnt: XLua.DelegateBridge;
      // __Hotfix0_get_withdrawable: XLua.DelegateBridge;
      // __Hotfix0_get_manuallyWithdrawable: XLua.DelegateBridge;
      // __Hotfix0_get_isMine: XLua.DelegateBridge;
      // __Hotfix0_IsControllable: XLua.DelegateBridge;
      // __Hotfix0_get_isBuiltPredefined: XLua.DelegateBridge;
      // __Hotfix0_get_isPlayerCharacter: XLua.DelegateBridge;
      // __Hotfix0_get_directionTransform: XLua.DelegateBridge;
      // __Hotfix0_get_blockedEnemies: XLua.DelegateBridge;
      // __Hotfix0_get_directionIndicator: XLua.DelegateBridge;
      // __Hotfix0_get_blockRadiusSquare: XLua.DelegateBridge;
      // __Hotfix0_get_traitBlackboard: XLua.DelegateBridge;
      // __Hotfix0_GetVoiceQuery: XLua.DelegateBridge;
      // __Hotfix0_get_isFixedRotation: XLua.DelegateBridge;
      // __Hotfix0_get_initState: XLua.DelegateBridge;
      // __Hotfix0_get_delayToRecycle: XLua.DelegateBridge;
      // __Hotfix0_get_allowWithdrawGainCost: XLua.DelegateBridge;
      // __Hotfix0_get_stateMachine: XLua.DelegateBridge;
      // __Hotfix0_get_data: XLua.DelegateBridge;
      // __Hotfix0_set_data: XLua.DelegateBridge;
      // __Hotfix0_get_sharedData: XLua.DelegateBridge;
      // __Hotfix0_get_createdTime: XLua.DelegateBridge;
      // __Hotfix0_get_startEffect: XLua.DelegateBridge;
      // __Hotfix0_get_deadEffect: XLua.DelegateBridge;
      // __Hotfix0_get_hasReplacement: XLua.DelegateBridge;
      // __Hotfix0_get_isInAttackState: XLua.DelegateBridge;
      // __Hotfix0_get_isInCombatState: XLua.DelegateBridge;
      // __Hotfix0_BuildAt: XLua.DelegateBridge;
      // __Hotfix0_BuildAsPredefined: XLua.DelegateBridge;
      // __Hotfix0_BuildAsRuntimeInst: XLua.DelegateBridge;
      // __Hotfix0_Born: XLua.DelegateBridge;
      // __Hotfix0_MakeDummy: XLua.DelegateBridge;
      // __Hotfix0_OpTrigSkill: XLua.DelegateBridge;
      // __Hotfix0_RemoteTrigSkill: XLua.DelegateBridge;
      // __Hotfix0_SwitchToSkillState: XLua.DelegateBridge;
      // __Hotfix0_CheckIsBornState: XLua.DelegateBridge;
      // __Hotfix0_Withdraw: XLua.DelegateBridge;
      // __Hotfix0_CheckBuildable: XLua.DelegateBridge;
      // __Hotfix0_RechargeToken: XLua.DelegateBridge;
      // __Hotfix0_ResetSearchBlockeeTicker: XLua.DelegateBridge;
      // __Hotfix0_SearchBlockeeImmediate: XLua.DelegateBridge;
      // __Hotfix0_FetchTokenOrHost: XLua.DelegateBridge;
      // __Hotfix0_GetModeRangeId: XLua.DelegateBridge;
      // __Hotfix0_GetRangeOfMode: XLua.DelegateBridge;
      // __Hotfix0_GetRangeOfSkill: XLua.DelegateBridge;
      // __Hotfix0_PlayAudioSignal: XLua.DelegateBridge;
      // __Hotfix0_PreloadSpecialAudioSignals: XLua.DelegateBridge;
      // __Hotfix0_CheckUseIdForAudioSignal: XLua.DelegateBridge;
      // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      // __Hotfix0_ChangeMotionMode: XLua.DelegateBridge;
      // __Hotfix0_FinishMe: XLua.DelegateBridge;
      // __Hotfix0__BuildAtInternal: XLua.DelegateBridge;
      // __Hotfix0__InitAllModeDirection: XLua.DelegateBridge;
      // __Hotfix0_LogSnapshotIfNot: XLua.DelegateBridge;
      // __Hotfix0_CheckHasFilterTag: XLua.DelegateBridge;
      // __Hotfix0_TryHookEffect: XLua.DelegateBridge;
      // __Hotfix0_TryHookAudio: XLua.DelegateBridge;
      // __Hotfix0_TryHookProjectile: XLua.DelegateBridge;
      // __Hotfix0_RegisterReplacement: XLua.DelegateBridge;
      // __Hotfix0_UnregisterReplacement: XLua.DelegateBridge;
      // __Hotfix0_CheckIsCurrentReplacement: XLua.DelegateBridge;
      // __Hotfix0_ClearReplacement: XLua.DelegateBridge;
      // __Hotfix0_GetStartEffect: XLua.DelegateBridge;
      // __Hotfix0_GetAttackBlackboard: XLua.DelegateBridge;
      // __Hotfix0__SearchAttackTarget: XLua.DelegateBridge;
      // __Hotfix0__FetchCombatTarget: XLua.DelegateBridge;
      // __Hotfix0__SearchBlockee: XLua.DelegateBridge;
      // __Hotfix0__CheckBlockable: XLua.DelegateBridge;
      // __Hotfix0__ClearAllBlockees: XLua.DelegateBridge;
      // __Hotfix0__AddBlockee: XLua.DelegateBridge;
      // __Hotfix0_RemoveBlockee: XLua.DelegateBridge;
      // __Hotfix0_SetupSkin: XLua.DelegateBridge;
      // __Hotfix0_RecycleSkinIfNot: XLua.DelegateBridge;
      // __Hotfix0_OnRecycle: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_OnAwake: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_OnBorn: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_OnLocate: XLua.DelegateBridge;
      // __Hotfix0_OnFinish: XLua.DelegateBridge;
      // __Hotfix0_ConstructStateMachine: XLua.DelegateBridge;
      // __Hotfix0_OnAttributeDirty: XLua.DelegateBridge;
      // __Hotfix0_OnDisappearChanged: XLua.DelegateBridge;
      // __Hotfix0_OnBeforeAttack: XLua.DelegateBridge;
      // __Hotfix0_OnAfterAttack: XLua.DelegateBridge;
      // __Hotfix0_OnBeforeSkill: XLua.DelegateBridge;
      // __Hotfix0_OnAfterSkill: XLua.DelegateBridge;
      // __Hotfix0_OnSkillStart: XLua.DelegateBridge;
      // __Hotfix0_OnSkillFinish: XLua.DelegateBridge;
      // __Hotfix0_PopulateSnapshotToHashBuilder: XLua.DelegateBridge;
      // __Hotfix0_PopulateSnapshotToStrBuilder: XLua.DelegateBridge;
      // __Hotfix0_CreateSkill: XLua.DelegateBridge;
      // __Hotfix0_UpdateHatred: XLua.DelegateBridge;
      // __Hotfix0__AssignData: XLua.DelegateBridge;
      // __Hotfix0__PreprocessSkill: XLua.DelegateBridge;
      // __Hotfix0__AssignSkill: XLua.DelegateBridge;
      // __Hotfix0__PreprocessSkin: XLua.DelegateBridge;
      // __Hotfix0__PreprocessTalents: XLua.DelegateBridge;
      // __Hotfix0__AssignTalents: XLua.DelegateBridge;
      // __Hotfix0__AssignTrait: XLua.DelegateBridge;
      // __Hotfix0__PreprocessTrait: XLua.DelegateBridge;
      // __Hotfix0__GetDefaultModeIndex: XLua.DelegateBridge;
      // __Hotfix0__GetDefaultRangeId: XLua.DelegateBridge;
      // __Hotfix0_GetCurrentAttackOrCombatAbility: XLua.DelegateBridge;
    }
    export interface Enemy {
      UPDATE_POS_TICK: System.Int32;
      BLOCKING_TWEEN_DURATION: System.Single;
      HATRED_VALUE_GAP: System.Single;
      MIN_BLINK_DISTANCE: System.Single;
      // m_lastMoveDirVec: UnityEngine.Vector2;
      // s_sharedList: System.Collections.Generic.List<Torappu.Battle.EnemySkill>;
      _sideTypeIndex: Torappu.Battle.SideTypeIndex;
      _isBoss: System.Boolean;
      _isGiantBoss: System.Boolean;
      _locateRange: Torappu.Battle.Range;
      _scaleMoveBySpeed: System.Boolean;
      _keepMoveAnimScale: System.Boolean;
      _useSpecificDeadAnim: System.Boolean;
      _height: System.Single;
      _delayToBorn: System.Single;
      _startEffect: System.String;
      _deadEffect: System.String;
      _blockVolume: System.Int32;
      _specialBlockCondition: Torappu.Battle.Enemy.SpecialBlockCondition;
      _essentialMotionMode: Torappu.MotionMode;
      _applyWay: Torappu.Battle.Modifier.SourceApplyWay;
      _dontSetEnemyFaceByCursorWhenBorn: System.Boolean;
      // m_defaultModeIndex: System.Int32;
      // m_totalMoveDist: System.Single;
      // m_currentTile: Torappu.Battle.Tile;
      // m_cursor: Torappu.Battle.DirectionCursor;
      // m_moveController: Torappu.Battle.MoveController;
      // m_blocker: Torappu.ObjectPtr<Torappu.Battle.Character>;
      // m_updatePosTicker: Torappu.PeriodicTicker;
      // m_blockTween: Torappu.ITweenHandler;
      // m_blockPosition: UnityEngine.Vector2;
      // m_contDirAfterEnd: UnityEngine.Vector2;
      // m_posInLastFrame: UnityEngine.Vector2;
      // m_nonTriggerCollider: UnityEngine.Collider2D;
      // m_mainTriggerCollider: UnityEngine.Collider2D;
      // m_pullSources: Torappu.ListSet<Torappu.ObjectPtr<Torappu.Battle.BObject>>;
      // m_allSkills: Torappu.Battle.EnemySkill[];
      // m_rebornData: Torappu.Battle.Unit.RebornData;
      // m_enemyTags: System.String[];
      // m_isInvalidKilled: System.Boolean;
      // m_isOverrideKillCnt: System.Boolean;
      // m_overrideKillCnt: System.Int32;
      // m_createdTime: Torappu.FP;
      // m_delayToRecycle: System.Single;
      // m_hostUid: System.UInt32;
      // m_skills: System.Collections.Generic.List<Torappu.Battle.EnemySkill>;
      // m_currentSubTiles: System.Collections.Generic.List<Torappu.Battle.Tile>;
      // m_attackAbilityCasted: Torappu.Battle.Ability;
      // m_combatAbilityCasted: Torappu.Battle.Ability;
      // m_combatNextEscapeTime: Torappu.FP;
      // <lifePointReduce>k__BackingField: System.Int32;
      // <defaultRangeRadius>k__BackingField: System.Single;
      // <data>k__BackingField: Torappu.LevelData.EnemyData;
      // <options>k__BackingField: Torappu.Battle.Enemy.Options;
      // <rigidbody2D>k__BackingField: UnityEngine.Rigidbody2D;
      // <attackWrapper>k__BackingField: Torappu.Battle.Enemy.AttackWrapper;
      // <combatWrapper>k__BackingField: Torappu.Battle.Enemy.CombatWrapper;
      // <>f__am$cache0: System.Comparison<Torappu.Battle.EnemySkill>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_lastMoveDirection: XLua.DelegateBridge;
      // __Hotfix0_get_allApplyWay: XLua.DelegateBridge;
      // __Hotfix0_get_attackAbilityCasted: XLua.DelegateBridge;
      // __Hotfix0_get_combatAbilityCasted: XLua.DelegateBridge;
      // __Hotfix0_set_combatAbilityCasted: XLua.DelegateBridge;
      // __Hotfix0_get_hostUid: XLua.DelegateBridge;
      // __Hotfix0_set_hostUid: XLua.DelegateBridge;
      // __Hotfix0_get_distToExit: XLua.DelegateBridge;
      // __Hotfix0_get_hatred: XLua.DelegateBridge;
      // __Hotfix0_get_totalMoveDist: XLua.DelegateBridge;
      // __Hotfix0_get_blocker: XLua.DelegateBridge;
      // __Hotfix0_get_rootTile: XLua.DelegateBridge;
      // __Hotfix0_get_rootSubTiles: XLua.DelegateBridge;
      // __Hotfix0_get_lifePointReduce: XLua.DelegateBridge;
      // __Hotfix0_set_lifePointReduce: XLua.DelegateBridge;
      // __Hotfix0_get_defaultRangeRadius: XLua.DelegateBridge;
      // __Hotfix0_set_defaultRangeRadius: XLua.DelegateBridge;
      // __Hotfix0_get_massLevel: XLua.DelegateBridge;
      // __Hotfix0_get_essentialMotionMode: XLua.DelegateBridge;
      // __Hotfix0_get_data: XLua.DelegateBridge;
      // __Hotfix0_set_data: XLua.DelegateBridge;
      // __Hotfix0_get_isUnbalanced: XLua.DelegateBridge;
      // __Hotfix0_get_isInAttackState: XLua.DelegateBridge;
      // __Hotfix0_get_isInCombatState: XLua.DelegateBridge;
      // __Hotfix0_get_isBoss: XLua.DelegateBridge;
      // __Hotfix0_get_isGiantBoss: XLua.DelegateBridge;
      // __Hotfix0_get_locateRange: XLua.DelegateBridge;
      // __Hotfix0_get_blockVolume: XLua.DelegateBridge;
      // __Hotfix0_get_defaultMode: XLua.DelegateBridge;
      // __Hotfix0_get_hasCombat: XLua.DelegateBridge;
      // __Hotfix0_get_isInCombat: XLua.DelegateBridge;
      // __Hotfix0_get_isMovingBySelf: XLua.DelegateBridge;
      // __Hotfix0_get_footMapPosition: XLua.DelegateBridge;
      // __Hotfix0_get_offsetMapPosition: XLua.DelegateBridge;
      // __Hotfix0_get_stableBlockPosition: XLua.DelegateBridge;
      // __Hotfix0_get_options: XLua.DelegateBridge;
      // __Hotfix0_set_options: XLua.DelegateBridge;
      // __Hotfix0_get_isInvalidKilled: XLua.DelegateBridge;
      // __Hotfix0_get_isOverrideKillCnt: XLua.DelegateBridge;
      // __Hotfix0_get_overrideKillCnt: XLua.DelegateBridge;
      // __Hotfix0_get_stateMachine: XLua.DelegateBridge;
      // __Hotfix0_get_isFixedRotation: XLua.DelegateBridge;
      // __Hotfix0_get_initState: XLua.DelegateBridge;
      // __Hotfix0_get_delayToRecycle: XLua.DelegateBridge;
      // __Hotfix0_get_delayToBorn: XLua.DelegateBridge;
      // __Hotfix0_get_createdTime: XLua.DelegateBridge;
      // __Hotfix0_get_isInEnemySide: XLua.DelegateBridge;
      // __Hotfix0_get_mass: XLua.DelegateBridge;
      // __Hotfix0_get_rigidbody2D: XLua.DelegateBridge;
      // __Hotfix0_set_rigidbody2D: XLua.DelegateBridge;
      // __Hotfix0_get_attackWrapper: XLua.DelegateBridge;
      // __Hotfix0_set_attackWrapper: XLua.DelegateBridge;
      // __Hotfix0_get_combatWrapper: XLua.DelegateBridge;
      // __Hotfix0_set_combatWrapper: XLua.DelegateBridge;
      // __Hotfix0_get_lastAttackOrCombatAbility: XLua.DelegateBridge;
      // __Hotfix0_get_deadEffect: XLua.DelegateBridge;
      // __Hotfix0_get_startEffect: XLua.DelegateBridge;
      // __Hotfix0_get_moveSpdTotalScale: XLua.DelegateBridge;
      // __Hotfix0_get_cursor: XLua.DelegateBridge;
      // __Hotfix0_InterruptLastAbilityIfNot: XLua.DelegateBridge;
      // __Hotfix0_Spawn: XLua.DelegateBridge;
      // __Hotfix0_GetModeRangeRadius: XLua.DelegateBridge;
      // __Hotfix0_PlayAudioSignal: XLua.DelegateBridge;
      // __Hotfix0_CheckHasFilterTag: XLua.DelegateBridge;
      // __Hotfix0_TriggerEnemySkill: XLua.DelegateBridge;
      // __Hotfix0_CheckBlockable: XLua.DelegateBridge;
      // __Hotfix0_CheckInBlockRange: XLua.DelegateBridge;
      // __Hotfix0__CheckSpecialBlockCondition: XLua.DelegateBridge;
      // __Hotfix0_RegisterBlocker: XLua.DelegateBridge;
      // __Hotfix0_UnregisterBlocker: XLua.DelegateBridge;
      // __Hotfix0_Knockback: XLua.DelegateBridge;
      // __Hotfix0_BeginPull: XLua.DelegateBridge;
      // __Hotfix0_StillPull: XLua.DelegateBridge;
      // __Hotfix0_TryEarlyStopPull: XLua.DelegateBridge;
      // __Hotfix0_EndPull: XLua.DelegateBridge;
      // __Hotfix0_FallDown: XLua.DelegateBridge;
      // __Hotfix0_CheckReadyToFallDown: XLua.DelegateBridge;
      // __Hotfix0_PlayMoveAnim: XLua.DelegateBridge;
      // __Hotfix0__RemoveInvalidPullSources: XLua.DelegateBridge;
      // __Hotfix0_Blink: XLua.DelegateBridge;
      // __Hotfix0_TryGetDistanceToNextCheckpoint: XLua.DelegateBridge;
      // __Hotfix0_PopulateSnapshotToHashBuilder: XLua.DelegateBridge;
      // __Hotfix0_PopulateSnapshotToStrBuilder: XLua.DelegateBridge;
      // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_OnBorn: XLua.DelegateBridge;
      // __Hotfix0_OnReborn: XLua.DelegateBridge;
      // __Hotfix0_OnFaceChanged: XLua.DelegateBridge;
      // __Hotfix0_OnDisappearChanged: XLua.DelegateBridge;
      // __Hotfix0_OnSwitchMode: XLua.DelegateBridge;
      // __Hotfix0_OnHpZero: XLua.DelegateBridge;
      // __Hotfix0_OnAttributeDirty: XLua.DelegateBridge;
      // __Hotfix0_ConstructStateMachine: XLua.DelegateBridge;
      // __Hotfix0_FinishMe: XLua.DelegateBridge;
      // __Hotfix0_DoFakeDeath: XLua.DelegateBridge;
      // __Hotfix0_DoReborn: XLua.DelegateBridge;
      // __Hotfix0__MoveByRoute: XLua.DelegateBridge;
      // __Hotfix0__MoveToFixedDirection: XLua.DelegateBridge;
      // __Hotfix0_ReleaseFromBlocker: XLua.DelegateBridge;
      // __Hotfix0__ResetPhysicsStatus: XLua.DelegateBridge;
      // __Hotfix0__ReactivateMainTriggerCollider: XLua.DelegateBridge;
      // __Hotfix0__SearchAttackTarget: XLua.DelegateBridge;
      // __Hotfix0__InitCurrentTile: XLua.DelegateBridge;
      // __Hotfix0__UpdateCurrentTile: XLua.DelegateBridge;
      // __Hotfix0__MoveToBlockPosition: XLua.DelegateBridge;
      // __Hotfix0__CalculateFaceDirection: XLua.DelegateBridge;
      // __Hotfix0__CheckUseIdForAudioSignal: XLua.DelegateBridge;
      // __Hotfix0__AssignData: XLua.DelegateBridge;
      // __Hotfix0__AssignSkill: XLua.DelegateBridge;
      // __Hotfix0__AssignTalent: XLua.DelegateBridge;
      // __Hotfix0__GetDefaultModeIndex: XLua.DelegateBridge;
      // __Hotfix0_GetAttackBlackboard: XLua.DelegateBridge;
      // __Hotfix0_TryFindFirstEnabledEnemySkill: XLua.DelegateBridge;
      // __Hotfix0_OnAwake: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_OnFinish: XLua.DelegateBridge;
      // __Hotfix0_OnRecycle: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_OnTickAfterDead: XLua.DelegateBridge;
      // __Hotfix0_OnBeforeAttack: XLua.DelegateBridge;
      // __Hotfix0__InitPhysics: XLua.DelegateBridge;
      // __Hotfix0__GenerateSpData: XLua.DelegateBridge;
    }
    export interface MapDependentTrap {
      SKIN_INSTANCE_NAME: System.String;
      _defaultSkin: System.String;
      _skins: Torappu.Battle.MapDependentTrap.SkinEntry[];
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_OnAwake: XLua.DelegateBridge;
      // __Hotfix0__CheckNeedToLoadSkin: XLua.DelegateBridge;
      // __Hotfix0__TryLoadSkin: XLua.DelegateBridge;
    }
    export interface RallyPoint {
      _retainedBuffsWhenDead: System.Collections.Generic.List<System.String>;
      // m_categoty: Torappu.Battle.EntityCategory;
      // m_mainTriggerCollider: UnityEngine.Collider2D;
      // <rallyPointRebornTalent>k__BackingField: Torappu.Battle.RallyPointRebornTalent;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_inRallyPointMode: XLua.DelegateBridge;
      // __Hotfix0_get_inDefaultMode: XLua.DelegateBridge;
      // __Hotfix0_get_category: XLua.DelegateBridge;
      // __Hotfix0_get_rallyPointRebornTalent: XLua.DelegateBridge;
      // __Hotfix0_set_rallyPointRebornTalent: XLua.DelegateBridge;
      // __Hotfix0_get_rebornProgress: XLua.DelegateBridge;
      // __Hotfix0_get_hpToShow: XLua.DelegateBridge;
      // __Hotfix0_OnBorn: XLua.DelegateBridge;
      // __Hotfix0_SwitchCategory: XLua.DelegateBridge;
      // __Hotfix0_get_withdrawable: XLua.DelegateBridge;
      // __Hotfix0_RecoverHpLikeReborn: XLua.DelegateBridge;
      // __Hotfix0__ReactivateMainTriggerCollider: XLua.DelegateBridge;
      // __Hotfix0_Withdraw: XLua.DelegateBridge;
      // __Hotfix0__InitMainTrigger: XLua.DelegateBridge;
      // __Hotfix0_OnAwake: XLua.DelegateBridge;
    }
    export interface Token {
      _category: Torappu.Battle.EntityCategory;
      _cardPolicy: Torappu.Battle.Deck.Card.CardPolicy;
      _isInfinity: System.Boolean;
      _ignoreExcludeFromBattle: System.Boolean;
      _notShowInDeck: System.Boolean;
      _rechargeOnlyOnce: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_category: XLua.DelegateBridge;
      // __Hotfix0_get_cardPolicy: XLua.DelegateBridge;
      // __Hotfix0_get_isUnique: XLua.DelegateBridge;
      // __Hotfix0_get_showHpSlider: XLua.DelegateBridge;
      // __Hotfix0_get_rechargeOnlyOnce: XLua.DelegateBridge;
      // __Hotfix0_get_isInfinity: XLua.DelegateBridge;
      // __Hotfix0_get_ignoreExcludeFromBattle: XLua.DelegateBridge;
      // __Hotfix0_get_notShowInDeck: XLua.DelegateBridge;
      // __Hotfix0_FetchHost: XLua.DelegateBridge;
      // __Hotfix0_get_allowWithdrawGainCost: XLua.DelegateBridge;
    }
    export interface Trap {
      _sideType: Torappu.Battle.SideType;
      _withdrawable: System.Boolean;
      _ignoreParentWithdrawable: System.Boolean;
      _rewriteTileOptions: System.Boolean;
      _blockRadiusSquare: System.Single;
      _filterTag: System.String[];
      _hideTileOptions: System.Boolean;
      _hideSpBarWhenEmpty: System.Boolean;
      _hideSpBarWhenFull: System.Boolean;
      _syncSpViaTiles: System.Boolean;
      _disableUIHub: System.Boolean;
      // m_syncSpList: Torappu.ListSet<Torappu.Battle.Entity>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_syncSpViaTiles: XLua.DelegateBridge;
      // __Hotfix0_get_hideTileOption: XLua.DelegateBridge;
      // __Hotfix0_get_hideSpBarWhenEmpty: XLua.DelegateBridge;
      // __Hotfix0_get_hideSpBarWhenFull: XLua.DelegateBridge;
      // __Hotfix0_SetSpInternal: XLua.DelegateBridge;
      // __Hotfix0_get_initSideType: XLua.DelegateBridge;
      // __Hotfix0_get_disableUIHub: XLua.DelegateBridge;
      // __Hotfix0_get_withdrawable: XLua.DelegateBridge;
      // __Hotfix0_get_blockRadiusSquare: XLua.DelegateBridge;
      // __Hotfix0_get_rewriteTileOptions: XLua.DelegateBridge;
      // __Hotfix0_get_tileOptions: XLua.DelegateBridge;
      // __Hotfix0_get_keepCurrentPassableMask: XLua.DelegateBridge;
      // __Hotfix0_get_startEffect: XLua.DelegateBridge;
      // __Hotfix0_get_deadEffect: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_OnSwitchMode: XLua.DelegateBridge;
      // __Hotfix0_CheckHasFilterTag: XLua.DelegateBridge;
    }
    export interface TrapMode {
      _tileOptions: Torappu.Battle.Tile.Options;
      _keepCurrentPassableMask: System.Boolean;
    }
    export interface Unit {
      _animator: Torappu.Battle.UnitAnimator;
      _modes: Torappu.Battle.UnitMode[];
      _commonAbilities: Torappu.Battle.Ability[];
      // _uiMountPoint: UnityEngine.Transform;
      // _effectTransform: UnityEngine.Transform;
      _shadow: Torappu.Battle.ShadowController;
      // _defaultBodyColor: UnityEngine.Color;
      _showDebugName: System.Boolean;
      // m_awaked: System.Boolean;
      // m_currentMode: Torappu.Battle.UnitMode;
      // m_overrideAttack: Torappu.Battle.Ability;
      // m_overrideTrigger: Torappu.Battle.TargetTrigger;
      // m_overrideCombat: Torappu.Battle.Ability;
      // m_blinkHideUIFlag: System.Boolean;
      // <isDummy>k__BackingField: System.Boolean;
      // <talents>k__BackingField: Torappu.Battle.BasicTalent[];
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_defaultMode: XLua.DelegateBridge;
      // __Hotfix0_get_currentMode: XLua.DelegateBridge;
      // __Hotfix0_get_currentModeIndex: XLua.DelegateBridge;
      // __Hotfix0_get_faceSign: XLua.DelegateBridge;
      // __Hotfix0_get_faceToBack: XLua.DelegateBridge;
      // __Hotfix0_get_faceLOrR: XLua.DelegateBridge;
      // __Hotfix0_get_talentRange: XLua.DelegateBridge;
      // __Hotfix0_get_combat: XLua.DelegateBridge;
      // __Hotfix0_get_hasCombat: XLua.DelegateBridge;
      // __Hotfix0_get_attack: XLua.DelegateBridge;
      // __Hotfix0_get_hasAttack: XLua.DelegateBridge;
      // __Hotfix0_get_attackTrigger: XLua.DelegateBridge;
      // __Hotfix0_get_allApplyWay: XLua.DelegateBridge;
      // __Hotfix0_get_isHidden: XLua.DelegateBridge;
      // __Hotfix0_get_isMovingBySelf: XLua.DelegateBridge;
      // __Hotfix0_get_showDebugName: XLua.DelegateBridge;
      // __Hotfix0_get_hasRangeToShow: XLua.DelegateBridge;
      // __Hotfix0_get_rangeToShow: XLua.DelegateBridge;
      // __Hotfix0_get_defaultRangeId: XLua.DelegateBridge;
      // __Hotfix0_get_hideUIAttackRange: XLua.DelegateBridge;
      // __Hotfix0_get_animator: XLua.DelegateBridge;
      // __Hotfix0_get_animatorHooker: XLua.DelegateBridge;
      // __Hotfix0_get_color: XLua.DelegateBridge;
      // __Hotfix0_set_color: XLua.DelegateBridge;
      // __Hotfix0_get_defaultBodyColor: XLua.DelegateBridge;
      // __Hotfix0_get_bodyTransform: XLua.DelegateBridge;
      // __Hotfix0_get_graphicTransform: XLua.DelegateBridge;
      // __Hotfix0_get_uiPoint: XLua.DelegateBridge;
      // __Hotfix0_get_hitPoint: XLua.DelegateBridge;
      // __Hotfix0_get_footPoint: XLua.DelegateBridge;
      // __Hotfix0_get_muzzlePoint: XLua.DelegateBridge;
      // __Hotfix0_get_headPoint: XLua.DelegateBridge;
      // __Hotfix0_get_effectTransform: XLua.DelegateBridge;
      // __Hotfix0_get_category: XLua.DelegateBridge;
      // __Hotfix0_get_blinkHideUIFlag: XLua.DelegateBridge;
      // __Hotfix0_get_hpToShow: XLua.DelegateBridge;
      // __Hotfix0_get_hpRatioToShow: XLua.DelegateBridge;
      // __Hotfix0_get_epToShow: XLua.DelegateBridge;
      // __Hotfix0_get_isDummy: XLua.DelegateBridge;
      // __Hotfix0_set_isDummy: XLua.DelegateBridge;
      // __Hotfix0_get_talents: XLua.DelegateBridge;
      // __Hotfix0_set_talents: XLua.DelegateBridge;
      // __Hotfix0_ToggleMode: XLua.DelegateBridge;
      // __Hotfix0_SwitchMode: XLua.DelegateBridge;
      // __Hotfix1_SwitchMode: XLua.DelegateBridge;
      // __Hotfix0_SwitchToDefaultMode: XLua.DelegateBridge;
      // __Hotfix0_PlayAnimation: XLua.DelegateBridge;
      // __Hotfix0_ContainsAnimation: XLua.DelegateBridge;
      // __Hotfix0_PlayAnimationInFixedTime: XLua.DelegateBridge;
      // __Hotfix1_PlayAnimation: XLua.DelegateBridge;
      // __Hotfix0_GetAnimationTime: XLua.DelegateBridge;
      // __Hotfix1_GetAnimationTime: XLua.DelegateBridge;
      // __Hotfix0_PreloadSpecialAudioSignals: XLua.DelegateBridge;
      // __Hotfix0_GetMountPoint: XLua.DelegateBridge;
      // __Hotfix0_GetAttackBlackboard: XLua.DelegateBridge;
      // __Hotfix0_OverrideAttack: XLua.DelegateBridge;
      // __Hotfix0_OverrideCombat: XLua.DelegateBridge;
      // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
      // __Hotfix0_GatherProjectiles: XLua.DelegateBridge;
      // __Hotfix0_GatherActionNodes: XLua.DelegateBridge;
      // __Hotfix0_GatherAbilities: XLua.DelegateBridge;
      // __Hotfix0_GetModeRangeId: XLua.DelegateBridge;
      // __Hotfix0_GetModeRangeRadius: XLua.DelegateBridge;
      // __Hotfix0_OnGameOver: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_OnPostInit: XLua.DelegateBridge;
      // __Hotfix2_SwitchMode: XLua.DelegateBridge;
      // __Hotfix0_ActivateMode: XLua.DelegateBridge;
      // __Hotfix0_InactiveMode: XLua.DelegateBridge;
      // __Hotfix0_AttachCommonAbilities: XLua.DelegateBridge;
      // __Hotfix0_InitCommonAbilities: XLua.DelegateBridge;
      // __Hotfix0_AssignDynamicAbility: XLua.DelegateBridge;
      // __Hotfix0_UpdateBodyColor: XLua.DelegateBridge;
      // __Hotfix0_GenerateTalentSignalId: XLua.DelegateBridge;
      // __Hotfix0_CheckReborn: XLua.DelegateBridge;
      // __Hotfix0_DoFakeDeath: XLua.DelegateBridge;
      // __Hotfix0_DoReborn: XLua.DelegateBridge;
      // __Hotfix0_InheritRebornHpRatio: XLua.DelegateBridge;
      // __Hotfix0_OnStartAttack: XLua.DelegateBridge;
      // __Hotfix0_OnFinishAttack: XLua.DelegateBridge;
      // __Hotfix0_OnFinish: XLua.DelegateBridge;
      // __Hotfix0_OnSwitchMode: XLua.DelegateBridge;
      // __Hotfix0_OnFaceChanged: XLua.DelegateBridge;
      // __Hotfix0_OnTakeDamage: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_OnBorn: XLua.DelegateBridge;
      // __Hotfix0_OnAllocate: XLua.DelegateBridge;
      // __Hotfix0_OnRecycle: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_OnLateTick: XLua.DelegateBridge;
      // __Hotfix0_OnAwake: XLua.DelegateBridge;
      // __Hotfix0_OnHpZero: XLua.DelegateBridge;
      // __Hotfix0_OnReborn: XLua.DelegateBridge;
      // __Hotfix0_OnAttributeDirty: XLua.DelegateBridge;
      // __Hotfix0_PopulateSnapshotToHashBuilder: XLua.DelegateBridge;
      // __Hotfix0_PopulateSnapshotToStrBuilder: XLua.DelegateBridge;
      // __Hotfix0__InitUnitModes: XLua.DelegateBridge;
    }
    export interface UnitManager {
      // <allUnits>k__BackingField: Torappu.UnorderedArray<Torappu.Battle.Unit>;
      // <characters>k__BackingField: Torappu.UnorderedArray<Torappu.Battle.Unit>;
      // <enemies>k__BackingField: Torappu.UnorderedArray<Torappu.Battle.Unit>;
      // <neutralUnits>k__BackingField: Torappu.UnorderedArray<Torappu.Battle.Unit>;
      // m_activePlayerCharacterCnt: Torappu.ListDict<Torappu.PlayerSide,System.Int32>;
      // <>f__mg$cache0: Torappu.ListDict.Equality<Torappu.PlayerSide,System.Int32>;
    }
    export interface UnitMode {
      COMBAT_DESCRIPTION_SUFFIX: System.String;
      ATTACK_DESCRIPTION_SUFFIX: System.String;
      // _bodyTransform: UnityEngine.Transform;
      _animatorHooker: Torappu.Battle.UnitAnimatorHooker;
      _combat: Torappu.Battle.Ability;
      _attack: Torappu.Battle.Ability;
      _attackTrigger: Torappu.Battle.TargetTrigger;
      _hideUIAttackRange: System.Boolean;
      _rangeToShow: Torappu.Battle.TargetSelector;
      _generalAbilities: Torappu.Battle.Ability[];
      _addIndexToSignalId: System.Boolean;
      // m_inited: System.Boolean;
      // m_abilities: System.Collections.Generic.List<Torappu.Battle.Ability>;
      // m_dynaimcAbilites: System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<Torappu.Battle.Ability,Torappu.Blackboard>>;
      // <host>k__BackingField: Torappu.Battle.Unit;
      // <index>k__BackingField: System.Int32;
      // <allApplyWay>k__BackingField: Torappu.Battle.Modifier.SourceApplyWay;
      // <talents>k__BackingField: Torappu.Battle.BasicTalent[];
    }
    export interface UnitDataFlowConfig {
      _config: Torappu.Battle.UnitDataFlowConfig.ModifierConfig[];
      // m_modifiers: System.Collections.Generic.List<Torappu.Battle.UnitDataFlowConfig.Modifier>;
    }
    export interface VisualObject {
    }
    export interface BattleDataConverter {
      MASK_PLAYER_CHARACTER: System.UInt32;
      MASK_PLAYER_TRAP_OR_TOKEN: System.UInt32;
      MASK_PLAYER_ASSIST_CHAR: System.UInt32;
      PLAYER_SIDE_SHIFT: System.UInt32;
      // s_uniqueId: System.UInt32;
      // __Hotfix0_TouchCharacterData: XLua.DelegateBridge;
      // __Hotfix0_ConvertToCharacterData: XLua.DelegateBridge;
      // __Hotfix0_OverrideMainSkillBlackboardIfExist: XLua.DelegateBridge;
      // __Hotfix0_ConvertToRuntimeCharacterData: XLua.DelegateBridge;
      // __Hotfix0_LoadEnemyList: XLua.DelegateBridge;
      // __Hotfix0_LoadEnemyListByLevelId: XLua.DelegateBridge;
      // __Hotfix0_ConvertToBattlePlayerData: XLua.DelegateBridge;
      // __Hotfix0_TryGetPlayerIdByUniqueId: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0__ConvertToTokenData: XLua.DelegateBridge;
      // __Hotfix1__ConvertToTokenData: XLua.DelegateBridge;
      // __Hotfix2__ConvertToTokenData: XLua.DelegateBridge;
      // __Hotfix0__ConvertInternal: XLua.DelegateBridge;
      // __Hotfix0__GetUniqueIdByPlayerId: XLua.DelegateBridge;
      // __Hotfix0_ShiftByPlayerSide: XLua.DelegateBridge;
      // __Hotfix0_ShiftBackPlayerSide: XLua.DelegateBridge;
    }
    export interface OperaController {
      // m_commands: System.Collections.Generic.List<Torappu.Battle.Opera.OperaCommand>;
      // m_isLocked: System.Boolean;
      // m_coroutine: Torappu.Battle.CoroutineId;
      // m_nodesOnCompletedCallback: System.Collections.Generic.List<System.Action>;
      // m_param: System.Object;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_param: XLua.DelegateBridge;
      // __Hotfix0_PlayOpera: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0__LoadConfigIfNot: XLua.DelegateBridge;
      // __Hotfix0_Clear: XLua.DelegateBridge;
      // __Hotfix0__Complete: XLua.DelegateBridge;
      // __Hotfix0_GatherOperaRes: XLua.DelegateBridge;
    }
    export interface BattleEntityData {
      id: System.String;
      alias: System.String;
      tmplId: System.String;
      nameCn: System.String;
      nameEn: System.String;
      attributes: Torappu.AttributesData;
    }
    export interface BattleCharacterData {
      level: System.Int32;
      evolvePhase: Torappu.EvolvePhase;
      potentialRank: System.Int32;
      favorBattlePhase: System.Int32;
      prefabKey: System.String;
      rangeId: System.String;
      skinData: Torappu.CharSkinData;
      uniqueId: System.UInt32;
      profession: Torappu.ProfessionCategory;
      rarity: Torappu.RarityRank;
      deployPositionFromData: Torappu.BuildableType;
      teamKey: System.String;
      isToken: System.Boolean;
      isPredefined: System.Boolean;
      isHidden: System.Boolean;
      isAssistChar: System.Boolean;
      tokenOrHostKey: System.String;
      tokenOrHostUniqueId: System.UInt32;
      tokenInitialCnt: System.Int32;
      buildCondition: Torappu.Battle.BuildCondition;
      mainSkillIndex: System.Int32;
      mainSkill: Torappu.SkillData;
      talents: Torappu.TalentData[];
      trait: Torappu.CharacterData.TraitData;
      nationId: System.String;
      groupId: System.String;
      teamId: System.String;
      shared: Torappu.Battle.BattleCharacterData.SharedData;
      // attackRangeDesc: System.Nullable<Torappu.UI.AttackRangeDescModel>;
      runtimeData: Torappu.Battle.BattleCharacterData.RuntimeData;
    }
    export interface BattlePlayerData {
      playerSide: Torappu.PlayerSide;
      characters: Torappu.Battle.BattleCharacterData[];
      tokens: Torappu.Battle.BattleCharacterData[];
    }
    export interface BuffTemplate {
      templateKey: System.String;
      effectKey: System.String;
      onEventPriority: Torappu.BuffData.OnEventPriority;
      eventToActions: Torappu.Battle.BuffTemplate.EventToActionMap;
    }
    export interface BuffConfig {
      template: Torappu.Battle.BuffTemplate;
      data: Torappu.BuffData;
    }
    export interface BuildCondition {
      DEFAULT: Torappu.Battle.BuildCondition;
      buildableType: Torappu.BuildableType;
      needSpecifyDirection: System.Boolean;
      limitByHostAttackRange: System.Boolean;
      _excludeOccupiedByWalkEnemy: System.Boolean;
    }
    export interface TNodeBuffTemplate {
      templateKey: System.String;
      effectKey: System.String;
      nodeDict: Torappu.Battle.TNodeBuffTemplate.TNodeDataMap;
    }
    export interface BattleUtil {
      BLOCK_RANGE_RADIUS_SHRINK: System.Single;
    }
    export interface SideTypes {
      ALL_SIDE_MASK: Torappu.Battle.SideType;
      BOTH_ALLY_AND_ENEMY: Torappu.Battle.SideType;
      ALLY_TO_SAME: Torappu.Battle.SideType;
      ALLY_TO_OPPOSITE: Torappu.Battle.SideType;
      ENEMY_TO_SAME: Torappu.Battle.SideType;
      ENEMY_TO_OPPOSITE: Torappu.Battle.SideType;
      NEUTRAL_TO_SAME: Torappu.Battle.SideType;
      NEUTRAL_TO_OPPOSITE: Torappu.Battle.SideType;
      SAME_SIDES: Torappu.Battle.SideType[];
      OPPOSITE_SIDES: Torappu.Battle.SideType[];
    }
    export interface BlockBalancer {
      MIN_DIST_BTW_TARGET_AND_SOURCE: System.Single;
      MIN_DIST_BTW_BLOCKEES_SQR: System.Single;
      CLOSE_DIST_BTW_BLOCKEERS: System.Single;
      CLOSE_DIST_BTW_BLOCKEES_SQR: System.Single;
      MERGE_FACTOR_OF_SEPARATION: System.Single;
    }
    export interface DeterministicUtil {
      TRUNCATE_DIGIT_NUM: System.Int32;
    }
    export interface LevelUtils {
      // m_decrypter: Torappu.DB.IConverter;
      // m_plainTextConverter: Torappu.DB.IConverter;
    }
    export interface MapUtil {
      ALMOST_VERTICAL_THRESHOLD: System.Single;
      SIMILAR_THRESHOLD: System.Single;
      // s_sharedGridPositions: System.Collections.Generic.List<Torappu.GridPosition>;
    }
    export interface BattleIllustration {
      _foldAlpha: System.Single;
      // _foldOffset: UnityEngine.Vector2;
      _foldTime: System.Single;
      // m_image: UnityEngine.UI.Image;
      // m_fold: System.Boolean;
      // m_originPos: UnityEngine.Vector3;
    }
    export interface FixedEventHandler<T> {
      // m_pendingActions: System.Collections.Generic.List<Torappu.Battle.FixedEventHandler.PendingEvent<T>>;
      // m_coroutine: Torappu.Battle.CoroutineId;
    }
    export interface GridRangeDrawer {
      SHADER_UNSCALED_TIME_PROPERTY: System.String;
      // _rangeMaterial: UnityEngine.Material;
      // _attackRangeColor: UnityEngine.Color;
      // _healRangeColor: UnityEngine.Color;
      // _skillRangeColor: UnityEngine.Color;
      // _locateRangeColor: UnityEngine.Color;
      // _overlapRangeColor: UnityEngine.Color;
      // m_meshFilter: UnityEngine.MeshFilter;
      // m_meshRenderer: UnityEngine.MeshRenderer;
      // m_ranges: System.Collections.Generic.List<Torappu.Battle.GridRangeDrawer.RangeEntry>;
      // m_grids: System.Collections.Generic.HashSet<Torappu.GridPosition>;
      // m_generator: Torappu.EasyMeshGenerator;
      // m_rangeMaterial: UnityEngine.Material;
      // m_hasGiantBoss: System.Boolean;
      // m_giantBossLocateRnage: Torappu.Battle.IDrawableRange;
    }
    export interface MaterialManager {
      // m_materialMap: System.Collections.Generic.Dictionary<Torappu.Battle.MaterialManager.MaterialKey,UnityEngine.Material>;
      // m_tweenMap: System.Collections.Generic.Dictionary<UnityEngine.Material,DG.Tweening.Tween>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetMaterial: XLua.DelegateBridge;
      // __Hotfix0_TryGetMaterialOrNewFromShader: XLua.DelegateBridge;
      // __Hotfix0_StartExclusiveTween: XLua.DelegateBridge;
      // __Hotfix1_StartExclusiveTween: XLua.DelegateBridge;
      // __Hotfix0_FinishExclusiveTween: XLua.DelegateBridge;
      // __Hotfix1_FinishExclusiveTween: XLua.DelegateBridge;
      // __Hotfix0_OnDestroy: XLua.DelegateBridge;
    }
    export interface MultiEnterExitHandler<T> {
      // m_targetMap: System.Collections.Generic.Dictionary<Torappu.ObjectPtr<T>,Torappu.Battle.MultiEnterExitHandler.TargetRef<T>>;
    }
    export interface MultiEventListener {
      // m_cachedEv: Torappu.Battle.Entity.Event;
      // m_cachedOwner: Torappu.ObjectPtr<Torappu.Battle.Entity>;
      // m_receivedEventCounter: System.Int32;
      // m_consumedEventCounter: System.Int32;
    }
    export interface PreviewCursor {
      _height: System.Single;
      _moveSpeed: System.Single;
      _faceToDirection: System.Boolean;
      _times: System.Int32;
      // _bodyTransform: UnityEngine.Transform;
      _delayToRecycle: System.Single;
      // m_onFinishOnce: System.Action;
      // m_cursor: Torappu.Battle.DirectionCursor;
      // m_remainingTime: System.Int32;
      // m_reached: System.Boolean;
      // m_direction: UnityEngine.Vector2;
      // m_trails: UnityEngine.TrailRenderer[];
      // <pathMotionMode>k__BackingField: Torappu.MotionMode;
    }
    export interface ShadowController {
      _autoAttachToGround: System.Boolean;
      _attachOffset: System.Single;
      _enableAdvanced: System.Boolean;
      // _sprite: UnityEngine.SpriteRenderer;
      // _graphic: UnityEngine.Transform;
      _faceSwitcher: Torappu.Battle.FaceSwitcher;
      // _boneToFollow: Spine.Unity.BoneFollower;
      // m_currentTile: Torappu.Battle.Tile;
      // m_owner: Torappu.Battle.Entity;
      // m_defaultAlpha: System.Single;
    }
    export interface SpineDepthOnlyGhost {
      DEPTHONLY_SHADER_NAME: System.String;
      DEPTHONLY_MATERIAL_KEY: System.String;
      // s_shader: UnityEngine.Shader;
      // m_inited: System.Boolean;
      // m_material: UnityEngine.Material;
      // m_meshFilter: UnityEngine.MeshFilter;
    }
    export interface TransformGroup {
      // _transforms: UnityEngine.Transform[];
    }
    export interface BuffDB {
      // m_buffTemplates: System.Collections.Generic.Dictionary<System.String,Torappu.Battle.BuffTemplate>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_TryGetTemplate: XLua.DelegateBridge;
      // __Hotfix0_TryGetBuffData: XLua.DelegateBridge;
      // __Hotfix0_TryGetBuff: XLua.DelegateBridge;
      // __Hotfix1_TryGetBuff: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
    }
    export interface BuffTemp {
      template: Torappu.Battle.BuffTemplate;
    }
    export interface EPBreakBuffDB {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetBreakData: XLua.DelegateBridge;
    }
    export namespace Effects {
      export interface CameraEffect {
        // _spawnOffset: UnityEngine.Vector3;
      }
      export interface Effect {
        CHILD_NAME_BODY_TRANSFORM: System.String;
        // s_globalCounter: System.UInt32;
        // _bodyTransofrm: UnityEngine.Transform;
        // m_owner: Torappu.ObjectPtr<Torappu.Battle.Entity>;
        // m_behaviours: Torappu.Battle.Effects.Effect.Behaviour[];
        // m_isStarted: System.Boolean;
        // m_isFinished: System.Boolean;
        // m_isPaused: System.Boolean;
        // m_playbackSpeed: System.Single;
        // m_trailRenderers: UnityEngine.TrailRenderer[];
        // <playerSide>k__BackingField: Torappu.PlayerSide;
        // m_mainFxDelay: Torappu.Fx.FxDelay;
        // <instanceUid>k__BackingField: System.UInt32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_playerSide: XLua.DelegateBridge;
        // __Hotfix0_set_playerSide: XLua.DelegateBridge;
        // __Hotfix0_get_instanceUid: XLua.DelegateBridge;
        // __Hotfix0_set_instanceUid: XLua.DelegateBridge;
        // __Hotfix0_get_overwriteHeight: XLua.DelegateBridge;
        // __Hotfix0_get_heightOffset: XLua.DelegateBridge;
        // __Hotfix0_get_delayToPlay: XLua.DelegateBridge;
        // __Hotfix0_get_delayToRecycle: XLua.DelegateBridge;
        // __Hotfix0_get_randomPlayDelay: XLua.DelegateBridge;
        // __Hotfix0_get_usePlaybackSpeed: XLua.DelegateBridge;
        // __Hotfix0_get_isFinished: XLua.DelegateBridge;
        // __Hotfix0_get_isPaused: XLua.DelegateBridge;
        // __Hotfix0_set_isPaused: XLua.DelegateBridge;
        // __Hotfix0_get_playbackSpeed: XLua.DelegateBridge;
        // __Hotfix0_get_bodyTransform: XLua.DelegateBridge;
        // __Hotfix0_Play: XLua.DelegateBridge;
        // __Hotfix1_Play: XLua.DelegateBridge;
        // __Hotfix2_Play: XLua.DelegateBridge;
        // __Hotfix3_Play: XLua.DelegateBridge;
        // __Hotfix0_FinishMe: XLua.DelegateBridge;
        // __Hotfix0_OnFinish: XLua.DelegateBridge;
        // __Hotfix0_OnBeforePlay: XLua.DelegateBridge;
        // __Hotfix0_OnAllocate: XLua.DelegateBridge;
        // __Hotfix0_OnRecycle: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
        // __Hotfix0_Awake: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
        // __Hotfix0_FaceTo: XLua.DelegateBridge;
        // __Hotfix0_DoPlay: XLua.DelegateBridge;
        // __Hotfix0_UpdatePlaybackSpeed: XLua.DelegateBridge;
        // __Hotfix0_SetPaused: XLua.DelegateBridge;
        // __Hotfix0_ClearTrailRenderers: XLua.DelegateBridge;
        // __Hotfix0__PlayInternal: XLua.DelegateBridge;
        // __Hotfix0__InitLocationFromEntity: XLua.DelegateBridge;
        // __Hotfix0__SetEffectLikeCameraEffect: XLua.DelegateBridge;
        // __Hotfix0__InitLocation: XLua.DelegateBridge;
        // __Hotfix0_FinishEffects: XLua.DelegateBridge;
      }
      export interface ColorModifier {
        // _color: UnityEngine.Color;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_color: XLua.DelegateBridge;
        // __Hotfix0_OnPlay: XLua.DelegateBridge;
        // __Hotfix0_OnFinish: XLua.DelegateBridge;
        // __Hotfix0_OnPaused: XLua.DelegateBridge;
      }
      export interface EmitterRandomGroup {
        _effectPickFrom: System.String[];
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnPlay: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
        // __Hotfix0__PickOneEmitter: XLua.DelegateBridge;
      }
      export interface FlyToPredefinedLocation {
        _location: Torappu.Battle.PredefinedLocation;
        _duration: System.Single;
        // _easeType: DG.Tweening.Ease;
        _isIndependentUpdate: System.Boolean;
        // m_tween: DG.Tweening.Tween;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnPlay: XLua.DelegateBridge;
        // __Hotfix0_OnRecycle: XLua.DelegateBridge;
      }
      export interface FollowDirection {
        _useFourDir: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnPlay: XLua.DelegateBridge;
        // __Hotfix0_Update: XLua.DelegateBridge;
        // __Hotfix0_UpdateDirection: XLua.DelegateBridge;
        // __Hotfix0__FollowDirection: XLua.DelegateBridge;
      }
      export interface FollowMountPoint {
        _mountPointType: Torappu.Battle.Entity.MountPointType;
        _followScaleSign: System.Boolean;
        _followScale: System.Boolean;
        _pauseWhenMountPointInvalid: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnPlay: XLua.DelegateBridge;
        // __Hotfix0_LateUpdate: XLua.DelegateBridge;
        // __Hotfix0__FollowMountPoint: XLua.DelegateBridge;
      }
      export interface FollowOwner {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Update: XLua.DelegateBridge;
        // __Hotfix0__FollowEntity: XLua.DelegateBridge;
      }
      export interface FunnelHitEffect {
        // _randomRange: UnityEngine.Vector3;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnPlay: XLua.DelegateBridge;
      }
      export interface OnFinishEmitter {
        _effects: System.String[];
        _useFaceVector: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnFinish: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      }
      export interface OnPlayEmitter {
        _effects: System.String[];
        _preDelay: System.Single;
        _useFaceVector: System.Boolean;
        _clearWhenFinish: System.Boolean;
        // m_effects: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_OnPlay: XLua.DelegateBridge;
        // __Hotfix0_OnFinish: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
        // __Hotfix0__DoEmit: XLua.DelegateBridge;
      }
      export interface PauseAnotherEffect {
        _effect: System.String;
        _preDelay: System.Single;
        _checkUpdate: System.Boolean;
        // m_effectHolder: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
        // m_markPreDelay: System.Boolean;
        // m_preDelayCounter: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnPlay: XLua.DelegateBridge;
        // __Hotfix0_OnFinish: XLua.DelegateBridge;
        // __Hotfix0__OnPause: XLua.DelegateBridge;
        // __Hotfix0__OnUnpause: XLua.DelegateBridge;
        // __Hotfix0_Update: XLua.DelegateBridge;
      }
      export interface PauseEffectIf {
        _checkAbnormalFlag: System.Boolean;
        _pauseWhenAbnormalFlag: Torappu.AbnormalFlag;
        _checkAbnormalImmune: System.Boolean;
        _pauseWhenAbnormalImmune: Torappu.AbnormalFlag;
        _checkAbnormalCombo: Torappu.Battle.Effects.PauseEffectIf.CheckType;
        _pauseWhenAbnormalCombo: Torappu.AbnormalCombo;
        _checkContainBuff: Torappu.Battle.Effects.PauseEffectIf.CheckType;
        _pauseWhenContainBuffKey: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_checkAbnormalFlag: XLua.DelegateBridge;
        // __Hotfix0_get_checkAbnormalImmune: XLua.DelegateBridge;
        // __Hotfix0_get_checkAbnormalCombo: XLua.DelegateBridge;
        // __Hotfix0_get_checkContainBuff: XLua.DelegateBridge;
        // __Hotfix0_Update: XLua.DelegateBridge;
        // __Hotfix0__CheckPauseIfFlag: XLua.DelegateBridge;
      }
      export interface PauseEffectIfNotMove {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Update: XLua.DelegateBridge;
      }
      export interface RandomEmitter {
        _count: System.Int32;
        _effect: System.String;
        _preDelay: System.Single;
        _delayPerEffect: System.Single;
        // _randomRangeFrom: UnityEngine.Vector3;
        // _randomRangeTo: UnityEngine.Vector3;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnPlay: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
        // __Hotfix0__DoEmit: XLua.DelegateBridge;
      }
      export interface SpecifyUnitModeEffect {
        _unitModeIndex: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnPlay: XLua.DelegateBridge;
      }
      export interface SwitchableBackEffect {
        _backEffect: System.String;
        // m_backEffect: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
        // m_cachedIsBack: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnPlay: XLua.DelegateBridge;
        // __Hotfix0_OnFinish: XLua.DelegateBridge;
        // __Hotfix0_Update: XLua.DelegateBridge;
        // __Hotfix0__UpdateFace: XLua.DelegateBridge;
      }
      export interface SwitchableRightEffect {
        _rightEffect: System.String;
        // m_rightEffect: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
        // m_cachedIsRight: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnPlay: XLua.DelegateBridge;
        // __Hotfix0_OnFinish: XLua.DelegateBridge;
        // __Hotfix0_Update: XLua.DelegateBridge;
        // __Hotfix0__UpdateFace: XLua.DelegateBridge;
      }
      export interface TriggerAnimatorWhenFinish {
        // m_animator: UnityEngine.Animator;
        // s_onFinish: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnFinish: XLua.DelegateBridge;
        // __Hotfix0_Awake: XLua.DelegateBridge;
      }
      export interface EmptyEffect {
        _delayToFinish: System.Single;
        _allowAutoReuse: System.Boolean;
        _preloadCnt: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_allowAutoReuse: XLua.DelegateBridge;
        // __Hotfix0_get_preloadCnt: XLua.DelegateBridge;
        // __Hotfix0_get_spawnLocation: XLua.DelegateBridge;
        // __Hotfix0_get_useBodyDirection: XLua.DelegateBridge;
        // __Hotfix0_get_holdByOwner: XLua.DelegateBridge;
        // __Hotfix0_get_overwriteHeight: XLua.DelegateBridge;
        // __Hotfix0_get_heightOffset: XLua.DelegateBridge;
        // __Hotfix0_get_delayToRecycle: XLua.DelegateBridge;
      }
      export interface MapEffect {
        // _spawnMapOffset: UnityEngine.Vector3;
        _pauseIfTileIsLocated: System.Boolean;
        _forceZeroHeight: System.Boolean;
        // m_tile: Torappu.Battle.Tile;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_allowAutoReuse: XLua.DelegateBridge;
        // __Hotfix0_get_preloadCnt: XLua.DelegateBridge;
        // __Hotfix0_get_spawnLocation: XLua.DelegateBridge;
        // __Hotfix0_get_useBodyDirection: XLua.DelegateBridge;
        // __Hotfix0_get_holdByOwner: XLua.DelegateBridge;
        // __Hotfix0_get_overwriteHeight: XLua.DelegateBridge;
        // __Hotfix0_get_heightOffset: XLua.DelegateBridge;
        // __Hotfix0_Play: XLua.DelegateBridge;
        // __Hotfix0_OnBeforePlay: XLua.DelegateBridge;
        // __Hotfix0_OnFinish: XLua.DelegateBridge;
        // __Hotfix0_SetPaused: XLua.DelegateBridge;
        // __Hotfix0_SetTile: XLua.DelegateBridge;
        // __Hotfix0_OnLocatedCharacterUpdate: XLua.DelegateBridge;
      }
      export interface ParticleEffect {
        CHILD_NAME_ROTATION_Y: System.String;
        CHILD_NAME_ROTATION_Z: System.String;
        CHILD_NAME_FLIP_X: System.String;
        CHECK_IF_ALIVE_DELTA: System.Single;
        _delayToPlay: System.Single;
        _delayToFinish: System.Single;
        _maxLifetime: System.Single;
        _randomPlayDelay: System.Boolean;
        _allowAutoReuse: System.Boolean;
        _usePlaybackSpeed: System.Boolean;
        _preloadCnt: System.Int32;
        _rotateType: Torappu.Battle.Effects.ParticleEffect.RotateType;
        _spawnLocation: Torappu.Battle.Effects.Effect.SpawnLocation;
        _leftIsDefault: System.Boolean;
        _useBodyRotation: System.Boolean;
        _mainDir: Torappu.SharedConsts.Direction;
        _holdByOwner: System.Boolean;
        _overwriteHeight: System.Boolean;
        _heightOffset: System.Single;
        // _rotationY: UnityEngine.Transform;
        // _rotationZ: UnityEngine.Transform;
        // _flipZ: UnityEngine.Transform;
        // m_animator: UnityEngine.Animator;
        // m_particleSystem: UnityEngine.ParticleSystem;
        // m_particleSystems: UnityEngine.ParticleSystem[];
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_isFourDir: XLua.DelegateBridge;
        // __Hotfix0_get_maxLifeTime: XLua.DelegateBridge;
        // __Hotfix0_get_allowAutoReuse: XLua.DelegateBridge;
        // __Hotfix0_get_preloadCnt: XLua.DelegateBridge;
        // __Hotfix0_get_spawnLocation: XLua.DelegateBridge;
        // __Hotfix0_get_useBodyDirection: XLua.DelegateBridge;
        // __Hotfix0_get_holdByOwner: XLua.DelegateBridge;
        // __Hotfix0_get_overwriteHeight: XLua.DelegateBridge;
        // __Hotfix0_get_heightOffset: XLua.DelegateBridge;
        // __Hotfix0_get_delayToPlay: XLua.DelegateBridge;
        // __Hotfix0_get_delayToRecycle: XLua.DelegateBridge;
        // __Hotfix0_get_randomPlayDelay: XLua.DelegateBridge;
        // __Hotfix0_get_usePlaybackSpeed: XLua.DelegateBridge;
        // __Hotfix0_get_particleSystem: XLua.DelegateBridge;
        // __Hotfix0_get_particleSystems: XLua.DelegateBridge;
        // __Hotfix0_OnFinish: XLua.DelegateBridge;
        // __Hotfix0_DoPlay: XLua.DelegateBridge;
        // __Hotfix0_OnBeforePlay: XLua.DelegateBridge;
        // __Hotfix0_FaceTo: XLua.DelegateBridge;
        // __Hotfix0__CheckIfAlive: XLua.DelegateBridge;
        // __Hotfix0_UpdatePlaybackSpeed: XLua.DelegateBridge;
        // __Hotfix0_SetPaused: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
        // __Hotfix0_Awake: XLua.DelegateBridge;
        // __Hotfix0_OnAllocate: XLua.DelegateBridge;
        // __Hotfix0_OnRecycle: XLua.DelegateBridge;
      }
      export interface ProjectileEffect {
        _resetMainDir: System.Boolean;
        _mainDir: Torappu.SharedConsts.Direction;
        _rotate180Y: System.Boolean;
        _randomAngle: System.Single;
        _delayToFinish: System.Single;
        _allowAutoReuse: System.Boolean;
        _preloadCnt: System.Int32;
        // _inactiveOnFinish: UnityEngine.Transform[];
        // m_particleSystem: UnityEngine.ParticleSystem;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_resetMainDir: XLua.DelegateBridge;
        // __Hotfix0_get_preloadCnt: XLua.DelegateBridge;
        // __Hotfix0_get_spawnLocation: XLua.DelegateBridge;
        // __Hotfix0_get_useBodyDirection: XLua.DelegateBridge;
        // __Hotfix0_get_holdByOwner: XLua.DelegateBridge;
        // __Hotfix0_get_overwriteHeight: XLua.DelegateBridge;
        // __Hotfix0_get_heightOffset: XLua.DelegateBridge;
        // __Hotfix0_get_allowAutoReuse: XLua.DelegateBridge;
        // __Hotfix0_get_delayToRecycle: XLua.DelegateBridge;
        // __Hotfix0_OnAllocate: XLua.DelegateBridge;
        // __Hotfix0_OnRecycle: XLua.DelegateBridge;
        // __Hotfix0_DoPlay: XLua.DelegateBridge;
        // __Hotfix0_OnBeforePlay: XLua.DelegateBridge;
        // __Hotfix0_OnFinish: XLua.DelegateBridge;
        // __Hotfix0_Awake: XLua.DelegateBridge;
      }
      export interface SimpleEffect {
        CHECK_IF_ALIVE_DELTA: System.Single;
        _allowAutoReuse: System.Boolean;
        _preloadCnt: System.Int32;
        _lifeTime: System.Single;
        _spawnLocation: Torappu.Battle.Effects.Effect.SpawnLocation;
        _useBodyRotation: System.Boolean;
        _holdByOwner: System.Boolean;
        _overwriteHeight: System.Boolean;
        _heightOffset: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_allowAutoReuse: XLua.DelegateBridge;
        // __Hotfix0_get_preloadCnt: XLua.DelegateBridge;
        // __Hotfix0_get_spawnLocation: XLua.DelegateBridge;
        // __Hotfix0_get_useBodyDirection: XLua.DelegateBridge;
        // __Hotfix0_get_holdByOwner: XLua.DelegateBridge;
        // __Hotfix0_get_overwriteHeight: XLua.DelegateBridge;
        // __Hotfix0_get_heightOffset: XLua.DelegateBridge;
        // __Hotfix0__CheckIfAlive: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
      }
      export namespace Data {
        export interface EffectData_Advanced {
          overrideHeight: System.Boolean;
          heightOffset: System.Single;
        }
        export interface EffectData_Projectile {
          // inactiveOnFinish: UnityEngine.Transform[];
        }
        export interface SourceData {
        }
      }
      export namespace Effect {
        export interface Behaviour {
          // <effect>k__BackingField: Torappu.Battle.Effects.Effect;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_effect: XLua.DelegateBridge;
          // __Hotfix0_set_effect: XLua.DelegateBridge;
          // __Hotfix0_get_owner: XLua.DelegateBridge;
          // __Hotfix0_get_spawnLocation: XLua.DelegateBridge;
          // __Hotfix0_get_isPaused: XLua.DelegateBridge;
          // __Hotfix0_set_isPaused: XLua.DelegateBridge;
          // __Hotfix0_get_isFinished: XLua.DelegateBridge;
          // __Hotfix0_Init: XLua.DelegateBridge;
          // __Hotfix0_OnPlay: XLua.DelegateBridge;
          // __Hotfix0_OnFinish: XLua.DelegateBridge;
          // __Hotfix0_OnRecycle: XLua.DelegateBridge;
          // __Hotfix0_OnPaused: XLua.DelegateBridge;
          // __Hotfix0_FaceTo: XLua.DelegateBridge;
        }
        export enum SpawnLocation {
          NONE = "NONE",
          FOOT_POINT = "FOOT_POINT",
          HIT_POINT = "HIT_POINT",
          MUZZLE_POINT = "MUZZLE_POINT",
          HEAD_POINT = "HEAD_POINT",
          GROUND_CENTER = "GROUND_CENTER",
          MUZZLE_POINT_WITHOUT_ROTATION = "MUZZLE_POINT_WITHOUT_ROTATION",
          GROUND_CENTER_WITH_ZERO_HEIGHT = "GROUND_CENTER_WITH_ZERO_HEIGHT",
          MP_SPECIAL_0 = "MP_SPECIAL_0",
          MP_SPECIAL_1 = "MP_SPECIAL_1",
          MP_SPECIAL_2 = "MP_SPECIAL_2",
          MP_SPECIAL_3 = "MP_SPECIAL_3",
          CAMERA = "CAMERA",
        }
      }
      export namespace OnPlayEmitter {
      }
      export namespace PauseEffectIf {
        export enum CheckType {
          NOT_CHECK = "NOT_CHECK",
          CHECK_YES = "CHECK_YES",
          CHECK_NO = "CHECK_NO",
        }
      }
      export namespace RandomEmitter {
      }
      export namespace ParticleEffect {
        export enum RotateType {
          NONE = "NONE",
          FLIP_TWO_SIDE = "FLIP_TWO_SIDE",
          FOUR_DIRECTION = "FOUR_DIRECTION",
          FIXED_DIRECTION = "FIXED_DIRECTION",
          ANY_DIR = "ANY_DIR",
        }
      }
      export namespace SimpleEffect {
      }
    }
    export namespace Action {
      export interface IDamageOrHealSourceNode {
      }
      export interface ActionInfoAttribute {
        Category: System.String;
        Description: System.String;
      }
      export interface ActionNode {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_executeCondition: XLua.DelegateBridge;
        // __Hotfix0_ToString: XLua.DelegateBridge;
      }
      export interface Nodes {
        // s_sharedTargets: System.Collections.Generic.List<Torappu.Battle.Entity>;
      }
      export interface ActionUtil {
      }
      export namespace ActionNode {
        export enum SourceType {
          NONE = "NONE",
          FROM_BUFF = "FROM_BUFF",
          FROM_ABILITY = "FROM_ABILITY",
          FROM_PROJECTILE = "FROM_PROJECTILE",
          ALL = "ALL",
        }
        export enum ExecuteCondition {
          ALWAYS = "ALWAYS",
          PREVIOUS_SUCCEED = "PREVIOUS_SUCCEED",
          PREVIOUS_FAILED = "PREVIOUS_FAILED",
        }
      }
      export namespace Nodes {
        export enum ActionTargetType {
          TARGET = "TARGET",
          SOURCE = "SOURCE",
          BUFF_SOURCE = "BUFF_SOURCE",
          BUFF_OWNER = "BUFF_OWNER",
          MODIFIER_TARGET = "MODIFIER_TARGET",
          MODIFIER_SOURCE = "MODIFIER_SOURCE",
          MAIN_TARGET = "MAIN_TARGET",
        }
        export interface Empty {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface ModifyCost {
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _forceToDisplayNumber: System.Boolean;
          _forceToDisplayNegativeNumber: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface ModifyCharacterLimit {
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface ModifyLifePoint {
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface ModifySp {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _modifyByRatio: System.Boolean;
          _spMask: Torappu.SpType;
          _forceFlag: System.Boolean;
          _dontShowSpUI: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface SwitchMode {
          _modeIndex: System.Int32;
          _loadModeFromBlackboard: System.Boolean;
          _restoreDefault: System.Boolean;
          _restartFSM: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface SwitchRallyPointCategory {
          _category: Torappu.Battle.EntityCategory;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface InterruptEnemyAbility {
          _enemyFrom: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface InterruptCharacterAttack {
          _charFrom: Torappu.Battle.Action.Nodes.ActionTargetType;
          _resetCD: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface InterruptCharacterAbility {
          _charFrom: Torappu.Battle.Action.Nodes.ActionTargetType;
          _abilityName: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface Withdraw {
          _withdrawSource: System.Boolean;
          _switchToDeadState: System.Boolean;
          _force: System.Boolean;
          _needLog: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface WithdrawAlltheSameExcludeSource {
          _source: Torappu.Battle.Action.Nodes.ActionTargetType;
          _skipReborn: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface Evade {
          _damageMask: Torappu.Battle.DamageTypeMask;
          _applyWayFilter: Torappu.Battle.Modifier.SourceApplyWay;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0__VerifyModifier: XLua.DelegateBridge;
        }
        export interface EvadeByRemainingRatio {
          _damageMask: Torappu.Battle.DamageTypeMask;
          _applyWayFilter: Torappu.Battle.Modifier.SourceApplyWay;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0__VerifyModifier: XLua.DelegateBridge;
        }
        export interface CreateEffect {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _effectKey: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface FinishBuff {
          _decCntIfStack: System.Boolean;
          _updateOverrideMap: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface FinishBuffsById {
          _buffKey: System.String;
          _loadFromBlackboard: System.Boolean;
          _decCntIfStack: System.Boolean;
          _updateOverrideMap: System.Boolean;
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface FinishDerivedBuff {
          _updateOverrideMap: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CreateBuff {
          _buff: Torappu.BuffData;
          _buffOwner: Torappu.Battle.Action.Nodes.ActionTargetType;
          _isDerivedBuff: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        }
        export interface CreateBuffToBindingTiles {
          _buff: Torappu.BuffData;
          _source: Torappu.Battle.Action.Nodes.ActionTargetType;
          _isDerivedBuff: System.Boolean;
          _excludeRootTile: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        }
        export interface RandomCreateBuff {
          _datas: Torappu.Battle.Action.Nodes.RandomCreateBuff.BuffPair[];
          _isDerivedBuff: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        }
        export interface CreateBuffs {
          _buffPair: Torappu.Battle.Action.Nodes.CreateBuffs.BuffPair;
          _buffOwner: Torappu.Battle.Action.Nodes.ActionTargetType;
          _isDerivedBuff: System.Boolean;
          // m_buff: System.Collections.Generic.List<Torappu.BuffData>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        }
        export interface CreateBuffById {
          _buffKey: System.String;
          _buffOwner: Torappu.Battle.Action.Nodes.ActionTargetType;
          _isDerivedBuff: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        }
        export interface CreateBuffToCertainProfession {
          _professionMask: Torappu.ProfessionCategory;
          _buffData: Torappu.BuffData;
          _isDerivedBuff: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        }
        export interface CreateBuffInRange {
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _targetOptions: Torappu.Battle.TargetOptions;
          _excludeTarget: System.Boolean;
          _useAttackRange: System.Boolean;
          _rangeId: System.String;
          _buffs: Torappu.BuffData[];
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        }
        export interface CreateBuffToToken {
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _buffData: Torappu.BuffData;
          _isDerivedBuff: System.Boolean;
          // m_tokens: System.Collections.Generic.List<Torappu.Battle.Entity>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        }
        export interface CreateBuffToHost {
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _buffData: Torappu.BuffData;
          _isDerivedBuff: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        }
        export interface TriggerBuff {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckTriggerable {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface RemainingRatioToAttributeModifier {
          _attributeType: Torappu.AttributeType;
          _formulaType: Torappu.AttributeModifierData.AttributeModifier.FormulaItemType;
          _isInversed: System.Boolean;
          _endTime: System.Single;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface ModifyDynamicVar {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CreateBuffToUnitInCurrentMapLayer {
          _source: Torappu.Battle.Action.Nodes.ActionTargetType;
          _targetOptions: Torappu.Battle.TargetOptions;
          _buff: Torappu.BuffData;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0__AddBuff: XLua.DelegateBridge;
          // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        }
        export interface ClearFirstBuffBlackboardByKey {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _buffKey: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface Dice {
          _probKey: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface RandomSetter {
          _targetKey: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface RandomAction {
          _probKey: System.String;
          _actions: Torappu.Battle.Action.ActionNode[];
          _otherwiseActions: Torappu.Battle.Action.ActionNode[];
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface RandomCastAbility {
          _abilities: Torappu.Battle.Action.Nodes.TriggerAbility[];
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_GatherActionNodes: XLua.DelegateBridge;
        }
        export interface ApplyDamage {
          _damageType: Torappu.Battle.DamageType;
          _applyWay: Torappu.Battle.Modifier.SourceApplyWay;
          _attackType: Torappu.Battle.Modifier.SourceAttackType;
          _useDynamicAttackType: System.Boolean;
          // m_cachedAtk: Torappu.FP;
          // m_atkScale: Torappu.FP;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // _c__Hotfix1_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_get_atkScale: XLua.DelegateBridge;
          // __Hotfix0_set_atkScale: XLua.DelegateBridge;
          // __Hotfix0_get_cacheAtk: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_CreateDamageModifier: XLua.DelegateBridge;
          // __Hotfix0_CreateDamageModifierWithMainTarget: XLua.DelegateBridge;
          // __Hotfix0__SetAttackTypeByMainTarget: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
          // __Hotfix0_DeliverPreprocessPara: XLua.DelegateBridge;
        }
        export interface ApplyCacheAtkDamageFromProjectile {
          _transferSource: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_CreateDamageModifier: XLua.DelegateBridge;
        }
        export interface ApplyCacheAtkDamageFromBuff {
          _damageScaleKey: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface AdvancedApplyDamage {
          _damageType: Torappu.Battle.DamageType;
          _atkScaleVar: System.String;
          _applyWay: Torappu.Battle.Modifier.SourceApplyWay;
          _baseOnHostAtk: System.Boolean;
          _attackType: Torappu.Battle.Modifier.SourceAttackType;
          _forceUseProjectileCachedAtk: System.Boolean;
          // m_cachedAtk: Torappu.FP;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
          // __Hotfix0__TryGetAtkAsHostBased: XLua.DelegateBridge;
        }
        export interface NoSourceDamage {
          _damageType: Torappu.Battle.DamageType;
          _damageKey: System.String;
          _ignoreForSp: System.Boolean;
          _damageWithoutModify: System.Boolean;
          _attackType: Torappu.Battle.Modifier.SourceAttackType;
          _isEnvDamage: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
        }
        export interface FixedValueDamage {
          _damageType: Torappu.Battle.DamageType;
          _damageKey: System.String;
          _ignoreForSp: System.Boolean;
          _attackType: Torappu.Battle.Modifier.SourceAttackType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
        }
        export interface DamageViaMaxHpRatio {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _getMaxHpFromTarget: System.Boolean;
          _damageType: Torappu.Battle.DamageType;
          _applyWay: Torappu.Battle.Modifier.SourceApplyWay;
          _ignoreForSp: System.Boolean;
          _isUndeadable: System.Boolean;
          _attackType: Torappu.Battle.Modifier.SourceAttackType;
          _skipModifierEvent: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
        }
        export interface DamageViaCurHpRatio {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _damageType: Torappu.Battle.DamageType;
          _applyWay: Torappu.Battle.Modifier.SourceApplyWay;
          _ignoreForSp: System.Boolean;
          _isUndeadable: System.Boolean;
          _attackType: Torappu.Battle.Modifier.SourceAttackType;
          _skipModifierEvent: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
        }
        export interface DamageByDistance {
          MAX_DISTANCE: System.Int32;
          _isInit: System.Boolean;
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _attackType: Torappu.Battle.Modifier.SourceAttackType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
        }
        export interface DamageViaAttr {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _attributeType: Torappu.AttributeType;
          _getAttrFromTarget: System.Boolean;
          _damageType: Torappu.Battle.DamageType;
          _applyWay: Torappu.Battle.Modifier.SourceApplyWay;
          _ignoreForSp: System.Boolean;
          _isUndeadable: System.Boolean;
          _attackType: Torappu.Battle.Modifier.SourceAttackType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
        }
        export interface InverseDamage {
          _damageType: Torappu.Battle.DamageType;
          _sideMask: Torappu.Battle.SideType;
          _attackType: Torappu.Battle.Modifier.SourceAttackType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
        }
        export interface AtkScaleUp {
          _filterApplyWay: System.Boolean;
          _applyWay: Torappu.Battle.Modifier.SourceApplyWay;
          _defaultValue: System.Single;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface BlockDamage {
          _filterDamageType: System.Boolean;
          _damageMask: Torappu.Battle.DamageTypeMask;
          _useDynamicVar: System.Boolean;
          _showDamageNumber: System.Boolean;
          _specifyBlockEffect: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface InstantKill {
          _killSource: System.Boolean;
          _noSource: System.Boolean;
          _withdrawIfRallyPoint: System.Boolean;
          _resultIfInRallyPointMode: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface DamageScale {
          _filterDamageType: System.Boolean;
          _damageMask: Torappu.Battle.DamageTypeMask;
          _filterApplyWay: System.Boolean;
          _applyWayFilter: Torappu.Battle.Modifier.SourceApplyWay;
          _isOneMinus: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface DamageSplit {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _attackType: Torappu.Battle.Modifier.SourceAttackType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
        }
        export interface AOEDamage {
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _damageType: Torappu.Battle.DamageType;
          _sourceApplyWay: Torappu.Battle.Modifier.SourceApplyWay;
          _targetOptions: Torappu.Battle.TargetOptions;
          _excludeTarget: System.Boolean;
          _rangeId: System.String;
          _damageScale: System.String;
          _buffs: Torappu.BuffData[];
          _attackType: Torappu.Battle.Modifier.SourceAttackType;
          _createEffect: System.Boolean;
          // m_targetOptions: Torappu.Battle.TargetOptions;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0__DealDamage: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
          // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        }
        export interface AOEDamageFromProjectile {
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _damageType: Torappu.Battle.DamageType;
          _sourceApplyWay: Torappu.Battle.Modifier.SourceApplyWay;
          _targetOptions: Torappu.Battle.TargetOptions;
          _buffs: Torappu.BuffData[];
          _attackType: Torappu.Battle.Modifier.SourceAttackType;
          _createEffect: System.Boolean;
          _circleRadius: System.Single;
          _conditionActions: Torappu.Battle.Action.ActionNode;
          _succScaleKey: System.String;
          _failScaleKey: System.String;
          // m_targetOptions: Torappu.Battle.TargetOptions;
          // m_sideType: Torappu.Battle.SideType;
          // m_playerSide: Torappu.PlayerSide;
          // m_inited: System.Boolean;
          // m_cachedAtk: Torappu.FP;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0__DealDamage: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
          // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        }
        export interface SplashDamage {
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _excludeTargetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _damageType: Torappu.Battle.DamageType;
          _sourceApplyWay: Torappu.Battle.Modifier.SourceApplyWay;
          _excludeTarget: System.Boolean;
          _damageScale: System.String;
          _createEffect: System.Boolean;
          _attackType: Torappu.Battle.Modifier.SourceAttackType;
          LOCK: Torappu.FP;
          UNLOCK: Torappu.FP;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0__DealDamage: XLua.DelegateBridge;
        }
        export interface BleedingDamageIncreasingReset {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface BleedingDamagePerSec {
          _damageType: Torappu.Battle.DamageType;
          _damageKey: System.String;
          _baseDamageKey: System.String;
          _durationToIncreaseKey: System.String;
          _ignoreForSp: System.Boolean;
          _attackType: Torappu.Battle.Modifier.SourceAttackType;
          _isEnvDamage: System.Boolean;
          _isRatioToMaxHp: System.Boolean;
          _isIncreasingToCap: System.Boolean;
          _skipModifierEvent: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
        }
        export interface SetAtkScaleZero {
          _filterApplyWay: System.Boolean;
          _applyWay: Torappu.Battle.Modifier.SourceApplyWay;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface ApplyElementDamage {
          _elementDamageType: Torappu.Battle.ElementType;
          // m_cachedAtkEp: Torappu.FP;
          // m_epDamageRatio: Torappu.FP;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_CreateElementDamageModifier: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
        }
        export interface ApplyHeal {
          _isCont: System.Boolean;
          _isHpRatio: System.Boolean;
          // m_forceUseCacheAtk: System.Boolean;
          // m_healScale: Torappu.FP;
          // m_ignoreHealFree: System.Boolean;
          // m_cachedAtk: Torappu.FP;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // _c__Hotfix1_ctor: XLua.DelegateBridge;
          // _c__Hotfix2_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
        }
        export interface FixedValueHeal {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _ignoreHealFree: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
        }
        export interface AdvancedApplyHeal {
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _useDynamicVar: System.Boolean;
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _scaleUpIfUnderHpRatio: System.Boolean;
          // m_cachedAtk: Torappu.FP;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
        }
        export interface AOEHeal {
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _targetOptions: Torappu.Battle.TargetOptions;
          _excludeTarget: System.Boolean;
          _rangeId: System.String;
          _ignoreHealFree: System.Boolean;
          _healScale: System.String;
          _sourceSideType: Torappu.Battle.SideType;
          // m_cachedAtk: Torappu.FP;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface HealViaDamage {
          _healType: Torappu.Battle.Action.Nodes.HealViaDamage.HealType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
        }
        export interface AdvancedHealViaDamage {
          _owner: Torappu.Battle.Action.Nodes.ActionTargetType;
          _healAbilityName: System.String;
          _scaleKey: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
        }
        export interface HealViaMaxHpRatio {
          _healTarget: Torappu.Battle.Action.Nodes.ActionTargetType;
          _getMaxHpFromTarget: System.Boolean;
          _ignoreHealFree: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
        }
        export interface HealToken {
          _sourceTarget: Torappu.Battle.Action.Nodes.ActionTargetType;
          _ignoreHealFree: System.Boolean;
          _healByRatio: System.Boolean;
          _createEffect: System.Boolean;
          // m_targets: System.Collections.Generic.List<Torappu.Battle.Entity>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
        }
        export interface IsDamage {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface IsHeal {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface ApplyModifier {
          // m_modifier: Torappu.Battle.Modifier;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // _c__Hotfix1_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_modifier: XLua.DelegateBridge;
          // __Hotfix0_set_modifier: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface EnsureDmgOrHeal {
          _key: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface ModifierScaleUp {
          _scaleKey: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface IfModifierTarget {
          _motionMask: Torappu.MotionMask;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckModifierFace {
          _angle: System.Single;
          _backward: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckModifierDirectionOffset {
          _source: Torappu.Battle.Action.Nodes.ActionTargetType;
          _target: Torappu.Battle.Action.Nodes.ActionTargetType;
          _targetToSource: System.Boolean;
          _exceptThisOffset: System.Boolean;
          _offset: Torappu.GridPosition;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface HpNoLessThanCertainPercentModifier {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface SetSharedFlag {
          _sharedFlagIndex: Torappu.Battle.Modifier.SharedFlagIndex;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface RecordDamageModifier {
          // m_keyBuilder: System.Text.StringBuilder;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface TargetHpRatioToAtkScale {
          _startHpRatio: System.Single;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface AtkToHpRecovery {
          _getAtkFromTarget: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckBuffAttributeModifierChanged {
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _sourceAttributeType: Torappu.AttributeType;
          _buffAttributeType: Torappu.AttributeType;
          _formulaType: Torappu.AttributeModifierData.AttributeModifier.FormulaItemType;
          _useFirstDerivedBuff: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface HpRatioToAttributeAdd {
          _minHpRatio: System.Single;
          _maxHpRatio: System.Single;
          _attributeType: Torappu.AttributeType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface RechargeToken {
          _rechargeTiming: Torappu.Battle.Deck.Card.RechargeTiming;
          _refreshRemainingCnt: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface KillTokens {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface WithdrawTokens {
          _switchToDeadState: System.Boolean;
          _force: System.Boolean;
          _needLog: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckFirstRallyPointMode {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface GainToken {
          _rechargeTiming: Torappu.Battle.Deck.Card.RechargeTiming;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface Knockback {
          TOO_CLOSE_TOLERANCE_SQR: System.Single;
          _useSourceDirection: System.Boolean;
          _decreaseForceLevelWhenNotInDirection: System.Int32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface DragTowardSource {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface EmitProjectile {
          _mountPoint: Torappu.Battle.Entity.MountPointType;
          _ev: Torappu.Battle.Projectile.Event;
          _actions: Torappu.Battle.Action.ActionNode[];
          _overwriteActions: System.Boolean;
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_GatherActionNodes: XLua.DelegateBridge;
        }
        export interface IsBlackboardZero {
          _var: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface IsBlackboardEqualWithString {
          _var: System.String;
          _compareValue: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface IfNot {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_executeCondition: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface AlwaysNext {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_get_executeCondition: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface IfTarget {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _motionMask: Torappu.MotionMask;
          _checkTargetAlive: System.Boolean;
          _checkApplyWay: System.Boolean;
          _applyWay: Torappu.Battle.Modifier.SourceApplyWay;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface IfTargetFromDirection {
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _direction: Torappu.SharedConsts.Direction;
          _checkTargetIsFromDirection: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface IfDamageTargetSide {
          _sideMask: Torappu.Battle.SideType;
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckEntityEquals {
          _lhsType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _rhsType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckBlocked {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _checkBlockedBySource: System.Boolean;
          _checkBlockedBySourceToken: System.Boolean;
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface FilterAbilityFamily {
          _familyGroupMask: Torappu.Battle.Ability.FamilyGroupMask;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface StartTimeline {
          _timelineKey: System.String;
          // m_blackboardKey: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface ConsumeTimeline {
          _timelineKey: System.String;
          // m_blackboardKey: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckIfDamageHasSharedFlags {
          _sharedFlags: Torappu.Battle.Modifier.SharedFlagIndex;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface FilterByTargetHpRatio {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _condType: Torappu.CompareType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface FilterByTargetHp {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _condType: Torappu.CompareType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface FilterByTargetSpRatio {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _condType: Torappu.CompareType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface FilterByBuffStackCount {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _buffKey: System.String;
          _stackCount: System.Int32;
          _stackCountKey: System.String;
          _stackCountPeeling: System.Int32;
          _condType: Torappu.CompareType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface FilterByBlackboardValue {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _blackboardKey: System.String;
          _valueToCompare: System.Int32;
          _anotherKeyToCompare: System.String;
          _condType: Torappu.CompareType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckManhattanDistance {
          _minDist: System.Int32;
          _maxDist: System.Int32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckAbnormalFlag {
          _abnormalFlag: Torappu.AbnormalFlag;
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _isUnset: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckAbnormalCombo {
          _abnormalCombo: Torappu.AbnormalCombo;
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _isUnset: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckFilterTag {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _filterTag: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckCharacterGroupTag {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _groupTag: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckTargetInRange {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _soureceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _rangeId: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckHasEnemyInRange {
          _soureceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _rangeId: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckContainsBuff {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _buffKeys: System.String[];
          isAND: System.Boolean;
          // m_result: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckContainsDerviedBuff {
          _derviedBuffKey: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckCertainCharacterContainsBuff {
          _targetKey: System.String;
          _buffKey: System.String;
          _loadFromBlackboard: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckBuildableType {
          _target: Torappu.Battle.Action.Nodes.ActionTargetType;
          _buildableType: Torappu.BuildableType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface VertifyTarget {
          _source: Torappu.Battle.Action.Nodes.ActionTargetType;
          _target: Torappu.Battle.Action.Nodes.ActionTargetType;
          _targetOptions: Torappu.Battle.TargetOptions;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckDirection {
          _source: Torappu.Battle.Action.Nodes.ActionTargetType;
          _target: Torappu.Battle.Action.Nodes.ActionTargetType;
          _judgeType: Torappu.Battle.Action.Nodes.CheckDirection.JudgeType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0__GetDirectionVector: XLua.DelegateBridge;
        }
        export interface IfElse {
          _conditionNode: Torappu.Battle.Action.ActionNode;
          _succeedNodes: Torappu.Battle.Action.ActionNode[];
          _failNodes: Torappu.Battle.Action.ActionNode[];
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_GatherActionNodes: XLua.DelegateBridge;
        }
        export interface FilterDeathReason {
          _source: Torappu.Battle.Action.Nodes.ActionTargetType;
          _finishReason: Torappu.Battle.Entity.FinishReason;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface SwitchDirection {
          _source: Torappu.Battle.Action.Nodes.ActionTargetType;
          _direction: Torappu.SharedConsts.Direction;
          _useCustomDirection: System.Boolean;
          _rightNodes: Torappu.Battle.Action.ActionNode[];
          _leftNodes: Torappu.Battle.Action.ActionNode[];
          _upNodes: Torappu.Battle.Action.ActionNode[];
          _downNodes: Torappu.Battle.Action.ActionNode[];
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_GatherActionNodes: XLua.DelegateBridge;
        }
        export interface FilterByTargetMassLevel {
          _target: Torappu.Battle.Action.Nodes.ActionTargetType;
          _condType: Torappu.CompareType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface FilterByTargetAttribute {
          _target: Torappu.Battle.Action.Nodes.ActionTargetType;
          _condType: Torappu.CompareType;
          _attributeType: Torappu.AttributeType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface FilterDamageModifer {
          _filterAttackType: System.Boolean;
          _attackTypeFilter: Torappu.Battle.Modifier.SourceAttackType;
          _filterDamageType: System.Boolean;
          _damageMask: Torappu.Battle.DamageTypeMask;
          _filterSharedMask: System.Boolean;
          _sharedFlag: Torappu.Battle.Modifier.SharedFlagIndex;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckCost {
          _compareType: Torappu.CompareType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface FilterAbilityApplyWay {
          _applyWayFilter: Torappu.Battle.Modifier.SourceApplyWay;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface HpRatioTrigger {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _condType: Torappu.CompareType;
          _hpRatioEachTime: System.Single;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckRemainTime {
          _checkRemainTime: System.Single;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckBuildCnt {
          _checkBuildCnt: System.Int32;
          _condType: Torappu.CompareType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckUnitCurrentMode {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _checkCurModeIndex: System.Int32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface IsCharacter {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CheckEnemyUnbalanced {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface TriggerSkill {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface TriggerTokenSkill {
          _hostType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface InterruptTokenSkill {
          _hostType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface TriggerTokenSkillWithinManhattanDistance {
          _hostType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface SwitchDynamicBuffTileMode {
          _operation: Torappu.Battle.Action.Nodes.SwitchDynamicBuffTileMode.Operation;
          // <>f__am$cache0: System.Func<System.Int32,System.Int32>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CreateTileEffect {
          _effectKey: System.String;
          _holdIt: System.Boolean;
          _verifyBeforeCreate: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface FinishTileHoldingEffect {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface BlinkNode {
          _toNextCheckpoint: System.Boolean;
          _useAnimSpeed: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface TriggerAbility {
          _ownerType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _abilityName: System.String;
          _checkCanUseAblityFlag: System.Boolean;
          _castDirectly: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface TriggerAbilityUseSelector {
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _abilityName: System.String;
          _excludeTarget: System.Boolean;
          _excludeTargetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface TriggerEnemySkill {
          _skillName: System.String;
          _ownerType: Torappu.Battle.Action.Nodes.ActionTargetType;
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface MoveNextLevelBranch {
          _isLoop: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface PickRandomBranchPhase {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface FinishCurrentWave {
          _trackSourceAtNextWave: System.Boolean;
          _sourceType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface DisableTrait {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface EnableTrait {
          _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface LogExtraBattleInfo {
          _logType: Torappu.Battle.Action.Nodes.LogExtraBattleInfo.LogType;
          _key: System.String;
          _attributeType: Torappu.Battle.Action.Nodes.LogExtraBattleInfo.LogAttributeType;
          _target: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface ChangeMotionMode {
          _target: Torappu.Battle.Action.Nodes.ActionTargetType;
          _resetToDefault: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface ModifyAbilityBlackboardAndCast {
          _scaledByBuffGroupStackCount: System.Boolean;
          _blackboardKeys: System.String;
          _ability: System.String;
          _logStackCountToDynamicVar: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface PlayBGM {
          _needSourceStateRunning: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface ShakeCamera {
          _duration: System.Single;
          // _strength: UnityEngine.Vector3;
          _vibrato: System.Int32;
          _randomness: System.Single;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface MarkCurrentHpRatio {
          _target: Torappu.Battle.Action.Nodes.ActionTargetType;
          _markInBlackboard: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface RallyPointReborn {
          _target: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface ReleaseFromBlocker {
          _target: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface HasCertainCharacterInFrontOfMe {
          _characterKey: System.String;
          _source: Torappu.Battle.Action.Nodes.ActionTargetType;
          _target: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface SummonEnemiesFollowMyRoute {
          _source: Torappu.Battle.Action.Nodes.ActionTargetType;
          _enemyKey: System.String;
          _summonCount: System.Int32;
          _delayTime: System.Single;
          _managedByScheduler: System.Boolean;
          _dontBlockWave: System.Boolean;
          _trySummonOutsideWhenInObstacle: System.Boolean;
          _randomOffsetBound: System.Single;
          _passableMask: Torappu.MotionMask;
          _onlySummonOneInTheSamePlace: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0__FindNearestPassableTile: XLua.DelegateBridge;
        }
        export interface EnemyKillToken {
          _target: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface EnemyHasValidToken {
          _target: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CharacterHasValidToken {
          _hostType: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface SummonEnemyWithRuntimeRoute {
          _source: Torappu.Battle.Action.Nodes.ActionTargetType;
          _target: Torappu.Battle.Action.Nodes.ActionTargetType;
          _enemyKey: System.String;
          _motionMode: Torappu.MotionMode;
          _unharmful: System.Boolean;
          _alwaysCountAsKilled: System.Boolean;
          _waitTime: System.Single;
          _spawnOffset: System.Single;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface ClearCharacterSp {
          _charFrom: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0__ReduceSpToZero: XLua.DelegateBridge;
        }
        export interface CreateCardFilterByProfession {
          _profession: Torappu.ProfessionCategory;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CreateCardBuffFilterByRarityAndProfession {
          _rarity: Torappu.RarityRankMask;
          _profession: Torappu.ProfessionCategory[];
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_professionGroup: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface CreateCardBuff {
          _target: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface BaseCreateCardBuff {
          _lifeType: Torappu.Battle.Deck.Card.CardBuff.LifeType;
          _isRatio: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
          // __Hotfix0_DoCreateCardBuff: XLua.DelegateBridge;
        }
        export interface FinishCardBuff {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface FilterTargetBlackboardPlayerSide {
          _target: Torappu.Battle.Action.Nodes.ActionTargetType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface FilterTargetWithPlayerSide {
          _target: Torappu.Battle.Action.Nodes.ActionTargetType;
          filterMapLayer: System.Boolean;
          filterTargetPlayerSide: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface ForceCharacterAnimatorFaceFront {
          _FroceFaceFront: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface FilterAbilityValidCastTargetCnt {
          _condType: Torappu.CompareType;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export interface LuaNode {
          _luaActionName: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
          // __Hotfix0_Execute: XLua.DelegateBridge;
        }
        export namespace RandomCreateBuff {
          export interface BuffPair {
            buff: Torappu.BuffData;
            buffOwner: Torappu.Battle.Action.Nodes.ActionTargetType;
          }
        }
        export namespace CreateBuffs {
          export interface BuffPair {
            buff: Torappu.BuffData;
            useBlackboard: System.Boolean;
            count: System.Int32;
            peeling: System.Int32;
          }
        }
        export namespace CreateBuffInRange {
        }
        export namespace AOEDamage {
        }
        export namespace AOEDamageFromProjectile {
        }
        export namespace AOEHeal {
        }
        export namespace HealViaDamage {
          export enum HealType {
            FIXED = "FIXED",
            DAMAGE_SCALE = "DAMAGE_SCALE",
          }
        }
        export namespace GainToken {
        }
        export namespace CheckDirection {
          export enum JudgeType {
            OPPOSITE = "OPPOSITE",
            EQUAL = "EQUAL",
            VERTICAL = "VERTICAL",
          }
        }
        export namespace SwitchDynamicBuffTileMode {
          export enum Operation {
            FLIP_BOOL = "FLIP_BOOL",
          }
        }
        export namespace LogExtraBattleInfo {
          export enum LogType {
            NONE = "NONE",
            SIMPLE = "SIMPLE",
            DETAILED = "DETAILED",
            ATTRIBUTE = "ATTRIBUTE",
            CHARACTER_SKILL = "CHARACTER_SKILL",
          }
          export enum LogAttributeType {
            NONE = "NONE",
            HP_RATIO = "HP_RATIO",
          }
        }
      }
      export namespace TNodeAction {
        export interface Nodes {
        }
        export interface TNodePortIDPair {
          sourcePortName: System.String;
          targetPortName: System.String;
          targetID: System.String;
        }
        export interface TNodeFromNext {
          from: Torappu.Battle.Action.TNodeAction.TNodeBase;
        }
        export interface TNodeNext {
          next: Torappu.Battle.Action.TNodeAction.TNodeBase;
        }
        export interface TNodeBase {
          // <ID>k__BackingField: System.String;
          // m_dataType: System.Type;
        }
        export interface TNodeDataKV<TKey> {
          key: TKey;
          // value: SerializedTNodeData;
        }
        export interface TNodeDataDict<TKey,TPair> {
          _nodeGraph: TPair[];
        }
        export interface TNodeGraph {
        }
        export namespace Nodes {
          export interface OnEvent {
            _data: Torappu.Battle.Action.TNodeAction.Nodes.OnEvent.Data;
          }
          export interface Dice {
            _data: Torappu.Battle.Action.TNodeAction.Nodes.Dice.Data;
          }
          export interface NoSourceDamage {
            _data: Torappu.Battle.Action.TNodeAction.Nodes.NoSourceDamage.Data;
          }
          export interface AtkScaleUp {
            _data: Torappu.Battle.Action.TNodeAction.Nodes.AtkScaleUp.Data;
          }
          export interface FixedValueDamage {
            _data: Torappu.Battle.Action.TNodeAction.Nodes.FixedValueDamage.Data;
          }
          export interface CreateBuff {
            _data: Torappu.Battle.Action.TNodeAction.Nodes.CreateBuff.Data;
          }
          export interface FinishDerivedBuff {
            _data: Torappu.Battle.Action.TNodeAction.Nodes.FinishDerivedBuff.Data;
          }
          export interface IfElse {
            _data: Torappu.Battle.Action.TNodeAction.Nodes.IfElse.Data;
            condition: Torappu.Battle.Action.TNodeAction.TNodeBase;
            onSuccess: Torappu.Battle.Action.TNodeAction.TNodeBase;
            onFail: Torappu.Battle.Action.TNodeAction.TNodeBase;
          }
          export interface IfNot {
            _data: Torappu.Battle.Action.TNodeAction.Nodes.IfNot.Data;
          }
          export interface IfTarget {
            _data: Torappu.Battle.Action.TNodeAction.Nodes.IfTarget.Data;
          }
          export interface CheckContainsBuff {
            _data: Torappu.Battle.Action.TNodeAction.Nodes.CheckContainsBuff.Data;
          }
          export interface CheckContainsDerivedBuff {
            _data: Torappu.Battle.Action.TNodeAction.Nodes.CheckContainsDerivedBuff.Data;
          }
          export namespace OnEvent {
            export interface Data {
              _eventType: Torappu.Battle.Buff.Event;
              // _c__Hotfix0_ctor: XLua.DelegateBridge;
              // __Hotfix0_get_eventType: XLua.DelegateBridge;
              // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
              // __Hotfix0_Execute: XLua.DelegateBridge;
              // __Hotfix0_FetchDataRef: XLua.DelegateBridge;
            }
          }
          export namespace Dice {
            export interface Data {
              _probKey: System.String;
              // _c__Hotfix0_ctor: XLua.DelegateBridge;
              // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
              // __Hotfix0_Execute: XLua.DelegateBridge;
            }
          }
          export namespace NoSourceDamage {
            export interface Data {
              _damageType: Torappu.Battle.DamageType;
              _damageKey: System.String;
              _ignoreForSp: System.Boolean;
              _damageWithoutModify: System.Boolean;
              _attackType: Torappu.Battle.Modifier.SourceAttackType;
              _isEnvDamage: System.Boolean;
              // _c__Hotfix0_ctor: XLua.DelegateBridge;
              // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
              // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
              // __Hotfix0_Execute: XLua.DelegateBridge;
              // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
            }
          }
          export namespace AtkScaleUp {
            export interface Data {
              _filterApplyWay: System.Boolean;
              _applyWay: Torappu.Battle.Modifier.SourceApplyWay;
              // _c__Hotfix0_ctor: XLua.DelegateBridge;
              // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
              // __Hotfix0_Execute: XLua.DelegateBridge;
            }
          }
          export namespace FixedValueDamage {
            export interface Data {
              _damageType: Torappu.Battle.DamageType;
              _damageKey: System.String;
              _ignoreForSp: System.Boolean;
              _attackType: Torappu.Battle.Modifier.SourceAttackType;
              // _c__Hotfix0_ctor: XLua.DelegateBridge;
              // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
              // __Hotfix0_get_purposeMask: XLua.DelegateBridge;
              // __Hotfix0_Execute: XLua.DelegateBridge;
              // __Hotfix0_PreprocessForProjectile: XLua.DelegateBridge;
            }
          }
          export namespace CreateBuff {
            export interface Data {
              _buff: Torappu.BuffData;
              _buffOwner: Torappu.Battle.Action.Nodes.ActionTargetType;
              _isDerivedBuff: System.Boolean;
              // _c__Hotfix0_ctor: XLua.DelegateBridge;
              // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
              // __Hotfix0_Execute: XLua.DelegateBridge;
              // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
            }
          }
          export namespace FinishDerivedBuff {
            export interface Data {
              _updateOverrideMap: System.Boolean;
              // _c__Hotfix0_ctor: XLua.DelegateBridge;
              // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
              // __Hotfix0_Execute: XLua.DelegateBridge;
            }
          }
          export namespace IfElse {
            export interface Data {
              _conditionNode: Torappu.Battle.Action.ActionNode;
              _succeedNodes: Torappu.Battle.Action.ActionNode[];
              _failNodes: Torappu.Battle.Action.ActionNode[];
              // _c__Hotfix0_ctor: XLua.DelegateBridge;
              // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
              // __Hotfix0_Execute: XLua.DelegateBridge;
              // __Hotfix0_FetchDataRef: XLua.DelegateBridge;
            }
          }
          export namespace IfNot {
            export interface Data {
              // _c__Hotfix0_ctor: XLua.DelegateBridge;
              // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
              // __Hotfix0_get_executeCondition: XLua.DelegateBridge;
              // __Hotfix0_Execute: XLua.DelegateBridge;
            }
          }
          export namespace IfTarget {
            export interface Data {
              _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
              _motionMask: Torappu.MotionMask;
              _checkTargetAlive: System.Boolean;
              _checkApplyWay: System.Boolean;
              _applyWay: Torappu.Battle.Modifier.SourceApplyWay;
              // _c__Hotfix0_ctor: XLua.DelegateBridge;
              // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
              // __Hotfix0_Execute: XLua.DelegateBridge;
            }
          }
          export namespace CheckContainsBuff {
            export interface Data {
              _targetType: Torappu.Battle.Action.Nodes.ActionTargetType;
              _buffKeys: System.String[];
              isAND: System.Boolean;
              // m_result: System.Boolean;
              // _c__Hotfix0_ctor: XLua.DelegateBridge;
              // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
              // __Hotfix0_Execute: XLua.DelegateBridge;
            }
          }
          export namespace CheckContainsDerivedBuff {
            export interface Data {
              _derivedBuffKey: System.String;
              // _c__Hotfix0_ctor: XLua.DelegateBridge;
              // __Hotfix0_get_allowedSource: XLua.DelegateBridge;
              // __Hotfix0_Execute: XLua.DelegateBridge;
            }
          }
        }
        export namespace TNodeFromNext {
          export interface TNodeFromNextData {
            // _c__Hotfix0_ctor: XLua.DelegateBridge;
          }
        }
        export namespace TNodeNext {
          export interface TNodeNextData {
            // _c__Hotfix0_ctor: XLua.DelegateBridge;
            // __Hotfix0_FetchDataRef: XLua.DelegateBridge;
          }
        }
        export namespace TNodeBase {
          export interface TNodeBaseData {
            _iD: System.String;
            // _pos: UnityEngine.Vector2;
            // m_portIDPairDict: System.Collections.Generic.Dictionary<System.String,Torappu.Battle.Action.TNodeAction.TNodePortIDPair>;
            _portIDPair: Torappu.Battle.Action.TNodeAction.TNodePortIDPair[];
            // _c__Hotfix0_ctor: XLua.DelegateBridge;
            // __Hotfix0_get_ID: XLua.DelegateBridge;
            // __Hotfix0_set_ID: XLua.DelegateBridge;
            // __Hotfix0_get_portIDPairDict: XLua.DelegateBridge;
            // __Hotfix0_ParseTNode: XLua.DelegateBridge;
            // __Hotfix0_FetchDataRef: XLua.DelegateBridge;
            // __Hotfix0_SerializeTNodeBasic: XLua.DelegateBridge;
            // __Hotfix0_GetNodeType: XLua.DelegateBridge;
          }
        }
      }
    }
    export namespace Test {
      export interface ActionTest {
        // nono: ActionArray;
        // node: ActionList;
      }
    }
    export namespace GameModeMeta {
      export enum GameModeType {
        DEFAULT = "DEFAULT",
        ROGUELIKE = "ROGUELIKE",
        MULTIPLAYER = "MULTIPLAYER",
      }
    }
    export namespace BattleInOut {
      export interface InParams {
        battleId: System.String;
        levelData: Torappu.LevelData;
        playerDataList: System.Collections.Generic.List<Torappu.Battle.BattlePlayerData>;
        stageInfo: Torappu.Battle.BattleStageInfo;
        isPractise: System.Boolean;
        isAutoBattle: System.Boolean;
        isHandBookStage: System.Boolean;
        autoBattleJournal: Torappu.Battle.BattleLogger.Journal;
        // squadLocalData: Torappu.UI.Squad.SquadItemStruct[];
        friendData: Torappu.SquadFriendData;
        assistIsFriend: System.Boolean;
        finishIllust: Torappu.Battle.BattleFinishIllust;
        isPredefinedSquad: System.Boolean;
        difficulty: Torappu.LevelData.Difficulty;
        isApProtect: System.Boolean;
        apCost: System.Int32;
        apFailReturn: System.Int32;
        notifyPowerScoreNotEnoughIfFailed: System.Boolean;
        startTs: System.Int64;
        runeInput: Torappu.IRuneDataHolder;
        finishBattleServiceConfig: Torappu.IFinishBattleServiceConfig;
        // battleFinishIndexPlugin: Torappu.UI.BattleFinish.BattleFinishIndexState.IPlugin;
        skipBattleFinishWhenFailed: System.Boolean;
        // sysMenuStyle: Torappu.Battle.UI.BattleSysMenuStyle;
        bundleToJumpBack: Torappu.DataBundle;
        uploadBattleLog: System.Boolean;
        overrideBgmEvent: System.String;
        // m_campaignData: Torappu.CampaignData;
        actMeta: Torappu.Battle.BattleActivityMeta;
        stageMeta: Torappu.Battle.BattleStageMeta;
        gameModeMeta: System.Nullable<Torappu.Battle.GameModeMeta>;
      }
      export interface OutParams {
        isServiceSucceed: System.Boolean;
        isGiveUp: System.Boolean;
        finishResponse: Torappu.CommonFinishBattleResponse;
        battleRank: Torappu.PlayerBattleRank;
        difficulty: Torappu.LevelData.Difficulty;
        // blurredBkg: UnityEngine.Sprite;
        journal: Torappu.Battle.BattleLogger.Journal;
        leftHp: System.Int32;
        isAutoBattle: System.Boolean;
        actMeta: System.Object;
      }
    }
    export namespace Consts {
      export enum BattlePauseKey {
        UI_CONTROLLER = "UI_CONTROLLER",
        CANCEL_AUTO_BATTLE = "CANCEL_AUTO_BATTLE",
        INTERNAL = "INTERNAL",
      }
      export interface PriorityLevel {
        LOW: System.Int32;
        MIDDLE: System.Int32;
        HIGH: System.Int32;
      }
    }
    export namespace Abilities {
      export interface AnimatedActionToOwnerAbility {
        // _actions: ActionArray;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_OnSpellStart: XLua.DelegateBridge;
        // __Hotfix0_GeneratePurposeMask: XLua.DelegateBridge;
        // __Hotfix0_GatherActionNodes: XLua.DelegateBridge;
      }
      export interface AnimatedActionToTargetAbility {
        // _actions: ActionArray;
        _attackType: Torappu.Battle.Modifier.SourceAttackType;
        _useDynamicAttackType: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_attackType: XLua.DelegateBridge;
        // __Hotfix0_get_useDynamicAttackType: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_GatherActionNodes: XLua.DelegateBridge;
      }
      export interface EmptyAnimatedAbility {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
      }
      export interface InstantActionToOwnerAbility {
        // _actions: ActionArray;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_category: XLua.DelegateBridge;
        // __Hotfix0_get_selectTargetSource: XLua.DelegateBridge;
        // __Hotfix0_get_alwaysIncludeTarget: XLua.DelegateBridge;
        // __Hotfix0_get_allowNoTarget: XLua.DelegateBridge;
        // __Hotfix0_GatherActionNodes: XLua.DelegateBridge;
        // __Hotfix0_OnSpellStart: XLua.DelegateBridge;
      }
      export interface AbstractBasicAttack {
        _atkScale: System.Single;
        _attackType: Torappu.Battle.Modifier.SourceAttackType;
        _elementDamageType: Torappu.Battle.ElementType;
        _epDamageRatio: System.Single;
        _useDynamicAttackType: System.Boolean;
        _deliveryParaWhenReplaceActionNode: System.Boolean;
        // m_atkScale: Torappu.FP;
        // m_epDamageRatio: Torappu.FP;
        // m_actions: System.Collections.Generic.List<Torappu.Battle.Action.ActionNode>;
        // m_elementDamageType: Torappu.Battle.ElementType;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_hasEpDamage: XLua.DelegateBridge;
        // __Hotfix0_get_atkScale: XLua.DelegateBridge;
        // __Hotfix0_get_elementDamageType: XLua.DelegateBridge;
        // __Hotfix0_get_attackType: XLua.DelegateBridge;
        // __Hotfix0_get_useDynamicAttackType: XLua.DelegateBridge;
        // __Hotfix0_ApplyAtkScale: XLua.DelegateBridge;
        // __Hotfix0_CreateAndReplaceDamageNode: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_CheckIsDamageOrHealSource: XLua.DelegateBridge;
        // __Hotfix0_GeneratePurposeMask: XLua.DelegateBridge;
      }
      export interface ChannelingMeleeAttack {
        _triggerDelta: System.Single;
        _postDelayChecker: System.Single;
        _onlyTrigAudioSignalForFirstSpell: System.Boolean;
        // m_duration: Torappu.FP;
        // m_castTime: Torappu.FP;
        // m_isAttackFinished: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_cooldown: XLua.DelegateBridge;
        // __Hotfix0_get_onlyTrigAudioSignalForFirstSpell: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_CheckAnotherSpell: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForTriggerDelta: XLua.DelegateBridge;
        // __Hotfix0_OnAttackFinished: XLua.DelegateBridge;
        // __Hotfix0_GetDuration: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
      }
      export interface MeleeAttack {
        _damageType: Torappu.Battle.DamageType;
        _extraDamageType: Torappu.Battle.DamageType;
        _alwaysPutIncludeTargetFirst: System.Boolean;
        // m_buffProb: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_applyWay: XLua.DelegateBridge;
        // __Hotfix0_get_damageType: XLua.DelegateBridge;
        // __Hotfix0_get_extraDamageType: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_CheckActiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_UpdateTargets: XLua.DelegateBridge;
      }
      export interface MeleeAttackByDistance {
        _atkScaleByDistance: Torappu.Battle.Abilities.MeleeAttackByDistance.AtkScaleByDistConfig[];
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_CheckActiveBuffs: XLua.DelegateBridge;
      }
      export interface MultiMeleeAttack {
        _additionalTimes: System.Int32;
        _triggerDelta: System.Single;
        _waitAttackEventForAllAttacks: System.Boolean;
        _splitDamage: System.Boolean;
        _minPostDelay: System.Single;
        _onlyFeedActiveBuffToLastOne: System.Boolean;
        _addSpellCntToLastSignalId: System.Boolean;
        _onlyTrigAudioSignalForFirstSpell: System.Boolean;
        _onlyTrigAudioSignalForFirstHit: System.Boolean;
        // m_triggerDelta: System.Single;
        // m_damageSplitter: Torappu.Battle.ModifierSplitter;
        // m_multiEventListener: Torappu.Battle.MultiEventListener;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_waitAttackEventForAllAttacks: XLua.DelegateBridge;
        // __Hotfix0_get_postDelay: XLua.DelegateBridge;
        // __Hotfix0_get_onlyTrigAudioSignalForFirstSpell: XLua.DelegateBridge;
        // __Hotfix0_get_onlyTrigAudioSignalForFirstHit: XLua.DelegateBridge;
        // __Hotfix0_GetActiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_DoAttach: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_CheckAnotherSpell: XLua.DelegateBridge;
        // __Hotfix0_DoEmitAudioSignalForSpellOn: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastEnd: XLua.DelegateBridge;
        // __Hotfix0_DoApplyActionsOnTarget: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPreDelay: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForTriggerDelta: XLua.DelegateBridge;
      }
      export interface ChargeRangedAttack {
        _maxChargeTimes: System.Int32;
        _mountPointForProjectiles: System.Collections.Generic.List<Torappu.Battle.Entity.MountPointType>;
        // m_chargeTimes: System.Int32;
        // m_isChargeAttack: System.Boolean;
        // m_maxChargeTimes: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_isReady: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_CastToTarget: XLua.DelegateBridge;
        // __Hotfix0_CreateProjectile: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPostDelay: XLua.DelegateBridge;
        // __Hotfix0_AddChargeTimes: XLua.DelegateBridge;
        // __Hotfix0_CanCharge: XLua.DelegateBridge;
        // __Hotfix0_SetIsChargeAttack: XLua.DelegateBridge;
        // __Hotfix0_OnChargeCastEvent: XLua.DelegateBridge;
        // __Hotfix0_FinishAttack: XLua.DelegateBridge;
        // __Hotfix0_GetCurChargeCount: XLua.DelegateBridge;
        // __Hotfix0_CheckInChargeAttack: XLua.DelegateBridge;
        // __Hotfix0_UpdateAtkScale: XLua.DelegateBridge;
        // __Hotfix0_ResetAtkScale: XLua.DelegateBridge;
      }
      export interface CrossRangedAttack {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_DoCastOnTargets: XLua.DelegateBridge;
      }
      export interface DuoRangedAttack {
        DUO_ATTACK_SPLIT_FACTOR: System.Int32;
        _duoProjectileKey: System.String;
        _duoMountPointType: Torappu.Battle.Entity.MountPointType;
        _lastTargetDuoAttack: System.Boolean;
        // m_targetCount: System.Int32;
        // m_cachedTarget: Torappu.ObjectPtr<Torappu.Battle.Entity>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_DoCastOnTargets: XLua.DelegateBridge;
        // __Hotfix0_OnCastOnTarget: XLua.DelegateBridge;
        // __Hotfix0_CreateProjectile: XLua.DelegateBridge;
        // __Hotfix0_GatherProjectiles: XLua.DelegateBridge;
      }
      export interface FunnelNormalAttack {
        // m_trait: Torappu.Battle.Abilities.CammouTrait;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_OnCastOnTarget: XLua.DelegateBridge;
      }
      export interface FunnelRemoteAttack {
        _funnelAction: Torappu.Battle.Ability;
        // m_hasFireFunnel: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Reset: XLua.DelegateBridge;
        // __Hotfix0_DoCastOnTargets: XLua.DelegateBridge;
        // __Hotfix0_DoAttach: XLua.DelegateBridge;
        // __Hotfix0_DoDetach: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0__RecycleFunnel: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
      }
      export interface MultiChargeRangedAttack {
        _chargeAbility: Torappu.Battle.Abilities.ChargeRangedAttack;
        _chargeAnimKey: System.String;
        _chargeDownAnimKey: System.String;
        _chargeUpAnimKey: System.String;
        // m_isChargeAttack: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnAttached: XLua.DelegateBridge;
        // __Hotfix0_OnDetached: XLua.DelegateBridge;
        // __Hotfix0_CastToTarget: XLua.DelegateBridge;
        // __Hotfix0_OnCastOnTarget: XLua.DelegateBridge;
        // __Hotfix0_OnCastEnd: XLua.DelegateBridge;
        // __Hotfix0_CreateProjectile: XLua.DelegateBridge;
        // __Hotfix0_DoEmitAudioSignalForSpellOn: XLua.DelegateBridge;
        // __Hotfix0_GetAnimKey: XLua.DelegateBridge;
        // __Hotfix0__SetIsChargeAttack: XLua.DelegateBridge;
        // __Hotfix0_CheckInChargeAttack: XLua.DelegateBridge;
        // __Hotfix0_GetCurChargeCount: XLua.DelegateBridge;
        // __Hotfix0_CanAlwaysTrigger: XLua.DelegateBridge;
      }
      export interface MultiRangedAttack {
        _additionalTimes: System.Int32;
        _triggerDelta: System.Single;
        _waitAttackEventForAllAttacks: System.Boolean;
        _additionalProjectile: System.String;
        _onlyFeedActionsToFirstOne: System.Boolean;
        _onlyTrigAudioSignalForFirstOne: System.Boolean;
        _limitToOneTargetAfterFirstRound: System.Boolean;
        _splitDamage: System.Boolean;
        _addSpellCntToSignalId: System.Boolean;
        _onlyFeedActiveBuffToLastOne: System.Boolean;
        _onlyFeedActiveBuffToFirstOne: System.Boolean;
        _castToFirstRoundTargetLocationsAtProjectileBirth: System.Boolean;
        // m_alreadyFeedFirstOne: System.Boolean;
        // m_damageSplitter: Torappu.Battle.ModifierSplitter;
        // m_multiEventListener: Torappu.Battle.MultiEventListener;
        // m_locationsFirstSpellCastTo: System.Collections.Generic.List<UnityEngine.Vector2>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_waitAttackEventForAllAttacks: XLua.DelegateBridge;
        // __Hotfix0_get_onlyTrigAudioSignalForFirstSpell: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_DoAttach: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_DoCastOnTargets: XLua.DelegateBridge;
        // __Hotfix0_OnCastOnTarget: XLua.DelegateBridge;
        // __Hotfix0_CheckAnotherSpell: XLua.DelegateBridge;
        // __Hotfix0_UpdateTargets: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastEnd: XLua.DelegateBridge;
        // __Hotfix0_DoApplyActionsOnTarget: XLua.DelegateBridge;
        // __Hotfix0_Reset: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPreDelay: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForTriggerDelta: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileKey: XLua.DelegateBridge;
        // __Hotfix0_GatherProjectiles: XLua.DelegateBridge;
        // __Hotfix0_GetActiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_CheckProjectileNameOnApplied: XLua.DelegateBridge;
      }
      export interface RangedAttack {
        _projectileKey: System.String;
        _mountPointType: Torappu.Battle.Entity.MountPointType;
        _damageType: Torappu.Battle.DamageType;
        _waitForProjectileInvalid: System.Boolean;
        _fireAttackFinishWhenProjectileInvalid: System.Boolean;
        _minPostDelayWhenProjectileInvalid: System.Single;
        _waitForAnimEndWhenProjectileInvalid: System.Boolean;
        _projectileDestination: Torappu.Battle.Abilities.RangedAttack.ProjectileDestinationType;
        _extraDamageType: Torappu.Battle.DamageType;
        _emitToInputPosWhenTargetIsInvalid: System.Boolean;
        _useCachedAtkOnly: System.Boolean;
        _transferSource: System.Boolean;
        _extraProjectileKeys: System.String[];
        // m_projectiles: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Projectile>>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_waitForProjectileInvalid: XLua.DelegateBridge;
        // __Hotfix0_get_emitToInputPosWhenTargetIsInvalid: XLua.DelegateBridge;
        // __Hotfix0_get_applyWay: XLua.DelegateBridge;
        // __Hotfix0_get_damageType: XLua.DelegateBridge;
        // __Hotfix0_get_extraDamageType: XLua.DelegateBridge;
        // __Hotfix0_get_useCachedAtkOnly: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_DoCastOnTargets: XLua.DelegateBridge;
        // __Hotfix0_OnCastOnTarget: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GatherProjectiles: XLua.DelegateBridge;
        // __Hotfix0_Reset: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPostDelay: XLua.DelegateBridge;
        // __Hotfix0_OnCastEnd: XLua.DelegateBridge;
        // __Hotfix0_NewDamageNode: XLua.DelegateBridge;
        // __Hotfix0_CreateProjectile: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileKey: XLua.DelegateBridge;
        // __Hotfix0__CheckProjectileValid: XLua.DelegateBridge;
        // __Hotfix0_CheckProjectileNameOnApplied: XLua.DelegateBridge;
        // __Hotfix0_OnPrefabUpdated: XLua.DelegateBridge;
        // __Hotfix0_OnAttackTimeChanged: XLua.DelegateBridge;
      }
      export interface RangedAttackWithDoubleConfirm {
        // m_hasFirstConfirm: System.Boolean;
        // m_cachedPosition: System.Nullable<UnityEngine.Vector2>;
        _checkCanUseAbilityFlag: System.Boolean;
        _useCachedPositionForced: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_CastToTarget: XLua.DelegateBridge;
        // __Hotfix0_GetCastDirectlyMapPosition: XLua.DelegateBridge;
        // __Hotfix0_Reset: XLua.DelegateBridge;
        // __Hotfix0__ResetDoubleConfirm: XLua.DelegateBridge;
      }
      export interface RangedAttackWithExtraActions {
        _actionEvent: Torappu.Battle.Projectile.Event;
        // _actions: ActionArray;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GatherActionNodes: XLua.DelegateBridge;
      }
      export interface ActiveBuffAbility {
        _buffs: Torappu.BuffData[];
        _waitForCasting: System.Boolean;
        _preDelay: System.Single;
        _escapeTime: System.Single;
        _checkBuffEarlyFinish: System.Boolean;
        _passiveBuffs: Torappu.BuffData[];
        // m_lifeTime: Torappu.FP;
        // m_buffInsts: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Buff>>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_cooldown: XLua.DelegateBridge;
        // __Hotfix0_get_escapeTime: XLua.DelegateBridge;
        // __Hotfix0_get_category: XLua.DelegateBridge;
        // __Hotfix0_get_selectTargetSource: XLua.DelegateBridge;
        // __Hotfix0_get_isAffecting: XLua.DelegateBridge;
        // __Hotfix0_get_alwaysIncludeTarget: XLua.DelegateBridge;
        // __Hotfix0_get_allowNoTarget: XLua.DelegateBridge;
        // __Hotfix0_get_preDelay: XLua.DelegateBridge;
        // __Hotfix0_StopAffect: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GetPassiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_GetActiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPreDelay: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPostDelay: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_Reset: XLua.DelegateBridge;
        // __Hotfix0_GetDuration: XLua.DelegateBridge;
        // __Hotfix0_OnSpellStart: XLua.DelegateBridge;
        // __Hotfix0_SetLifeTime: XLua.DelegateBridge;
        // __Hotfix0_DoOnSpellStart: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0__CheckNotAllFinished: XLua.DelegateBridge;
      }
      export interface ActiveOneOfBuffAbility {
        _extraBuffs: System.Collections.Generic.List<Torappu.Battle.Abilities.ActiveOneOfBuffAbility.BuffDataList>;
        // m_spellCnt: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_OnSpellStart: XLua.DelegateBridge;
        // __Hotfix0_Reset: XLua.DelegateBridge;
      }
      export interface Heal {
        _isCont: System.Boolean;
        _isHpRatio: System.Boolean;
        _hasNoActionNode: System.Boolean;
        _ignoreHealFree: System.Boolean;
        // m_healScale: System.Single;
        // m_actions: System.Collections.Generic.List<Torappu.Battle.Action.ActionNode>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_isCont: XLua.DelegateBridge;
        // __Hotfix0_get_ignoreHealFree: XLua.DelegateBridge;
        // __Hotfix0_get_isHpRatio: XLua.DelegateBridge;
        // __Hotfix0_get_applyWay: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_NewHealNode: XLua.DelegateBridge;
        // __Hotfix0_CheckIsDamageOrHealSource: XLua.DelegateBridge;
        // __Hotfix0_GeneratePurposeMask: XLua.DelegateBridge;
      }
      export interface RangedHeal {
        _projectileKey: System.String;
        _useCachedAtkOnly: System.Boolean;
        _mountPointType: Torappu.Battle.Entity.MountPointType;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_alwaysIncludeTarget: XLua.DelegateBridge;
        // __Hotfix0_OnCastOnTarget: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_NewHealNode: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GatherProjectiles: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileKey: XLua.DelegateBridge;
      }
      export interface AbstractSpawnTokenOnTileAbility {
        _applyWay: Torappu.Battle.Modifier.SourceApplyWay;
        // _actions: ActionArray;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_applyWay: XLua.DelegateBridge;
        // __Hotfix0_GatherActionNodes: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_OnCastOnTile: XLua.DelegateBridge;
      }
      export interface CastOnTileAbility {
        _tileEffect: System.String;
        _startEffect: System.String;
        _faceToTile: System.Boolean;
        // m_castTiles: System.Collections.Generic.List<Torappu.Battle.Tile>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_DealWithFaceDirection: XLua.DelegateBridge;
        // __Hotfix0_CheckDownAttack: XLua.DelegateBridge;
        // __Hotfix0_CheckUpAttack: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_CleanupForNextCast: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastOnTile: XLua.DelegateBridge;
        // __Hotfix0_DoCastOnTargets: XLua.DelegateBridge;
        // __Hotfix0_UpdateTargets: XLua.DelegateBridge;
      }
      export interface ProjectileToTileAbility {
        _projectileKey: System.String;
        _mountPointType: Torappu.Battle.Entity.MountPointType;
        _damageType: Torappu.Battle.DamageType;
        _atkScale: System.Single;
        _waitForProjectileInvalid: System.Boolean;
        _fireAttackFinishWhenProjectileInvalid: System.Boolean;
        _minPostDelayWhenProjectileInvalid: System.Single;
        _attackType: Torappu.Battle.Modifier.SourceAttackType;
        // m_projectiles: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Projectile>>;
        // m_atkScale: Torappu.FP;
        // m_actions: System.Collections.Generic.List<Torappu.Battle.Action.ActionNode>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_waitForProjectileInvalid: XLua.DelegateBridge;
        // __Hotfix0_get_applyWay: XLua.DelegateBridge;
        // __Hotfix0_get_attackType: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GatherProjectiles: XLua.DelegateBridge;
        // __Hotfix0_Reset: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastOnTile: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPostDelay: XLua.DelegateBridge;
        // __Hotfix0_OnCastEnd: XLua.DelegateBridge;
        // __Hotfix0_CheckIsDamageOrHealSource: XLua.DelegateBridge;
        // __Hotfix0__CheckProjectileValid: XLua.DelegateBridge;
      }
      export interface SpawnTokenOnTileAbility {
        _tokenToSpawn: Torappu.CharacterInst;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_DoSpawnOnTile: XLua.DelegateBridge;
      }
      export interface SpawnTokenOnTileByIDAbility {
        _tokenId: System.String;
        _addBuffsIfOverlay: System.Boolean;
        _buffsToExistToken: Torappu.BuffData[];
        _addBuffsToSpawnedToken: System.Boolean;
        _buffsToToken: Torappu.BuffData[];
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_addBuffsIfOverlay: XLua.DelegateBridge;
        // __Hotfix0_DoSpawnOnTile: XLua.DelegateBridge;
      }
      export interface ProjectileToTileOnceAbility {
        // m_cachedTiles: System.Collections.Generic.List<Torappu.Battle.Tile>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnCastOnTile: XLua.DelegateBridge;
      }
      export interface SummonEnemyToTileAbility {
        _sourceSelector: Torappu.Battle.TargetSelector;
        _enemyKey: System.String;
        _motionMode: Torappu.MotionMode;
        _unharmful: System.Boolean;
        _alwaysCountAsKilled: System.Boolean;
        _waitTime: System.Single;
        _offset: System.Single;
        _summonTileEffect: System.String;
        _onlySelectMe: System.Boolean;
        // m_routeSource: Torappu.ObjectPtr<Torappu.Battle.Entity>;
        // m_targetTile: Torappu.ObjectPtr<Torappu.Battle.Tile>;
        // m_summonEffect: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
        // __Hotfix0_Reset: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastEnd: XLua.DelegateBridge;
      }
      export interface AbilityFirstSucceedGroup {
        _category: Torappu.Battle.Ability.Category;
        _coolDownAbilityIndex: System.Int32;
        _clearInternalCooldownWhenFinish: System.Boolean;
        _abilities: Torappu.Battle.Ability[];
        _timeMode: Torappu.Battle.Abilities.AbstractAnimatedAbility.TimeMode;
        // m_cooldown: Torappu.FP;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_category: XLua.DelegateBridge;
        // __Hotfix0_get_selectTargetSource: XLua.DelegateBridge;
        // __Hotfix0_get_cooldown: XLua.DelegateBridge;
        // __Hotfix0_get_alwaysIncludeTarget: XLua.DelegateBridge;
        // __Hotfix0_get_needUpdateAttackTime: XLua.DelegateBridge;
        // __Hotfix0_GetActiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_GetPassiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_CastToTarget: XLua.DelegateBridge;
        // __Hotfix0_CastDirectly: XLua.DelegateBridge;
        // __Hotfix0_DoAttach: XLua.DelegateBridge;
        // __Hotfix0_DoDetach: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPreDelay: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPostDelay: XLua.DelegateBridge;
        // __Hotfix0_OnCastEnd: XLua.DelegateBridge;
        // __Hotfix0_OnAttackTimeChanged: XLua.DelegateBridge;
        // __Hotfix0__OnSubAbilityFinished: XLua.DelegateBridge;
        // __Hotfix0_PreloadSpecialAudioSignals: XLua.DelegateBridge;
      }
      export interface AbilityParallelGroup {
        _abilities: Torappu.Battle.Ability[];
        // m_category: Torappu.Battle.Ability.Category;
        // m_cooldown: Torappu.FP;
        // m_remainingJobCnt: System.Int32;
        // m_jobCntThisTime: System.Int32;
        _alsoInterruptSubAbilities: System.Boolean;
        _useEscaptime: System.Boolean;
        _alsoCheckChildrenAffecting: System.Boolean;
        // m_escapeTime: Torappu.FP;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_isAffecting: XLua.DelegateBridge;
        // __Hotfix0_get_cooldown: XLua.DelegateBridge;
        // __Hotfix0_get_escapeTime: XLua.DelegateBridge;
        // __Hotfix0_get_category: XLua.DelegateBridge;
        // __Hotfix0_get_selectTargetSource: XLua.DelegateBridge;
        // __Hotfix0_get_alwaysIncludeTarget: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GetPassiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_GetActiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPreDelay: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPostDelay: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_CastToTarget: XLua.DelegateBridge;
        // __Hotfix0_CastDirectly: XLua.DelegateBridge;
        // __Hotfix0_DoAttach: XLua.DelegateBridge;
        // __Hotfix0_DoDetach: XLua.DelegateBridge;
        // __Hotfix0_OnCastEnd: XLua.DelegateBridge;
        // __Hotfix0_Awake: XLua.DelegateBridge;
        // __Hotfix0__OnSubAbilityFinished: XLua.DelegateBridge;
        // __Hotfix0_CheckAtPreCastPhase: XLua.DelegateBridge;
        // __Hotfix0_PreloadSpecialAudioSignals: XLua.DelegateBridge;
      }
      export interface AbilityRandomGroup {
        _category: Torappu.Battle.Ability.Category;
        _coolDownAbilityIndex: System.Int32;
        _clearInternalCooldownWhenFinish: System.Boolean;
        _selectMethod: Torappu.Battle.Abilities.AbilityRandomGroup.SelectMethod;
        _alsoInterruptCurrentSubAbility: System.Boolean;
        _abilities: Torappu.Battle.Ability[];
        _timeMode: Torappu.Battle.Abilities.AbstractAnimatedAbility.TimeMode;
        _diffFromLastOneIfNotFirst: System.Boolean;
        // m_lastCastAbilitySinceFirstAttack: Torappu.ObjectPtr<Torappu.Battle.Ability>;
        // m_abilityGroupThisTime: System.Collections.Generic.List<Torappu.Battle.Ability>;
        // m_loopIndex: System.Int32;
        // m_cooldown: Torappu.FP;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_category: XLua.DelegateBridge;
        // __Hotfix0_get_selectTargetSource: XLua.DelegateBridge;
        // __Hotfix0_get_isRandom: XLua.DelegateBridge;
        // __Hotfix0_get_cooldown: XLua.DelegateBridge;
        // __Hotfix0_get_alwaysIncludeTarget: XLua.DelegateBridge;
        // __Hotfix0_get_needUpdateAttackTime: XLua.DelegateBridge;
        // __Hotfix0_GetActiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_GetPassiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_Reset: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0__SelectAbilityDifferentFromLastOne: XLua.DelegateBridge;
        // __Hotfix0__SelectAbilityForRandom: XLua.DelegateBridge;
        // __Hotfix0_CastToTarget: XLua.DelegateBridge;
        // __Hotfix0_CastDirectly: XLua.DelegateBridge;
        // __Hotfix0__GetAbilityInternal: XLua.DelegateBridge;
        // __Hotfix0_DoAttach: XLua.DelegateBridge;
        // __Hotfix0_DoDetach: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPreDelay: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPostDelay: XLua.DelegateBridge;
        // __Hotfix0_OnCastEnd: XLua.DelegateBridge;
        // __Hotfix0_OnAttackTimeChanged: XLua.DelegateBridge;
        // __Hotfix0__OnSubAbilityFinished: XLua.DelegateBridge;
        // __Hotfix0_PreloadSpecialAudioSignals: XLua.DelegateBridge;
        // __Hotfix0_InterruptIfNot: XLua.DelegateBridge;
      }
      export interface AbilitySequenceGroup {
        MAX_CASTING_TIME: System.Int32;
        _abilities: Torappu.Battle.Ability[];
        _alwaysNext: System.Boolean;
        // m_isCastDirectly: System.Boolean;
        // m_cachedTarget: Torappu.ObjectPtr<Torappu.Battle.Entity>;
        // m_cachedFirstAttack: System.Boolean;
        // m_category: Torappu.Battle.Ability.Category;
        // m_cooldown: Torappu.FP;
        // m_currentIndex: System.Int32;
        // m_remainingJobCnt: System.Int32;
        _alsoInterruptCurrentSubAbility: System.Boolean;
        _interruptableSubAbilityIndice: System.Collections.Generic.List<System.Int32>;
        _alsoStopSubAbilityAffect: System.Boolean;
        _alsoResetSubAbilityCooldown: System.Boolean;
        _setDataExceptRedundance: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_cooldown: XLua.DelegateBridge;
        // __Hotfix0_get_category: XLua.DelegateBridge;
        // __Hotfix0_get_selectTargetSource: XLua.DelegateBridge;
        // __Hotfix0_get_isAffecting: XLua.DelegateBridge;
        // __Hotfix0_get_alwaysIncludeTarget: XLua.DelegateBridge;
        // __Hotfix0_get_alsoInterruptCurrentSubAbility: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GetPassiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_GetActiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPreDelay: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPostDelay: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_CastToTarget: XLua.DelegateBridge;
        // __Hotfix0_CastDirectly: XLua.DelegateBridge;
        // __Hotfix0_DoAttach: XLua.DelegateBridge;
        // __Hotfix0_DoDetach: XLua.DelegateBridge;
        // __Hotfix0_PreloadSpecialAudioSignals: XLua.DelegateBridge;
        // __Hotfix0_OnCastEnd: XLua.DelegateBridge;
        // __Hotfix0_Awake: XLua.DelegateBridge;
        // __Hotfix0_CheckAtPreCastPhase: XLua.DelegateBridge;
        // __Hotfix0__OnSubAbilityFinished: XLua.DelegateBridge;
        // __Hotfix0__MoveToNextActiveAbility: XLua.DelegateBridge;
        // __Hotfix0_StopAffect: XLua.DelegateBridge;
        // __Hotfix0_ResetCooldown: XLua.DelegateBridge;
      }
      export interface AbstractAnimatedAbility {
        MIN_ANIM_SCALE: System.Single;
        _selectTargetSource: Torappu.Battle.AbilityStandard.SelectTargetSource;
        _selectTargetTiming: Torappu.Battle.AbilityStandard.SelectTargetTiming;
        _timeMode: Torappu.Battle.Abilities.AbstractAnimatedAbility.TimeMode;
        _alwaysIncludeTarget: System.Boolean;
        _allowNoTarget: System.Boolean;
        _animKey: System.String;
        _endAnimKey: System.String;
        _downAnimKey: System.String;
        _upAnimKey: System.String;
        _cooldown: System.Single;
        _cooldownKey: System.String;
        _preDelay: System.Single;
        _escapeTime: System.Single;
        _faceToTarget: System.Boolean;
        _faceToDefault: System.Boolean;
        _faceToFront: System.Boolean;
        _forceFaceToDirection: System.Boolean;
        _activeBuffs: Torappu.BuffData[];
        _maxAnimScale: System.Single;
        // m_preDelay: Torappu.FP;
        // m_attackTime: Torappu.FP;
        // m_animScale: System.Single;
        // m_damageNode: Torappu.Battle.Action.Nodes.ApplyDamage;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_needSpecifiedCooldown: XLua.DelegateBridge;
        // __Hotfix0_get_loadFromBlackboard: XLua.DelegateBridge;
        // __Hotfix0_get_timeMode: XLua.DelegateBridge;
        // __Hotfix0_get_attackType: XLua.DelegateBridge;
        // __Hotfix0_get_useDynamicAttackType: XLua.DelegateBridge;
        // __Hotfix0_get_canSelectCamouflageTarget: XLua.DelegateBridge;
        // __Hotfix0_get_selectTargetSource: XLua.DelegateBridge;
        // __Hotfix0_get_selectTargetTiming: XLua.DelegateBridge;
        // __Hotfix0_get_alwaysIncludeTarget: XLua.DelegateBridge;
        // __Hotfix0_get_forceFaceToDirection: XLua.DelegateBridge;
        // __Hotfix0_get_allowNoTarget: XLua.DelegateBridge;
        // __Hotfix0_get_preDelay: XLua.DelegateBridge;
        // __Hotfix0_get_escapeTime: XLua.DelegateBridge;
        // __Hotfix0_get_category: XLua.DelegateBridge;
        // __Hotfix0_get_cooldown: XLua.DelegateBridge;
        // __Hotfix0_OnAttackTimeChanged: XLua.DelegateBridge;
        // __Hotfix0_GetActiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_GetPassiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_DoAttach: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_DealWithFaceDirection: XLua.DelegateBridge;
        // __Hotfix0_OnCastEnd: XLua.DelegateBridge;
        // __Hotfix0_CreateDamageNode: XLua.DelegateBridge;
        // __Hotfix0_NewDamageNode: XLua.DelegateBridge;
        // __Hotfix0_CreateElementDamageNode: XLua.DelegateBridge;
        // __Hotfix0_GetDuration: XLua.DelegateBridge;
        // __Hotfix0_UpdatePlaybackSpeed: XLua.DelegateBridge;
        // __Hotfix0_GetAnimKey: XLua.DelegateBridge;
        // __Hotfix0_CheckDownAttack: XLua.DelegateBridge;
        // __Hotfix0_CheckUpAttack: XLua.DelegateBridge;
      }
      export interface ActiveAbilityWrapper {
        _wrappedAbilities: Torappu.Battle.Ability[];
        _isInfinity: System.Boolean;
        _durationKey: System.String;
        _preDelay: System.Single;
        // m_lifeTime: Torappu.FP;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_cooldown: XLua.DelegateBridge;
        // __Hotfix0_get_category: XLua.DelegateBridge;
        // __Hotfix0_get_selectTargetSource: XLua.DelegateBridge;
        // __Hotfix0_get_isAffecting: XLua.DelegateBridge;
        // __Hotfix0_get_rangeToShow: XLua.DelegateBridge;
        // __Hotfix0_get_alwaysIncludeTarget: XLua.DelegateBridge;
        // __Hotfix0_get_allowNoTarget: XLua.DelegateBridge;
        // __Hotfix0_get_preDelay: XLua.DelegateBridge;
        // __Hotfix0_StopAffect: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GetPassiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_GetActiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_GetDuration: XLua.DelegateBridge;
        // __Hotfix0_OnSpellStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastEnd: XLua.DelegateBridge;
      }
      export interface EasyToStartAbility {
        _waitForAttackEvent: System.Boolean;
        _interuptIfTargetDead: System.Boolean;
        _resetCdStrategy: Torappu.Battle.Abilities.EasyToStartAbility.ResetCooldownStrategy;
        // m_cachedDuration: Torappu.FP;
        // m_receivedEvent: System.Boolean;
        // m_realStartTime: Torappu.FP;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_waitForAttackEvent: XLua.DelegateBridge;
        // __Hotfix0_get_postDelay: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastEnd: XLua.DelegateBridge;
        // __Hotfix0_WaitForNextEvent: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPreDelay: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPostDelay: XLua.DelegateBridge;
        // __Hotfix0__CheckNeedResetCooldown: XLua.DelegateBridge;
        // __Hotfix0__OnReceiveEvent: XLua.DelegateBridge;
        // __Hotfix0__CheckNotReceiveEvent: XLua.DelegateBridge;
        // __Hotfix0__CheckNotReceiveEventAndTargetAlive: XLua.DelegateBridge;
      }
      export interface AuraAbility {
        TRIGGER_TICK: System.Int32;
        _buffs: Torappu.BuffData[];
        _passiveBuffs: Torappu.BuffData[];
        _selfOption: Torappu.Battle.Abilities.AuraAbility.SelfOption;
        _removeBuffWhenTargetLeave: System.Boolean;
        _removeBuffWhenAbilityDetached: System.Boolean;
        _effects: System.String[];
        _targetValidator: Torappu.Battle.TargetValidator;
        // m_range: Torappu.Battle.Range;
        // m_layerMask: System.Int32;
        // m_targetMap: System.Collections.Generic.Dictionary<Torappu.ObjectPtr<Torappu.Battle.Entity>,Torappu.Battle.Abilities.AuraAbility.TargetMeta>;
        // m_colliders: UnityEngine.Collider2D[];
        // m_effects: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>>;
        // m_eeHandler: Torappu.Battle.Abilities.AuraAbility.TargetEnterExitHandler;
        // <rigidbody2D>k__BackingField: UnityEngine.Rigidbody2D;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_eeHandler: XLua.DelegateBridge;
        // __Hotfix0_get_cooldown: XLua.DelegateBridge;
        // __Hotfix0_get_category: XLua.DelegateBridge;
        // __Hotfix0_get_selectTargetSource: XLua.DelegateBridge;
        // __Hotfix0_get_rangeToShow: XLua.DelegateBridge;
        // __Hotfix0_get_alwaysIncludeTarget: XLua.DelegateBridge;
        // __Hotfix0_get_rigidbody2D: XLua.DelegateBridge;
        // __Hotfix0_set_rigidbody2D: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GetPassiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_GetActiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPreDelay: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPostDelay: XLua.DelegateBridge;
        // __Hotfix0_Reset: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_DoAttach: XLua.DelegateBridge;
        // __Hotfix0_DoDetach: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
        // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        // __Hotfix0_OnAbilityExtendUpdated: XLua.DelegateBridge;
        // __Hotfix0_DealTargetTouched: XLua.DelegateBridge;
        // __Hotfix0_DealTargetLeft: XLua.DelegateBridge;
        // __Hotfix0__ClearEffects: XLua.DelegateBridge;
        // __Hotfix0__DoTargetCheckAndEnter: XLua.DelegateBridge;
        // __Hotfix0__DoTargetExit: XLua.DelegateBridge;
        // __Hotfix0_VerifyTarget: XLua.DelegateBridge;
        // __Hotfix0_OnTriggerEnter2D: XLua.DelegateBridge;
        // __Hotfix0_OnTriggerExit2D: XLua.DelegateBridge;
        // __Hotfix0_Awake: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
      }
      export interface AuraAttachmentAbility {
        _additiveActiveBuffs: Torappu.BuffData[];
        _targetFamilyMask: Torappu.Battle.Ability.FamilyGroupMask;
        _attachTargetValidator: Torappu.Battle.TargetValidator;
        // m_attachment: Torappu.Battle.AbilityAttachment;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_DoAttach: XLua.DelegateBridge;
        // __Hotfix0_DealTargetTouched: XLua.DelegateBridge;
        // __Hotfix0_DealTargetLeft: XLua.DelegateBridge;
      }
      export interface AuraWithHostAsSourceAbility {
        // m_host: Torappu.ObjectPtr<Torappu.Battle.Character>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_DealTargetTouched: XLua.DelegateBridge;
        // __Hotfix0_DoAttach: XLua.DelegateBridge;
      }
      export interface GlobalAuraAbility {
        TRIGGER_TICK: System.Int32;
        _targetValidator: Torappu.Battle.TargetValidator;
        _buffs: Torappu.BuffData[];
        _passiveBuffs: Torappu.BuffData[];
        _selfOption: Torappu.Battle.Abilities.AuraAbility.SelfOption;
        _removeBuffWhenAbilityDetached: System.Boolean;
        _onlyDetactTargetWhenStarted: System.Boolean;
        _onlyDetectCurrentMapLayer: System.Boolean;
        _effects: System.String[];
        // m_targetMap: System.Collections.Generic.Dictionary<Torappu.ObjectPtr<Torappu.Battle.Entity>,System.Collections.Generic.List<System.UInt32>>;
        // m_targetList: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Entity>>;
        // m_effects: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>>;
        // m_triggerTicker: Torappu.PeriodicTicker;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_cooldown: XLua.DelegateBridge;
        // __Hotfix0_get_category: XLua.DelegateBridge;
        // __Hotfix0_get_selectTargetSource: XLua.DelegateBridge;
        // __Hotfix0_get_alwaysIncludeTarget: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GetPassiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_GetActiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPreDelay: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPostDelay: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_DoAttach: XLua.DelegateBridge;
        // __Hotfix0_DoDetach: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
        // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        // __Hotfix0__ClearBuffs: XLua.DelegateBridge;
        // __Hotfix0__OnMapLayerChanged: XLua.DelegateBridge;
        // __Hotfix0__DealTarget: XLua.DelegateBridge;
        // __Hotfix0__OnUnitBornOrRallyPointReborn: XLua.DelegateBridge;
        // __Hotfix0__OnRallyPointDead: XLua.DelegateBridge;
        // __Hotfix0__ClearEffects: XLua.DelegateBridge;
        // __Hotfix0__UpdateTargetMap: XLua.DelegateBridge;
        // __Hotfix0_VerityTarget: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
      }
      export interface RandomAuraAbility {
        _maxNum: System.Int32;
        // m_affectTargetNum: System.Int32;
        // m_pendingTargets: System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<Torappu.ObjectPtr<Torappu.Battle.Entity>,Torappu.Battle.Abilities.AuraAbility.TargetMeta>>;
        // m_waitForFirstBatch: System.Boolean;
        // m_isDuringFirstBatch: System.Boolean;
        // m_coroutine: Torappu.Battle.CoroutineId;
        // <>f__am$cache0: System.Comparison<System.Collections.Generic.KeyValuePair<Torappu.ObjectPtr<Torappu.Battle.Entity>,Torappu.Battle.Abilities.AuraAbility.TargetMeta>>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnAttached: XLua.DelegateBridge;
        // __Hotfix0_OnDetached: XLua.DelegateBridge;
        // __Hotfix0_DealTargetTouched: XLua.DelegateBridge;
        // __Hotfix0__DealWithPendingTask: XLua.DelegateBridge;
      }
      export interface BlockAffectedPassiveBuffAbility {
        // s_tmpBuffList: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Buff>>;
        _blockAffectedBuffs: Torappu.BuffData[];
        // m_blockBuffMap: Torappu.ListDict<Torappu.ObjectPtr<Torappu.Battle.Entity>,Torappu.ObjectPtr<Torappu.Battle.Buff>[]>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnAttached: XLua.DelegateBridge;
        // __Hotfix0_OnDetached: XLua.DelegateBridge;
        // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        // __Hotfix0__HandleBlockAffectedBuffs: XLua.DelegateBridge;
      }
      export interface GloballUniqueBuffAbility {
        _uniqueBuff: Torappu.BuffData;
        // m_target: Torappu.ObjectPtr<Torappu.Battle.Entity>;
        // m_buff: Torappu.ObjectPtr<Torappu.Battle.Buff>;
        // m_startCheck: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_selectTargetSource: XLua.DelegateBridge;
        // __Hotfix0_get_alwaysIncludeTarget: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GetPassiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_GetActiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        // __Hotfix0_OnSpellStart: XLua.DelegateBridge;
        // __Hotfix0_Reset: XLua.DelegateBridge;
        // __Hotfix0_OnDetached: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0__DoUpdateTarget: XLua.DelegateBridge;
        // __Hotfix0__DoAddBuff: XLua.DelegateBridge;
        // __Hotfix0__DoRemoveBuff: XLua.DelegateBridge;
      }
      export interface PassiveAttachmentAbility {
        _additiveActiveBuffs: Torappu.BuffData[];
        _targetFamilyMask: Torappu.Battle.Ability.FamilyGroupMask;
        _targetValidator: Torappu.Battle.TargetValidator;
        _probKey: System.String;
        // m_attachment: Torappu.Battle.AbilityAttachment;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_isAffecting: XLua.DelegateBridge;
        // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_DoAttach: XLua.DelegateBridge;
        // __Hotfix0_DoDetach: XLua.DelegateBridge;
      }
      export interface PassiveBuffAbility {
        _buffs: Torappu.BuffData[];
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_cooldown: XLua.DelegateBridge;
        // __Hotfix0_get_category: XLua.DelegateBridge;
        // __Hotfix0_get_selectTargetSource: XLua.DelegateBridge;
        // __Hotfix0_get_alwaysIncludeTarget: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GetPassiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_GetActiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPreDelay: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPostDelay: XLua.DelegateBridge;
      }
      export interface PassiveOneOfBuffAbility {
        _selectMethod: Torappu.Battle.Abilities.PassiveOneOfBuffAbility.SelectMethod;
        // m_attachCnt: System.Int32;
        // m_lastCastedBuffKey: System.String;
        // m_buffGroupThisTime: System.Collections.Generic.List<Torappu.BuffData>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_GetPassiveBuffs: XLua.DelegateBridge;
      }
      export interface AdjacentAllyToggleChecker {
        _minManhattan: System.Int32;
        _maxManhattan: System.Int32;
        _checkType: Torappu.Battle.Abilities.AdjacentAllyToggleChecker.CheckType;
      }
      export interface AdjacentTileToggleChecker {
        posList: Torappu.GridPosition[];
        _isLocalPosition: System.Boolean;
        _condition: Torappu.Battle.Abilities.AdjacentTileToggleChecker.TileCondition;
        // m_minCnt: System.Int32;
      }
      export interface AdvancedCompoundToggleChecker {
        _isInitToggled: System.Boolean;
        _disableWhenAttack: System.Boolean;
        _disableWhenBlocked: System.Boolean;
        _disableWhenInAttackState: System.Boolean;
        _disableWhenInCombatState: System.Boolean;
        _disableWhenOutputHeal: System.Boolean;
        _disableWhenAbnormalFlag: Torappu.AbnormalFlag;
        _restoreDelay: System.Single;
        // m_restoreDelay: System.Single;
      }
      export interface BlockedToggleChecker {
        _blockMinCnt: System.Int32;
        _blockMaxCnt: System.Int32;
        _useBlockAsMin: System.Boolean;
        _buffsToBlockee: Torappu.BuffData[];
        // m_blockMaxCnt: System.Int32;
        // m_blockMinCnt: System.Int32;
        // m_blockeeBuffList: Torappu.ListDict<Torappu.ObjectPtr<Torappu.Battle.Entity>,System.UInt32[]>;
        // m_unit: Torappu.Battle.Unit;
      }
      export interface HpRatioToggleChecker {
        _minHpRatio: System.Single;
        _maxHpRatio: System.Single;
        _restoreDelay: System.Single;
        // m_maxHpRatio: System.Single;
        // m_restoreDelay: System.Single;
      }
      export interface MapTagToggleChecker {
        _oneOfTags: System.String[];
      }
      export interface ProfessionCntToggleChecker {
        _professionMask: Torappu.ProfessionCategory;
        _minCount: System.Int32;
        _forceToggleFlag: System.Boolean;
        // m_conditionCount: System.Int32;
      }
      export interface AirSupportReachExitChecker {
        _isInitToggled: System.Boolean;
        _restoreDelay: System.Single;
        _toggleWhenReached: System.Boolean;
        // m_restoreDelay: System.Single;
      }
      export interface ToggleableOnlyOncePassiveBuffAbility {
        // m_isTriggered: System.Boolean;
        // m_isTriggerFinished: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_OnToggleChanged: XLua.DelegateBridge;
      }
      export interface ToggleablePassiveBuffAbility {
        _checker: Torappu.Battle.Abilities.ToggleablePassiveBuffAbility.Checker;
        _unmanagedBuffsWhenToggleOn: Torappu.BuffData[];
        // m_toggled: System.Boolean;
        // m_nextActiveTime: Torappu.FP;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_toggled: XLua.DelegateBridge;
        // __Hotfix0_set_toggled: XLua.DelegateBridge;
        // __Hotfix0_get_checker: XLua.DelegateBridge;
        // __Hotfix0_get_unmanagedBuffsWhenToggleOn: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_DoAttach: XLua.DelegateBridge;
        // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0_AddPassiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_OnAttached: XLua.DelegateBridge;
        // __Hotfix0_OnDetached: XLua.DelegateBridge;
        // __Hotfix0_OnToggleChanged: XLua.DelegateBridge;
        // __Hotfix0__SetToggledInternal: XLua.DelegateBridge;
        // __Hotfix0__UpdateNextActiveTime: XLua.DelegateBridge;
      }
      export interface ToggleablePassiveWrapperAbility {
        _passiveAbilities: Torappu.Battle.Ability[];
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_OnToggleChanged: XLua.DelegateBridge;
      }
      export interface TriggablePassiveAbility {
        // _actions: ActionArray;
        _buffs: Torappu.BuffData[];
        _alwaysIncludeSelf: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_cooldown: XLua.DelegateBridge;
        // __Hotfix0_get_category: XLua.DelegateBridge;
        // __Hotfix0_get_selectTargetSource: XLua.DelegateBridge;
        // __Hotfix0_get_alwaysIncludeTarget: XLua.DelegateBridge;
        // __Hotfix0_GatherActionNodes: XLua.DelegateBridge;
        // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GetPassiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_GetActiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPreDelay: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPostDelay: XLua.DelegateBridge;
        // __Hotfix0_OnTrigger: XLua.DelegateBridge;
      }
      export interface TriggerWhenTakenDamageAbility {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnAttached: XLua.DelegateBridge;
        // __Hotfix0_OnDetached: XLua.DelegateBridge;
        // __Hotfix0__OnTakeDamage: XLua.DelegateBridge;
      }
      export interface BldskTalent_1 {
        _targetOptions: Torappu.Battle.TargetOptions;
        _selfBuff: Torappu.BuffData;
        _randomBuff: Torappu.BuffData;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_DoAttach: XLua.DelegateBridge;
        // __Hotfix0_OnAttached: XLua.DelegateBridge;
        // __Hotfix0_OnDetached: XLua.DelegateBridge;
        // __Hotfix0__OnTrigger: XLua.DelegateBridge;
        // __Hotfix0__OnUnitFinish: XLua.DelegateBridge;
      }
      export interface BrownbTalent_1 {
        _stackBuff: Torappu.BuffData;
        _targetFamilyMask: Torappu.Battle.Ability.FamilyGroupMask;
        _onlyApplyOnFirstSpell: System.Boolean;
        // m_overrideKey: System.String;
        // m_additionalStackCnt: System.Int32;
        // m_lastTarget: Torappu.ObjectPtr<Torappu.Battle.Entity>;
        // m_lastOverrideGroup: Torappu.Battle.Buff.OverrideGroup;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GetPassiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_DoAttach: XLua.DelegateBridge;
        // __Hotfix0_Apply: XLua.DelegateBridge;
        // __Hotfix0_OnAttached: XLua.DelegateBridge;
        // __Hotfix0_OnDetached: XLua.DelegateBridge;
      }
      export interface BslimeTalent_1 {
        _buffs: Torappu.BuffData[];
        // _projectileActions: ActionArray;
        _projectileBuffs: Torappu.BuffData[];
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_cooldown: XLua.DelegateBridge;
        // __Hotfix0_get_category: XLua.DelegateBridge;
        // __Hotfix0_get_selectTargetSource: XLua.DelegateBridge;
        // __Hotfix0_get_alwaysIncludeTarget: XLua.DelegateBridge;
        // __Hotfix0_GatherActionNodes: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GetPassiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_GetActiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPreDelay: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPostDelay: XLua.DelegateBridge;
      }
      export interface BsnakeScreenAttack {
        _projectileKey: System.String;
        _damageType: Torappu.Battle.DamageType;
        _borderToPeel: System.Int32;
        _heightOverHighland: System.Single;
        // m_projectiles: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Projectile>>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_damageType: XLua.DelegateBridge;
        // __Hotfix0_get_extraDamageType: XLua.DelegateBridge;
        // __Hotfix0_get_applyWay: XLua.DelegateBridge;
        // __Hotfix0_DoCastOnTargets: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GatherProjectiles: XLua.DelegateBridge;
        // __Hotfix0_OnAttackTimeChanged: XLua.DelegateBridge;
      }
      export interface BsnakeSummonHint {
        _effectKey: System.String;
        _cancelBuffKey: System.String;
        // m_effectList: System.Collections.Generic.List<Torappu.Battle.Effects.Effect>;
        // m_cursor: System.Int32;
        // m_tilePresetList: System.Collections.Generic.List<System.Collections.Generic.List<Torappu.Battle.Tile>>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_cooldown: XLua.DelegateBridge;
        // __Hotfix0_get_category: XLua.DelegateBridge;
        // __Hotfix0_get_selectTargetSource: XLua.DelegateBridge;
        // __Hotfix0_get_alwaysIncludeTarget: XLua.DelegateBridge;
        // __Hotfix0_GetPassiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_GetActiveBuffs: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPreDelay: XLua.DelegateBridge;
        // __Hotfix0_OnWaitForPostDelay: XLua.DelegateBridge;
        // __Hotfix0__InitTilePresetList: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_DoDetach: XLua.DelegateBridge;
        // __Hotfix0__RemoveEffects: XLua.DelegateBridge;
        // __Hotfix0_CastToTarget: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      }
      export interface CammouTrait {
        _initAtkScale: System.Single;
        _deltaAtkScale: System.Single;
        _maxAtkScale: System.Single;
        _maxStack: System.Int32;
        // m_curAtkScale: System.Single;
        // m_initAtkScale: System.Single;
        // m_deltaAtkScale: System.Single;
        // m_maxAtkScale: System.Single;
        // m_maxStack: System.Single;
        // m_curStack: System.Int32;
        // m_lastTarget: Torappu.ObjectPtr<Torappu.Battle.Entity>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_SetFunnelAtkScale: XLua.DelegateBridge;
        // __Hotfix0_Reset: XLua.DelegateBridge;
      }
      export interface NightmSkill_1 {
        _primaryOptions: Torappu.Battle.Abilities.NightmSkill_1.ProjectileOptions;
        _secondaryOptions: Torappu.Battle.Abilities.NightmSkill_1.ProjectileOptions;
        _secondarySelector: Torappu.Battle.TargetSelector;
        // m_secondaryActions: System.Collections.Generic.List<Torappu.Battle.Action.ActionNode>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_applyWay: XLua.DelegateBridge;
        // __Hotfix0_get_damageType: XLua.DelegateBridge;
        // __Hotfix0_get_extraDamageType: XLua.DelegateBridge;
        // __Hotfix0_GetEventActions: XLua.DelegateBridge;
        // __Hotfix0_GetProjectileActions: XLua.DelegateBridge;
        // __Hotfix0_DoSetData: XLua.DelegateBridge;
        // __Hotfix0_Reset: XLua.DelegateBridge;
        // __Hotfix0_OnCastOnTarget: XLua.DelegateBridge;
        // __Hotfix0__OnHitPrimaryTarget: XLua.DelegateBridge;
      }
      export interface ActionToOwner {
        _runActionOnEvent: Torappu.Battle.AbilityStandard.Event;
        // _actions: ActionArray;
        _onlyRunOnce: System.Boolean;
        // m_run: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0_GatherActionNodes: XLua.DelegateBridge;
        // __Hotfix0__RunActions: XLua.DelegateBridge;
      }
      export interface ExtraActions {
        // _actions: ActionArray;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnCastOnTarget: XLua.DelegateBridge;
        // __Hotfix0_GatherActionNodes: XLua.DelegateBridge;
      }
      export interface NoPreOneshotAnimation {
        _animWithPre: System.String;
        _animNoPre: System.String;
        _endAnim: System.String;
        _maxAnimScale: System.Single;
        // m_anim: System.String;
        // m_coroutine: Torappu.Battle.CoroutineId;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastFinish: XLua.DelegateBridge;
        // __Hotfix0_UpdatePlaybackSpeed: XLua.DelegateBridge;
        // __Hotfix0_DoPlayAnimation: XLua.DelegateBridge;
        // __Hotfix0__ClearCoroutine: XLua.DelegateBridge;
      }
      export interface ThreePartChannelingAnimation {
        MAX_CHANNELING_TIME: System.Single;
        _default: Torappu.Battle.Abilities.ThreePartChannelingAnimation.AnimationBundle;
        _overrideDownAnimation: System.Boolean;
        _down: Torappu.Battle.Abilities.ThreePartChannelingAnimation.AnimationBundle;
        _faceToFront: System.Boolean;
        _faceToDefault: System.Boolean;
        _waitForAttachFinishEvent: System.Boolean;
        _earlyFinishEndIdleAnimation: System.Boolean;
        _fireAttackFinishEvent: System.Boolean;
        _delayToFireAttackSkillEvent: System.Boolean;
        _delaySecond: System.Single;
        _fireAnimEndEvent: System.Boolean;
        _onlyPlayBeginAnimWhenFirstAttack: System.Boolean;
        _delayToAnimateEndAnimation: System.Boolean;
        _delayToAnimateEndAnimationTime: System.Single;
        // m_beginAndEndAnimScale: System.Single;
        // m_loopTime: System.Single;
        // m_earlyFinishLoopTime: Torappu.FP;
        // m_hasBeginAnim: System.Boolean;
        // m_hasEndAnim: System.Boolean;
        // m_receivedAttackFinishEvent: System.Boolean;
        // m_coroutine: Torappu.Battle.CoroutineId;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_waitForAttackFinishEvent: XLua.DelegateBridge;
        // __Hotfix0_get_fireAttackFinishEvent: XLua.DelegateBridge;
        // __Hotfix0_get_delayToFireAttackSkillEvent: XLua.DelegateBridge;
        // __Hotfix0_get_delayToAnimateEndAnimation: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0__OnStunned: XLua.DelegateBridge;
        // __Hotfix0__OnFrozen: XLua.DelegateBridge;
        // __Hotfix0_OnCastFinish: XLua.DelegateBridge;
        // __Hotfix0_UpdatePlaybackSpeed: XLua.DelegateBridge;
        // __Hotfix0_DoPlayAnimation: XLua.DelegateBridge;
        // __Hotfix0__GetAnimBundle: XLua.DelegateBridge;
        // __Hotfix0__OnReceiveAttackFinishEvent: XLua.DelegateBridge;
        // __Hotfix0__ClearCoroutine: XLua.DelegateBridge;
      }
      export interface ThreePartOneshotAnimation {
        _beginAnim: System.String;
        _oneshotAnim: System.String;
        _endAnim: System.String;
        _overrideDownAnimation: System.Boolean;
        _down: Torappu.Battle.Abilities.ThreePartOneshotAnimation.AnimationBundle;
        _faceToTarget: System.Boolean;
        _minAnimScale: System.Single;
        _maxAnimScale: System.Single;
        _onlyPlayBeginAnimWhenFirstAttack: System.Boolean;
        // m_animSpeed: System.Single;
        // m_hasBeginAnim: System.Boolean;
        // m_hasEndAnim: System.Boolean;
        // m_coroutine: Torappu.Battle.CoroutineId;
        // m_default: Torappu.Battle.Abilities.ThreePartOneshotAnimation.AnimationBundle;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastFinish: XLua.DelegateBridge;
        // __Hotfix0_UpdatePlaybackSpeed: XLua.DelegateBridge;
        // __Hotfix0_DoPlayAnimation: XLua.DelegateBridge;
        // __Hotfix0_InitAnimation: XLua.DelegateBridge;
        // __Hotfix0__GetAnimBundle: XLua.DelegateBridge;
        // __Hotfix0__CheckDownAttack: XLua.DelegateBridge;
        // __Hotfix0__ClearCoroutine: XLua.DelegateBridge;
      }
      export interface GlazeTalentAbilityTrigger {
        _buff: Torappu.BuffData;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Preprocess: XLua.DelegateBridge;
        // __Hotfix0_ApplyAttackAction: XLua.DelegateBridge;
      }
      export interface SelfAbilityTrigger {
        _timing: Torappu.Battle.Abilities.SelfAbilityTrigger.TriggerTiming;
        _mask: Torappu.Battle.Ability.FamilyGroupMask;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_mask: XLua.DelegateBridge;
        // __Hotfix0_Preprocess: XLua.DelegateBridge;
        // __Hotfix0_ApplyAttackAction: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0_Apply: XLua.DelegateBridge;
      }
      export interface DuplicateBlackboardVar {
        _sourceVar: System.String;
        _targetVar: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
      }
      export interface SetAttributeAsDynamicVar {
        _attributeType: Torappu.AttributeType;
        _scaleVar: System.String;
        // m_nextEscapeTime: System.Single;
        // m_effectHolder: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0__UpdateDynamicVar: XLua.DelegateBridge;
      }
      export interface BuffAfterAffecting {
        _buffs: Torappu.BuffData[];
        // m_waitForAffectingEnd: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_SetData: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
      }
      export interface BuffDuringCasting {
        _buffs: Torappu.BuffData[];
        // m_buffUid: System.Collections.Generic.List<System.UInt32>;
      }
      export interface BuffDuringCastingFixed {
        _buffs: Torappu.BuffData[];
        // m_buffUid: System.Collections.Generic.List<System.UInt32>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastFinish: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
        // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        // __Hotfix0__ClearBuffs: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
      }
      export interface BuffToOwner {
        _runActionOnEvent: Torappu.Battle.AbilityStandard.Event;
        _buffs: Torappu.BuffData[];
        _onlyRunOnce: System.Boolean;
        // m_run: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0__AddBuffs: XLua.DelegateBridge;
      }
      export interface ExtraPassiveBuff {
        _passiveBuffs: Torappu.BuffData[];
        // m_buffUids: System.Collections.Generic.List<System.UInt32>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
      }
      export interface AbilityEventCounter {
        _countEvent: Torappu.Battle.AbilityStandard.Event;
        _triggerTimeCount: System.Int32;
        _resetAfterEnd: System.Boolean;
        // m_eventCount: System.Int32;
        // m_maxCount: System.Int32;
        // m_readyToReset: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_countEvent: XLua.DelegateBridge;
        // __Hotfix0_get_reachEnd: XLua.DelegateBridge;
        // __Hotfix0_SetData: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0_OnCountEvent: XLua.DelegateBridge;
        // __Hotfix0_ResetCount: XLua.DelegateBridge;
        // __Hotfix0_DoResetCount: XLua.DelegateBridge;
        // __Hotfix0_OnCountReset: XLua.DelegateBridge;
        // __Hotfix0_GetProgress: XLua.DelegateBridge;
        // __Hotfix0_DiscardRemainingCount: XLua.DelegateBridge;
      }
      export interface BuffTriggerEventCounter {
        _buffs: System.Collections.Generic.List<Torappu.BuffData>;
        // m_buffUid: System.Collections.Generic.List<System.UInt32>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__ClearBuffs: XLua.DelegateBridge;
        // __Hotfix0_OnCountEvent: XLua.DelegateBridge;
        // __Hotfix0_OnCountReset: XLua.DelegateBridge;
        // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
      }
      export interface AbstractEffectEmitter {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface ChannelingEffectEmitter {
        _playOnEvent: Torappu.Battle.AbilityStandard.Event;
        _effect: System.String;
        _stopOnEvent: Torappu.Battle.AbilityStandard.Event;
        _stopOnAttackFinished: System.Boolean;
        _hitEffect: System.String;
        // m_casted: System.Boolean;
        // m_stopped: System.Boolean;
        // m_nextEscapeTime: Torappu.FP;
        // m_effectHolder: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_nextEscapeTime: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0_OnCastOnTarget: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastFinish: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
        // __Hotfix0_OnAttackFinished: XLua.DelegateBridge;
        // __Hotfix0__StopEffectIfNot: XLua.DelegateBridge;
        // __Hotfix0__ClearEffectIfNot: XLua.DelegateBridge;
      }
      export interface ChannelingEffectGroupEmitter {
        _extraEventGroup: System.Collections.Generic.List<Torappu.Battle.Abilities.ChannelingEffectGroupEmitter.EventGroup>;
        // m_effectHolderDict: System.Collections.Generic.Dictionary<System.String,Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastFinish: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
        // __Hotfix0_OnAttackFinished: XLua.DelegateBridge;
        // __Hotfix0__OnExtraAttackFired: XLua.DelegateBridge;
        // __Hotfix0__StopEffectGroupIfNot: XLua.DelegateBridge;
        // __Hotfix0__ClearEffectGroupIfNot: XLua.DelegateBridge;
        // __Hotfix0__ClearAllEffectGroupIfNot: XLua.DelegateBridge;
      }
      export interface FunnelEffectEmitter {
        _idleEffect: System.String[];
        _disappearEffect: System.String[];
        _appearEffect: System.String[];
        // m_idleEffect: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0__PlayEffect: XLua.DelegateBridge;
      }
      export interface MultiChargeUberEffectEmitter {
        _chargeEffectGroups: Torappu.Battle.Abilities.MultiChargeUberEffectEmitter.ChargeEffectGroup[];
        _chargeCastGroups: Torappu.Battle.Abilities.MultiChargeUberEffectEmitter.ChargeCastGroup[];
        // m_chargeAbility: Torappu.Battle.IChargeAttack;
        // m_chargeIndex: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastFinish: XLua.DelegateBridge;
        // __Hotfix0_OnCastOnTarget: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
        // __Hotfix0__IsInChargeAttack: XLua.DelegateBridge;
        // __Hotfix0__CheckChargeIndexValid: XLua.DelegateBridge;
      }
      export interface MultiHitUberEffectEmitter {
        _hitGroups: Torappu.Battle.Abilities.MultiHitUberEffectEmitter.HitEffectGroup[];
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastFinish: XLua.DelegateBridge;
        // __Hotfix0_OnCastOnTarget: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      }
      export interface RangeEffectEmitter {
        _playCastEffectOnEvent: Torappu.Battle.AbilityStandard.Event;
        _castEffects: System.String[];
        _stopCastEffectOnEvent: Torappu.Battle.AbilityStandard.Event;
        _onlyCastOnce: System.Boolean;
        // m_casted: System.Boolean;
        // m_effects: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastFinish: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
        // __Hotfix0__ClearEffects: XLua.DelegateBridge;
      }
      export interface ScreenEffectEmitter {
        _effect: System.String;
        _startEv: Torappu.Battle.AbilityStandard.Event;
        _endEv: Torappu.Battle.AbilityStandard.Event;
        // m_effect: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0__ClearEffect: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      }
      export interface AirSupportLockEffectBehaviour {
        _tileEffect: System.String;
        // m_effectCreated: System.Boolean;
        // m_tileEffect: Torappu.Battle.Effects.Effect;
        // m_ownerEnemy: Torappu.ObjectPtr<Torappu.Battle.Enemy>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_SetData: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
        // __Hotfix0__FinishEffect: XLua.DelegateBridge;
      }
      export interface UberEffectEmitter {
        _hitEffects: Torappu.Battle.Abilities.UberEffectEmitter.HitEffectOptions[];
        _castEffects: Torappu.Battle.Abilities.UberEffectEmitter.CastEffectOptions[];
        _attachEffects: Torappu.Battle.Abilities.UberEffectEmitter.AttachEffectOptions[];
        _inputTargetEffects: Torappu.Battle.Abilities.UberEffectEmitter.InputTargetEffectOptions[];
        _castTargetEffects: Torappu.Battle.Abilities.UberEffectEmitter.CastTargetEffectOptions[];
        _convertCastEndToAttachFinish: System.Boolean;
        // m_allEffects: System.Collections.Generic.List<Torappu.Battle.Abilities.UberEffectEmitter.EffectOptions>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastFinish: XLua.DelegateBridge;
        // __Hotfix0_OnCastOnTarget: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
        // __Hotfix0__GatherEffects: XLua.DelegateBridge;
      }
      export interface ExtraAbilities {
        _abilities: Torappu.Battle.Ability[];
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_SetData: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
      }
      export interface LuaAbilityBehaviourStub {
        _luaBehaviourName: System.String;
        // m_luaBinding: Torappu.Battle.Abilities.LuaAbilityBehaviourStub.LuaBinding;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_luaBehaviourName: XLua.DelegateBridge;
        // __Hotfix0_get_isLuaReady: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_SetData: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastFinish: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0_OnCastOnTarget: XLua.DelegateBridge;
        // __Hotfix0_OnStopAffect: XLua.DelegateBridge;
        // __Hotfix0_UpdatePlaybackSpeed: XLua.DelegateBridge;
        // __Hotfix0_OnDestroy: XLua.DelegateBridge;
      }
      export interface PauseEffectDuringCasting {
        _effect: System.String;
        _startEv: Torappu.Battle.AbilityStandard.Event;
        _endEv: Torappu.Battle.AbilityStandard.Event;
        // m_effectHolder: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0_OnCastFinish: XLua.DelegateBridge;
        // __Hotfix0__OnPause: XLua.DelegateBridge;
        // __Hotfix0__OnUnpause: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      }
      export interface SetAtkScaleAsHostBased {
        // m_atkScale: System.Single;
      }
      export interface SetAtkScaleAsHostBasedFixed {
        // m_atkScale: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_SetData: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
      }
      export interface UpdateAtkScaleByLastCastTime {
        _createNewNodeEachTime: System.Boolean;
        // m_minDeltaTime: Torappu.FP;
        // m_maxDeltaTime: Torappu.FP;
        // m_minAtkScale: Torappu.FP;
        // m_maxAtkScale: Torappu.FP;
        // m_accumCastTime: Torappu.FP;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_SetData: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0__GetAtkScale: XLua.DelegateBridge;
      }
      export interface UpdateAtkScaleByTraitData {
        _defaultValue: System.Single;
        _overwrite: System.Boolean;
        // m_atkScale: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_SetData: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
      }
      export namespace ChannelingMeleeAttack {
      }
      export namespace MeleeAttackByDistance {
        export interface AtkScaleByDistConfig {
          atkScale: System.Single;
          applyExternalAtkScale: System.Boolean;
        }
      }
      export namespace MultiMeleeAttack {
      }
      export namespace ChargeRangedAttack {
      }
      export namespace MultiRangedAttack {
      }
      export namespace RangedAttack {
        export enum ProjectileDestinationType {
          TARGET = "TARGET",
          INPUT_POINT = "INPUT_POINT",
          INPUT_VECTOR3 = "INPUT_VECTOR3",
          TARGET_ROOT_TILE = "TARGET_ROOT_TILE",
        }
      }
      export namespace ActiveBuffAbility {
      }
      export namespace ActiveOneOfBuffAbility {
        export interface BuffDataList {
          buffDatas: Torappu.BuffData[];
        }
      }
      export namespace ProjectileToTileAbility {
      }
      export namespace AbilityFirstSucceedGroup {
      }
      export namespace AbilityParallelGroup {
      }
      export namespace AbilityRandomGroup {
        export enum SelectMethod {
          Random = "Random",
          Loop = "Loop",
        }
      }
      export namespace AbilitySequenceGroup {
      }
      export namespace AbstractAnimatedAbility {
        export enum TimeMode {
          FROM_ATTACK_SPEED = "FROM_ATTACK_SPEED",
          FROM_ANIMATION = "FROM_ANIMATION",
          SPECIFIED = "SPECIFIED",
          LOAD_FROM_BLACKBOARD = "LOAD_FROM_BLACKBOARD",
        }
      }
      export namespace EasyToStartAbility {
        export enum ResetCooldownStrategy {
          NONE = "NONE",
          HALF_FRAME = "HALF_FRAME",
          ONE_FRAME = "ONE_FRAME",
          EPSILON = "EPSILON",
        }
      }
      export namespace AuraAbility {
        export enum SelfOption {
          DEFAULT = "DEFAULT",
          INCLUDE = "INCLUDE",
          EXCLUDE = "EXCLUDE",
        }
        export interface TargetMeta {
          buffIds: System.Collections.Generic.List<System.UInt32>;
        }
        export interface TargetEnterExitHandler {
          // m_options: Torappu.Battle.Abilities.AuraAbility.TargetEnterExitHandler.Options;
          // m_invalidTarget: Torappu.ListSet<Torappu.ObjectPtr<Torappu.Battle.Entity>>;
          // m_triggerTicker: Torappu.PeriodicTicker;
        }
        export namespace TargetEnterExitHandler {
          export interface Options {
            periodTick: System.Int32;
            // checkAndEnterFunc: System.Func<Torappu.Battle.Entity,System.Boolean>;
            // exitFunc: System.Action<Torappu.Battle.Entity>;
          }
        }
      }
      export namespace GlobalAuraAbility {
      }
      export namespace PassiveBuffAbility {
      }
      export namespace PassiveOneOfBuffAbility {
        export enum SelectMethod {
          RANDOM = "RANDOM",
          INDEX_BY_SKILL_INDEX = "INDEX_BY_SKILL_INDEX",
          SEQUENTIAL = "SEQUENTIAL",
          RANDOM_BUT_NOT_LAST = "RANDOM_BUT_NOT_LAST",
        }
      }
      export namespace AdjacentAllyToggleChecker {
        export enum CheckType {
          AT_LEAST_ONE = "AT_LEAST_ONE",
          ALL = "ALL",
        }
      }
      export namespace AdjacentTileToggleChecker {
        export interface TileCondition {
          heightType: Torappu.TileData.HeightType;
          _buildableType: Torappu.BuildableType;
        }
      }
      export namespace ToggleablePassiveBuffAbility {
        export interface Checker {
          // <ability>k__BackingField: Torappu.Battle.Abilities.ToggleablePassiveBuffAbility;
        }
      }
      export namespace TriggablePassiveAbility {
      }
      export namespace BslimeTalent_1 {
      }
      export namespace BsnakeSummonHint {
      }
      export namespace NightmSkill_1 {
        export interface ProjectileOptions {
          projectileKey: System.String;
          mountPointType: Torappu.Battle.Entity.MountPointType;
          damageType: Torappu.Battle.DamageType;
        }
      }
      export namespace NoPreOneshotAnimation {
      }
      export namespace ThreePartChannelingAnimation {
        export interface AnimationBundle {
          beginAnim: System.String;
          loopAnim: System.String;
          endAnim: System.String;
        }
      }
      export namespace ThreePartOneshotAnimation {
        export interface AnimationBundle {
          beginAnim: System.String;
          oneshotAnim: System.String;
          endAnim: System.String;
        }
      }
      export namespace SelfAbilityTrigger {
        export enum TriggerTiming {
          NONE = "NONE",
          ATTACK = "ATTACK",
        }
      }
      export namespace ChannelingEffectGroupEmitter {
        export interface EventGroup {
          playOnEvent: Torappu.Battle.AbilityStandard.Event;
          effect: System.String;
          stopOnEvent: Torappu.Battle.AbilityStandard.Event;
          stopOnAttackFinished: System.Boolean;
          isCasted: System.Boolean;
          isStopped: System.Boolean;
        }
      }
      export namespace MultiChargeUberEffectEmitter {
        export interface ChargeEffectOptions {
          // m_chargeEffects: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>>;
        }
        export interface ChargeEffectGroup {
          effects: Torappu.Battle.Abilities.MultiChargeUberEffectEmitter.ChargeEffectOptions[];
        }
        export interface ChargeCastGroup {
          effects: Torappu.Battle.Abilities.UberEffectEmitter.CastEffectOptions[];
        }
      }
      export namespace MultiHitUberEffectEmitter {
        export interface HitEffectGroup {
          effects: Torappu.Battle.Abilities.UberEffectEmitter.HitEffectOptions[];
        }
      }
      export namespace UberEffectEmitter {
        export interface EffectOptions {
          _directionType: Torappu.Battle.Abilities.UberEffectEmitter.EffectOptions.DirectionType;
          _effects: System.String[];
          // m_holder: Torappu.Battle.Abilities.UberEffectEmitter;
        }
        export interface HitEffectOptions {
          _oneshot: System.Boolean;
          _endEvent: Torappu.Battle.AbilityStandard.Event;
          _onlyOnce: System.Boolean;
          _useFourDirectionalFace: System.Boolean;
          _useOwnerToTargetDirection: System.Boolean;
          // m_casted: System.Boolean;
          // m_effects: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>>;
        }
        export interface CastEffectOptions {
          _oneshot: System.Boolean;
          _startEvent: Torappu.Battle.AbilityStandard.Event;
          _endEvent: Torappu.Battle.AbilityStandard.Event;
          _onlyOnce: System.Boolean;
          _useFourDirectionalFace: System.Boolean;
          _delayIfFirstAttack: System.Single;
          // m_casted: System.Boolean;
          // m_effects: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>>;
        }
        export interface AttachEffectOptions {
          // m_effect: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
        }
        export interface InputTargetEffectOptions {
          _useInputPos: System.Boolean;
        }
        export interface CastTargetEffectOptions {
        }
        export namespace EffectOptions {
          export enum DirectionType {
            NONE = "NONE",
            L_OR_R = "L_OR_R",
            U_OR_D = "U_OR_D",
            FOUR_DIR = "FOUR_DIR",
            UD_OR_LR = "UD_OR_LR",
          }
        }
      }
      export namespace LuaAbilityBehaviourStub {
        export interface LuaBinding {
        }
      }
    }
    export namespace EmptyAbility {
    }
    export namespace Ability {
      export interface FinishCallbackDelegate {
      }
      export interface Options {
        blackboard: Torappu.Blackboard;
        signalId: System.String;
        rangeId: System.String;
        rangeRadius: System.Single;
        familyGroup: Torappu.Battle.Ability.FamilyGroup;
      }
      export interface Metadata {
        namedAsAlias: System.String;
        blackboardPrefix: System.String;
      }
      export enum FamilyGroup {
        ATTACK = "ATTACK",
        COMBAT = "COMBAT",
        SKILL = "SKILL",
        TALENT = "TALENT",
        GENERAL = "GENERAL",
        E_NUM = "E_NUM",
      }
      export enum FamilyGroupMask {
        NONE = "NONE",
        ATTACK = "ATTACK",
        COMBAT = "COMBAT",
        SKILL = "SKILL",
        TALENT = "TALENT",
        GENERAL = "GENERAL",
        ATTACK_OR_COMBAT = "ATTACK_OR_COMBAT",
        ALL = "ALL",
      }
      export enum Category {
        NONE = "NONE",
        PASSIVE = "PASSIVE",
        ACTIVE = "ACTIVE",
      }
      export enum FinishReason {
        NORMAL_EXIT = "NORMAL_EXIT",
        INTERRUPTED = "INTERRUPTED",
        OWNER_DEAD = "OWNER_DEAD",
        TARGET_DEAD = "TARGET_DEAD",
      }
    }
    export namespace AbilityStandard {
      export enum Event {
        ON_ATTACHED = "ON_ATTACHED",
        ON_DETACHED = "ON_DETACHED",
        ON_CAST_START = "ON_CAST_START",
        ON_CAST_END = "ON_CAST_END",
        ON_SPELL_ON = "ON_SPELL_ON",
        ON_SPELL_END = "ON_SPELL_END",
        ON_ATTACK_FINISH = "ON_ATTACK_FINISH",
        ON_ATTACK_CHECK_POINT = "ON_ATTACK_CHECK_POINT",
      }
      export enum SelectTargetSource {
        NONE = "NONE",
        FROM_OWNER = "FROM_OWNER",
        INPUT_TARGET = "INPUT_TARGET",
        INPUT_POINT = "INPUT_POINT",
      }
      export enum SelectTargetTiming {
        AT_BEGINING = "AT_BEGINING",
        BEFORE_SPELL_START = "BEFORE_SPELL_START",
        RESELECT_IF_TARGET_DEAD = "RESELECT_IF_TARGET_DEAD",
        BEFORE_FIRST_SPELL_START = "BEFORE_FIRST_SPELL_START",
      }
      export enum UpdatePlaybackSpeedTiming {
        FORCE_UPDATE = "FORCE_UPDATE",
        ON_CAST_START = "ON_CAST_START",
        RECOVER_FROM_STUNNED = "RECOVER_FROM_STUNNED",
      }
      export interface Behaviour {
        // <ability>k__BackingField: Torappu.Battle.AbilityStandard;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_ability: XLua.DelegateBridge;
        // __Hotfix0_set_ability: XLua.DelegateBridge;
        // __Hotfix0_get_owner: XLua.DelegateBridge;
        // __Hotfix0_get_firstAttack: XLua.DelegateBridge;
        // __Hotfix0_get_inputTarget: XLua.DelegateBridge;
        // __Hotfix0_get_playbackSpeed: XLua.DelegateBridge;
        // __Hotfix0_get_castTargets: XLua.DelegateBridge;
        // __Hotfix0_get_options: XLua.DelegateBridge;
        // __Hotfix0_get_spellCnt: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_SetData: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastFinish: XLua.DelegateBridge;
        // __Hotfix0_OnEvent: XLua.DelegateBridge;
        // __Hotfix0_OnCastOnTarget: XLua.DelegateBridge;
        // __Hotfix0_OnStopAffect: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0_UpdatePlaybackSpeed: XLua.DelegateBridge;
      }
    }
    export namespace CharacterAnimator {
      export interface FaceConfiguration {
        // skeleton: Spine.Unity.SkeletonAnimation;
        // muzzlaTransform: UnityEngine.Transform;
        // hitTransform: UnityEngine.Transform;
        // headTransform: UnityEngine.Transform;
        // specialPoint0: UnityEngine.Transform;
        // specialPoint1: UnityEngine.Transform;
        // specialPoint2: UnityEngine.Transform;
        // specialPoint3: UnityEngine.Transform;
        // m_renderer: UnityEngine.Renderer;
      }
    }
    export namespace FaceSwitcher {
      export interface HardCoded_InternalSwitchAnimation_BattleTweenVersion {
        // m_state: Torappu.Battle.FaceSwitcher.HardCoded_InternalSwitchAnimation_BattleTweenVersion.State;
        // m_transform: UnityEngine.Transform;
        // m_switchTime: Torappu.FP;
        // m_startQuaternion: UnityEngine.Quaternion;
        // m_phase0Quaternion: UnityEngine.Quaternion;
        // m_phase1Quaternion: UnityEngine.Quaternion;
        // m_endQuaternion: UnityEngine.Quaternion;
        // m_onPhaseSwitch: System.Action;
        // m_onComplete: System.Action;
        // m_curTween: Torappu.BattleTweenMgr.Tween;
      }
      export namespace HardCoded_InternalSwitchAnimation_BattleTweenVersion {
        export enum State {
          INITED = "INITED",
          PLAYING = "PLAYING",
          STOPPED = "STOPPED",
        }
      }
    }
    export namespace MeshAnimator {
      export interface AnimationData {
        animKey: System.String;
        animName: System.String;
        speed: System.Single;
        time: System.Single;
        valid: System.Boolean;
        // clip: UnityEngine.AnimationClip;
      }
    }
    export namespace SimpleUnitAnimatorHooker {
      export interface ReplacePair {
        fromAnimKey: System.String;
        toAnimKey: System.String;
      }
    }
    export namespace SpineAnimator {
      export interface AnimationData {
        animKey: System.String;
        animName: System.String;
        loop: System.Boolean;
        speed: System.Single;
        ignoreMissing: System.Boolean;
        time: System.Single;
        valid: System.Boolean;
      }
      export interface CustomMixAnimSetting {
        sourceAnimName: System.String;
        targetAnimName: System.String;
        mixAnimName: System.String;
      }
    }
    export namespace UnitAnimator {
      export interface CurrentAniState {
        animKey: System.String;
        playSpeed: System.Single;
      }
    }
    export namespace ClientAntiCheatChecker {
      export enum AntiCheatType {
        ENEMY_MOVE_SPEED = "ENEMY_MOVE_SPEED",
        LEVEL_OPTIONS_COST_INCREASE = "LEVEL_OPTIONS_COST_INCREASE",
        CHARACTER_ATTACK_TIME = "CHARACTER_ATTACK_TIME",
      }
    }
    export namespace AntiCheat {
      export interface BlackboardSnapshot {
        // values: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat[];
      }
      export interface CharacterSnapshot {
        ts: System.Int64;
        attributes: Torappu.Battle.AntiCheat.CharacterSnapshot.AttributesSnapshot;
        talents: Torappu.Battle.AntiCheat.BlackboardSnapshot[];
        skill: Torappu.Battle.AntiCheat.BlackboardSnapshot;
        trait: Torappu.Battle.AntiCheat.BlackboardSnapshot;
      }
      export interface EnemySnapshot {
        ts: System.Int64;
        attributes: Torappu.Battle.AntiCheat.EnemySnapshot.AttributesSnapshot;
      }
      export interface RuneSnapShot {
        ts: System.Int64;
        key: System.String;
        // professionMask: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
        // buildableMask: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
        blackboard: System.Collections.Generic.List<Torappu.Blackboard.DataPair>;
      }
      export interface RelicSnapshot {
        key: System.String;
        blackboard: Torappu.Battle.AntiCheat.BlackboardSnapshot;
      }
      export namespace CharacterSnapshot {
        export interface AttributesSnapshot {
          // maxHp: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
          // atk: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
          // def: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
          // magicResistance: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
          // cost: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
          // blockCnt: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
          // attackSpeed: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
          // baseAttackTime: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
          // respawnTime: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
        }
      }
      export namespace EnemySnapshot {
        export interface AttributesSnapshot {
          // maxHp: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
          // atk: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
          // def: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
          // magicResistance: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
          // attackSpeed: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
          // baseAttackTime: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
          // moveSpeed: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
        }
      }
    }
    export namespace AsyncUtil {
    }
    export namespace CoroutineSimulator {
      export interface InternalId {
        INVALID: Torappu.Battle.CoroutineSimulator.InternalId;
        uid: System.UInt64;
      }
      export interface RuntimeHandler {
        // m_id: Torappu.Battle.CoroutineSimulator.InternalId;
        // m_fakeHost: UnityEngine.MonoBehaviour;
        // m_routines: System.Collections.Generic.Stack<Torappu.Battle.CoroutineSimulator.RuntimeHandler.Routine>;
      }
      export namespace RuntimeHandler {
        export interface Routine {
          firstTouch: System.Boolean;
          // enumerator: System.Collections.IEnumerator;
        }
      }
    }
    export namespace PoolManagerExtensions {
    }
    export namespace Attributes {
      export interface IAttributesModifier {
      }
      export interface AbnormalComboManager {
        ABNORMAL_COMBO_TO_FLAG_MASK: System.Int64[];
        // m_abnormalComboCounter: System.Int16[];
        // m_abnormalComboImmuneCounter: System.Int16[];
        // m_abnormalComboMask: System.Int64;
        // m_abnormalFlagMask: System.Int64;
      }
    }
    export namespace BattleController {
      export enum State {
        NONE = "NONE",
        INITED_BUT_NOT_START = "INITED_BUT_NOT_START",
        PLAYING = "PLAYING",
        FINISHED = "FINISHED",
      }
      export enum GameResult {
        NOT_YET = "NOT_YET",
        WIN = "WIN",
        LOSE = "LOSE",
      }
      export interface ReplayController {
        // m_isEarlyFinished: System.Boolean;
        // m_options: Torappu.Battle.BattleController.ReplayController.Options;
        // m_journal: Torappu.Battle.BattleLogger.Journal;
        // m_pendingLogs: System.Collections.Generic.Queue<Torappu.Battle.BattleLogger.LogItem>;
        // m_readyLogs: System.Collections.Generic.List<Torappu.Battle.BattleLogger.LogItem>;
        // m_playTimeCheckCorrection: Torappu.FP;
        // <isEnabled>k__BackingField: System.Boolean;
      }
      export interface PlayerOperationQueue {
        // m_shouldQueueOps: System.Boolean;
        // m_controller: Torappu.Battle.BattleController;
        // m_queue: System.Collections.Generic.Queue<Torappu.Battle.BattleController.PlayerOperationQueue.OperationEntry>;
      }
      export interface FrameData {
        opQueue: System.Collections.Generic.Queue<Torappu.Battle.BattleController.FrameData.Operation>;
      }
      export namespace ReplayController {
        export interface Options {
          DEFAULT: Torappu.Battle.BattleController.ReplayController.Options;
          retryFailedLogs: System.Boolean;
          manualTrigSkill: System.Boolean;
        }
      }
      export namespace PlayerOperationQueue {
        export interface TargetUnion {
          target: Torappu.ObjectPtr<Torappu.Battle.Character>;
          uniqueId: System.UInt32;
        }
        export interface OperationEntry {
          opType: Torappu.Battle.PlayerOperationType;
          target: Torappu.Battle.BattleController.PlayerOperationQueue.TargetUnion;
          direction: Torappu.SharedConsts.Direction;
          tile: Torappu.Battle.Tile;
          side: Torappu.PlayerSide;
        }
      }
      export namespace FrameData {
        export interface Operation {
          op: Torappu.Battle.PlayerOperationType;
          signiture: Torappu.Battle.BattleCharacterData.Signiture;
          direction: Torappu.SharedConsts.Direction;
          pos: Torappu.GridPosition;
          side: Torappu.PlayerSide;
        }
      }
    }
    export namespace BattleLoader {
    }
    export namespace Buff {
      export interface DoubleBufferedBuffList {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_ClearInvalidElementsIfNotLoop: XLua.DelegateBridge;
        // __Hotfix0_ClearWithWhiteList: XLua.DelegateBridge;
      }
      export interface SortedDoubleBufferedBuffList {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Add: XLua.DelegateBridge;
      }
      export interface OverrideGroup {
        // m_queue: Torappu.PriorityQueue<Torappu.Battle.Buff>;
        // m_type: Torappu.BuffData.OverrideType;
        // m_maxStackCnt: System.Int32;
        // m_maxValidStackCnt: System.Int32;
      }
      export interface BuffContainer {
        // <owner>k__BackingField: Torappu.Battle.Entity;
        // m_buffs: Torappu.Battle.Buff.SortedDoubleBufferedBuffList;
        // m_buffOverrideMap: System.Collections.Generic.Dictionary<System.String,Torappu.Battle.Buff.OverrideGroup>;
        // m_buffUidMap: System.Collections.Generic.Dictionary<System.UInt32,Torappu.Battle.Buff>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_owner: XLua.DelegateBridge;
        // __Hotfix0_set_owner: XLua.DelegateBridge;
        // __Hotfix0_get_attributes: XLua.DelegateBridge;
        // __Hotfix0_get_context: XLua.DelegateBridge;
        // __Hotfix0_get_buffCnt: XLua.DelegateBridge;
        // __Hotfix0_get_pool: XLua.DelegateBridge;
        // __Hotfix0_CreateBuff: XLua.DelegateBridge;
        // __Hotfix0_NewBuff: XLua.DelegateBridge;
        // __Hotfix0_RemoveBuff: XLua.DelegateBridge;
        // __Hotfix0_RemoveBuffs: XLua.DelegateBridge;
        // __Hotfix1_RemoveBuffs: XLua.DelegateBridge;
        // __Hotfix0_DecStackCntBuffsOrMarkFinish: XLua.DelegateBridge;
        // __Hotfix0_GetBuffByUid: XLua.DelegateBridge;
        // __Hotfix0_GetFirstBuffByKey: XLua.DelegateBridge;
        // __Hotfix0_TryGetOverrideGroup: XLua.DelegateBridge;
        // __Hotfix1_TryGetOverrideGroup: XLua.DelegateBridge;
        // __Hotfix0_ContainsBuff: XLua.DelegateBridge;
        // __Hotfix0_ContainsStatusResistableBuff: XLua.DelegateBridge;
        // __Hotfix0_TryGetFirstBuffStackCount: XLua.DelegateBridge;
        // __Hotfix0_GetOverridableBuffStackCount: XLua.DelegateBridge;
        // __Hotfix0_Tick: XLua.DelegateBridge;
        // __Hotfix0_Clear: XLua.DelegateBridge;
        // __Hotfix0_ClearWithWhiteList: XLua.DelegateBridge;
        // __Hotfix0__ClearBuffOverrideMapWithWhiteList: XLua.DelegateBridge;
        // __Hotfix0__ClearBuffUidMapWithWhiteList: XLua.DelegateBridge;
        // __Hotfix0__CheckFinishedBuffs: XLua.DelegateBridge;
        // __Hotfix0__CheckThroughBuffAbnormalAnti: XLua.DelegateBridge;
        // __Hotfix0__FilterBuffAbnormalAnti: XLua.DelegateBridge;
        // __Hotfix0__FinishAndRemoveBuff: XLua.DelegateBridge;
        // __Hotfix0__FinishBuff: XLua.DelegateBridge;
        // __Hotfix0_OnOwnerBorn: XLua.DelegateBridge;
        // __Hotfix0_OnOwnerLocate: XLua.DelegateBridge;
        // __Hotfix0_OnOwnerFinish: XLua.DelegateBridge;
        // __Hotfix0_OnBeforeApplyingModifier: XLua.DelegateBridge;
        // __Hotfix0_OnApplyingModifier: XLua.DelegateBridge;
        // __Hotfix0_OnAppliedModifier: XLua.DelegateBridge;
        // __Hotfix0_OnOutputModifier: XLua.DelegateBridge;
        // __Hotfix0_OnAfterOutputDamage: XLua.DelegateBridge;
        // __Hotfix0_OnEvadeDamage: XLua.DelegateBridge;
        // __Hotfix0_OnTakeDamage: XLua.DelegateBridge;
        // __Hotfix0_OnOutputDamage: XLua.DelegateBridge;
        // __Hotfix0_OnOutputAtkOrHeal: XLua.DelegateBridge;
        // __Hotfix0_OnTargetKilled: XLua.DelegateBridge;
        // __Hotfix0_OnCalculateDamage: XLua.DelegateBridge;
        // __Hotfix0_OnAbilityStart: XLua.DelegateBridge;
        // __Hotfix0_OnAbilityFinish: XLua.DelegateBridge;
        // __Hotfix0_OnAbilitySpellOn: XLua.DelegateBridge;
        // __Hotfix0_OnAbilityCastOnTarget: XLua.DelegateBridge;
        // __Hotfix0_OnSkillFinish: XLua.DelegateBridge;
        // __Hotfix0_OnBeforeAttack: XLua.DelegateBridge;
        // __Hotfix0_OnAfterAttack: XLua.DelegateBridge;
        // __Hotfix0_OnBeforeTrySetHpZero: XLua.DelegateBridge;
        // __Hotfix0_OnBeforeDisappear: XLua.DelegateBridge;
      }
      export enum Event {
        ON_BUFF_START = "ON_BUFF_START",
        ON_BUFF_FINISH = "ON_BUFF_FINISH",
        ON_BUFF_TRIGGER = "ON_BUFF_TRIGGER",
        ON_OWNER_KILLED = "ON_OWNER_KILLED",
        ON_OWNER_FINISH = "ON_OWNER_FINISH",
        ON_BEFORE_APPLYING_MODIFIER = "ON_BEFORE_APPLYING_MODIFIER",
        ON_APPLYING_MODIFIER = "ON_APPLYING_MODIFIER",
        ON_APPLIED_MODIFIER = "ON_APPLIED_MODIFIER",
        ON_OUTPUT_MODIFIER = "ON_OUTPUT_MODIFIER",
        ON_TARGET_KILLED = "ON_TARGET_KILLED",
        ON_TAKE_DAMAGE = "ON_TAKE_DAMAGE",
        ON_OUTPUT_DAMAGE = "ON_OUTPUT_DAMAGE",
        ON_OWNER_BORN = "ON_OWNER_BORN",
        ON_OWNER_LOCATE = "ON_OWNER_LOCATE",
        ON_CALCULATE_DAMAGE = "ON_CALCULATE_DAMAGE",
        ON_EVADE_DAMAGE = "ON_EVADE_DAMAGE",
        ON_ABILITY_START = "ON_ABILITY_START",
        ON_ABILITY_FINISH = "ON_ABILITY_FINISH",
        ON_ABILITY_SPELL_ON = "ON_ABILITY_SPELL_ON",
        ON_ABILITY_CAST_ON_TARGET = "ON_ABILITY_CAST_ON_TARGET",
        ON_SKILL_FINISH = "ON_SKILL_FINISH",
        ON_AFTER_OUTPUT_DAMAGE = "ON_AFTER_OUTPUT_DAMAGE",
        ON_OUTPUT_ATK_OR_HEAL = "ON_OUTPUT_ATK_OR_HEAL",
        ON_AFTER_ATTACK = "ON_AFTER_ATTACK",
        ON_BUFF_ENABLE = "ON_BUFF_ENABLE",
        ON_BUFF_DISABLE = "ON_BUFF_DISABLE",
        ON_BEFORE_ATTACK = "ON_BEFORE_ATTACK",
        ON_BEFORE_TRY_SET_HP_ZERO = "ON_BEFORE_TRY_SET_HP_ZERO",
        ON_BEFORE_DISAPPEAR = "ON_BEFORE_DISAPPEAR",
        ON_OWNER_KILLED_BY_MAIN_TARGET = "ON_OWNER_KILLED_BY_MAIN_TARGET",
        E_NUM = "E_NUM",
      }
    }
    export namespace CameraController {
      export interface Plugin {
        // <controller>k__BackingField: Torappu.Battle.CameraController;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_controller: XLua.DelegateBridge;
        // __Hotfix0_set_controller: XLua.DelegateBridge;
        // __Hotfix0_get_controllerNotNull: XLua.DelegateBridge;
        // __Hotfix0_get_camera: XLua.DelegateBridge;
        // __Hotfix0_get_currentLayer: XLua.DelegateBridge;
        // __Hotfix0_set_currentLayer: XLua.DelegateBridge;
        // __Hotfix0_get_nextLayer: XLua.DelegateBridge;
        // __Hotfix0_get_currentLayerOrigin: XLua.DelegateBridge;
        // __Hotfix0_get_layerOrigins: XLua.DelegateBridge;
        // __Hotfix0_get_originPos: XLua.DelegateBridge;
        // __Hotfix0_set_originPos: XLua.DelegateBridge;
        // __Hotfix0_get_fromResolution: XLua.DelegateBridge;
        // __Hotfix0_get_toResolution: XLua.DelegateBridge;
        // __Hotfix0_get_fromLocalPosition: XLua.DelegateBridge;
        // __Hotfix0_get_toLocalPosition: XLua.DelegateBridge;
        // __Hotfix0_OnCreate: XLua.DelegateBridge;
        // __Hotfix0_DoAdaptCameraPosition: XLua.DelegateBridge;
      }
      export enum CameraPosition {
        DEFAULT = "DEFAULT",
        SIDE_BY = "SIDE_BY",
      }
      export enum PostprocessMask {
        NONE = "NONE",
        COLOR_GRADING = "COLOR_GRADING",
      }
    }
    export namespace Context {
      export interface Snapshot {
        source: Torappu.Battle.Entity;
        target: Torappu.Battle.Entity;
        buff: Torappu.Battle.Buff;
        ability: Torappu.Battle.Ability;
        modifier: Torappu.Battle.Modifier;
        projectile: Torappu.Battle.Projectile;
        tile: Torappu.Battle.Tile;
        mainTarget: Torappu.Battle.Entity;
        atkScale: Torappu.FP;
      }
      export interface ContextPtrStack<T> {
      }
      export interface ContextValueStack<T> {
      }
      export interface ChangeGuard {
        // m_context: Torappu.Battle.Context;
      }
    }
    export namespace Deck {
      export interface Options {
        excludeCharIdList: System.String[];
      }
      export interface Card {
        // m_deck: Torappu.Battle.Deck;
        // m_remainingCnt: System.Int32;
        // m_data: Torappu.Battle.BattleCharacterData;
        // m_respawnTimer: Torappu.PeriodicTimer;
        // m_isHiddenInternal: System.Boolean;
        // m_occupiedRemainingCharacterCnt: System.Boolean;
        // m_isSkillRangeToggled: System.Boolean;
        // m_isExcludedFromBattle: System.Boolean;
        // m_deckBuffs: System.Collections.Generic.List<Torappu.Battle.DeckBuff>;
        // m_cardBuffs: System.Collections.Generic.List<Torappu.Battle.Deck.Card.CardBuff>;
        // m_respawnCostMultCnt: System.Int32;
        // m_respawnCostMaxMultiplier: Torappu.FP;
        // m_queuedRespawnCnt: System.Int32;
        // m_runtimeCostModifiers: Torappu.ListSet<Torappu.Battle.Deck.Card.RuntimeCostModifier>;
        // m_runtimeRespawnTimeModifiers: Torappu.ListSet<Torappu.Battle.Deck.Card.RuntimeRespawnTimeModifier>;
        // <state>k__BackingField: Torappu.Battle.Deck.Card.State;
        // <buildCondition>k__BackingField: Torappu.Battle.BuildCondition;
        // m_costDelta: System.Int32;
        // m_newRespawnTimePeriod: Torappu.FP;
        // <attributes>k__BackingField: Torappu.Battle.Deck.Card.ObscuredAttributesSnapshot;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_state: XLua.DelegateBridge;
        // __Hotfix0_set_state: XLua.DelegateBridge;
        // __Hotfix0_get_uniqueId: XLua.DelegateBridge;
        // __Hotfix0_get_ignoreExcludeFromBattle: XLua.DelegateBridge;
        // __Hotfix0_get_notShowInDeck: XLua.DelegateBridge;
        // __Hotfix0_get_remainingCnt: XLua.DelegateBridge;
        // __Hotfix0_get_isPredefined: XLua.DelegateBridge;
        // __Hotfix0_get_isSkillRangeToggled: XLua.DelegateBridge;
        // __Hotfix0_set_isSkillRangeToggled: XLua.DelegateBridge;
        // __Hotfix0_get_respawnProgress: XLua.DelegateBridge;
        // __Hotfix0_get_respawnRemainingTime: XLua.DelegateBridge;
        // __Hotfix0_get_data: XLua.DelegateBridge;
        // __Hotfix0_get_buildCondition: XLua.DelegateBridge;
        // __Hotfix0_set_buildCondition: XLua.DelegateBridge;
        // __Hotfix0_get_playerSide: XLua.DelegateBridge;
        // __Hotfix0_get_rawCost: XLua.DelegateBridge;
        // __Hotfix0_get_cost: XLua.DelegateBridge;
        // __Hotfix0_get_key: XLua.DelegateBridge;
        // __Hotfix0_get_evolvePhase: XLua.DelegateBridge;
        // __Hotfix0_get_isHidden: XLua.DelegateBridge;
        // __Hotfix0_get_isAvailable: XLua.DelegateBridge;
        // __Hotfix0_get_readyToSpawn: XLua.DelegateBridge;
        // __Hotfix0_get_attributes: XLua.DelegateBridge;
        // __Hotfix0_set_attributes: XLua.DelegateBridge;
        // __Hotfix0_get_skill: XLua.DelegateBridge;
        // __Hotfix0_get_isHiddenInternal: XLua.DelegateBridge;
        // __Hotfix0_set_isHiddenInternal: XLua.DelegateBridge;
        // __Hotfix0_get_deckBuffs: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_SpawnPrefab: XLua.DelegateBridge;
        // __Hotfix0_CheckBuildable: XLua.DelegateBridge;
        // __Hotfix0_Draw: XLua.DelegateBridge;
        // __Hotfix0_Recharge: XLua.DelegateBridge;
        // __Hotfix0_ResetRespawnTime: XLua.DelegateBridge;
        // __Hotfix0_OnRecycle: XLua.DelegateBridge;
        // __Hotfix0_ProcessDeckModifier: XLua.DelegateBridge;
        // __Hotfix0__UpdateCardBuff: XLua.DelegateBridge;
        // __Hotfix0_CreateCardBuff: XLua.DelegateBridge;
        // __Hotfix0_FinishCardBuffByOwner: XLua.DelegateBridge;
        // __Hotfix0_FinishCardBuffsOnSpawned: XLua.DelegateBridge;
        // __Hotfix0_OnSpawned: XLua.DelegateBridge;
        // __Hotfix0_OnFetchDataFromPrefab: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0_DealDummyTalent: XLua.DelegateBridge;
        // __Hotfix0__PreprocessRunes: XLua.DelegateBridge;
        // __Hotfix0__PreprocessCharCost: XLua.DelegateBridge;
        // __Hotfix0__PreprocessDeckBuffs: XLua.DelegateBridge;
      }
      export interface CharacterCard {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_isInfinity: XLua.DelegateBridge;
        // __Hotfix0_get_isFull: XLua.DelegateBridge;
        // __Hotfix0_get_initialCnt: XLua.DelegateBridge;
        // __Hotfix0_get_cardPolicy: XLua.DelegateBridge;
        // __Hotfix0_TouchPrefab: XLua.DelegateBridge;
        // __Hotfix0_SpawnInternal: XLua.DelegateBridge;
        // __Hotfix0_CreateDummy: XLua.DelegateBridge;
        // __Hotfix0_CheckBuildable: XLua.DelegateBridge;
      }
      export interface TokenCard {
        // m_cardPolicy: Torappu.Battle.Deck.Card.CardPolicy;
        // m_hostIsAlive: System.Boolean;
        // m_spawnedCnt: System.Int32;
        // m_rechargeOnlyOnce: System.Boolean;
        // m_rechargeCnt: System.Int32;
        // m_isInfinity: System.Boolean;
        // m_ignoreExcludeFromBattle: System.Boolean;
        // m_notShowInDeck: System.Boolean;
        // m_isRallyPoint: System.Boolean;
        // <maxDeployCnt>k__BackingField: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
        // <maxDeckStackCnt>k__BackingField: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_cardPolicy: XLua.DelegateBridge;
        // __Hotfix0_get_isInfinity: XLua.DelegateBridge;
        // __Hotfix0_get_ignoreExcludeFromBattle: XLua.DelegateBridge;
        // __Hotfix0_get_notShowInDeck: XLua.DelegateBridge;
        // __Hotfix0_get_isFull: XLua.DelegateBridge;
        // __Hotfix0_get_isHidden: XLua.DelegateBridge;
        // __Hotfix0_get_readyToSpawn: XLua.DelegateBridge;
        // __Hotfix0_get_cost: XLua.DelegateBridge;
        // __Hotfix0_get_rawCost: XLua.DelegateBridge;
        // __Hotfix0_get_hostIsAlive: XLua.DelegateBridge;
        // __Hotfix0_get_initialCnt: XLua.DelegateBridge;
        // __Hotfix0_get_maxDeployCnt: XLua.DelegateBridge;
        // __Hotfix0_set_maxDeployCnt: XLua.DelegateBridge;
        // __Hotfix0_get_maxDeckStackCnt: XLua.DelegateBridge;
        // __Hotfix0_set_maxDeckStackCnt: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_TouchPrefab: XLua.DelegateBridge;
        // __Hotfix0_SpawnInternal: XLua.DelegateBridge;
        // __Hotfix0_CreateDummy: XLua.DelegateBridge;
        // __Hotfix0_Recharge: XLua.DelegateBridge;
        // __Hotfix0_ForceRecharge: XLua.DelegateBridge;
        // __Hotfix0_OnHostSpawned: XLua.DelegateBridge;
        // __Hotfix0_OnHostRecycled: XLua.DelegateBridge;
        // __Hotfix0_OnSpawned: XLua.DelegateBridge;
        // __Hotfix0_OnRecycle: XLua.DelegateBridge;
        // __Hotfix0_OnFetchDataFromPrefab: XLua.DelegateBridge;
      }
      export namespace Card {
        export enum CardPolicy {
          DEFAULT = "DEFAULT",
          UNIQUE = "UNIQUE",
          QUEUED = "QUEUED",
        }
        export enum State {
          NONE = "NONE",
          READY = "READY",
          USING = "USING",
          RESPAWNING = "RESPAWNING",
          QUEUING = "QUEUING",
        }
        export enum RechargeTiming {
          NORMAL = "NORMAL",
          ON_FINISH = "ON_FINISH",
        }
        export interface ObscuredAttributesSnapshot {
          // maxHp: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
          // atk: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
          // def: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
          magicResistance: Torappu.ObscuredFP;
          // cost: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
          // blockCnt: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
          // respawnTime: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
          // maxDeployCount: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
          // maxDeckStackCnt: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
        }
        export interface RuntimeCostModifier {
          // m_value: System.Int32;
        }
        export interface RuntimeRespawnTimeModifier {
          // m_value: Torappu.FP;
          // m_isRatio: System.Boolean;
        }
        export interface CardBuff {
          // m_lifeType: Torappu.Battle.Deck.Card.CardBuff.LifeType;
          // m_owner: Torappu.ObjectPtr<Torappu.Battle.Buff>;
          // m_costModifier: Torappu.Battle.Deck.Card.RuntimeCostModifier;
          // m_respawnTimeModifer: Torappu.Battle.Deck.Card.RuntimeRespawnTimeModifier;
        }
        export namespace CardBuff {
          export enum LifeType {
            UNTIL_NEXT_SPAWN = "UNTIL_NEXT_SPAWN",
            HOLD_BY_BUFF = "HOLD_BY_BUFF",
          }
        }
      }
    }
    export namespace CharacterSkinHooker {
      export interface ReplacePair {
        fromEffect: System.String;
        toEffect: System.String;
      }
      export interface FakeProjectileConfig {
        originProjectileKey: System.String;
        graphicProjectileKey: System.String;
        logicProjecitleKey: System.String;
        _fakeMuzzlePoint: Torappu.Battle.Entity.MountPointType;
      }
    }
    export namespace SpineEffectEmitter {
      export interface SpineEffectPreset {
        // bone: UnityEngine.Transform;
        _directionType: Torappu.Battle.SpineEffectEmitter.SpineEffectPreset.DirectionType;
        _effects: System.String[];
      }
      export namespace SpineEffectPreset {
        export enum DirectionType {
          NONE = "NONE",
          L_OR_R = "L_OR_R",
          U_OR_D = "U_OR_D",
          FOUR_DIR = "FOUR_DIR",
          UD_OR_LR = "UD_OR_LR",
        }
      }
    }
    export namespace EnemySkill {
      export interface Behaviour {
        // <skill>k__BackingField: Torappu.Battle.EnemySkill;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_skill: XLua.DelegateBridge;
        // __Hotfix0_set_skill: XLua.DelegateBridge;
        // __Hotfix0_get_owner: XLua.DelegateBridge;
        // __Hotfix0_get_data: XLua.DelegateBridge;
        // __Hotfix0_get_ability: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_AssignData: XLua.DelegateBridge;
        // __Hotfix0_OnAttach: XLua.DelegateBridge;
        // __Hotfix0_OnDetach: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0_OnCastStart: XLua.DelegateBridge;
        // __Hotfix0_OnCastFinish: XLua.DelegateBridge;
      }
    }
    export namespace Entity {
      export interface SpController {
        // m_spType: Torappu.SpType;
        // m_owner: Torappu.Battle.Entity;
        // m_spCost: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
        // m_increments: System.Single[];
        // m_spRecoverTimer: Torappu.PrecisePeriodicTimer;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_isFull: XLua.DelegateBridge;
        // __Hotfix0_get_spType: XLua.DelegateBridge;
        // __Hotfix0_get_progressToFull: XLua.DelegateBridge;
        // __Hotfix0_get_progressToReady: XLua.DelegateBridge;
        // __Hotfix0_get_progressToNext: XLua.DelegateBridge;
        // __Hotfix0_MarkInvalid: XLua.DelegateBridge;
        // __Hotfix0_Reset: XLua.DelegateBridge;
        // __Hotfix0_ResetSpTimer: XLua.DelegateBridge;
        // __Hotfix0_UpdateSpData: XLua.DelegateBridge;
        // __Hotfix0_OnTakeDamage: XLua.DelegateBridge;
        // __Hotfix0_OnOutputAttackOrHeal: XLua.DelegateBridge;
        // __Hotfix0_UpdateSpRecoveryPerSec: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0__RecoverMp: XLua.DelegateBridge;
      }
      export interface EPController {
        isInBreakRecovery: System.Boolean;
        // m_owner: Torappu.Battle.Entity;
        // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Reset: XLua.DelegateBridge;
        // __Hotfix0__CreateBrokenBuff: XLua.DelegateBridge;
        // __Hotfix0__StartEPRecovery: XLua.DelegateBridge;
        // __Hotfix0_OnElementBreak: XLua.DelegateBridge;
      }
      export interface BuffEffectHolder {
        refCounter: System.Int32;
        effect: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
      }
      export interface FriendComponent {
      }
      export enum Event {
        ON_BORN = "ON_BORN",
        ON_DEATH = "ON_DEATH",
        ON_FINISH = "ON_FINISH",
        ON_LOCATE = "ON_LOCATE",
        ON_STATE_CHANGE = "ON_STATE_CHANGE",
        ON_USE_SKILL = "ON_USE_SKILL",
        ON_SKILL_START = "ON_SKILL_START",
        ON_SKILL_FINISH = "ON_SKILL_FINISH",
        ON_BEFORE_APPLYING_MODIFIER = "ON_BEFORE_APPLYING_MODIFIER",
        ON_APPLYING_MODIFIER = "ON_APPLYING_MODIFIER",
        ON_APPLIED_MODIFIER = "ON_APPLIED_MODIFIER",
        ON_OUTPUT_MODIFIER = "ON_OUTPUT_MODIFIER",
        ON_TAKE_DAMAGE = "ON_TAKE_DAMAGE",
        ON_TAKE_HEAL = "ON_TAKE_HEAL",
        ON_OUTPUT_DAMAGE = "ON_OUTPUT_DAMAGE",
        ON_EVADE_DAMAGE = "ON_EVADE_DAMAGE",
        ON_BUFF_START = "ON_BUFF_START",
        ON_BUFF_FINISH = "ON_BUFF_FINISH",
        ON_BUFF_TRIGGER = "ON_BUFF_TRIGGER",
        ON_ATTACK_EVENT = "ON_ATTACK_EVENT",
        ON_ATTACK_FINISHED_EVENT = "ON_ATTACK_FINISHED_EVENT",
        ON_ABILITY_ANIM_END_EVENT = "ON_ABILITY_ANIM_END_EVENT",
        ON_DIRECTION_CHANGED = "ON_DIRECTION_CHANGED",
        ON_SHOW_DEBUG_LOG = "ON_SHOW_DEBUG_LOG",
        ON_APPEAR_OR_DISAPPEAR = "ON_APPEAR_OR_DISAPPEAR",
        ON_BLOCKEE_CHANGED = "ON_BLOCKEE_CHANGED",
        ON_STUNNED = "ON_STUNNED",
        ON_FROZEN = "ON_FROZEN",
        ON_ATTACK_CHECKPOINT = "ON_ATTACK_CHECKPOINT",
        ON_REBORN_AFTER_FAKE_DEATH = "ON_REBORN_AFTER_FAKE_DEATH",
        ON_BEFORE_APPEAR_OR_DISAPPEAR = "ON_BEFORE_APPEAR_OR_DISAPPEAR",
        ON_MAP_LAYER_CHANGED = "ON_MAP_LAYER_CHANGED",
        E_NUM = "E_NUM",
      }
      export enum FinishReason {
        NONE = "NONE",
        REACH_EXIT = "REACH_EXIT",
        HP_ZERO = "HP_ZERO",
        FALLDOWN = "FALLDOWN",
        WITHDRAW = "WITHDRAW",
        DEADLIKE_WITHDRAW = "DEADLIKE_WITHDRAW",
        SILENT_WITHDRAW = "SILENT_WITHDRAW",
        OTHER = "OTHER",
        HP_ZERO_WITH_NO_SOURCE = "HP_ZERO_WITH_NO_SOURCE",
      }
      export enum MountPointType {
        FOOT = "FOOT",
        HIT = "HIT",
        MUZZLE = "MUZZLE",
        HEAD = "HEAD",
        UI = "UI",
        SPECIAL_0 = "SPECIAL_0",
        SPECIAL_1 = "SPECIAL_1",
        GROUND = "GROUND",
        SPECIAL_2 = "SPECIAL_2",
        SPECIAL_3 = "SPECIAL_3",
      }
      export namespace EPController {
      }
    }
    export namespace BattleLogger {
      export interface CharInfo {
        charInstId: System.Int32;
        skinId: System.String;
        tmplId: System.String;
        skillId: System.String;
        skillIndex: System.Int32;
        skillLvl: System.Int32;
        level: System.Int32;
        phase: Torappu.EvolvePhase;
        potentialRank: System.Int32;
        favorBattlePhase: System.Int32;
        isAssistChar: System.Boolean;
      }
      export interface LogItem {
        timestamp: System.Single;
        signiture: Torappu.Battle.BattleCharacterData.Signiture;
        op: Torappu.Battle.PlayerOperationType;
        direction: Torappu.SharedConsts.Direction;
        pos: Torappu.GridPosition;
      }
      export interface Journal {
        metadata: Torappu.Battle.BattleLogger.Journal.Metadata;
        squad: System.Collections.Generic.List<Torappu.Battle.BattleLogger.CharInfo>;
        logs: System.Collections.Generic.List<Torappu.Battle.BattleLogger.LogItem>;
        randomSeed: System.Int32;
        runeList: System.Collections.Generic.List<System.String>;
      }
      export interface BattleStats {
        killedEnemiesCnt: System.Int32;
        unnatrualRecoveredCost: System.Int32;
        charStats: Torappu.ListCounterPool<Torappu.Battle.BattleLogger.BattleStats.CharStatKey>;
        enemyStats: Torappu.ListCounterPool<Torappu.Battle.BattleLogger.BattleStats.EnemyStatKey>;
        skillTrigStats: Torappu.ListCounterPool<System.String>;
        charAdvancedStats: Torappu.ListDict<System.String,Torappu.Battle.BattleLogger.BattleStats.CharAdvancedStats>;
        enemyAdvancedStats: Torappu.ListDict<System.String,Torappu.Battle.BattleLogger.BattleStats.EnemyAdvancedStats>;
        runeAdvancedStats: System.Collections.Generic.List<System.Collections.Generic.List<System.Object>>;
        rlBuffAdvancedStats: System.Collections.Generic.List<System.Collections.Generic.List<System.Object>>;
        extraBattleInfoStats: Torappu.ListDict<System.String,System.Int32>;
        charList: Torappu.ListDict<System.String,System.Collections.Generic.List<System.Object>>;
        enemyList: Torappu.ListDict<System.String,System.Collections.Generic.List<System.Object>>;
        runeList: System.Collections.Generic.List<System.Collections.Generic.List<System.Object>>;
        rlBuffList: System.Collections.Generic.List<System.Collections.Generic.List<System.Object>>;
        beginTs: System.Int64;
        endTs: System.Int64;
        access: System.String;
        hash: System.String;
        packageName: System.String;
        checkKilledCnt: System.Boolean;
        leftHp: System.Int32;
        extraInfo: System.Collections.Generic.Dictionary<System.Int32,System.String>;
        extraBattleInfo: Torappu.ListDict<System.String,System.Int32>;
        clientAntiCheatLog: Torappu.ListDict<System.Int32,System.Collections.Generic.List<System.Object>>;
        idList: System.Collections.Generic.List<System.String>;
        autoReplayCancelled: System.Boolean;
      }
      export namespace Journal {
        export interface Metadata {
          standardPlayTime: System.Single;
          gameResult: Torappu.Battle.BattleController.GameResult;
          saveTime: System.DateTime;
          remainingCost: System.Int32;
          remainingLifePoint: System.Int32;
          killedEnemiesCnt: System.Int32;
          missedEnemiesCnt: System.Int32;
          levelId: System.String;
          stageId: System.String;
          validKilledEnemiesCnt: System.Int32;
        }
      }
      export namespace BattleStats {
        export interface EnemyStatKey {
          enemyId: System.String;
          counterType: Torappu.Battle.BattleLogger.BattleStats.EnemyStatKey.CounterType;
          isInvalidKilled: System.Boolean;
        }
        export interface CharStatKey {
          charId: System.String;
          counterType: Torappu.Battle.BattleLogger.BattleStats.CharStatKey.CounterType;
        }
        export interface CharAdvancedStats {
          // outputDamageRange: UnityEngine.Vector2;
          // inputDamageRange: UnityEngine.Vector2;
          snapshots: System.Collections.Generic.List<Torappu.Battle.AntiCheat.CharacterSnapshot>;
        }
        export interface EnemyAdvancedStats {
          snapshots: System.Collections.Generic.List<Torappu.Battle.AntiCheat.EnemySnapshot>;
        }
        export namespace EnemyStatKey {
          export enum CounterType {
            HP_ZERO = "HP_ZERO",
            FALLDOWN = "FALLDOWN",
            REACH_EXIT = "REACH_EXIT",
            ENCOUNTER = "ENCOUNTER",
            DEADLIKE_REACH_EXIT = "DEADLIKE_REACH_EXIT",
          }
        }
        export namespace CharStatKey {
          export enum CounterType {
            SPAWN = "SPAWN",
            DEAD = "DEAD",
            WITHDRAW = "WITHDRAW",
          }
        }
      }
    }
    export namespace BattleVerboseRecorder {
      export interface SourceOrTargetRef {
        NULL: Torappu.Battle.BattleVerboseRecorder.SourceOrTargetRef;
        MAX_MAP_COLUMNS: System.Int32;
        type: Torappu.Battle.BattleVerboseRecorder.SourceOrTargetRef.Type;
        key: System.String;
        uniqueId: System.UInt32;
      }
      export interface LogItem {
        type: Torappu.Battle.BattleVerboseRecorder.LogItem.Type;
        frameCnt: System.UInt32;
        source: Torappu.Battle.BattleVerboseRecorder.SourceOrTargetRef;
        target: Torappu.Battle.BattleVerboseRecorder.SourceOrTargetRef;
        modifier: Torappu.Battle.BattleVerboseRecorder.LogItem.ModifierDelta;
        extraData: System.Object;
        extraData2: System.Object;
      }
      export interface IPrinter {
      }
      export interface DebugPrinter {
        // m_builder: System.Text.StringBuilder;
      }
      export namespace SourceOrTargetRef {
        export enum Type {
          NONE = "NONE",
          CHARACTER = "CHARACTER",
          ENEMY = "ENEMY",
          TILE = "TILE",
          BUFF = "BUFF",
        }
      }
      export namespace LogItem {
        export enum Type {
          BATTLE_START = "BATTLE_START",
          BATTLE_FINISH = "BATTLE_FINISH",
          UNIT_BORN = "UNIT_BORN",
          UNIT_FINISH = "UNIT_FINISH",
          BUFF_START = "BUFF_START",
          BUFF_FINISH = "BUFF_FINISH",
          SKILL_CAST = "SKILL_CAST",
          MODIFY_HP = "MODIFY_HP",
          MODIFY_SP = "MODIFY_SP",
          MODIFY_COST = "MODIFY_COST",
          MODIFY_LIFE_POINT = "MODIFY_LIFE_POINT",
          MODIFY_CHAR_LIMIT = "MODIFY_CHAR_LIMIT",
          RALLYPOINT_REBORN = "RALLYPOINT_REBORN",
          SNAP_SHOT = "SNAP_SHOT",
          PLAYER_OPERATION = "PLAYER_OPERATION",
          MODIFY_COST_SIDE_A = "MODIFY_COST_SIDE_A",
          MODIFY_COST_SIDE_B = "MODIFY_COST_SIDE_B",
          MODIFY_EP = "MODIFY_EP",
        }
        export interface ModifierDelta {
          realDelta: System.Single;
          afterValue: System.Single;
        }
      }
    }
    export namespace Map {
      export interface Tiles2D {
        _tiles: Torappu.Battle.Tile[];
        _width: System.Int32;
        _height: System.Int32;
      }
    }
    export namespace MapGraphic {
      export interface MapSettings {
        cameraView: Torappu.Battle.CameraViewLevel;
        highlandHeight: System.Single;
        layerHeight: System.Single;
        theme: System.String;
      }
      export interface LightmapSettings {
        repackLightmap: System.Boolean;
        bakeLightmapInXYPlane: System.Boolean;
        skyBoxKey: System.String;
        indirectResolution: System.Single;
        lightmapResolution: System.Single;
        ambientIntensity: System.Single;
        reflectionIntensity: System.Single;
        indirectIntensity: System.Single;
        albedoBoost: System.Single;
        compressLightmaps: System.Boolean;
        ambientOcclusionEnabled: System.Boolean;
        aoMaxDistance: System.Single;
        aoIndirectContribution: System.Single;
        aoDirectContribution: System.Single;
        finalGatherEnabled: System.Boolean;
        finalGatherRayCount: System.Int32;
      }
      export interface EffectSettings {
        cameraEffect: System.String;
        mapEffects: Torappu.MapEffectData[];
      }
    }
    export namespace BasicCursor {
      export interface Checkpoint {
        // <data>k__BackingField: Torappu.RouteData.CheckpointData;
        // <cursor>k__BackingField: Torappu.Battle.BasicCursor;
      }
      export interface PosRelatedCheckpoint {
      }
      export interface MoveCheckpoint {
        // m_offset: UnityEngine.Vector2;
        // m_nextmap: Torappu.Battle.Route.Node[][];
      }
      export interface DisappearCheckpoint {
      }
      export interface AppearAtPosCheckpoint {
      }
      export interface WaitForSecondsCheckpoint {
        // m_time: Torappu.FP;
      }
      export interface WaitForPlayTimeCheckpoint {
      }
      export interface WaitCurrentWaveTimeCheckpoint {
      }
      export interface WaitCurrentFragmentTimeCheckpoint {
      }
      export interface AlertCheckpoint {
      }
    }
    export namespace Route {
      export interface Node {
        pos: Torappu.GridPosition;
        tile: Torappu.Battle.Tile;
        // nextTurn: UnityEngine.Vector2;
        nextNode: Torappu.Battle.Route.Node;
        distance: System.Int32;
        distToFinal: System.Int32;
        isInOpenList: System.Boolean;
      }
    }
    export namespace MapThemeFactory {
      export interface DefaultThemeController {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
      }
      export interface WaterThemeController {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
      }
    }
    export namespace Tiles {
      export interface UniformRandomTrigger {
        BLACKBOARD_KEY_CD_MIN: System.String;
        BLACKBOARD_KEY_CD_MAX: System.String;
        _preDelay: System.Single;
        _preDelayEffect: System.String;
        // m_minCd: System.Single;
        // m_maxCd: System.Single;
      }
      export interface MeshTileGraphic {
        BUILDABLE_MATERIAL_KEY: System.String;
        FOCUSED_MATERIAL_KEY: System.String;
        TWEEN_LOOP_TIME: System.Single;
        // FOCUSED_COLOR: UnityEngine.Color;
        // EMISSION_COLOR: UnityEngine.Color;
        // EMISSION_CLEAR_COLOR: UnityEngine.Color;
        // m_renderer: UnityEngine.Renderer;
        // m_buildableMaterial: UnityEngine.Material;
        // m_focusedMaterial: UnityEngine.Material;
        // m_originMaterial: UnityEngine.Material;
        // m_tween: DG.Tweening.Tween;
        // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
      }
      export interface SpriteTileGraphic {
        // _sprite: UnityEngine.SpriteRenderer;
        // _buildableColor: UnityEngine.Color;
        // _focusColor: UnityEngine.Color;
        // m_originColor: UnityEngine.Color;
      }
      export namespace UniformRandomTrigger {
      }
    }
    export namespace DynamicBuffTile {
      export interface TileBuffsAndEffectsPair {
        buffs: Torappu.BuffData[];
        effects: System.String[];
      }
    }
    export namespace Tile {
      export interface Options {
        buildableType: Torappu.BuildableType;
        passableMask: Torappu.MotionMask;
        overrideObstacleLikeMoveCost: System.Boolean;
      }
      export interface Behaviour {
        // <tile>k__BackingField: Torappu.Battle.Tile;
      }
    }
    export namespace TileGraphic {
      export enum HighlightType {
        NONE = "NONE",
        BUILDABLE = "BUILDABLE",
        FOCUSED = "FOCUSED",
      }
    }
    export namespace Modifier {
      export enum SharedFlagIndex {
        IS_CONTINUOUS = "IS_CONTINUOUS",
        FORCE_TO_DISPLAY_NUMBER = "FORCE_TO_DISPLAY_NUMBER",
        FORCE_NOT_TO_DISPLAY_SP = "FORCE_NOT_TO_DISPLAY_SP",
        DAMAGE_IS_UNDEADABLE_THIS_TIME = "DAMAGE_IS_UNDEADABLE_THIS_TIME",
        DAMAGE_WITHOUT_MODIFY = "DAMAGE_WITHOUT_MODIFY",
        IS_ENVIRONMENT_DAMAGE = "IS_ENVIRONMENT_DAMAGE",
        FORCE_TO_DISPLAY_NEGATIVE_NUMER = "FORCE_TO_DISPLAY_NEGATIVE_NUMER",
        SKIP_MODIFIER_EVENT = "SKIP_MODIFIER_EVENT",
        DAMAGE_CAN_HURT_SLEEPING_ENTITY = "DAMAGE_CAN_HURT_SLEEPING_ENTITY",
      }
      export enum DeltaType {
        CANCELLED = "CANCELLED",
        ADD = "ADD",
        MINUS = "MINUS",
      }
      export enum SourceApplyWay {
        NONE = "NONE",
        MELEE = "MELEE",
        RANGED = "RANGED",
        ALL = "ALL",
      }
      export enum SourceAttackType {
        NONE = "NONE",
        NORMAL = "NORMAL",
        SPLASH = "SPLASH",
        BUFF = "BUFF",
      }
      export enum TargetType {
        HP = "HP",
        SP = "SP",
        COST = "COST",
        CHARCTER_LIMIT = "CHARCTER_LIMIT",
        LIFE_POINT = "LIFE_POINT",
        EP = "EP",
      }
      export enum CancelReason {
        NONE = "NONE",
        UNHURTABLE = "UNHURTABLE",
        MISS = "MISS",
        BLOCKED = "BLOCKED",
        BLOCKED_WITH_DAMAGE_NUMBER = "BLOCKED_WITH_DAMAGE_NUMBER",
      }
    }
    export namespace ModifierSplitter {
      export interface Options {
        splitTimes: System.Int32;
      }
    }
    export namespace Projectiles {
      export interface BounceHitBehaviour {
        // m_bounceTimes: System.Int32;
        _bounceTimesAsDamageTimes: System.Boolean;
        _perDamageInterval: System.Single;
        _allowRepetition: System.Boolean;
        // m_movement: Torappu.Battle.Projectiles.BouncedAdvancedMovement;
        // m_targetsList: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Entity>>;
        // m_maxBounceDamageDuration: System.Single;
        // m_coroutineIdList: System.Collections.Generic.List<Torappu.Battle.CoroutineId>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_BounceTimesAsDamageTimes: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_DoSelectTargetToHit: XLua.DelegateBridge;
      }
      export interface ChainLightningEffectBehaviour {
        _mainEffect: System.String;
        _playSpecialEffectOnFirstOne: System.Boolean;
        _specialHitEffect: System.String;
        _finishMainEffectsBeforePlay: System.Boolean;
        // m_mainEffect: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
        // m_hitEffect: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
        // m_lineRenderers: UnityEngine.LineRenderer[];
        // m_positions: System.Collections.Generic.List<UnityEngine.Vector3>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_playSpecialEffectOnFirstOne: XLua.DelegateBridge;
        // __Hotfix0_get_lineRenderers: XLua.DelegateBridge;
        // __Hotfix0__ResetLineRenders: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileStop: XLua.DelegateBridge;
        // __Hotfix0_PlayLineEffect: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      }
      export interface ChainLightningHitBehaviour {
        _atkScale: System.Single;
        _useChainPrefix: System.Boolean;
        _playChainEffectAndAudioAfterSelectTarget: System.Boolean;
        // m_effect: Torappu.Battle.Projectiles.ChainLightningEffectBehaviour;
        // m_targetsList: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Entity>>;
        // m_atkScale: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_effect: XLua.DelegateBridge;
        // __Hotfix0_get_targetsList: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_DoSelectTargetToHit: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileReached: XLua.DelegateBridge;
        // __Hotfix0_PlayChainAudio: XLua.DelegateBridge;
      }
      export interface ClearTrailRenderer {
        // m_trailRenderers: UnityEngine.TrailRenderer[];
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileStop: XLua.DelegateBridge;
      }
      export interface EffectBehaviour {
        _effectsWhenReached: System.String[];
        _effectsWhenHit: System.String[];
        _effectsToTargetWhenStart: System.String[];
        _effectsWhenStop: System.String[];
        _onlyPlayHitEffectOnTraceTarget: System.Boolean;
        _clearHitEffectOnStop: System.Boolean;
        _clearPlayEffectOnStop: System.Boolean;
        _clearReachedEffectWhenStop: System.Boolean;
        _alwaysPlayStartEffects: System.Boolean;
        _playStartEffectOnlyOnProjectile: System.Boolean;
        _useSourceFaceVector: System.Boolean;
        _useSourceFaceVectorOnHit: System.Boolean;
        _forceReachTargetGround: System.Boolean;
        _replaceMainEffectWhenReach: System.Boolean;
        _mainEffectToReplace: System.String;
        // m_targetGroundPosZ: System.Single;
        // m_effects: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_IsReplaceMainEffectWhenReach: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileBorn: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileStop: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileReached: XLua.DelegateBridge;
        // __Hotfix0_OnHitTarget: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      }
      export interface FunnelHitbehaviour {
        _targetOptions: Torappu.Battle.TargetOptions;
        _waitFirstPeriod: System.Boolean;
        // m_periodTimer: Torappu.PeriodicTimer;
        // m_trait: Torappu.Battle.Abilities.CammouTrait;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0__DealHitTarget: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileStop: XLua.DelegateBridge;
        // __Hotfix0_OnAttackTimeChanged: XLua.DelegateBridge;
        // __Hotfix0__CheckProjectileInValid: XLua.DelegateBridge;
      }
      export interface HarpoonRenderer {
        _mainEffect: System.String;
        _throwEffect: System.Boolean;
        // m_mainEffect: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
        // m_lineRenderers: UnityEngine.LineRenderer[];
        // m_startMountPoint: Torappu.Battle.MountPoint;
        // m_positions: UnityEngine.Vector3[];
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileStop: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      }
      export interface HitBehaviour {
        // s_sharedList: System.Collections.Generic.List<Torappu.Battle.Entity>;
        _targetOptions: Torappu.Battle.TargetOptions;
        _goThroughWall: System.Boolean;
        _onlyCheckHitWhenReachTarget: System.Boolean;
        _onlyCheckHitWhenStop: System.Boolean;
        _exceptTraceTarget: System.Boolean;
        _overridePurposeMaskWithTargetOptions: System.Boolean;
        _rangeToLoad: Torappu.Battle.Range;
        _ignoreCamouflage: System.Boolean;
        // m_goThroughWall: System.Boolean;
        // m_layerMask: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileReached: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileStop: XLua.DelegateBridge;
        // __Hotfix0_DealHitTarget: XLua.DelegateBridge;
        // __Hotfix0__DoTargetEnter: XLua.DelegateBridge;
        // __Hotfix0__DoTargetExit: XLua.DelegateBridge;
        // __Hotfix0_OnTriggerEnter2D: XLua.DelegateBridge;
        // __Hotfix0_OnTriggerExit2D: XLua.DelegateBridge;
        // __Hotfix0_ClearStaticMethods: XLua.DelegateBridge;
      }
      export interface LaserHitBehaviour {
        _overridePurposeMaskWithTargetOptions: System.Boolean;
        _targetOptions: Torappu.Battle.TargetOptions;
        _exceptTraceTarget: System.Boolean;
        _laserWidth: System.Single;
        _ignoreCamouflage: System.Boolean;
        // m_layerMask: System.Int32;
        // m_collider: UnityEngine.BoxCollider2D;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0__UpdateBoxCollider: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileReached: XLua.DelegateBridge;
        // __Hotfix0_DealHitTarget: XLua.DelegateBridge;
        // __Hotfix0__DoTargetEnter: XLua.DelegateBridge;
        // __Hotfix0__DoTargetExit: XLua.DelegateBridge;
        // __Hotfix0_OnTriggerEnter2D: XLua.DelegateBridge;
        // __Hotfix0_OnTriggerExit2D: XLua.DelegateBridge;
      }
      export interface MultiHitBehaviour {
        _hitAfterReached: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0__DoTargetStay: XLua.DelegateBridge;
        // __Hotfix0_OnTriggerStay2D: XLua.DelegateBridge;
        // __Hotfix0_DealHitTarget: XLua.DelegateBridge;
      }
      export interface ScaleableHitBehaviour {
        _applyExtraAtkScale: System.Boolean;
        _atkScale: System.Single;
        // m_atkScale: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_DealHitTarget: XLua.DelegateBridge;
        // __Hotfix0_OnBeforeHitTarget: XLua.DelegateBridge;
      }
      export interface ScatteredProjectileHitBehaviour {
        _projectileKey: System.String;
        // m_useHookProjectile: System.Boolean;
        // m_logicProjectileKey: System.String;
        // m_graphicProjectileKey: System.String;
        // m_subAtkScale: System.Single;
        // m_damageNodeReplacedActionNodes: System.Collections.Generic.List<Torappu.Battle.Action.ActionNode>;
        // m_maxTargetNum: System.Int32;
        // m_targetHit: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_EmitScatteredProjectile: XLua.DelegateBridge;
        // __Hotfix0_DoSelectTargetToHit: XLua.DelegateBridge;
      }
      export interface SelectorForceHitBehaviour {
        _forceHit: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_DoSelectTargetToHit: XLua.DelegateBridge;
      }
      export interface SelectorHitBehaviour {
        _selector: Torappu.Battle.TargetSelector;
        _interval: System.Single;
        _waitFirstPeriod: System.Boolean;
        _onlyCheckHitWhenReachTarget: System.Boolean;
        _onlyCheckHitWhenStop: System.Boolean;
        _exceptTraceTarget: System.Boolean;
        _hitPasserby: System.Boolean;
        _ignoreSmallEps: System.Boolean;
        // m_periodicTimer: Torappu.PeriodicTimer;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_selector: XLua.DelegateBridge;
        // __Hotfix0_get_checkHitWhenTick: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileReached: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileStop: XLua.DelegateBridge;
        // __Hotfix0_DealHitTarget: XLua.DelegateBridge;
        // __Hotfix0_DoSelectTargetToHit: XLua.DelegateBridge;
      }
      export interface SnsantChangeForceBehaviour {
        _tag: System.String;
        // m_deltaForceLevel: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
      }
      export interface SnsantSkill2ProjectileEffectBehaviour {
        _effectsWhenReached: System.String[];
        _movingEffectsWhenReached: System.String;
        _harpoonEffect: System.String;
        _harpoonHeight: System.Single;
        _adjustRangeEffectOffset: System.Single;
        MAX_PULL_SQR_DIST: System.Single;
        // m_lineRenderers: UnityEngine.LineRenderer[];
        // m_startMountPoint: Torappu.Battle.MountPoint;
        // m_positions: UnityEngine.Vector3[];
        // m_effects: System.Collections.Generic.List<Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>>;
        // m_targetIsMarkedEnemy: System.Boolean;
        // m_markedEnemy: Torappu.Battle.Enemy;
        // m_cachedMovingEffect: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
        // m_traceTargetUid: System.UInt32;
        // m_cachedSqrDist: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0__HarpoonInit: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileBorn: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileStop: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileReached: XLua.DelegateBridge;
        // __Hotfix0__RefreshTargetAndEffect: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0__DoEffectMovement: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      }
      export interface TileSelectorHitBehaviour {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_DoSelectTargetToHit: XLua.DelegateBridge;
      }
      export interface VortexMultiHitBehaviour {
        _pullDuration: System.Single;
        _castEffect: System.String;
        // m_pullForceLevel: System.Int32;
        // m_pullRemainingTimeList: System.Collections.Generic.List<Torappu.FP>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_RegisterPullRemainingTime: XLua.DelegateBridge;
        // __Hotfix0__DoPull: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0_DoSelectTargetToHit: XLua.DelegateBridge;
        // __Hotfix0_DealHitTarget: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      }
      export interface AdvancedMovement {
        _moveType: Torappu.Battle.Projectiles.AdvancedMovement.MoveType;
        _speed: System.Single;
        _distance: System.Single;
        _comeBack: System.Boolean;
        _delayToStart: System.Single;
        _delayAfterReached: System.Single;
        // _randomOffset: UnityEngine.Vector3;
        // m_hasTarget: System.Boolean;
        // m_isComeBack: System.Boolean;
        // m_delayToStart: System.Single;
        // m_delayAfterReached: System.Single;
        // m_estimatedTime: System.Single;
        // m_speed: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_needSpeed: XLua.DelegateBridge;
        // __Hotfix0_get_needDistance: XLua.DelegateBridge;
        // __Hotfix0_get_estimateRatio: XLua.DelegateBridge;
        // __Hotfix0_get_speed: XLua.DelegateBridge;
        // __Hotfix0_set_speed: XLua.DelegateBridge;
        // __Hotfix0_get_moveType: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0_DoCheckReached: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
        // __Hotfix0_DoCheckReachedInternal: XLua.DelegateBridge;
        // __Hotfix0_GetLerpRatio: XLua.DelegateBridge;
        // __Hotfix0_GetSpeed: XLua.DelegateBridge;
        // __Hotfix0_Comeback: XLua.DelegateBridge;
        // __Hotfix0_CheckStartTick: XLua.DelegateBridge;
      }
      export interface AdvancedMovementWithRandomBodyOffset {
        // _randomRange: UnityEngine.Vector3;
        // m_randomTargetOffset: UnityEngine.Vector3;
        // m_bodyMapPosition: UnityEngine.Vector3;
        // m_bodyDirection: UnityEngine.Vector3;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_isValid: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
      }
      export interface AmiyaDefaultMovement {
        MIN_FULL_HEIGHT: System.Single;
        _startDistance: System.Single;
        _zOffset: System.Single;
        _startDuration: System.Single;
        _time: System.Single;
        // m_velocityN: System.Single;
        // m_remainingTime: System.Single;
        // m_startPhaseFinished: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
      }
      export interface AmiyaS2Movement {
        MIN_FULL_HEIGHT: System.Single;
        _startDistance: System.Single;
        _zOffset: System.Single;
        _startDuration: System.Single;
        _time: System.Single;
        _yAnimateOffset: System.Single;
        _yAnimateSpeed: System.Single;
        // m_velocityN: System.Single;
        // m_remainingTime: System.Single;
        // m_startPhaseFinished: System.Boolean;
        // m_sinOffset: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0__UpdateBodyAnimation: XLua.DelegateBridge;
      }
      export interface AttachToTarget {
        _keepUpdate: System.Boolean;
        _attachToMountPoint: System.Boolean;
        _mountPointType: Torappu.Battle.Entity.MountPointType;
        _checkReached: System.Boolean;
        _delayAfterReached: System.Boolean;
        _delayTime: System.Single;
        _extraDelayTime: System.Single;
        _delayToStart: System.Single;
        _immediatelyReach: System.Boolean;
        _stopIfTargetDead: System.Boolean;
        _stopIfTargetDisappeared: System.Boolean;
        // m_mountPoint: Torappu.Battle.MountPoint;
        // m_delayTime: Torappu.FP;
        // m_delayToStart: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_delayAfterReached: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
        // __Hotfix0__OnBeforeAppearOrDisappear: XLua.DelegateBridge;
        // __Hotfix0_DoCheckReachedInternal: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileStop: XLua.DelegateBridge;
        // __Hotfix0_CheckStartTick: XLua.DelegateBridge;
      }
      export interface BombdMovement {
        _fallingTime: System.Single;
        _fallingSpeed: System.Single;
        // m_fallingTime: System.Single;
        // m_fallingDir: UnityEngine.Vector3;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
      }
      export interface BouncedAdvancedMovement {
        _speedAfterFirstReach: System.Single;
        // m_firstReachFlag: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_DealReached: XLua.DelegateBridge;
        // __Hotfix0_ChangeTraceTarget: XLua.DelegateBridge;
        // __Hotfix0_EndBounce: XLua.DelegateBridge;
        // __Hotfix0_DoCheckReached: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileStop: XLua.DelegateBridge;
      }
      export interface FarthestPointMovement {
        _targetHeightType: Torappu.Battle.Projectiles.FarthestPointMovement.TargetHeightType;
        _useStartDirection: System.Boolean;
        _useTargetDirection: System.Boolean;
        _withinAbilityRange: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_NotUseStartDirection: XLua.DelegateBridge;
        // __Hotfix0_get_NotUseTargetDirection: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
        // __Hotfix0__SetTargetPosAndDirection: XLua.DelegateBridge;
      }
      export interface HarpoonMovement {
        _speed: System.Single;
        _acceleration: System.Single;
        // m_speed: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0__UpdateSpeed: XLua.DelegateBridge;
      }
      export interface NearestHighlandWallBottomMovement {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
        // __Hotfix0__SetTargetPos: XLua.DelegateBridge;
      }
      export interface NetCatcherMovement {
        _speed: System.Single;
        _acceleration: System.Single;
        // m_speed: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0__UpdateSpeed: XLua.DelegateBridge;
        // __Hotfix0__GetAdsorptionPosition: XLua.DelegateBridge;
      }
      export interface ParacurveMovement {
        MIN_FULL_HEIGHT: System.Single;
        DIRECTION_ZERO_TOLERANCE: System.Single;
        TOO_CLOSE_THRESHOLD: System.Single;
        _speed: System.Single;
        _raiseHeight: System.Single;
        _delayAfterReached: System.Boolean;
        _delayTime: System.Single;
        // m_gravity: System.Single;
        // m_velocityN: System.Single;
        // m_reachedTop: System.Boolean;
        // m_delayTime: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
        // __Hotfix0_OnInitPose: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0_DoCheckReachedInternal: XLua.DelegateBridge;
        // __Hotfix0__CalculateNextPosition: XLua.DelegateBridge;
      }
      export namespace BounceHitBehaviour {
      }
      export namespace VortexMultiHitBehaviour {
      }
      export namespace AdvancedMovement {
        export enum MoveType {
          NONE = "NONE",
          TRACE_TARGET_WITH_SPEED = "TRACE_TARGET_WITH_SPEED",
          TRACE_TARGET_WITHIN_TIME = "TRACE_TARGET_WITHIN_TIME",
          TWO_POINTS = "TWO_POINTS",
          FIXED_DIRECTION = "FIXED_DIRECTION",
          FIXED_DISTANCE = "FIXED_DISTANCE",
        }
      }
      export namespace FarthestPointMovement {
        export enum TargetHeightType {
          KEEP_ORIGIN = "KEEP_ORIGIN",
          SAME_AS_SOURCE = "SAME_AS_SOURCE",
          LOWLAND = "LOWLAND",
          HIGHLAND = "HIGHLAND",
        }
      }
    }
    export namespace HarpoonProjectile {
    }
    export namespace LaserProjectile {
    }
    export namespace LassoProjectile {
    }
    export namespace LinkProjectile {
    }
    export namespace NetCatcherProjectile {
    }
    export namespace Projectile {
      export enum Event {
        ON_HIT_OBJECT = "ON_HIT_OBJECT",
        ON_REACHED_TARGET = "ON_REACHED_TARGET",
        ON_HIT_TILE = "ON_HIT_TILE",
        E_NUM = "E_NUM",
      }
      export enum Type {
        NORMAL = "NORMAL",
        ONLY_LOGIC = "ONLY_LOGIC",
        ONLY_GRAPHIC = "ONLY_GRAPHIC",
      }
      export interface Behaviour {
        // <projectile>k__BackingField: Torappu.Battle.Projectile;
        // <behaviourUniqueId>k__BackingField: System.UInt32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_projectile: XLua.DelegateBridge;
        // __Hotfix0_set_projectile: XLua.DelegateBridge;
        // __Hotfix0_get_traceTarget: XLua.DelegateBridge;
        // __Hotfix0_get_source: XLua.DelegateBridge;
        // __Hotfix0_get_currentHitNum: XLua.DelegateBridge;
        // __Hotfix0_get_isStopped: XLua.DelegateBridge;
        // __Hotfix0_get_hasReached: XLua.DelegateBridge;
        // __Hotfix0_get_behavioursInited: XLua.DelegateBridge;
        // __Hotfix0_get_behaviourUniqueId: XLua.DelegateBridge;
        // __Hotfix0_set_behaviourUniqueId: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileBorn: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileStop: XLua.DelegateBridge;
        // __Hotfix0_OnProjectileReached: XLua.DelegateBridge;
        // __Hotfix0_OnHitTarget: XLua.DelegateBridge;
        // __Hotfix0_OnHitTargetLeft: XLua.DelegateBridge;
        // __Hotfix0_OnAttackTimeChanged: XLua.DelegateBridge;
        // __Hotfix0_Stop: XLua.DelegateBridge;
        // __Hotfix0_Reached: XLua.DelegateBridge;
        // __Hotfix0_TouchReached: XLua.DelegateBridge;
        // __Hotfix0_TryClearMainEffectWhenReachedIfNot: XLua.DelegateBridge;
        // __Hotfix0_AssignBodyTransformLocalPos: XLua.DelegateBridge;
      }
      export interface ActionController {
        _detachBuffsWhenTargetLeave: System.Boolean;
        _detachAllBuffsWhenStopped: System.Boolean;
        _onlyAddBuffsToTraceTarget: System.Boolean;
        _extraBuffsInTheEnd: Torappu.BuffData[];
        // m_actionsToAttach: System.Collections.Generic.List<Torappu.Battle.Action.ActionNode>[];
        // m_buffsToAttach: System.Collections.Generic.IList<Torappu.BuffData>;
        // m_attachmentsToAttach: System.Collections.Generic.IList<Torappu.Battle.IAbilityAttachment>;
        // m_attachedBuffsForTargetMap: System.Collections.Generic.Dictionary<Torappu.ObjectPtr<Torappu.Battle.Entity>,System.Collections.Generic.List<System.UInt32>>;
        // <blackboard>k__BackingField: Torappu.Blackboard;
        // <projectile>k__BackingField: Torappu.Battle.Projectile;
      }
      export interface EventToActionPair {
      }
      export interface EventToActionMap {
      }
    }
    export namespace BattleAudioLoader {
    }
    export namespace ResourceCollector {
    }
    export namespace Roguelike {
      export interface RoguelikeInput {
        outerBuffs: System.Collections.Generic.List<Torappu.RoguelikeBuff>;
        relicFeatures: System.Collections.Generic.List<Torappu.RoguelikeRelicFeature>;
        hp: System.Int32;
        chestEnemyCnt: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface RoguelikeBattleManager {
        RELIC_DYNAMIC_ABILITY_KEY: System.String;
        // m_relicClasses: System.Collections.Generic.Dictionary<System.String,System.Type>;
        // m_relics: System.Collections.Generic.List<Torappu.Battle.Roguelike.BasicRelic>;
        // m_playerData: Torappu.Battle.BattlePlayerData;
        // m_attributeAdditions: System.Single[];
        // m_attributeMultipliers: System.Single[];
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_attributeAdditons: XLua.DelegateBridge;
        // __Hotfix0_get_attirbuteMultipliers: XLua.DelegateBridge;
        // __Hotfix0_get_battlePlayerData: XLua.DelegateBridge;
        // __Hotfix0_get_relics: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0__RegisterRelicClasses: XLua.DelegateBridge;
        // __Hotfix0__Register: XLua.DelegateBridge;
        // __Hotfix0__CreateInternal: XLua.DelegateBridge;
        // __Hotfix0__CreateRelic: XLua.DelegateBridge;
        // __Hotfix0__ApplyFinalAttributes: XLua.DelegateBridge;
        // __Hotfix0_PreProcessCharacter: XLua.DelegateBridge;
        // __Hotfix0_PreprocessEnemy: XLua.DelegateBridge;
        // __Hotfix0_PreprocessGlobalBuff: XLua.DelegateBridge;
        // __Hotfix0_PreprocessLevelOptions: XLua.DelegateBridge;
        // __Hotfix0_ContainsCharacterRelic: XLua.DelegateBridge;
      }
      export interface BasicRelic {
        // <data>k__BackingField: Torappu.RoguelikeBuff;
        // <m_roguelikeManager>k__BackingField: Torappu.Battle.Roguelike.RoguelikeBattleManager;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_data: XLua.DelegateBridge;
        // __Hotfix0_set_data: XLua.DelegateBridge;
        // __Hotfix0_get_m_roguelikeManager: XLua.DelegateBridge;
        // __Hotfix0_set_m_roguelikeManager: XLua.DelegateBridge;
        // __Hotfix0_get_blackboard: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_ApplyAdditionsToAttribute: XLua.DelegateBridge;
        // __Hotfix0_ApplyMultipliersToAttribute: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
        // __Hotfix0_DoPreProcess: XLua.DelegateBridge;
        // __Hotfix0_Preprocess: XLua.DelegateBridge;
      }
      export interface BasicCharacterRelic {
        // m_professionCategory: Torappu.ProfessionCategory;
        // m_buildableMask: Torappu.BuildableType;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_relicType: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
        // __Hotfix0__Verify: XLua.DelegateBridge;
        // __Hotfix0_Preprocess: XLua.DelegateBridge;
      }
      export interface BasicEnemyRelic {
        BOSS_KEY: System.String;
        // m_checkIsBoss: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_relicType: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
        // __Hotfix0__Verify: XLua.DelegateBridge;
        // __Hotfix0_Preprocess: XLua.DelegateBridge;
      }
      export namespace BasicRelic {
        export enum RelicType {
          NONE = "NONE",
          LEVEL_OPTIONS = "LEVEL_OPTIONS",
          CHARACTER = "CHARACTER",
          GLOBAL_BUFF = "GLOBAL_BUFF",
          ENEMY = "ENEMY",
        }
        export interface RelicInOut {
          attribute: Torappu.AttributesData;
          character: Torappu.Battle.Character;
          enemyData: Torappu.LevelData.EnemyData;
          globalBuffs: System.Collections.Generic.List<Torappu.LevelData.GlobalBuffData>;
          levelOptions: Torappu.LevelData.Options;
        }
      }
      export namespace Internal {
        export interface BasicLevelRelic {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_relicType: XLua.DelegateBridge;
        }
        export interface LCharacterLimitAdd {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_Preprocess: XLua.DelegateBridge;
        }
        export interface LInitCostAdd {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_Preprocess: XLua.DelegateBridge;
        }
        export interface LMaxLifePointAdd {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_Preprocess: XLua.DelegateBridge;
        }
        export interface CAttributeAdd {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_DoPreProcess: XLua.DelegateBridge;
        }
        export interface CAttributeMul {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_DoPreProcess: XLua.DelegateBridge;
        }
        export interface CDynamicAbilityNew {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_DoPreProcess: XLua.DelegateBridge;
        }
        export interface CSkillCostMul {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_DoPreProcess: XLua.DelegateBridge;
        }
        export interface CSquadAttributeMul {
          // m_cnt: System.Int32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnInit: XLua.DelegateBridge;
          // __Hotfix0_DoPreProcess: XLua.DelegateBridge;
        }
        export interface CSquadAttributeAdd {
          // m_cnt: System.Int32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnInit: XLua.DelegateBridge;
          // __Hotfix0_DoPreProcess: XLua.DelegateBridge;
        }
        export interface EAttributeMul {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_DoPreProcess: XLua.DelegateBridge;
        }
        export interface EAttributeAdd {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_DoPreProcess: XLua.DelegateBridge;
        }
        export interface GBuffNormal {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_relicType: XLua.DelegateBridge;
          // __Hotfix0_Preprocess: XLua.DelegateBridge;
        }
        export interface GBuffStack {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_relicType: XLua.DelegateBridge;
          // __Hotfix0_Preprocess: XLua.DelegateBridge;
        }
        export interface GBuffStackBaseOne {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_relicType: XLua.DelegateBridge;
          // __Hotfix0_Preprocess: XLua.DelegateBridge;
        }
      }
    }
    export namespace Runes {
      export interface Rune {
        // <rData>k__BackingField: Torappu.RuneData;
        // <>f__am$cache0: System.Func<Torappu.FP,Torappu.FP,Torappu.FP>;
        // <>f__am$cache1: System.Func<Torappu.FP,Torappu.FP,Torappu.FP>;
        // <>f__am$cache2: System.Func<System.Single,System.Single,System.Single>;
        // <>f__am$cache3: System.Func<System.Single,System.Single,System.Single>;
      }
      export interface RuneManager {
        RUNE_EXCLUDED_FROM_BATTLE: System.String[];
        RUNE_SQUAD_NUM_LIMIT: System.String;
        RUNE_LEVEL_HIDDEN_GROUP_ENABLE: System.String;
        RUNE_LEVEL_HIDDEN_GROUP_DISABLE: System.String;
        // m_targetMask: Torappu.Battle.Runes.Rune.RuneTarget;
        // m_runeClasses: System.Collections.Generic.Dictionary<System.String,System.Type>;
        // m_runes: Torappu.PriorityQueue<Torappu.Battle.Runes.Rune>;
      }
      export namespace Rune {
        export enum RuneTarget {
          NONE = "NONE",
          LEVEL_OPTIONS = "LEVEL_OPTIONS",
          CHARACTER = "CHARACTER",
          ENEMY = "ENEMY",
          LEVEL_DATA = "LEVEL_DATA",
          MAP = "MAP",
        }
        export interface Priorities {
          LOW: System.Int32;
          DEFAULT: System.Int32;
          HIGH: System.Int32;
        }
        export interface CharacterInOut {
          attributes: Torappu.AttributesData;
          excludedFromBattle: System.Boolean;
        }
        export interface RuneLevelExtraOutput {
          globalBuffs: System.Collections.Generic.List<Torappu.LevelData.GlobalBuffData>;
          extraDisableLocations: System.Collections.Generic.List<Torappu.GridPosition>;
          enabledHiddenGroups: System.Collections.Generic.List<System.String>;
          disabledHiddenGroups: System.Collections.Generic.List<System.String>;
        }
      }
      export namespace Internal {
        export interface BasicLevelRune {
        }
        export interface LInitCostAdd {
        }
        export interface LCostIncreaseTimeMul {
        }
        export interface LMaxLifePointSet {
        }
        export interface LCharacterLimitAdd {
        }
        export interface LForbidLocation {
        }
        export interface LGlobalBuffNew {
        }
        export interface LGlobalBuffMul {
        }
        export interface LGlobalBuffAdd {
        }
        export interface LHiddenGroupEnable {
        }
        export interface LHiddenGroupDisable {
        }
        export interface LPredefinesInstEnable {
        }
        export interface LEnemyKeyReplace {
        }
        export interface BasicCharacterRune {
        }
        export interface CAttributesMul {
        }
        export interface CAttributesAdd {
        }
        export interface CCostMul {
        }
        export interface CCostAdd {
        }
        export interface CRespawnTimeMul {
        }
        export interface CRespawnTimeAdd {
        }
        export interface CExcludedFromBattle {
        }
        export interface CDeckCardNumLimit {
          // m_visitCounter: System.Int32;
          // m_limitNum: System.Int32;
        }
        export interface CTokenInitialCntAdd {
        }
        export interface CSkillCdMul {
        }
        export interface CSkillCdAdd {
        }
        export interface CSkillBlackboardAdd {
        }
        export interface CSkillBlackboardMul {
        }
        export interface CBlockCntAdd {
        }
        export interface BasicEnemyRune {
        }
        export interface BasicEnemySkillRune {
        }
        export interface EAttribuesMul {
        }
        export interface EAttribuesAdd {
        }
        export interface EAttackRangeMul {
        }
        export interface EMassLevelAdd {
        }
        export interface ETalentBlackboardMul {
        }
        export interface ETalentBlackboardAdd {
        }
        export interface EDynamicAbilityNew {
        }
        export interface ESkillRangeMul {
        }
        export interface ESkillCdMul {
        }
        export interface ESkillInitCdMul {
        }
        export interface ESkillInitCdAdd {
        }
        export interface ESkillBlackboardMul {
        }
        export interface ESkillBlackboardAdd {
        }
        export interface BasicMapRune {
          // m_locationList: System.Collections.Generic.List<Torappu.GridPosition>;
        }
        export interface MTileBlackboardMul {
        }
        export interface MTileBlackboardAdd {
        }
      }
    }
    export namespace Scheduler {
      export interface SchedulerSnapshot {
        waveStartTime: Torappu.FP;
        fragmentStartTime: Torappu.FP;
        actionStartTime: System.Single;
      }
      export interface ActionItem {
        data: Torappu.LevelData.WaveData.FragmentData.ActionData;
        timeOffset: System.Single;
      }
      export interface EnemyItem {
        data: Torappu.LevelData.EnemyData;
        handbook: Torappu.EnemyHandBookData;
        delayToBorn: System.Single;
      }
      export interface BranchRuntime {
        data: Torappu.LevelData.BranchData;
        cursor: System.Int32;
      }
      export interface SchedulerPreprocessor {
        // m_skipListDict: Torappu.ListDict<System.String,System.Collections.Generic.List<System.Int32>>;
        // m_deleteIndexList: System.Collections.Generic.List<System.Int32>;
        // m_actionListPickFrom: System.Collections.Generic.List<Torappu.LevelData.WaveData.FragmentData.ActionData>;
      }
    }
    export namespace BasicSkill {
      export interface Behaviour {
        // <skill>k__BackingField: Torappu.Battle.BasicSkill;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_skill: XLua.DelegateBridge;
        // __Hotfix0_set_skill: XLua.DelegateBridge;
        // __Hotfix0_get_owner: XLua.DelegateBridge;
        // __Hotfix0_get_blackboard: XLua.DelegateBridge;
        // __Hotfix0_get_data: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_AssignData: XLua.DelegateBridge;
        // __Hotfix0_OnCastSucceed: XLua.DelegateBridge;
        // __Hotfix0_PostprocessData: XLua.DelegateBridge;
        // __Hotfix0_OnSkillStart: XLua.DelegateBridge;
        // __Hotfix0_OnSkillEnd: XLua.DelegateBridge;
      }
    }
    export namespace Skills {
      export interface BuffAfterSkill {
        _buffs: Torappu.BuffData[];
        // m_waitForSkillEnd: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnSkillStart: XLua.DelegateBridge;
        // __Hotfix0_OnSkillEnd: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
        // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
      }
      export interface BuffDuringSkill {
        _buffs: Torappu.BuffData[];
        // m_buffUid: System.Collections.Generic.List<System.UInt32>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnSkillStart: XLua.DelegateBridge;
        // __Hotfix0_OnSkillEnd: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
        // __Hotfix0_GatherBuffs: XLua.DelegateBridge;
        // __Hotfix0__ClearBuffs: XLua.DelegateBridge;
      }
      export interface SkillSubTalents {
        // m_talents: Torappu.Battle.ConstrainedTalent[];
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_PostprocessData: XLua.DelegateBridge;
        // __Hotfix0_OnSkillStart: XLua.DelegateBridge;
        // __Hotfix0_OnSkillEnd: XLua.DelegateBridge;
        // __Hotfix0__AssignSubTalents: XLua.DelegateBridge;
        // __Hotfix0__ActivateSubTalent: XLua.DelegateBridge;
        // __Hotfix0__InactivateSubTalent: XLua.DelegateBridge;
        // __Hotfix0_Awake: XLua.DelegateBridge;
      }
      export interface SpScaleAfterSkillCast {
        _spScale: System.Int32;
        // m_spScaleCnt: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_AssignData: XLua.DelegateBridge;
        // __Hotfix0_OnCastSucceed: XLua.DelegateBridge;
        // __Hotfix0__ScaleSpCost: XLua.DelegateBridge;
      }
    }
    export namespace CharacterAudioHooker {
      export interface ReplacePair {
        fromSignal: System.String;
        fromSubsignal: System.String;
        toSignal: System.String;
        toSubSignal: System.String;
      }
    }
    export namespace DeckBuffTalent {
      export interface Options {
        selector: Torappu.Battle.DeckSelector;
        minCntToTrig: System.Int32;
      }
      export interface DeckBuffModifier {
        // m_deckBuffs: System.Collections.Generic.IList<Torappu.Battle.DeckBuff>;
        // m_options: Torappu.Battle.DeckBuffTalent.Options;
        // m_isTriggered: System.Boolean;
      }
    }
    export namespace DecklikeRuntimeCostTalent {
      export interface Options {
        selector: Torappu.Battle.DeckSelector;
        minCntToTrig: System.Int32;
      }
      export interface DecklikeRuntimeCostModifier {
        // m_sourceCard: Torappu.Battle.Deck.Card;
        // m_costDelta: System.Int32;
        // m_options: Torappu.Battle.DecklikeRuntimeCostTalent.Options;
        // m_isTriggered: System.Boolean;
      }
    }
    export namespace DeckTalentToAddCardCost {
      export interface DeckModifierToAddCardCost {
        // m_selector: Torappu.Battle.DeckSelector;
        // m_cost: System.Int32;
      }
    }
    export namespace DeckTalentToAddMaxCost {
      export interface DeckModifierToAddMaxCost {
        // m_cost: System.Int32;
      }
    }
    export namespace DeckTalentToModifyHealScaleByCost {
      export interface DeckModifierToModifyHealScaleByCost {
        // m_deckBuffs: System.Collections.Generic.IList<Torappu.Battle.DeckBuff>;
        // m_maxCost: System.Int32;
      }
    }
    export namespace DeckTalentToModifyRespawnMaxMultiplier {
      export interface DeckModifierToModifyRespawnMaxMultiplier {
        // m_selector: Torappu.Battle.DeckSelector;
        // m_maxMultiplier: Torappu.FP;
      }
    }
    export namespace RebornTalent {
      export interface AdvancedRebornData {
        modeIndex: System.Int32;
        buffs: Torappu.BuffData[];
        effects: System.String[];
        handleAbilityName: System.String;
        hpRechargeRatio: System.Single;
        useMinHpRatio: System.Boolean;
        buffsRetainedWhenReborn: System.Collections.Generic.List<System.String>;
      }
    }
    export namespace TraitTalent {
      export interface TraitModifier {
        type: Torappu.Battle.TraitTalent.TraitModifier.Type;
        key: System.String;
      }
      export namespace TraitModifier {
        export enum Type {
          ADDITION = "ADDITION",
          MULTIPLIER = "MULTIPLIER",
        }
      }
    }
    export namespace PhysicsRange {
      export interface BoxColliderData {
        // size: UnityEngine.Vector2;
        // offset: UnityEngine.Vector2;
      }
    }
    export namespace Range {
      export interface Options {
        rangeId: System.String;
        // rangeRadius: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
        // initialExtend: CodeStage.AntiCheat.ObscuredTypes.ObscuredInt;
      }
    }
    export namespace FilterUtil {
      export interface FilterFunc {
      }
      export interface FilterFuncWithPriorWeight {
      }
      export interface FilterFuncWithVolumne {
      }
      export interface FilterFuncWithTile {
      }
      export enum FilterType {
        ALL = "ALL",
        DIST_TO_EXIT_ASC = "DIST_TO_EXIT_ASC",
        HP_RATIO_ASC = "HP_RATIO_ASC",
        HP_RATIO_NOT_FULL_ASC = "HP_RATIO_NOT_FULL_ASC",
        HATRED_DES = "HATRED_DES",
        HP_RATIO_NOT_FULL = "HP_RATIO_NOT_FULL",
        HATRED_DES_FLY_FIRST = "HATRED_DES_FLY_FIRST",
        HATRED_DES_RANGED_FIRST = "HATRED_DES_RANGED_FIRST",
        DEF_DES = "DEF_DES",
        DEF_ASC = "DEF_ASC",
        DIST_TO_SOURCE_DES = "DIST_TO_SOURCE_DES",
        DIST_TO_SOURCE_ASC = "DIST_TO_SOURCE_ASC",
        NOT_STUNNED_HATRED_DES = "NOT_STUNNED_HATRED_DES",
        DIRECTIONAL_DIST_TO_SOURCE_ASC = "DIRECTIONAL_DIST_TO_SOURCE_ASC",
        RANDOM = "RANDOM",
        HP_DES = "HP_DES",
        HP_ASC = "HP_ASC",
        ATK_DES = "ATK_DES",
        ATK_ASC = "ATK_ASC",
        MAX_HP_DES = "MAX_HP_DES",
        MAX_HP_ASC = "MAX_HP_ASC",
        HAAK_ONLY_FORWARD_FIRST_MANHATTAN_ASC = "HAAK_ONLY_FORWARD_FIRST_MANHATTAN_ASC",
        HATRED_DES_UNBLOCKED_FIRST = "HATRED_DES_UNBLOCKED_FIRST",
        HP_NOT_FULL_RANDOM = "HP_NOT_FULL_RANDOM",
        HATRED_DES_INVISIBLE_FIRST = "HATRED_DES_INVISIBLE_FIRST",
        HATRED_DES_DIST_FARTHER_FIRST = "HATRED_DES_DIST_FARTHER_FIRST",
        HATRED_DES_DIST_NEARER_FIRST = "HATRED_DES_DIST_NEARER_FIRST",
        MASS_DES = "MASS_DES",
        MASS_ASC = "MASS_ASC",
        HATRED_DES_SLEEPING_FIRST = "HATRED_DES_SLEEPING_FIRST",
        HP_RATIO_ASC_CONTAINS_STATUS_RESISTABLE_BUFF_FIRST = "HP_RATIO_ASC_CONTAINS_STATUS_RESISTABLE_BUFF_FIRST",
        HATRED_DES_IMMUNE_SLEEPING_EXCLUDE = "HATRED_DES_IMMUNE_SLEEPING_EXCLUDE",
        EP_DES = "EP_DES",
        HATRED_DES_BLOCKED_FIRST = "HATRED_DES_BLOCKED_FIRST",
        CREATED_TIME_DES = "CREATED_TIME_DES",
        CREATED_TIME_ASC = "CREATED_TIME_ASC",
        HP_RATIO_NOT_FULL_ASC_MY_TOKEN_OR_ME_FIRST = "HP_RATIO_NOT_FULL_ASC_MY_TOKEN_OR_ME_FIRST",
      }
      export interface WeightedTarget<T> {
        // s_curSmallEnoughGap: Torappu.FP;
        weight: Torappu.FP;
        priorWeight: Torappu.FP;
        target: T;
        volume: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // _c__Hotfix1_ctor: XLua.DelegateBridge;
        // _c__Hotfix2_ctor: XLua.DelegateBridge;
        // _c__Hotfix3_ctor: XLua.DelegateBridge;
        // __Hotfix0_CompareTo: XLua.DelegateBridge;
      }
    }
    export namespace NearestRangeSelector {
    }
    export namespace SecondaryFilterAdvancedSelector {
      export enum SecondaryFilterType {
        FLY_FIRST = "FLY_FIRST",
        RANGED_APPLYWAY_FIRST = "RANGED_APPLYWAY_FIRST",
        SPECIFIED_FILTER_TAG = "SPECIFIED_FILTER_TAG",
        SPECIFIED_BUFF = "SPECIFIED_BUFF",
        SPECIFIED_BUFF_PAIR_OR = "SPECIFIED_BUFF_PAIR_OR",
      }
      export interface BuffKeyPair {
        ownerBuffKey: System.String;
        targetBuffKey: System.String;
      }
    }
    export namespace SecondaryFilterExAdvancedSelector {
      export enum SecondaryFilterExType {
        INSERT_THE_LAST_AT_FRONT = "INSERT_THE_LAST_AT_FRONT",
      }
    }
    export namespace EmpgrdTalentSelector {
    }
    export namespace TileSelector {
      export enum FilterType {
        ALL = "ALL",
        ONLY_CHARACTER = "ONLY_CHARACTER",
        EXCEPT_CHARACTER = "EXCEPT_CHARACTER",
        BETTER_CHARACTER = "BETTER_CHARACTER",
        ONLY_ENEMY = "ONLY_ENEMY",
        EXCEPT_ENEMY = "EXCEPT_ENEMY",
        BETTER_ENEMY = "BETTER_ENEMY",
        BETTER_ENEMY_WITH_COLLIDER = "BETTER_ENEMY_WITH_COLLIDER",
        ONLY_CERTAIN_TILE_KEY = "ONLY_CERTAIN_TILE_KEY",
        SURROUND_RALLY_POINT = "SURROUND_RALLY_POINT",
      }
      export interface Options {
        buildableType: Torappu.BuildableType;
        allowNoneBuildableType: System.Boolean;
        passableMask: Torappu.MotionMask;
        allowNonePassableMask: System.Boolean;
      }
    }
    export namespace AttributeTargetValidator {
      export interface AttributeCondition {
        attributeType: Torappu.AttributeType;
        compareType: Torappu.CompareType;
        requiredValue: System.Single;
      }
    }
    export namespace Character {
      export enum UseIdForAudioSignalMask {
        NONE = "NONE",
        ON_UNIT_BORN = "ON_UNIT_BORN",
        ON_UNIT_DEAD = "ON_UNIT_DEAD",
      }
      export interface States {
      }
      export interface IReplacement {
      }
      export interface BlockedEnemyManager {
        // m_totalVolume: System.Int32;
        // m_blockedEnemies: System.Collections.Generic.List<Torappu.Battle.Enemy>;
      }
      export namespace States {
        export enum State {
          DEFAULT = "DEFAULT",
          IDLE = "IDLE",
          ATTACK = "ATTACK",
          COMBAT = "COMBAT",
          SKILL = "SKILL",
          STUN = "STUN",
          DEAD = "DEAD",
          BORN = "BORN",
          DISAPPEAR = "DISAPPEAR",
          FROZEN = "FROZEN",
          TERMINAL = "TERMINAL",
        }
        export interface Blackboard {
          // <owner>k__BackingField: Torappu.Battle.Character;
        }
        export interface BasicState {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
        }
        export interface BornState {
          // m_remainingTime: Torappu.FP;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnTick: XLua.DelegateBridge;
          // __Hotfix0_OnExit: XLua.DelegateBridge;
          // __Hotfix0__OnLocate: XLua.DelegateBridge;
        }
        export interface IdleState {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnTick: XLua.DelegateBridge;
        }
        export interface CombatState {
          // m_nextEscapeTime: Torappu.FP;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnTick: XLua.DelegateBridge;
          // __Hotfix0_OnExit: XLua.DelegateBridge;
          // __Hotfix0__NextCombatOrExit: XLua.DelegateBridge;
          // __Hotfix0__StartAttack: XLua.DelegateBridge;
          // __Hotfix0__FetchTarget: XLua.DelegateBridge;
          // __Hotfix0__GetTarget: XLua.DelegateBridge;
        }
        export interface DeadState {
          // m_tween: DG.Tweening.Tween;
          // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
          // <>f__am$cache1: DG.Tweening.Core.DOSetter<System.Single>;
          // <>f__am$cache2: DG.Tweening.Core.DOGetter<System.Single>;
          // <>f__am$cache3: DG.Tweening.Core.DOGetter<System.Single>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnExit: XLua.DelegateBridge;
          // __Hotfix0_CheckSwitchOut: XLua.DelegateBridge;
          // __Hotfix0__PlayAnimation: XLua.DelegateBridge;
        }
        export interface AttackState {
          // m_nextEscapeTime: Torappu.FP;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnTick: XLua.DelegateBridge;
          // __Hotfix0_OnExit: XLua.DelegateBridge;
          // __Hotfix0__NextAttackOrExit: XLua.DelegateBridge;
          // __Hotfix0__StartAttack: XLua.DelegateBridge;
          // __Hotfix0__GetTarget: XLua.DelegateBridge;
          // __Hotfix0__CheckSwitchToCombat: XLua.DelegateBridge;
        }
        export interface SkillState {
          // m_remainingEscapeTime: Torappu.FP;
          // m_coroutine: Torappu.Battle.CoroutineId;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnTick: XLua.DelegateBridge;
          // __Hotfix0_OnExit: XLua.DelegateBridge;
          // __Hotfix0__StartSkill: XLua.DelegateBridge;
          // __Hotfix0__PlayBeginAnimation: XLua.DelegateBridge;
          // __Hotfix0__DoStartSkill: XLua.DelegateBridge;
        }
        export interface StunState {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnTick: XLua.DelegateBridge;
          // __Hotfix0_OnExit: XLua.DelegateBridge;
          // __Hotfix0_CheckSwitchOut: XLua.DelegateBridge;
        }
        export interface DisappearState {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnTick: XLua.DelegateBridge;
        }
        export interface FreezeState {
          animatorState: Torappu.Battle.UnitAnimator.CurrentAniState;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_attributeMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalFlagMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalImmuneMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalAntiMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalComboMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalComboImmuneMask: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnTick: XLua.DelegateBridge;
          // __Hotfix0_OnExit: XLua.DelegateBridge;
          // __Hotfix0_CheckSwitchOut: XLua.DelegateBridge;
          // __Hotfix0_GetValue: XLua.DelegateBridge;
        }
        export namespace DeadState {
        }
        export namespace SkillState {
        }
      }
    }
    export namespace Enemy {
      export interface Options {
        unharmful: System.Boolean;
        alwaysCountAsKilled: System.Boolean;
        dontCountAsFinished: System.Boolean;
        spawnedCnt: System.UInt32;
        isSummon: System.Boolean;
      }
      export interface States {
      }
      export interface AttackWrapper {
        // m_enemy: Torappu.Battle.Enemy;
        // m_curTarget: Torappu.Battle.Entity;
        // m_curSkill: Torappu.Battle.EnemySkill;
        // m_curAbility: Torappu.Battle.Ability;
        // m_lastAbility: Torappu.Battle.Ability;
      }
      export interface CombatWrapper {
        // m_enemy: Torappu.Battle.Enemy;
        // m_lastAbility: Torappu.Battle.Ability;
      }
      export interface SpecialBlockCondition {
        _type: Torappu.Battle.Enemy.SpecialBlockCondition.Type;
        _buffKeyPairs: Torappu.Battle.Enemy.SpecialBlockCondition.BuffKeyPair[];
      }
      export namespace States {
        export enum State {
          DEFAULT = "DEFAULT",
          MOVE = "MOVE",
          ATTACK = "ATTACK",
          COMBAT = "COMBAT",
          STUN = "STUN",
          DEAD = "DEAD",
          BORN = "BORN",
          REACH_EXIT = "REACH_EXIT",
          REBORN = "REBORN",
          UNBALANCE = "UNBALANCE",
          FALLDOWN = "FALLDOWN",
          DISAPPEAR = "DISAPPEAR",
          BLINK = "BLINK",
          TERMINAL = "TERMINAL",
        }
        export interface Blackboard {
          isHanging: System.Boolean;
          // m_unbalanceProtectDueTime: Torappu.FP;
          // m_blinkDistance: System.Single;
          // m_blinkHideTime: System.Single;
          // m_blinkUseAnimTime: System.Boolean;
          // <owner>k__BackingField: Torappu.Battle.Enemy;
        }
        export interface EnemyStateMachine {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnTick: XLua.DelegateBridge;
        }
        export interface BasicState {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
        }
        export interface BornState {
          BORN_ANIMATION_TIME: System.Single;
          // m_remainingTime: Torappu.FP;
          // m_effect: Torappu.ObjectPtr<Torappu.Battle.Effects.Effect>;
          // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnExit: XLua.DelegateBridge;
          // __Hotfix0_OnTick: XLua.DelegateBridge;
          // __Hotfix0__PlayAnimation: XLua.DelegateBridge;
        }
        export interface MoveState {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_isHanging: XLua.DelegateBridge;
          // __Hotfix0_set_isHanging: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnExit: XLua.DelegateBridge;
          // __Hotfix0_OnTick: XLua.DelegateBridge;
          // __Hotfix0_UpdateMoveAnimation: XLua.DelegateBridge;
        }
        export interface AttackState {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnTick: XLua.DelegateBridge;
          // __Hotfix0_OnExit: XLua.DelegateBridge;
        }
        export interface DeadState {
          // m_tween: DG.Tweening.Tween;
          // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
          // <>f__am$cache1: DG.Tweening.Core.DOSetter<System.Single>;
          // <>f__am$cache2: DG.Tweening.Core.DOGetter<System.Single>;
          // <>f__am$cache3: DG.Tweening.Core.DOGetter<System.Single>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnExit: XLua.DelegateBridge;
          // __Hotfix0_CheckSwitchOut: XLua.DelegateBridge;
          // __Hotfix0__PlayAnimation: XLua.DelegateBridge;
        }
        export interface ReachExitState {
          // m_tween: DG.Tweening.Tween;
          // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
          // <>f__am$cache1: DG.Tweening.Core.DOGetter<System.Single>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnExit: XLua.DelegateBridge;
          // __Hotfix0_CheckSwitchOut: XLua.DelegateBridge;
          // __Hotfix0__PlayAnimation: XLua.DelegateBridge;
        }
        export interface CombatState {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnTick: XLua.DelegateBridge;
          // __Hotfix0_OnExit: XLua.DelegateBridge;
        }
        export interface StunState {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnTick: XLua.DelegateBridge;
          // __Hotfix0_CheckSwitchOut: XLua.DelegateBridge;
        }
        export interface UnbalanceState {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_attributeMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalFlagMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalImmuneMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalAntiMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalComboMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalComboImmuneMask: XLua.DelegateBridge;
          // __Hotfix0_GetValue: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnExit: XLua.DelegateBridge;
          // __Hotfix0_OnTick: XLua.DelegateBridge;
          // __Hotfix0__UpdateFriction: XLua.DelegateBridge;
          // __Hotfix0__UpdatePullSources: XLua.DelegateBridge;
        }
        export interface FallDownState {
          FALLDOWN_TIME: System.Single;
          FALLDOWN_HEIGHT_OFFSET: System.Single;
          FALLDOWN_SHRINK_SCALE: System.Single;
          // m_tween: DG.Tweening.Tween;
          // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
          // <>f__am$cache1: DG.Tweening.Core.DOGetter<System.Single>;
          // <>f__am$cache2: DG.Tweening.Core.DOGetter<System.Single>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnExit: XLua.DelegateBridge;
          // __Hotfix0_CheckSwitchOut: XLua.DelegateBridge;
          // __Hotfix0__PlayAnimation: XLua.DelegateBridge;
        }
        export interface DisappearState {
          DISAPPEAR_TIME: System.Single;
          APPEAR_TIME: System.Single;
          // m_coroutine: Torappu.Battle.CoroutineId;
          // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
          // <>f__am$cache1: DG.Tweening.Core.DOGetter<System.Single>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_attributeMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalFlagMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalImmuneMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalAntiMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalComboMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalComboImmuneMask: XLua.DelegateBridge;
          // __Hotfix0_GetValue: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnExit: XLua.DelegateBridge;
          // __Hotfix0_OnTick: XLua.DelegateBridge;
          // __Hotfix0__DoDisappear: XLua.DelegateBridge;
          // __Hotfix0__DoAppear: XLua.DelegateBridge;
        }
        export interface BlinkState {
          BLINK_BEGIN_TIME: System.Single;
          BLINK_END_TIME: System.Single;
          // m_coroutine: Torappu.Battle.CoroutineId;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_attributeMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalFlagMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalImmuneMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalAntiMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalComboMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalComboImmuneMask: XLua.DelegateBridge;
          // __Hotfix0_GetValue: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnExit: XLua.DelegateBridge;
          // __Hotfix0_CheckSwitchOut: XLua.DelegateBridge;
          // __Hotfix0__PlayAnimation: XLua.DelegateBridge;
        }
        export interface RebornState {
          // m_remainingTime: Torappu.FP;
          // m_data: Torappu.Battle.Unit.RebornData;
          // m_tween: Torappu.ITweenHandler;
          // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_attributeMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalFlagMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalImmuneMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalAntiMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalComboMask: XLua.DelegateBridge;
          // __Hotfix0_get_abnormalComboImmuneMask: XLua.DelegateBridge;
          // __Hotfix0_GetValue: XLua.DelegateBridge;
          // __Hotfix0_OnEnter: XLua.DelegateBridge;
          // __Hotfix0_OnTick: XLua.DelegateBridge;
          // __Hotfix0_OnExit: XLua.DelegateBridge;
          // __Hotfix0_CheckSwitchOut: XLua.DelegateBridge;
          // __Hotfix0__PlayAnimation: XLua.DelegateBridge;
        }
        export namespace BornState {
        }
        export namespace DeadState {
        }
        export namespace ReachExitState {
        }
        export namespace FallDownState {
        }
        export namespace DisappearState {
        }
        export namespace BlinkState {
        }
      }
      export namespace SpecialBlockCondition {
        export enum Type {
          NONE = "NONE",
          BUFF_KEY_PAIR_OR = "BUFF_KEY_PAIR_OR",
        }
        export interface BuffKeyPair {
          blockerBuffKey: System.String;
          blockeeBuffKey: System.String;
        }
      }
    }
    export namespace MapDependentTrap {
      export interface SkinEntry {
        theme: System.String;
        skinKey: System.String;
      }
    }
    export namespace Unit {
      export interface RebornData {
        modeIndex: System.Int32;
        rebornTime: Torappu.FP;
        hpRatio: Torappu.FP;
        buffs: Torappu.BuffData[];
        blackboard: Torappu.Blackboard;
        effects: System.String[];
        hpRechargeRatio: Torappu.FP;
        buffsRetainedWhenReborn: System.Collections.Generic.List<System.String>;
      }
    }
    export namespace UnitDataFlowConfig {
      export enum ModifyType {
        ASSIGN = "ASSIGN",
        ADDITION = "ADDITION",
        MULTIPLIER = "MULTIPLIER",
        SCALE_TO_ONE = "SCALE_TO_ONE",
      }
      export enum DataType {
        TALENT = "TALENT",
        SKILL = "SKILL",
        TRAIT = "TRAIT",
        ATTACK = "ATTACK",
      }
      export interface Modifier {
        target: Torappu.Battle.UnitDataFlowConfig.DataType;
        targetKey: System.String;
        modifyValue: System.Single;
        modifyType: Torappu.Battle.UnitDataFlowConfig.ModifyType;
        rangeId: System.String;
        NULL: Torappu.Battle.UnitDataFlowConfig.Modifier;
      }
      export interface Delta {
        blackboard: Torappu.Blackboard;
        rangeId: System.String;
        NULL: Torappu.Battle.UnitDataFlowConfig.Delta;
      }
      export interface ModifierConfig {
        _source: Torappu.Battle.UnitDataFlowConfig.DataType;
        _talentKey: System.String;
        _target: Torappu.Battle.UnitDataFlowConfig.DataType;
        _type: Torappu.Battle.UnitDataFlowConfig.ModifyType;
        _sourceKey: System.String;
        _targetKey: System.String;
        _overrideRangeId: System.Boolean;
      }
    }
    export namespace DevelopTools {
      export interface BatchLevelBaker {
        BAKER_SCENE_PATH: System.String;
        _outputFolder: System.String;
        _levelGroups: System.Collections.Generic.List<Torappu.Battle.DevelopTools.BatchLevelBaker.LevelGroup>;
      }
      export interface CurrentSceneBaker {
        _outputFolder: System.String;
        _name: System.String;
      }
      export interface DebugLevelBaker {
        _levelId: System.String;
        _graphicPrefab: Torappu.Battle.MapGraphic;
        // _levelJson: UnityEngine.TextAsset;
      }
      export interface LevelBaker {
        // _skyboxes: UnityEngine.Material[];
      }
      export interface SpineReplacer {
        // _skeleton: Spine.Unity.SkeletonAnimation;
      }
      export interface TestMoveController {
        _moveSpeed: System.Single;
      }
      export interface AudioEmitterLog {
        // _numText: UnityEngine.UI.Text;
        // m_startTime: System.Single;
      }
      export interface AudioEmitterLogPanel {
        _sourceTypeToggles: Torappu.Battle.DevelopTools.AudioEmitterLogPanel.SourceTypeToggle[];
        _logTypeToggles: Torappu.Battle.DevelopTools.AudioEmitterLogPanel.LogTypeToggle[];
        _logTypeColorButtons: System.Collections.Generic.List<Torappu.Battle.DevelopTools.AudioEmitterLogPanel.LogTypeButton>;
        // _mainSwitchToggle: UnityEngine.UI.Toggle;
        // _includeFilterToggle: UnityEngine.UI.Toggle;
        // _includeDuplicateToggle: UnityEngine.UI.Toggle;
        // _simpleEventNameToggle: UnityEngine.UI.Toggle;
        // _fixedLengthInput: UnityEngine.UI.InputField;
        // _filterLogNumInput: UnityEngine.UI.InputField;
        // _filterInput: UnityEngine.UI.InputField;
        // _filterFixedLengthInput: UnityEngine.UI.InputField;
        // _durationSlider: UnityEngine.UI.Slider;
        // _fontSizeSlider: UnityEngine.UI.Slider;
        // _consoleOutput: UnityEngine.UI.InputField;
        _colorTemplate: Torappu.Battle.DevelopTools.ColorTemplate;
        // _emitterLogFolder: UnityEngine.Transform;
        // m_currentSelectedLogType: Torappu.Battle.DevelopTools.AudioEmitterLog.LogType;
      }
      export interface AudioEmitterLogSetting {
      }
      export interface BattleDebugController {
        // _debugPanelPrefab: UnityEngine.GameObject;
      }
      export interface ColorTemplate {
        // _rSlider: UnityEngine.UI.Slider;
        // _gSlider: UnityEngine.UI.Slider;
        // _bSlider: UnityEngine.UI.Slider;
        // _colorShow: UnityEngine.UI.Image;
        // m_callback: System.Action<UnityEngine.Color>;
      }
      export interface PanelTemplate {
        // switchKeyCode: UnityEngine.KeyCode;
        // turnPageKeyCode: UnityEngine.KeyCode;
        // highlight: UnityEngine.Color;
        // _panels: UnityEngine.RectTransform;
        // _panelShow: UnityEngine.RectTransform;
        // _pages: UnityEngine.Transform;
        // _lastPage: UnityEngine.UI.Image;
        // m_turnTime: System.Single;
        // m_currentPage: System.Int32;
        // m_tween: DG.Tweening.Tween;
        // m_scaleSpeed: System.Single;
        // m_nextScale: UnityEngine.Vector3;
        // m_scrollWheel: System.Single;
        // m_isPointEnter: System.Boolean;
        // m_lastPointerPos: UnityEngine.Vector3;
        // m_isPointPressed: System.Boolean;
      }
      export interface ToolsGroupAttribute {
      }
      export namespace BatchLevelBaker {
        export interface LevelPair {
          enabled: System.Boolean;
          levelId: System.String;
          graphic: Torappu.Battle.MapGraphic;
        }
        export interface LevelGroup {
          enabled: System.Boolean;
          name: System.String;
          levels: System.Collections.Generic.List<Torappu.Battle.DevelopTools.BatchLevelBaker.LevelPair>;
        }
      }
      export namespace MapEditor {
        export interface GizmosHelper {
        }
        export interface MapEditor {
          _factory: Torappu.Battle.BattleFactory;
          _mapId: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
        }
      }
      export namespace Tester {
        export interface AttributesCalculator {
          _characterDB: Torappu.CharacterDB;
          _characterInst: Torappu.CharacterInst.Metadata;
          _characterAttributes: Torappu.AttributesData;
        }
        export interface BattleLineupRecorder {
          // _lineupFile: UnityEngine.TextAsset;
        }
        export interface BattleReplayLoader {
          _replaySettings: Torappu.Battle.DevelopTools.Tester.BattleReplaySettings;
          _collector: Torappu.Battle.ResourceCollector;
          _replayFile: System.String;
          // m_loading: System.Boolean;
          // m_startLoadingTime: System.Single;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0__PrintBattleLog: XLua.DelegateBridge;
          // __Hotfix0__TryGetBattleLog: XLua.DelegateBridge;
          // __Hotfix0__DoLoad: XLua.DelegateBridge;
          // __Hotfix0_OnGUI: XLua.DelegateBridge;
          // __Hotfix0_Start: XLua.DelegateBridge;
        }
        export interface BattleReplaySettings {
          // _runeTableJson: UnityEngine.TextAsset;
        }
        export interface DevLevelLauncher {
          _dataSource: Torappu.Battle.DevelopTools.Tester.DevLevelLauncher.DataSource;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_LoadLevelData: XLua.DelegateBridge;
        }
        export interface TestBattleLoader {
          _useSpecificScene: System.Boolean;
          _nextScene: System.String;
          _levelId: System.String;
          _externalSquadConfig: System.String;
          _collector: Torappu.Battle.ResourceCollector;
          _slots: Torappu.CharacterInst[];
          _isHard: System.Boolean;
          // m_loading: System.Boolean;
          // m_startLoadingTime: System.Single;
          // m_configs: System.Collections.Generic.List<Torappu.ObjectPool.PoolManager.ObjectConfig>;
          // m_resourceSet: System.Collections.Generic.HashSet<System.String>;
          // m_oldLevel: System.String;
          // m_displayedLevel: System.Collections.Generic.List<System.String>;
          _levelJsonsPaths: System.String[];
          _squadJsonsPaths: System.String[];
          // _packedLevelsAndSquadsJson: UnityEngine.TextAsset;
          // m_packedLevelsAndSquads: Torappu.Battle.DevelopTools.Tester.TestBattleLoader.LevelAndJsonPack;
          // m_levelScrollPosition: UnityEngine.Vector2;
          // m_squadScrollPosition: UnityEngine.Vector2;
          // m_selectedSquadPath: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_useSpecificScene: XLua.DelegateBridge;
          // __Hotfix0__DoLoad: XLua.DelegateBridge;
          // __Hotfix0_OnGUI: XLua.DelegateBridge;
          // __Hotfix0_Start: XLua.DelegateBridge;
        }
        export namespace BattleLineupRecorder {
          export interface CharacterSpec {
            key: System.String;
            position: Torappu.GridPosition;
            direction: Torappu.SharedConsts.Direction;
          }
        }
        export namespace BattleReplayLoader {
        }
        export namespace DevLevelLauncher {
          export enum DataSource {
            DEFAULT = "DEFAULT",
            FROM_BATTLE_INOUT = "FROM_BATTLE_INOUT",
          }
        }
        export namespace TestBattleLoader {
          export interface LevelAndJsonPack {
            levelPaths: System.String[];
            squadPaths: System.String[];
          }
        }
      }
      export namespace AudioEmitterLog {
        export enum SourceType {
          NONE = "NONE",
          UI = "UI",
          BATTLE_COMMON = "BATTLE_COMMON",
          BATTLE_CHAR = "BATTLE_CHAR",
          BATTLE_ENEMY = "BATTLE_ENEMY",
          ALL = "ALL",
        }
        export enum LogType {
          NONE = "NONE",
          SIGNAL = "SIGNAL",
          AUDIO_CLIP = "AUDIO_CLIP",
          AUDIO_MIXER_OUTPUT = "AUDIO_MIXER_OUTPUT",
          ALL = "ALL",
        }
        export interface LogData {
          // <logType>k__BackingField: Torappu.Battle.DevelopTools.AudioEmitterLog.LogType;
          // <log>k__BackingField: System.String;
        }
      }
      export namespace AudioEmitterLogPanel {
        export interface SourceTypeToggle {
          // toggle: UnityEngine.UI.Toggle;
          sourceType: Torappu.Battle.DevelopTools.AudioEmitterLog.SourceType;
        }
        export interface LogTypeToggle {
          // toggle: UnityEngine.UI.Toggle;
          logType: Torappu.Battle.DevelopTools.AudioEmitterLog.LogType;
        }
        export interface LogTypeButton {
          // button: UnityEngine.UI.Button;
          logType: Torappu.Battle.DevelopTools.AudioEmitterLog.LogType;
        }
      }
    }
    export namespace GameMode {
      export interface IGameMode {
      }
      export interface GameModeFactory {
        // __Hotfix0_Create: XLua.DelegateBridge;
        // __Hotfix0_GatherPreloadAssets: XLua.DelegateBridge;
      }
      export interface IMultiplayerGameMode {
      }
      export namespace GameModeFactory {
        export interface DefaultGameMode {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowManualTick: XLua.DelegateBridge;
          // __Hotfix0_get_isOnline: XLua.DelegateBridge;
          // __Hotfix0_get_gameModeType: XLua.DelegateBridge;
          // __Hotfix0_Init: XLua.DelegateBridge;
          // __Hotfix0_OnPostInit: XLua.DelegateBridge;
          // __Hotfix0_StartGame: XLua.DelegateBridge;
          // __Hotfix0_Tick: XLua.DelegateBridge;
          // __Hotfix0_HookPlayerOp_Withdraw: XLua.DelegateBridge;
          // __Hotfix0_HookPlayerOp_Spawn: XLua.DelegateBridge;
          // __Hotfix0_HookPlayerOp_TrigSkill: XLua.DelegateBridge;
          // __Hotfix0_PostprocessLevelOptions: XLua.DelegateBridge;
          // __Hotfix0_PreprocessCharacterCard: XLua.DelegateBridge;
          // __Hotfix0_PreprocessEnemy: XLua.DelegateBridge;
          // __Hotfix0_IsSchedulerNeedPreprocess: XLua.DelegateBridge;
          // __Hotfix0_GatherGlobalBuffs: XLua.DelegateBridge;
          // __Hotfix0_NeedPreprocessPredefinedCharacter: XLua.DelegateBridge;
          // __Hotfix0_HookSpeedLevel: XLua.DelegateBridge;
        }
        export interface MultiplayerGameMode {
          // m_frameData: Torappu.Battle.BattleController.FrameData;
          // m_data: Torappu.Multiplayer.MultiplayerInput;
          // m_state: Torappu.Battle.GameMode.GameModeFactory.MultiplayerGameMode.InternalState;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_state: XLua.DelegateBridge;
          // __Hotfix0_set_state: XLua.DelegateBridge;
          // __Hotfix0_get_allowManualTick: XLua.DelegateBridge;
          // __Hotfix0_get_isOnline: XLua.DelegateBridge;
          // __Hotfix0_get_gameModeType: XLua.DelegateBridge;
          // __Hotfix0_Init: XLua.DelegateBridge;
          // __Hotfix0_StartGame: XLua.DelegateBridge;
          // __Hotfix0_Tick: XLua.DelegateBridge;
          // __Hotfix0_OnPostInit: XLua.DelegateBridge;
          // __Hotfix0_HookPlayerOp_Withdraw: XLua.DelegateBridge;
          // __Hotfix0_HookPlayerOp_Spawn: XLua.DelegateBridge;
          // __Hotfix0_HookPlayerOp_TrigSkill: XLua.DelegateBridge;
          // __Hotfix0_HookSpeedLevel: XLua.DelegateBridge;
          // __Hotfix0_get_isPrepared: XLua.DelegateBridge;
          // __Hotfix0_get_isRunning: XLua.DelegateBridge;
          // __Hotfix0_get_isPlaying: XLua.DelegateBridge;
          // __Hotfix0_SetReady: XLua.DelegateBridge;
          // __Hotfix0_SetPrepared: XLua.DelegateBridge;
          // __Hotfix0_SetPlaying: XLua.DelegateBridge;
          // __Hotfix0_SetPause: XLua.DelegateBridge;
          // __Hotfix0_SetUnstable: XLua.DelegateBridge;
          // __Hotfix0_NextFrame: XLua.DelegateBridge;
          // __Hotfix0_ApplyOprt: XLua.DelegateBridge;
          // __Hotfix0__SendOprt: XLua.DelegateBridge;
          // __Hotfix0_PostprocessLevelOptions: XLua.DelegateBridge;
          // __Hotfix0_PreprocessCharacterCard: XLua.DelegateBridge;
          // __Hotfix0_PreprocessEnemy: XLua.DelegateBridge;
          // __Hotfix0_IsSchedulerNeedPreprocess: XLua.DelegateBridge;
          // __Hotfix0_GatherGlobalBuffs: XLua.DelegateBridge;
          // __Hotfix0_NeedPreprocessPredefinedCharacter: XLua.DelegateBridge;
        }
        export interface RoguelikeGameMode {
          // m_input: Torappu.Battle.Roguelike.RoguelikeInput;
          // m_roguelikeManager: Torappu.Battle.Roguelike.RoguelikeBattleManager;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_allowManualTick: XLua.DelegateBridge;
          // __Hotfix0_get_isOnline: XLua.DelegateBridge;
          // __Hotfix0_get_gameModeType: XLua.DelegateBridge;
          // __Hotfix0_IsSchedulerNeedPreprocess: XLua.DelegateBridge;
          // __Hotfix0_Init: XLua.DelegateBridge;
          // __Hotfix0_OnPostInit: XLua.DelegateBridge;
          // __Hotfix0_PostprocessLevelOptions: XLua.DelegateBridge;
          // __Hotfix0_PreprocessCharacterCard: XLua.DelegateBridge;
          // __Hotfix0_PreprocessEnemy: XLua.DelegateBridge;
          // __Hotfix0_GatherGlobalBuffs: XLua.DelegateBridge;
          // __Hotfix0_NeedPreprocessPredefinedCharacter: XLua.DelegateBridge;
          // __Hotfix0_GatherPreloadAssets: XLua.DelegateBridge;
          // __Hotfix0_StartGame: XLua.DelegateBridge;
          // __Hotfix0_Tick: XLua.DelegateBridge;
          // __Hotfix0_HookPlayerOp_Withdraw: XLua.DelegateBridge;
          // __Hotfix0_HookPlayerOp_Spawn: XLua.DelegateBridge;
          // __Hotfix0_HookPlayerOp_TrigSkill: XLua.DelegateBridge;
          // __Hotfix0_HookSpeedLevel: XLua.DelegateBridge;
        }
        export namespace MultiplayerGameMode {
          export enum InternalState {
            NONE = "NONE",
            PREPARED = "PREPARED",
            READY = "READY",
            PLAYING = "PLAYING",
            PAUSE = "PAUSE",
            UNSTABLE = "UNSTABLE",
          }
        }
      }
    }
    export namespace Opera {
      export interface OperaConfig {
        _commands: System.Collections.Generic.List<Torappu.Battle.Opera.OperaCommand>;
      }
      export interface OperaCommand {
        key: System.String;
        // operaNodes: OperaNodeArray;
        duration: System.Single;
      }
      export interface OperaInfoAttribute {
        Category: System.String;
        Description: System.String;
      }
      export interface OperaNode {
        _preDelay: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Execute: XLua.DelegateBridge;
        // __Hotfix0_get_param: XLua.DelegateBridge;
        // __Hotfix0_OnCompleted: XLua.DelegateBridge;
      }
      export interface CameraShake {
        _duration: System.Single;
        // _strength: UnityEngine.Vector3;
        _vibrato: System.Int32;
        _randomness: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_postProcessType: XLua.DelegateBridge;
        // __Hotfix0_DoExecute: XLua.DelegateBridge;
      }
      export interface ColorGrading {
        _fadeInTime: System.Single;
        _keepTime: System.Single;
        _fadeOutTime: System.Single;
        // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
        // <>f__am$cache1: DG.Tweening.Core.DOSetter<System.Single>;
        // <>f__am$cache2: DG.Tweening.Core.DOGetter<System.Single>;
        // <>f__am$cache3: DG.Tweening.Core.DOSetter<System.Single>;
        // <>f__am$cache4: DG.Tweening.Core.DOGetter<System.Single>;
        // <>f__am$cache5: DG.Tweening.Core.DOSetter<System.Single>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_postProcessType: XLua.DelegateBridge;
        // __Hotfix0_DoExecute: XLua.DelegateBridge;
        // __Hotfix0_OnCompleted: XLua.DelegateBridge;
      }
      export interface GlobalAudio {
        _signal: System.String;
        // _position: UnityEngine.Vector3;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_postProcessType: XLua.DelegateBridge;
        // __Hotfix0_DoExecute: XLua.DelegateBridge;
        // __Hotfix0_GatherAudio: XLua.DelegateBridge;
      }
      export interface PlayEffect {
        _effectKey: System.String;
        _postProcessType: Torappu.Battle.CameraController.PostprocessMask;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_postProcessType: XLua.DelegateBridge;
        // __Hotfix0_DoExecute: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      }
      export interface PlayScreenEffect {
        _effectKey: System.String;
        _holdEffect: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_postProcessType: XLua.DelegateBridge;
        // __Hotfix0_DoExecute: XLua.DelegateBridge;
        // __Hotfix0_GatherEffects: XLua.DelegateBridge;
      }
      export interface FinishHoldEffectIfExist {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_postProcessType: XLua.DelegateBridge;
        // __Hotfix0_DoExecute: XLua.DelegateBridge;
      }
    }
    export namespace BattleCharacterData {
      export interface Signiture {
        uniqueId: System.UInt32;
        charId: System.String;
      }
      export interface SharedData {
        skillTriggerCnt: System.Int32;
        spScaleCnt: System.Int32;
        originCost: System.Nullable<System.Int32>;
        buildCnt: System.Int32;
      }
      export interface RuntimeData {
        dynamicAbilities: System.Collections.Generic.List<Torappu.DynamicAbilityData>;
      }
    }
    export namespace BuffTemplate {
      export interface EventToAction {
      }
      export interface EventToActionMap {
      }
    }
    export namespace TNodeBuffTemplate {
      export interface StrToTNodeData {
      }
      export interface TNodeDataMap {
      }
    }
    export namespace FixedEventHandler {
      export interface PendingEvent<T> {
        // callback: System.Action<T>;
        target: Torappu.ObjectPtr<T>;
        secondaryCompUid: System.UInt32;
        seqNum: System.Int32;
      }
    }
    export namespace GridRangeDrawer {
      export interface RangeEntry {
        range: Torappu.Battle.IDrawableRange;
        // displayColor: UnityEngine.Color;
      }
    }
    export namespace MaterialManager {
      export interface MaterialKey {
        // prototype: UnityEngine.Material;
        instanceKey: System.String;
      }
    }
    export namespace MultiEnterExitHandler {
      export interface TargetRef<T> {
        refCnt: System.Int32;
      }
    }
    export namespace Mock {
      export interface MockCharacterLocator {
        _mockCharacterData: Torappu.Battle.BattleCharacterData;
      }
    }
  }
  export namespace AiriSDK {
    export interface AiriSDKBridge {
      // CLEAR_OTHER_RET_TYPES: System.Type[];
      // m_isInited: System.Boolean;
      // m_hasCalledInitFunc: System.Boolean;
      // m_cbMap: System.Collections.Generic.Dictionary<System.Type,System.Collections.Generic.List<System.Object>>;
      // m_cbBuffer: System.Collections.Generic.List<System.Object>;
      // <>f__am$cache0: System.Action;
      // <>f__am$cache1: System.Action;
      // <>f__am$cache2: System.Func<System.Boolean>;
      // <>f__am$cache3: System.Action;
      // <>f__am$cache4: System.Action;
      // <>f__am$cache5: System.Action;
      // <>f__am$cache6: System.Action;
      // <>f__am$cache7: System.Action;
      // <>f__am$cache8: System.Action;
      // <>f__am$cache9: System.Action;
      // <>f__am$cacheA: System.Action;
      // <>f__am$cacheB: System.Action;
      // <>f__am$cacheC: System.Action;
      // <>f__am$cacheD: System.Action;
      // <>f__am$cacheE: System.Action;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0__InitIfNot: XLua.DelegateBridge;
      // __Hotfix0__SystemShareEvent: XLua.DelegateBridge;
      // __Hotfix0__BuyEvent: XLua.DelegateBridge;
      // __Hotfix0__BirthSetEvent: XLua.DelegateBridge;
      // __Hotfix0__VerificationCodeEvent: XLua.DelegateBridge;
      // __Hotfix0__MigrateCodeEvent: XLua.DelegateBridge;
      // __Hotfix0__UnlinkEvent: XLua.DelegateBridge;
      // __Hotfix0__LinkEvent: XLua.DelegateBridge;
      // __Hotfix0__LoginEvent: XLua.DelegateBridge;
      // __Hotfix0__InitEvent: XLua.DelegateBridge;
      // __Hotfix0__ClearAccountInfoEvent: XLua.DelegateBridge;
      // __Hotfix0__DeleteAccountEvent: XLua.DelegateBridge;
      // __Hotfix0__GetAgreementEvent: XLua.DelegateBridge;
      // __Hotfix0__GetUnderAgeAgrementEvent: XLua.DelegateBridge;
      // __Hotfix0__GetShopAgreementEvent: XLua.DelegateBridge;
      // __Hotfix0__RebornAccountEvent: XLua.DelegateBridge;
      // __Hotfix0_Buy: XLua.DelegateBridge;
      // __Hotfix0_ClearAccountInfo: XLua.DelegateBridge;
      // __Hotfix0_ConfirmAgreement: XLua.DelegateBridge;
      // __Hotfix0_ConfirmUnderAgreement: XLua.DelegateBridge;
      // __Hotfix0_DeleteAccount: XLua.DelegateBridge;
      // __Hotfix0_GetAgreement: XLua.DelegateBridge;
      // __Hotfix0_GetDeviceID: XLua.DelegateBridge;
      // __Hotfix0_GetSafeArea: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_LinkSocial: XLua.DelegateBridge;
      // __Hotfix1_LinkSocial: XLua.DelegateBridge;
      // __Hotfix0_LoginWithDevice: XLua.DelegateBridge;
      // __Hotfix0_LoginWithFB: XLua.DelegateBridge;
      // __Hotfix0_LoginWithGoogle: XLua.DelegateBridge;
      // __Hotfix0_LoginWithGooglePlay: XLua.DelegateBridge;
      // __Hotfix0_LoginWithMigrationCode: XLua.DelegateBridge;
      // __Hotfix0_LoginWithSDK: XLua.DelegateBridge;
      // __Hotfix0_LoginWithTW: XLua.DelegateBridge;
      // __Hotfix0_LoginWithApple: XLua.DelegateBridge;
      // __Hotfix0_IOSAppleSignInAvailable: XLua.DelegateBridge;
      // __Hotfix0_MigrationCodeRequest: XLua.DelegateBridge;
      // __Hotfix0_NewAccountLink: XLua.DelegateBridge;
      // __Hotfix0_OnPause: XLua.DelegateBridge;
      // __Hotfix0_OnResume: XLua.DelegateBridge;
      // __Hotfix0_OpenHelpShift: XLua.DelegateBridge;
      // __Hotfix1_OpenHelpShift: XLua.DelegateBridge;
      // __Hotfix0_QuickLogin: XLua.DelegateBridge;
      // __Hotfix0_SetBirth: XLua.DelegateBridge;
      // __Hotfix0_UnlinkSocial: XLua.DelegateBridge;
      // __Hotfix1_UnlinkSocial: XLua.DelegateBridge;
      // __Hotfix0_UserEventUpload: XLua.DelegateBridge;
      // __Hotfix0_VerificationCodeReq: XLua.DelegateBridge;
      // __Hotfix0_GetAgreementInfo: XLua.DelegateBridge;
      // __Hotfix0_SDKToClipboard: XLua.DelegateBridge;
      // __Hotfix0_GetSDKRecommendedErrorMsg: XLua.DelegateBridge;
      // __Hotfix0_GetShopAgreement: XLua.DelegateBridge;
      // __Hotfix0_GetUnderAgreement: XLua.DelegateBridge;
      // __Hotfix0_RebornAccount: XLua.DelegateBridge;
      // __Hotfix0_SDKGetUID: XLua.DelegateBridge;
      // __Hotfix0__SendRequest: XLua.DelegateBridge;
      // __Hotfix1__SendRequest: XLua.DelegateBridge;
      // __Hotfix2__SendRequest: XLua.DelegateBridge;
      // __Hotfix0__TriggerCallback: XLua.DelegateBridge;
      // __Hotfix0__BindCallback: XLua.DelegateBridge;
      // __Hotfix0__EnsureCbList: XLua.DelegateBridge;
      // __Hotfix0__CheckIfClearOtherRet: XLua.DelegateBridge;
      // __Hotfix0__ShowLoadingMaskForSocial: XLua.DelegateBridge;
      // __Hotfix0_Dispose: XLua.DelegateBridge;
    }
    export namespace AiriSDKBridge {
    }
    export namespace Fake {
      export enum ResultCode {
        Unknown = "Unknown",
        OK = "OK",
        DEVICE_ID_BLOCKED = "DEVICE_ID_BLOCKED",
        UID_OR_TOKEN_INVALIDCERT = "UID_OR_TOKEN_INVALIDCERT",
        ACCOUNT_CREATE_FAILED = "ACCOUNT_CREATE_FAILED",
        ACCOUNT_BIND_FAILED_12 = "ACCOUNT_BIND_FAILED_12",
        ACCOUNT_BIND_FAILED_13 = "ACCOUNT_BIND_FAILED_13",
        ACCOUNT_BIND_FAILED_14 = "ACCOUNT_BIND_FAILED_14",
        ACCOUNT_BIND_FAILED_15 = "ACCOUNT_BIND_FAILED_15",
        ACCOUNT_BIND_FAILED_16 = "ACCOUNT_BIND_FAILED_16",
        LOGIN_PARAM_MISS = "LOGIN_PARAM_MISS",
        IP_BLOCKED = "IP_BLOCKED",
        UID_BLOCKED = "UID_BLOCKED",
        ACCESSTOKEN_INVALIDCERT = "ACCESSTOKEN_INVALIDCERT",
        MIGRATIONCODE_INVALIDCERT = "MIGRATIONCODE_INVALIDCERT",
        BIRTHSET_ALREADYSET = "BIRTHSET_ALREADYSET",
        BIRTHSET_INVALIDFMT = "BIRTHSET_INVALIDFMT",
        SOCIAL_ACCOUNT_NOT_LINK = "SOCIAL_ACCOUNT_NOT_LINK",
        SOCIAL_ACCOUNT_PARAM_INVALIDCERT = "SOCIAL_ACCOUNT_PARAM_INVALIDCERT",
        SOCIAL_ACCOUNT_ALREADY_LINK = "SOCIAL_ACCOUNT_ALREADY_LINK",
        SOCIAL_ACCOUNT_UID_INVALIDCERT = "SOCIAL_ACCOUNT_UID_INVALIDCERT",
        LINK_PLATFORM_ERROR = "LINK_PLATFORM_ERROR",
        UNLINK_PLATFORM_ERROR = "UNLINK_PLATFORM_ERROR",
        UNLINK_ATLEAST_HAVE_ONE_ACCOUNT = "UNLINK_ATLEAST_HAVE_ONE_ACCOUNT",
        FB_LOGIN_CANCEL = "FB_LOGIN_CANCEL",
        FB_AUTHORIZATION_CANCEL = "FB_AUTHORIZATION_CANCEL",
        TW_AUTHORIZATION_CANCEL = "TW_AUTHORIZATION_CANCEL",
        ERROR_GOOGLE_FAILE = "ERROR_GOOGLE_FAILE",
        GOOGLE_PLAY_INVALD = "GOOGLE_PLAY_INVALD",
        GOOGLE_SIGN_IN_CANCELLED = "GOOGLE_SIGN_IN_CANCELLED",
        GOOGLE_SIGN_IN_CURRENTLY_IN_PROGRESS = "GOOGLE_SIGN_IN_CURRENTLY_IN_PROGRESS",
        GOOGLE_SIGN_IN_FAILED = "GOOGLE_SIGN_IN_FAILED",
        USER_DELETE_ACCOUNT = "USER_DELETE_ACCOUNT",
        ACCOUNT_DELETE_ERROR = "ACCOUNT_DELETE_ERROR",
        INIT_FAILED = "INIT_FAILED",
        ACCOUNT_DUPLICATE_ELIMINATION = "ACCOUNT_DUPLICATE_ELIMINATION",
        ACCOUNT_RECOVER_FAILED = "ACCOUNT_RECOVER_FAILED",
        ACCOUNT_HAD_BEEN_DELETE = "ACCOUNT_HAD_BEEN_DELETE",
        ACCOUNT_HAVE_NOT_PERMISSION = "ACCOUNT_HAVE_NOT_PERMISSION",
        YOSTAR_EMAIL_ERROR = "YOSTAR_EMAIL_ERROR",
        YOSTAR_EMAIL_DOUBLE_CHK_ERROR = "YOSTAR_EMAIL_DOUBLE_CHK_ERROR",
        VERIFICATION_CODE_REQ_FAST = "VERIFICATION_CODE_REQ_FAST",
        VERIFICATION_CODE_OVERDUE_1 = "VERIFICATION_CODE_OVERDUE_1",
        VERIFICATION_CODE_OVERDUE_2 = "VERIFICATION_CODE_OVERDUE_2",
        ACCOUNT_HAS_BEEN_FREEZE = "ACCOUNT_HAS_BEEN_FREEZE",
        VERIFICATION_CODE_NULL = "VERIFICATION_CODE_NULL",
        HTTPERROR = "HTTPERROR",
        PAY_BIRTH_NOTSET = "PAY_BIRTH_NOTSET",
        PAY_OVER_LIMIT = "PAY_OVER_LIMIT",
        PAY_PRODUCT_INVALID = "PAY_PRODUCT_INVALID",
        PAY_STORE_INVALID = "PAY_STORE_INVALID",
        PAY_SERVERTAG_INVALID = "PAY_SERVERTAG_INVALID",
        PAY_VERIFY_ERROR = "PAY_VERIFY_ERROR",
        PAY_AIRIPLATFORM_INVALID_REQUEST = "PAY_AIRIPLATFORM_INVALID_REQUEST",
        PAY_GAMESERVER_INVALID_REQUEST = "PAY_GAMESERVER_INVALID_REQUEST",
        PAY_HOLDON = "PAY_HOLDON",
        PAY_INVALID_ORDERID = "PAY_INVALID_ORDERID",
        PAY_TIMEOUT = "PAY_TIMEOUT",
        PAY_INVALID_PRODUCT_IN_STORE = "PAY_INVALID_PRODUCT_IN_STORE",
        PAY_STORE_FAILURE = "PAY_STORE_FAILURE",
        PAY_CANCELED = "PAY_CANCELED",
        PAY_CANCELED_OR_FAIL = "PAY_CANCELED_OR_FAIL",
        GOOGLE_BILLING_UNAVAILABLE = "GOOGLE_BILLING_UNAVAILABLE",
        GOOGLE_DEVELOPER_ERROR = "GOOGLE_DEVELOPER_ERROR",
        GOOGLE_FATAL_ERROR = "GOOGLE_FATAL_ERROR",
        GOOGLE_FEATURE_NOT_SUPPORTED = "GOOGLE_FEATURE_NOT_SUPPORTED",
        GOOGLE_ITEM_ALREADY_OWNED = "GOOGLE_ITEM_ALREADY_OWNED",
        GOOGLE_ITEM_NOT_OWNED = "GOOGLE_ITEM_NOT_OWNED",
        GOOGLE_ITEM_UNAVAILABLE = "GOOGLE_ITEM_UNAVAILABLE",
        GOOGLE_SERVICE_DISCONNECTED = "GOOGLE_SERVICE_DISCONNECTED",
        GOOGLE_SERVICE_TIMEOUT = "GOOGLE_SERVICE_TIMEOUT",
        GOOGLE_SERVICE_UNAVAILABLE = "GOOGLE_SERVICE_UNAVAILABLE",
        GOOGLE_USER_CANCELED = "GOOGLE_USER_CANCELED",
        GOOGLE_SDK_GETSKUS_FAILED = "GOOGLE_SDK_GETSKUS_FAILED",
        GOOGLE_CONNECT_FAILED = "GOOGLE_CONNECT_FAILED",
        SYSTEM_SHARE_FAILED = "SYSTEM_SHARE_FAILED",
      }
      export enum BuyServerTag {
        audit = "audit",
        preAudit = "preAudit",
        production = "production",
      }
      export enum LoginPlatform {
        DEVICE = "DEVICE",
        MIGRATIONCODE = "MIGRATIONCODE",
        TWITTER = "TWITTER",
        FACEBOOK = "FACEBOOK",
        YOSTAR = "YOSTAR",
        GOOGLE = "GOOGLE",
        GOOGLEPLAY = "GOOGLEPLAY",
        APPLE = "APPLE",
      }
      export enum ShopAgreementType {
        SHOP_AGREEMENT_1 = "SHOP_AGREEMENT_1",
        SHOP_AGREEMENT_2 = "SHOP_AGREEMENT_2",
      }
      export enum LanguageType {
        MSG_CN = "MSG_CN",
        MSG_EN = "MSG_EN",
        MSG_JP = "MSG_JP",
        MSG_KR = "MSG_KR",
      }
      export enum PayStore {
        googleplay = "googleplay",
        appstore = "appstore",
        au = "au",
        amazon = "amazon",
        onestore = "onestore",
        samsung = "samsung",
      }
      export interface SystemShareRet {
        R_CODE: Torappu.AiriSDK.Fake.ResultCode;
        R_MSG: System.String;
      }
      export interface BuyRet {
        R_CODE: Torappu.AiriSDK.Fake.ResultCode;
        R_MSG: System.String;
        EXTRADATA: System.String;
        ORDERID: System.String;
      }
      export interface BirthSetRet {
        R_CODE: Torappu.AiriSDK.Fake.ResultCode;
        R_MSG: System.String;
        BIRTH: System.String;
      }
      export interface VerificationCodeRet {
        R_CODE: Torappu.AiriSDK.Fake.ResultCode;
        R_MSG: System.String;
      }
      export interface MigrationCodeRet {
        R_CODE: Torappu.AiriSDK.Fake.ResultCode;
        R_MSG: System.String;
        MIGRATIONCODE: System.String;
        UID: System.String;
      }
      export interface UnLinkRet {
        R_CODE: Torappu.AiriSDK.Fake.ResultCode;
        R_MSG: System.String;
        LOGIN_PLATFORM: Torappu.AiriSDK.Fake.LoginPlatform;
        SOCAIL_NAME: System.String;
      }
      export interface LinkRet {
        R_CODE: Torappu.AiriSDK.Fake.ResultCode;
        R_MSG: System.String;
        LOGIN_PLATFORM: Torappu.AiriSDK.Fake.LoginPlatform;
        SOCAIL_NAME: System.String;
        ACCESS_TOKEN: System.String;
      }
      export interface LoginRet {
        R_CODE: Torappu.AiriSDK.Fake.ResultCode;
        R_MSG: System.String;
        ACCESS_TOKEN: System.String;
        UID: System.String;
        LOGIN_PLATFORM: Torappu.AiriSDK.Fake.LoginPlatform;
        BIRTH: System.String;
        FACEBOOK_NAME: System.String;
        TWITTER_NAME: System.String;
        SDK_NAME: System.String;
        GOOGLE_EMAIL: System.String;
        ISCAN_BIND_GUEST: System.Int32;
        ISNEW: System.Int32;
        APPLE_ID: System.String;
        R_DELETETIME: System.String;
        MIGRATIONCODE: System.String;
      }
      export interface InitRet {
        R_CODE: Torappu.AiriSDK.Fake.ResultCode;
        R_MSG: System.String;
        R_VIRTUAL: System.Int32;
        ISCACHE: System.Int32;
        LOGIN_UID: System.String;
        LOGIN_NAME: System.String;
        IS_POPUP_AGREEMENT: System.Int32;
        LOGIN_PLATFORM: Torappu.AiriSDK.Fake.LoginPlatform;
      }
      export interface ClearAccountInfoRet {
        R_CODE: Torappu.AiriSDK.Fake.ResultCode;
        R_MSG: System.String;
      }
      export interface DeleteAccountRet {
        R_CODE: Torappu.AiriSDK.Fake.ResultCode;
        R_MSG: System.String;
      }
      export interface GetAgreementRet {
        R_CODE: Torappu.AiriSDK.Fake.ResultCode;
        R_MSG: System.String;
        Agreements: System.String;
      }
      export interface GetShopAgreementRet {
        R_CODE: Torappu.AiriSDK.Fake.ResultCode;
        R_MSG: System.String;
        SHOP_AGREEMENT: System.String;
      }
      export interface RebornAccountRet {
        R_CODE: Torappu.AiriSDK.Fake.ResultCode;
        R_MSG: System.String;
      }
      export interface GetUnderAgreementRet {
        R_CODE: Torappu.AiriSDK.Fake.ResultCode;
        R_MSG: System.String;
        SHOP_AGREEMENT: System.String;
        isSHOW: System.Int32;
      }
      export interface AirisdkEvent {
        // m_inst: Torappu.AiriSDK.Fake.AirisdkEvent;
        // SystemShareEvent: System.Action<Torappu.AiriSDK.Fake.SystemShareRet>;
        // BuyEvent: System.Action<Torappu.AiriSDK.Fake.BuyRet>;
        // BirthSetEvent: System.Action<Torappu.AiriSDK.Fake.BirthSetRet>;
        // VerificationCodeEvent: System.Action<Torappu.AiriSDK.Fake.VerificationCodeRet>;
        // MigrationCodeEvent: System.Action<Torappu.AiriSDK.Fake.MigrationCodeRet>;
        // UnLinkEvent: System.Action<Torappu.AiriSDK.Fake.UnLinkRet>;
        // LinkEvent: System.Action<Torappu.AiriSDK.Fake.LinkRet>;
        // LoginEvent: System.Action<Torappu.AiriSDK.Fake.LoginRet>;
        // InitEvent: System.Action<Torappu.AiriSDK.Fake.InitRet>;
        // ClearAccountInfoEvent: System.Action<Torappu.AiriSDK.Fake.ClearAccountInfoRet>;
        // DeleteAccountEvent: System.Action<Torappu.AiriSDK.Fake.DeleteAccountRet>;
        // GetAgreementEvent: System.Action<Torappu.AiriSDK.Fake.GetAgreementRet>;
        // GetShopAgreementEvent: System.Action<Torappu.AiriSDK.Fake.GetShopAgreementRet>;
        // GetUnderAgreementEvent: System.Action<Torappu.AiriSDK.Fake.GetUnderAgreementRet>;
        // RebornAccountEvent: System.Action<Torappu.AiriSDK.Fake.RebornAccountRet>;
      }
      export interface AiriSDKFaker {
        YOSTAR_HG_FAKE_TOKEN: System.String;
        YOSTAR_FAKE_MCODE: System.String;
        agree: System.Int32;
        // m_inst: Torappu.AiriSDK.Fake.AiriSDKFaker;
        // <>f__am$cache0: System.Action;
        // <>f__am$cache1: System.Action;
        // <>f__am$cache2: System.Action;
        // <>f__am$cache3: System.Action;
        // <>f__am$cache4: System.Action<HGSDK.UserGuestLoginResponse>;
        // <>f__am$cache5: System.Func<Torappu.Network.ResponseError,System.Boolean>;
        // <>f__am$cache6: System.Action;
        // <>f__am$cache7: System.Action;
        // <>f__am$cache8: System.Action;
        // <>f__am$cache9: System.Action;
        // <>f__am$cacheA: System.Func<Torappu.Network.ResponseError,System.Boolean>;
        // <>f__am$cacheB: System.Action;
        // <>f__am$cacheC: System.Action;
        // <>f__am$cacheD: System.Action;
        // <>f__am$cacheE: System.Action;
        // <>f__am$cacheF: System.Func<Torappu.Network.ResponseError,System.Boolean>;
        // <>f__am$cache10: System.Action;
        // <>f__am$cache11: System.Action;
        // <>f__am$cache12: System.Action;
      }
      export namespace AiriSDKFaker {
        export interface FakeLoginInfo {
          uid: System.String;
          name: System.String;
          token: System.String;
          platform: Torappu.AiriSDK.Fake.LoginPlatform;
        }
        export interface UserGuestLoginRequest {
          deviceId: System.String;
          captcha: System.String;
        }
        export interface PayRequest {
          orderId: System.String;
          uid: System.String;
          worldId: System.Int32;
          storeId: System.Int32;
          productId: System.String;
          productName: System.String;
          amount: System.Int32;
          extraData: System.String;
          payTime: System.Int64;
        }
        export interface PayResponse {
          result: System.Int32;
        }
      }
    }
  }
  export namespace Appetizer {
    export interface AppetizerTrace {
      // m_HGLoginMethod: System.String;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_NotifyHGLoginWithPhone: XLua.DelegateBridge;
      // __Hotfix0_NotifyHGLoginWithAccount: XLua.DelegateBridge;
      // __Hotfix0_NotifyHGLoginWithGuest: XLua.DelegateBridge;
      // __Hotfix0_NotifyHGLoginWithToken: XLua.DelegateBridge;
      // __Hotfix0_LoginTrace: XLua.DelegateBridge;
      // __Hotfix0__DoTrace: XLua.DelegateBridge;
    }
  }
  export namespace GameAnalytics {
    export interface EventNames {
      EVOLVE_F: System.String;
      POTENTIAL_SUCC_F: System.String;
      POTENTIAL_FAIL_F: System.String;
      SKILL_MAINLVL_UP_F: System.String;
      SKILL_SPECIALIZED_UP_F: System.String;
      ADVANCED_GACHA: System.String;
      NORMAL_GACHA: System.String;
    }
  }
  export namespace Audio {
    export interface AudioHelper {
    }
    export interface AudioChannel {
      loadedClipCount: System.Int32;
      // onChannelRecycled: System.Action;
      // m_gameObject: UnityEngine.GameObject;
      // m_audioSources: Torappu.Audio.AudioChannel.ChannelAudioSource[];
      // m_currentVolume: System.Single;
      // m_tweenStartVolume: System.Single;
      // m_tweenTargetVolume: System.Single;
      // m_tweenStartTime: System.Single;
      // m_tweenEndTime: System.Single;
      // m_stopWhenTweenEnd: System.Boolean;
      // m_audioSchedule: Torappu.Audio.AudioSchedule;
    }
    export interface AudioClickPlayer {
      _soundType: Torappu.Audio.AudioClickPlayer.SoundType;
      _internalType: Torappu.Audio.UiInternalSoundType;
      _buildingSoundType: Torappu.Audio.UiBuildingSoundType;
      _signal: System.String;
      _subsignal: System.String;
    }
    export interface AudioClipManager {
      // m_clipPool: Torappu.ObjectPool.ObjectPool<Torappu.Audio.AudioClipManager.AudioClipResource>;
      // m_loadedClips: System.Collections.Generic.Dictionary<System.String,Torappu.Audio.AudioClipManager.AudioClipResource>;
    }
    export interface AudioMessagePlayer {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_AudioUISignal: XLua.DelegateBridge;
      // __Hotfix0_AudioSystemSignal: XLua.DelegateBridge;
      // __Hotfix0__TryParseCombinedSignals: XLua.DelegateBridge;
    }
    export interface AudioOptions {
      // mainMixer: UnityEngine.Audio.AudioMixer;
      // musicGroup: UnityEngine.Audio.AudioMixerGroup;
      // voiceGroup: UnityEngine.Audio.AudioMixerGroup;
      // fxGroup: UnityEngine.Audio.AudioMixerGroup;
      // uiFxGroup: UnityEngine.Audio.AudioMixerGroup;
      // importantUIFxGroup: UnityEngine.Audio.AudioMixerGroup;
      // battleFxGroup: UnityEngine.Audio.AudioMixerGroup;
      // importantBattleFxGroup: UnityEngine.Audio.AudioMixerGroup;
      musicVolumeParams: System.String[];
      voiceVolumeParams: System.String[];
      fxVolumeParams: System.String[];
      channelPreloadSize: System.Int32;
    }
    export interface AudioSchedule {
      // m_coroutine: UnityEngine.Coroutine;
      // m_scheduling: System.Boolean;
    }
    export interface ISceneParamWithMusic {
    }
    export interface SceneMusicPlayer {
      SCENES_DISABLE_AUTO_PLAY: System.String[];
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Start: XLua.DelegateBridge;
      // __Hotfix0__StartImpl: XLua.DelegateBridge;
      // __Hotfix0_GameFlowController_AutoTrigger: XLua.DelegateBridge;
      // __Hotfix0_ManuallyTrigger: XLua.DelegateBridge;
      // __Hotfix0__IsAutoTriggerDisabled: XLua.DelegateBridge;
      // __Hotfix0__PlayBGM: XLua.DelegateBridge;
    }
    export enum UiInternalSoundType {
      CancelBtn = "CancelBtn",
      TabSwitchBtn = "TabSwitchBtn",
      Checkbox = "Checkbox",
      ChapterSwitchBtn = "ChapterSwitchBtn",
      PopupMessagebox = "PopupMessagebox",
      NumberIncrease = "NumberIncrease",
      NumberDecrease = "NumberDecrease",
      ConfirmBtn = "ConfirmBtn",
      DangerBtn = "DangerBtn",
      PageIn = "PageIn",
      PageOut = "PageOut",
      MissionTab = "MissionTab",
      StagePush = "StagePush",
      StagePull = "StagePull",
      TearUpStamp = "TearUpStamp",
      DetailCheck = "DetailCheck",
    }
    export enum UiBuildingSoundType {
      RoomSelect = "RoomSelect",
      Harvest = "Harvest",
      ClickChar = "ClickChar",
      GetCharIntimacy = "GetCharIntimacy",
      MaterialNotEnough = "MaterialNotEnough",
      PowerNotEnough = "PowerNotEnough",
      StartLevelUp = "StartLevelUp",
      FinishLevelUp = "FinishLevelUp",
      Cancel = "Cancel",
      BuildingBusy = "BuildingBusy",
      ReceiveManufact = "ReceiveManufact",
      BaseApNotEnough = "BaseApNotEnough",
      RoomCleaned = "RoomCleaned",
      RoomDowngraded = "RoomDowngraded",
      ReceiveShop = "ReceiveShop",
      DecorateLevelUp = "DecorateLevelUp",
    }
    export enum UiEffectSoundType {
      None = "None",
      LightsOn = "LightsOn",
      FlashLightsOn = "FlashLightsOn",
      WHOOSH = "WHOOSH",
      WHOOSH_1 = "WHOOSH_1",
      MULTI_POP_MSG = "MULTI_POP_MSG",
      COUNT_DOWN = "COUNT_DOWN",
    }
    export interface Consts {
      DEFAULT_BTN_CLICK: System.String;
      SCENE_LOADED: System.String;
      BATTLE_FINISH: System.String;
      FORBIDDEN_OPERATION: System.String;
      PAGE_EXISTED: System.String;
      ACTIVITY_LOADED: System.String;
      RETRO_LOADED: System.String;
      ACT_CAMP_SELECT: System.String;
      CRISIS_NO_SEASON_LOADED: System.String;
      CRISIS_SEASON_LOADED: System.String;
      ROGUELIKE_NUMBER_UP: System.String;
      MEDAL_NUMBER_TICK: System.String;
      GACHA_PHASE_0: System.String;
      GACHA_PHASE_1: System.String;
      GACHA_TEN_RESULT_PANEL_SHOWN: System.String;
      GACHA_STAR: System.String;
      GACHA_1GACHA_RELEASE: System.String;
      GACHA_10GACHA_RELEASE: System.String;
      GACHA_CHECKOUT: System.String;
      GACHA_PACKAGE_ZIPPER: System.String;
      GACHA_PACKAGE_DROP: System.String;
      GACHA_BOX_DRAW: System.String;
      GACHA_STOP_SUBSIGNAL: System.String;
      BATTLE_END_STAR_POPUP: System.String;
      BATTLE_END_ITEM_POPUP: System.String;
      ITEM_PANEL_POPUP: System.String;
      ITEM_PANEL_SHOW_EACH_ITEM: System.String;
      DETAIL_PANEL_POPUP: System.String;
      SKIN_SLIDE: System.String;
      LINE_FLOW: System.String;
      STAMP_SEAL: System.String;
      HOME_MONTH_SIGNIN: System.String;
      PLAYER_LEVEL_EXP_EXPAND_START: System.String;
      PLAYER_LEVEL_EXP_EXPAND_STOP: System.String;
      PLAYER_LEVELUP: System.String;
      ON_BANNER_SLIDE: System.String;
      BUILDING_INDUST_START: System.String;
      BUILDING_INDUST_FINISH_SINGLE: System.String;
      BUILDING_INDUST_FINISH_MANY: System.String;
      HANDBOOK_CHAR_SELECT: System.String;
      HANDBOOK_CONNECT_LINE: System.String;
      HANDBOOK_CHAR_MOVE_1: System.String;
      HANDBOOK_CHAR_MOVE_2: System.String;
      MEDAL_DIY_PLACED: System.String;
      ROGUELIKE_STATE_CHANGED: System.String;
      InternalSounds: System.Collections.Generic.Dictionary<Torappu.Audio.UiInternalSoundType,System.String>;
      BuildingSounds: System.Collections.Generic.Dictionary<Torappu.Audio.UiBuildingSoundType,System.String>;
      UiEffectSounds: System.Collections.Generic.Dictionary<Torappu.Audio.UiEffectSoundType,System.String>;
      PERSIST_TAG_BATTLE: System.String;
      PERSIST_TAG_UI: System.String;
      PERSIST_TAG_GACHA: System.String;
      PERSIST_TAG_VOICE: System.String;
    }
    export interface UIAudioPreloader {
      _preloadInternalSounds: System.Boolean;
      _preloadBuildingSounds: System.Boolean;
      _extraSignals: System.String[];
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Start: XLua.DelegateBridge;
    }
    export namespace AudioChannel {
      export interface ChannelAudioSource {
        // audioSource: UnityEngine.AudioSource;
        loadedKey: System.String;
      }
    }
    export namespace AudioClickPlayer {
      export enum SoundType {
        Default = "Default",
        Internal = "Internal",
        Custom = "Custom",
        Mute = "Mute",
        Building = "Building",
      }
    }
    export namespace AudioClipManager {
      export interface AudioClipResource {
        key: System.String;
        // audioClip: UnityEngine.AudioClip;
        refCount: System.Int32;
        maxRefAllowed: System.Int32;
        persistTag: System.String;
      }
    }
    export namespace AudioSchedule {
    }
    export namespace Middleware {
      export interface AudioMiddleware {
      }
      export interface AudioAtom {
        // <bank>k__BackingField: Torappu.Audio.Middleware.Data.Bank;
        // <name>k__BackingField: System.String;
      }
      export interface TorappuAudioMiddleware {
        // m_banks: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<Torappu.Audio.Middleware.Data.Bank>>;
        // m_bankList: Torappu.Audio.Middleware.Data.Bank[];
      }
      export namespace Data {
        export interface BankTrieMap {
          SEPARATOR_CHAR: System.Int32;
          ALPHABET_SIZE: System.Int32;
          // m_root: Torappu.Audio.Middleware.Data.BankTrieMap.TrieNode;
        }
        export interface TorappuAudioDB {
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_GetBanks: XLua.DelegateBridge;
          // __Hotfix0__TryAddBank: XLua.DelegateBridge;
        }
        export interface TorappuAudioData {
          bgmBanks: Torappu.Audio.Middleware.Data.BGMBank[];
          soundFXBanks: Torappu.Audio.Middleware.Data.SoundFXBank[];
          soundFXCtrlBanks: Torappu.Audio.Middleware.Data.SoundFXCtrlBank[];
          snapshotBanks: Torappu.Audio.Middleware.Data.SnapshotBank[];
          battleVoice: Torappu.BattleVoiceData;
        }
        export interface Bank {
          name: System.String;
          // m_middleware: Torappu.Audio.Middleware.TorappuAudioMiddleware;
          // m_activeAtoms: System.Collections.Generic.List<Torappu.Audio.Middleware.AudioAtom>;
        }
        export interface BGMBank {
          intro: System.String;
          loop: System.String;
          volume: System.Single;
          crossfade: System.Single;
          delay: System.Single;
          // m_bgmAtom: Torappu.Audio.Middleware.Data.BGMAudioAtom;
        }
        export interface BGMAudioAtom {
        }
        export interface SoundFXBank {
          sounds: Torappu.Audio.Middleware.Data.SoundFXBank.SoundFX[];
          maxSoundAllowed: System.Int32;
          popOldest: System.Boolean;
          customMixerGroup: System.String;
          loop: System.Boolean;
          // m_totalWeight: System.Single;
          // m_fxCategory: Torappu.AudioManager.FXCategory;
        }
        export interface SoundFXAudioAtom {
        }
        export interface SoundFXCtrlBank {
          targetBank: System.String;
          ctrlStop: System.Boolean;
          ctrlStopFadetime: System.Single;
          // m_targetBank: Torappu.Audio.Middleware.Data.Bank;
        }
        export interface SnapshotBank {
          targetSnapshot: System.String;
          hookSoundFxBank: System.String;
          delay: System.Single;
          duration: System.Single;
          // s_activeSnapshotBank: System.Collections.Generic.List<Torappu.Audio.Middleware.Data.SnapshotBank>;
          targetFxBank: Torappu.Audio.Middleware.Data.Bank;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_Play: XLua.DelegateBridge;
          // __Hotfix0_PopAtom: XLua.DelegateBridge;
          // __Hotfix0_TriggerSnapshot: XLua.DelegateBridge;
          // __Hotfix0_ReverseSnapshot: XLua.DelegateBridge;
          // __Hotfix0__InitTargetBank: XLua.DelegateBridge;
        }
        export interface SnapshotAudioAtom {
          snapshotBank: Torappu.Audio.Middleware.Data.SnapshotBank;
          // m_listenBegin: System.Boolean;
          // m_poped: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_Update: XLua.DelegateBridge;
          // __Hotfix0_Stop: XLua.DelegateBridge;
        }
        export namespace BankTrieMap {
          export interface TrieNode {
            bank: Torappu.Audio.Middleware.Data.Bank;
            links: Torappu.Audio.Middleware.Data.BankTrieMap.TrieNode[];
          }
        }
        export namespace SoundFXBank {
          export interface SoundFX {
            asset: System.String;
            weight: System.Single;
            important: System.Boolean;
            is2D: System.Boolean;
            delay: System.Single;
            minPitch: System.Single;
            maxPitch: System.Single;
            minVolume: System.Single;
            maxVolume: System.Single;
            ignoreTimeScale: System.Boolean;
          }
        }
      }
    }
    export namespace Test {
      export interface AudioImportConfig {
        ASSET_PATH: System.String;
        _fullQualityBGMKbps: System.Single;
        _rarityToLoadVoiceByStreaming: System.Collections.Generic.List<Torappu.RarityRank>;
        CHAR_ID_EXTRACT_REG: RegExp;
        STREAMING_SE_PATH_PREFIX: System.String[];
      }
      export interface AudioTester {
        // m_mixerWindowRect: UnityEngine.Rect;
        // m_mixerTransitionToSnapshot: System.String;
        // m_mixerTransitionDuration: System.Single;
        // m_musicWindowRect: UnityEngine.Rect;
        // m_musicIntroKey: System.String;
        // m_musicLoopKey: System.String;
        // m_musicVolume: System.Single;
        // m_musicDelay: System.Single;
        // m_musicCrossfadeDuration: System.Single;
        // m_voiceWindowRect: UnityEngine.Rect;
        // m_voiceKey: System.String;
        // m_voiceChannel: System.String;
        // m_voiceVolume: System.Single;
        // m_voiceDelay: System.Single;
        // m_voiceLoop: System.Boolean;
        // m_fxWindowRect: UnityEngine.Rect;
        // m_fxKey: System.String;
        // m_fxChannel: System.String;
        // m_fxVolume: System.Single;
        // m_fxDelay: System.Single;
        // m_fxLoop: System.Boolean;
        // m_audioClipManagerWindowRect: UnityEngine.Rect;
        // m_audioKeyToPreload: System.String;
        // m_preloadPersistTag: System.String;
        // m_audioMaxInstance: System.Int32;
        // m_audioClipScroll: UnityEngine.Vector2;
        // m_channelWindowRect: UnityEngine.Rect;
        // m_channelScroll: UnityEngine.Vector2;
      }
    }
  }
  export namespace AudioManager {
    export enum FXCategory {
      FX_UI = "FX_UI",
      FX_BATTLE = "FX_BATTLE",
    }
    export interface SnapshotParam {
      snapshots: System.String[];
      weights: System.Single[];
    }
  }
  export namespace AVG {
    export interface AVG {
      // _prefab: UnityEngine.Object;
      // _onStoryEndCB: System.Action<Torappu.AVG.Story>;
      _assetLoader: Torappu.Resource.DirectAssetLoader;
      _variableConfig: Torappu.AVG.AVGVariableConfig;
      // <>f__am$cache0: System.Action;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_StartStory: XLua.DelegateBridge;
      // __Hotfix1_StartStory: XLua.DelegateBridge;
      // __Hotfix0_StartStoryByString: XLua.DelegateBridge;
      // __Hotfix0_StopStory: XLua.DelegateBridge;
      // __Hotfix0_InterruptStory: XLua.DelegateBridge;
      // __Hotfix0_ReloadCommonData: XLua.DelegateBridge;
      // __Hotfix0__StartStoryInternal: XLua.DelegateBridge;
      // __Hotfix0__StartStoryInternalByString: XLua.DelegateBridge;
      // __Hotfix0__OnStoryEnd: XLua.DelegateBridge;
      // __Hotfix0__OnStoryFailed: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
    }
    export interface AVGAssetLoader {
    }
    export interface AVGComponent {
      // <controller>k__BackingField: Torappu.AVG.AVGController;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_controller: XLua.DelegateBridge;
      // __Hotfix0_set_controller: XLua.DelegateBridge;
      // __Hotfix0_get_assetLoader: XLua.DelegateBridge;
      // __Hotfix0_get_router: XLua.DelegateBridge;
      // __Hotfix0_SetController: XLua.DelegateBridge;
      // __Hotfix0_OnStoryBegin: XLua.DelegateBridge;
      // __Hotfix0_OnStoryEnd: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
    }
    export interface AVGController {
      SCENECAMERA_DEPTH: System.Int32;
      UICAMERA_DEPTH: System.Int32;
      // _avgSceneCamera: UnityEngine.Camera;
      // _avgUICamera: UnityEngine.Camera;
      // _skipBtn: UnityEngine.GameObject;
      _autoBtn: Torappu.AVG.AVGAutoButton;
      // _speedBtn: UnityEngine.GameObject;
      // _playbackBtn: UnityEngine.GameObject;
      // _hideuiBtn: UnityEngine.GameObject;
      _playbackPanel: Torappu.AVG.PlaybackPanel;
      // _hideUiMask: UnityEngine.GameObject;
      // _hideObjects: UnityEngine.GameObject[];
      // _dialogPanel: UnityEngine.GameObject;
      _briefPanel: Torappu.AVG.SkipBriefPanel;
      _clickBtn: Torappu.AVG.AVGButton;
      _dialogDefaultSpeed: Torappu.AVG.AutoSpeed;
      _btnAutoSpeed: Torappu.AVG.AutoSpeed[];
      _quickAutoSpeed: Torappu.AVG.AutoSpeed[];
      // _cullMask: UnityEngine.RectTransform;
      // _fitTargets: UnityEngine.RectTransform[];
      _quickPlayPanel: Torappu.AVG.AVGQuickPlay;
      _toastHoldOnInterval: System.Int32;
      _clickToastHoldOnInterval: System.Int32;
      _tipClickTimes: System.Int32;
      _tipPerClickInterval: System.Int32;
      _tipClickTotalInterval: System.Int32;
      _quickPlayKnownNotifyPrefab: Torappu.AVG.QuickPlayKnownNotifyView;
      // m_originSizeDeltaOfFitTargets: UnityEngine.Vector2[];
      // m_skipToIndex: System.Int32;
      // m_components: Torappu.AVG.AVGComponent[];
      // m_eventPool: Torappu.EventPool<Torappu.AVG.AVGController.Event>;
      // m_router: Torappu.AVG.ResourceRouter;
      // m_story: Torappu.AVG.Story;
      // m_commandExecutorsMap: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.HashSet<Torappu.AVG.ICommandExecutor>>;
      // m_executeIndex: System.Int32;
      // m_blockingExecutors: System.Collections.Generic.List<Torappu.AVG.ICommandExecutor>;
      // m_coroutine: UnityEngine.Coroutine;
      // m_autoPlayingCoroutine: UnityEngine.Coroutine;
      // m_assetLoader: Torappu.AVG.AVGAssetLoader;
      // m_decisionValue: System.Int32;
      // m_needResumeAuto: System.Boolean;
      // m_needResumeAutoStatus: System.Boolean;
      autoPlayModeCache: Torappu.AVG.AVGStoryCache.AVGAutoMode;
      btnAutoModeCache: System.Int32;
      // m_gameObjectPool: System.Collections.Generic.Dictionary<System.String,UnityEngine.GameObject>;
      // m_prevActiveStates: System.Boolean[];
      // m_originActiveStates: System.Boolean[];
      // m_storyCache: Torappu.AVG.AVGStoryCache;
      // m_commandPredicator: Torappu.AVG.AVGController.ICommandPredicator;
      // m_commandFlowController: Torappu.AVG.AVGController.ICommandFlowController;
      // m_commandSkipController: Torappu.AVG.AVGController.ICommandSkipController;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_storyId: XLua.DelegateBridge;
      // __Hotfix0_get_storyCache: XLua.DelegateBridge;
      // __Hotfix0_get_toastQuickPlay: XLua.DelegateBridge;
      // __Hotfix0_get_isSkippable: XLua.DelegateBridge;
      // __Hotfix0_get_autoPlayMode: XLua.DelegateBridge;
      // __Hotfix0_set_autoPlayMode: XLua.DelegateBridge;
      // __Hotfix0_get_autoWaitBaseTime: XLua.DelegateBridge;
      // __Hotfix0_get_autoWaitTimePerText: XLua.DelegateBridge;
      // __Hotfix0_get_typeWriterDelay: XLua.DelegateBridge;
      // __Hotfix0_get_animateRatio: XLua.DelegateBridge;
      // __Hotfix0_get_isTheaterMode: XLua.DelegateBridge;
      // __Hotfix0_get_isAutoClickRaised: XLua.DelegateBridge;
      // __Hotfix0_get_isRunning: XLua.DelegateBridge;
      // __Hotfix0_get_isRunningTutorial: XLua.DelegateBridge;
      // __Hotfix0_get_decisionIndex: XLua.DelegateBridge;
      // __Hotfix0_set_decisionIndex: XLua.DelegateBridge;
      // __Hotfix0_SetCommandPredicator: XLua.DelegateBridge;
      // __Hotfix0_SetCommandFlowController: XLua.DelegateBridge;
      // __Hotfix0_SetCommandSkipController: XLua.DelegateBridge;
      // __Hotfix0_get_assetLoader: XLua.DelegateBridge;
      // __Hotfix0_get_eventPool: XLua.DelegateBridge;
      // __Hotfix0_get_router: XLua.DelegateBridge;
      // __Hotfix0_RunStory: XLua.DelegateBridge;
      // __Hotfix0_StopStory: XLua.DelegateBridge;
      // __Hotfix0_SkipStory: XLua.DelegateBridge;
      // __Hotfix0_EndStory: XLua.DelegateBridge;
      // __Hotfix0_OnStoryCommitted: XLua.DelegateBridge;
      // __Hotfix0_SetQuickSpeed: XLua.DelegateBridge;
      // __Hotfix0_RaiseAutoClick: XLua.DelegateBridge;
      // __Hotfix1_RaiseAutoClick: XLua.DelegateBridge;
      // __Hotfix0_RaiseSignal: XLua.DelegateBridge;
      // __Hotfix1_RaiseSignal: XLua.DelegateBridge;
      // __Hotfix0_RegisterExecutor: XLua.DelegateBridge;
      // __Hotfix0_UnregisterExecutor: XLua.DelegateBridge;
      // __Hotfix0_RegisterComponent: XLua.DelegateBridge;
      // __Hotfix0_UnregisterComponent: XLua.DelegateBridge;
      // __Hotfix0_RegisterExtraGameObject: XLua.DelegateBridge;
      // __Hotfix0_UnregisterExtraGameObject: XLua.DelegateBridge;
      // __Hotfix0_GetExtraGameObject: XLua.DelegateBridge;
      // __Hotfix1_GetExtraGameObject: XLua.DelegateBridge;
      // __Hotfix0_TryGetCharSortType: XLua.DelegateBridge;
      // __Hotfix0_DoExecuteCommands: XLua.DelegateBridge;
      // __Hotfix0_DoEndStory: XLua.DelegateBridge;
      // __Hotfix0_WaitForResourceUnload: XLua.DelegateBridge;
      // __Hotfix0_DoAutoClick: XLua.DelegateBridge;
      // __Hotfix0__GetCommandExecutors: XLua.DelegateBridge;
      // __Hotfix0__PreprocessCommands: XLua.DelegateBridge;
      // __Hotfix0__InitExecutors: XLua.DelegateBridge;
      // __Hotfix0__StopAutoClick: XLua.DelegateBridge;
      // __Hotfix0__CacheOriginSizeDeltaOfFitTargetsIfNot: XLua.DelegateBridge;
      // __Hotfix0__SetupFitMode: XLua.DelegateBridge;
      // __Hotfix0_OnCommandExecuted: XLua.DelegateBridge;
      // __Hotfix0_OnStoryBegin: XLua.DelegateBridge;
      // __Hotfix0_OnStoryEnd: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_OnSkipBtnClicked: XLua.DelegateBridge;
      // __Hotfix0_OnAutoBtnClicked: XLua.DelegateBridge;
      // __Hotfix0_OnSpeedBtnClicked: XLua.DelegateBridge;
      // __Hotfix0__ShowSpeedImage: XLua.DelegateBridge;
      // __Hotfix0_OnPlaybackBtnClicked: XLua.DelegateBridge;
      // __Hotfix0_OnClickPress: XLua.DelegateBridge;
      // __Hotfix0__CreateQuickPlayNotifyOptions: XLua.DelegateBridge;
      // __Hotfix0_OnLongPress: XLua.DelegateBridge;
      // __Hotfix0_SetTheaterMode: XLua.DelegateBridge;
      // __Hotfix0__SetTheaterModeStatus: XLua.DelegateBridge;
      // __Hotfix0__SaveAutoStatus: XLua.DelegateBridge;
      // __Hotfix0__LoadAutoStatus: XLua.DelegateBridge;
      // __Hotfix0_UpdateStorySkipMode: XLua.DelegateBridge;
      // __Hotfix0__UpdateSkipStatus: XLua.DelegateBridge;
      // __Hotfix0__ShowBriefPanel: XLua.DelegateBridge;
      // __Hotfix0__PauseAuto: XLua.DelegateBridge;
      // __Hotfix0_ResumeAuto: XLua.DelegateBridge;
      // __Hotfix0_OnHideuiBtnClicked: XLua.DelegateBridge;
      // __Hotfix0_OnHideuiResumeClicked: XLua.DelegateBridge;
      // __Hotfix0__DoCacheOriginActiveStates: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_OnEnable: XLua.DelegateBridge;
      // __Hotfix0_OnDisable: XLua.DelegateBridge;
      // __Hotfix0_TryFetchAndAddCameras: XLua.DelegateBridge;
    }
    export interface AVGLoader {
      _startDelay: System.Single;
      _debugStoryId: System.String;
    }
    export enum AVGGotoPageDest {
      NONE = "NONE",
      HOME = "HOME",
      SQUAD = "SQUAD",
      CHAR_REPO = "CHAR_REPO",
      HANDBOOK = "HANDBOOK",
      STAGE = "STAGE",
      BUILDING = "BUILDING",
      RECRUIT_ADVANCED = "RECRUIT_ADVANCED",
      RECRUIT_NORMAL = "RECRUIT_NORMAL",
      SHOP = "SHOP",
      MISSION = "MISSION",
      FRIEND = "FRIEND",
      BUILDING_MANUF = "BUILDING_MANUF",
      BUILDING_WORKSHOP = "BUILDING_WORKSHOP",
      BUILDING_TRADE = "BUILDING_TRADE",
    }
    export interface AVGSignalActions {
    }
    export interface AVGUtils {
    }
    export interface AVGVariableConfig {
      VARIABLE_PROMPT: System.String;
      // m_variableMap: System.Collections.Generic.Dictionary<System.String,System.Object>;
    }
    export interface Command {
      command: System.String;
      content: System.String;
      param: System.Collections.Generic.Dictionary<System.String,System.Object>;
      lineNumber: System.Int32;
    }
    export interface ICommandExecutor {
    }
    export interface IFadeTimeRatio {
    }
    export interface IContainsResRefs {
    }
    export interface AbstractResRefCollecter {
    }
    export interface CommandExecutorWrapper {
      // m_executor: Torappu.AVG.CommandExecutorWrapper.CommandExecuteDelegate;
      // m_signalReceiver: Torappu.AVG.CommandExecutorWrapper.RaiseSignalDelegate;
      // m_forceEnd: System.Action;
      // m_finishCb: System.Action<Torappu.AVG.ICommandExecutor>;
      // <command>k__BackingField: System.String;
    }
    export interface ExecutorComponent {
      // m_executorWrappers: Torappu.AVG.ICommandExecutor[];
      // m_finishCb: System.Action;
      // m_executors: System.Collections.Generic.Dictionary<System.String,Torappu.AVG.ExecutorComponent.Executor>;
      // m_signalReceivers: System.Collections.Generic.Dictionary<System.String,Torappu.AVG.ExecutorComponent.SignalReceiver>;
      // <isExecuting>k__BackingField: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_isExecuting: XLua.DelegateBridge;
      // __Hotfix0_set_isExecuting: XLua.DelegateBridge;
      // __Hotfix0_GetSignalReceivers: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_GetCommandExecutors: XLua.DelegateBridge;
      // __Hotfix0_Execute: XLua.DelegateBridge;
      // __Hotfix0_RaiseSignal: XLua.DelegateBridge;
      // __Hotfix0_OnFinish: XLua.DelegateBridge;
      // __Hotfix0_FinishCommand: XLua.DelegateBridge;
    }
    export interface AVGBlockerPanel {
      // _blocker: UnityEngine.UI.Image;
      _defaultFadetime: System.Single;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetExecutors: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0__ExecuteBlocker: XLua.DelegateBridge;
      // __Hotfix0_ForceCommandEnd: XLua.DelegateBridge;
      // __Hotfix0_OnFinish: XLua.DelegateBridge;
      // __Hotfix0_CalculateFadetime: XLua.DelegateBridge;
      // __Hotfix0_NeedSkipAnimation: XLua.DelegateBridge;
    }
    export interface AVGButton {
      _longPressThreshold: System.Int32;
      _dragDiatance: System.Int32;
      // onClickAction: System.Action;
      // onLongPressAction: System.Action<UnityEngine.Vector2>;
      // onDragAction: System.Action<UnityEngine.Vector2>;
      // m_context: Torappu.AVG.AVGButton.DragContext;
      // m_state: Torappu.AVG.AVGButton.State;
      // m_pressStartTime: System.DateTime;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0__OnPointerExit: XLua.DelegateBridge;
      // __Hotfix0_Update: XLua.DelegateBridge;
      // __Hotfix0_OnPointerDown: XLua.DelegateBridge;
    }
    export interface AVGCameraEffect {
      // _sceneCamera: UnityEngine.Camera;
      // _sceneRoot: UnityEngine.RectTransform;
      _defaultFadetime: System.Single;
      // _usedEffects: System.Collections.Generic.Dictionary<System.String,UnityEngine.Component>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetExecutors: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0__ClearEffects: XLua.DelegateBridge;
      // __Hotfix0__ClearEffect: XLua.DelegateBridge;
      // __Hotfix0__ExecuteCameraEffect: XLua.DelegateBridge;
      // __Hotfix0__AddEffect: XLua.DelegateBridge;
      // __Hotfix0__ResetCameraLocation: XLua.DelegateBridge;
      // __Hotfix0__ExecuteCameraShake: XLua.DelegateBridge;
      // __Hotfix0_ForceCommandEnd: XLua.DelegateBridge;
      // __Hotfix0_CalculateFadetime: XLua.DelegateBridge;
      // __Hotfix0_NeedSkipAnimation: XLua.DelegateBridge;
    }
    export interface AVGCharacterCutinPanel {
      _slotPool: Torappu.ObjectPool.GameObjectPoolComponent;
      _slots: System.Collections.Generic.Dictionary<System.String,Torappu.AVG.AVGCharacterCutinSlot>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetExecutors: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_DontInvoke_PlzImplInternalResRefCollector: XLua.DelegateBridge;
      // __Hotfix0__ExecuteCharacterCutin: XLua.DelegateBridge;
      // __Hotfix0__Reset: XLua.DelegateBridge;
      // __Hotfix0_ForceCommandEnd: XLua.DelegateBridge;
    }
    export interface AVGGotoLabel {
      PARAM_NAME_NAME: System.String;
      COMMAND_NAME_LABEL: System.String;
      COMMAND_NAME_GOTO: System.String;
      // m_gotoLabelController: Torappu.AVG.AVGGotoLabel.GotoLabelController;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetExecutors: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0__ExecuteLabel: XLua.DelegateBridge;
      // __Hotfix0__ExecuteGoto: XLua.DelegateBridge;
      // __Hotfix0_OnFinish: XLua.DelegateBridge;
      // __Hotfix0_ForceCommandEnd: XLua.DelegateBridge;
    }
    export interface AVGImagePanel {
      // SCREEN_ADAPT_FUNCTION_MAP: System.Collections.Generic.Dictionary<System.String,System.Func<UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2>>;
      // _foreImage: UnityEngine.UI.Image;
      // _backImage: UnityEngine.UI.Image;
      // _fadeEase: DG.Tweening.Ease;
      // _screenAdaptReferenceResolution: UnityEngine.Vector2;
      // <>f__mg$cache0: System.Func<UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2>;
      // <>f__mg$cache1: System.Func<UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2>;
      // <>f__mg$cache2: System.Func<UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2>;
      // <>f__mg$cache3: System.Func<UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2>;
      // <>f__mg$cache4: System.Func<UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetExecutors: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_DontInvoke_PlzImplInternalResRefCollector: XLua.DelegateBridge;
      // __Hotfix0__ExecuteImage: XLua.DelegateBridge;
      // __Hotfix0__ExecuteImageTween: XLua.DelegateBridge;
      // __Hotfix0_ForceCommandEnd: XLua.DelegateBridge;
      // __Hotfix0__LoadImage: XLua.DelegateBridge;
      // __Hotfix0__LoadSprite: XLua.DelegateBridge;
      // __Hotfix0__SwapImages: XLua.DelegateBridge;
      // __Hotfix0__ResetImage: XLua.DelegateBridge;
      // __Hotfix0__AdaptScreenWidth: XLua.DelegateBridge;
      // __Hotfix0__AdaptScreenHeight: XLua.DelegateBridge;
      // __Hotfix0__AdaptScreenShowAll: XLua.DelegateBridge;
      // __Hotfix0__AdaptScreenCoverAll: XLua.DelegateBridge;
      // __Hotfix0__AdaptScreenFill: XLua.DelegateBridge;
      // __Hotfix0_CalculateFadetime: XLua.DelegateBridge;
      // __Hotfix0_NeedSkipAnimation: XLua.DelegateBridge;
    }
    export interface AVGQuickPlay {
      X_POS: System.Single;
      DEFAULT_HEIGHT: System.Single;
      SMALL_HEIGHT: System.Single;
      // _slider: UnityEngine.GameObject;
      // _speedBtn: UnityEngine.GameObject;
      // _sliderFill: UnityEngine.UI.Image;
      _holdTime: System.Int32;
      _speedBtns: Torappu.AVG.AVGQuickPlayBtn[];
      // _speedBtnBG: UnityEngine.RectTransform;
      // _btnsCanvasGroup: UnityEngine.CanvasGroup;
      // m_startTime: System.DateTime;
      // m_state: Torappu.AVG.AVGQuickPlay.State;
      // m_speed: System.Int32;
    }
    export interface AVGQuickPlayBtn {
      // _selected: UnityEngine.GameObject;
      _quickPlayPanel: Torappu.AVG.AVGQuickPlay;
      // m_isSelected: System.Boolean;
    }
    export interface AVGShowItemPanel {
      _slotStyles: Torappu.AVG.AVGShowItemPanel.SlotStyle[];
      _slotInUse: Torappu.AVG.AVGShowItemSlot;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetExecutors: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_DontInvoke_PlzImplInternalResRefCollector: XLua.DelegateBridge;
      // __Hotfix0__ExecuteShowItem: XLua.DelegateBridge;
      // __Hotfix0__ExecuteHideItem: XLua.DelegateBridge;
      // __Hotfix0_ForceCommandEnd: XLua.DelegateBridge;
      // __Hotfix0__ShowItem: XLua.DelegateBridge;
      // __Hotfix0__FindSlotStyle: XLua.DelegateBridge;
      // __Hotfix0__LoadSprite: XLua.DelegateBridge;
      // __Hotfix0__Reset: XLua.DelegateBridge;
    }
    export enum AVGSkipMode {
      CAN_SKIP = "CAN_SKIP",
      FIRST_CANNOT_SKIP = "FIRST_CANNOT_SKIP",
    }
    export interface AVGSkipLabel {
      PARAM_NAME_SKIP_MODE: System.String;
      COMMAND_NAME_SKIP_NODE: System.String;
      MODE_NAME_FIRST_CANNOT_SKIP: System.String;
      MODE_NAME_CAN_SKIP: System.String;
      _avgController: Torappu.AVG.AVGController;
      // m_skipLabelController: Torappu.AVG.AVGSkipLabel.SkipLabelController;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_GetExecutors: XLua.DelegateBridge;
      // __Hotfix0__ExecuteSkipNode: XLua.DelegateBridge;
      // __Hotfix0_ForceCommandEnd: XLua.DelegateBridge;
    }
    export interface SkipNodeLabel {
      EMPTY: Torappu.AVG.SkipNodeLabel;
      LineNum: System.Int32;
      Mode: Torappu.AVG.AVGSkipMode;
    }
    export interface AutoSpeed {
      // Image: UnityEngine.Sprite;
      AutoWaitBaseTime: System.Single;
      AutoWaitTimePerText: System.Single;
      TypeWriterDelay: System.Single;
      AnimateRatio: System.Single;
    }
    export interface AVGStoryCache {
      RESET: Torappu.AVG.AVGStoryCache;
      // m_skipNodeLabel: System.Collections.Generic.Queue<Torappu.AVG.SkipNodeLabel>;
      // m_isFirstRead: System.Boolean;
      // m_hasSkipNode: System.Boolean;
      firstClickTime: System.DateTime;
      lastClickTime: System.DateTime;
      clickTimes: System.Int32;
      isTheaterMode: System.Boolean;
      autoPlayMode: Torappu.AVG.AVGStoryCache.AVGAutoMode;
      // <curSkipMode>k__BackingField: Torappu.AVG.AVGSkipMode;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_get_AVGBtnAutoMode: XLua.DelegateBridge;
      // __Hotfix0_set_AVGBtnAutoMode: XLua.DelegateBridge;
      // __Hotfix0_get_AVGQuickAutoMode: XLua.DelegateBridge;
      // __Hotfix0_set_AVGQuickAutoMode: XLua.DelegateBridge;
      // __Hotfix0_GetNextSkipNode: XLua.DelegateBridge;
      // __Hotfix0_AddSkipNode: XLua.DelegateBridge;
      // __Hotfix0_get_SkipNodeNum: XLua.DelegateBridge;
      // __Hotfix0_get_isFirstRead: XLua.DelegateBridge;
      // __Hotfix0_get_isShowBrief: XLua.DelegateBridge;
      // __Hotfix0_CalSkipMode: XLua.DelegateBridge;
      // __Hotfix0_get_curSkipMode: XLua.DelegateBridge;
      // __Hotfix0_set_curSkipMode: XLua.DelegateBridge;
      // __Hotfix0_CheckIfSkippableInCurMode: XLua.DelegateBridge;
      // __Hotfix0_ResetHasSkipNode: XLua.DelegateBridge;
      // __Hotfix0_SetClickRecord: XLua.DelegateBridge;
    }
    export interface AVGTheaterLabel {
      COMMAND_NAME_THREATER_MODE: System.String;
      _avgController: Torappu.AVG.AVGController;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetExecutors: XLua.DelegateBridge;
      // __Hotfix0__ExecuteTheaterNode: XLua.DelegateBridge;
      // __Hotfix0_ForceCommandEnd: XLua.DelegateBridge;
    }
    export interface AVGTutorialPanel {
      DEFAULT_ANCHOR: Torappu.AVG.AVGTutorialPanel.AnchorType;
      _fakeBtn: Torappu.AVG.AVGFakeButton;
      // _fakeGraphic: UnityEngine.UI.Graphic;
      _focus: Torappu.AVG.AVGTutorialFocus;
      _pointer: Torappu.AVG.AVGTutorialPointer;
      _dialog: Torappu.AVG.AVGTutorialDialog;
      // _inputBlocker: UnityEngine.UI.Graphic;
      // _btnClickBlocker: UnityEngine.UI.Graphic;
      // _inputPartialBlockers: UnityEngine.UI.Graphic[];
      // _inputBlockerBackground: UnityEngine.UI.Image;
      _highlightDefaultProtectTime: System.Single;
      // m_waitForSignal: System.String;
      // m_waitForHighlightClick: System.Boolean;
      // m_waitForDialogClick: System.Boolean;
      // m_highlightProtectTime: System.Single;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetExecutors: XLua.DelegateBridge;
      // __Hotfix0_GetSignalReceivers: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0__ExecuteTutorial: XLua.DelegateBridge;
      // __Hotfix0__ReceiveTutorialSignal: XLua.DelegateBridge;
      // __Hotfix0__RearrangePartialBlockers: XLua.DelegateBridge;
      // __Hotfix0__HidePartialBlockers: XLua.DelegateBridge;
      // __Hotfix0__ExecuteInputBlocker: XLua.DelegateBridge;
      // __Hotfix0__SetButtonTarget: XLua.DelegateBridge;
      // __Hotfix0__OnHighlightClicked: XLua.DelegateBridge;
      // __Hotfix0__DoHighlightClicked: XLua.DelegateBridge;
      // __Hotfix0__OnPopupDialogClicked: XLua.DelegateBridge;
      // __Hotfix0__DoPopupDialogClicked: XLua.DelegateBridge;
      // __Hotfix0__AlignRectTransform: XLua.DelegateBridge;
      // __Hotfix0__OnFakeButtonClicked: XLua.DelegateBridge;
      // __Hotfix0__Hide: XLua.DelegateBridge;
      // __Hotfix0_ResetAnchor: XLua.DelegateBridge;
      // __Hotfix0_ForceCommandEnd: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
      // __Hotfix0_Update: XLua.DelegateBridge;
      // __Hotfix0_CalculateFadetime: XLua.DelegateBridge;
      // __Hotfix0_NeedSkipAnimation: XLua.DelegateBridge;
    }
    export interface AVGVideoPanel {
      // _mediaPlayer: RenderHeads.Media.AVProVideo.MediaPlayer;
      _hideDuration: System.Single;
      // _hideEase: DG.Tweening.Ease;
      // m_canvasGroup: UnityEngine.CanvasGroup;
      // m_hidden: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
      // __Hotfix0_GetExecutors: XLua.DelegateBridge;
      // __Hotfix0_ForceCommandEnd: XLua.DelegateBridge;
      // __Hotfix0__ExecuteVideo: XLua.DelegateBridge;
      // __Hotfix0__HandlePlayEvent: XLua.DelegateBridge;
      // __Hotfix0_OnFinish: XLua.DelegateBridge;
      // __Hotfix0__SetHiddenInternal: XLua.DelegateBridge;
    }
    export interface BackgroundPanel {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetExecutors: XLua.DelegateBridge;
      // __Hotfix0_DontInvoke_PlzImplInternalResRefCollector: XLua.DelegateBridge;
      // __Hotfix0__LoadSprite: XLua.DelegateBridge;
    }
    export interface CharacterPanel {
      HORIZONTAL_OUTSCREEN_DELTA: System.Single;
      VERTICAL_OUTSCREEN_DELTA: System.Single;
      LEFT_CHAR_HORIZONAL_DELTA: System.Single;
      DEFAULT_FADE_TIME: System.Single;
      _middleSlot: Torappu.AVG.AVGCharacterSlot;
      _leftSlot: Torappu.AVG.AVGCharacterSlot;
      _rightSlot: Torappu.AVG.AVGCharacterSlot;
      // _focusColor: UnityEngine.Color;
      // _unfocusColor: UnityEngine.Color;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetExecutors: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_DontInvoke_PlzImplInternalResRefCollector: XLua.DelegateBridge;
      // __Hotfix0__ExecuteCharacter: XLua.DelegateBridge;
      // __Hotfix0__ExecuteCharacterAction: XLua.DelegateBridge;
      // __Hotfix0__ExecuteCharacterMove: XLua.DelegateBridge;
      // __Hotfix0__ExecuteCharacterJump: XLua.DelegateBridge;
      // __Hotfix0__ExecuteCharacterZoom: XLua.DelegateBridge;
      // __Hotfix0__ExecuteCharacterExit: XLua.DelegateBridge;
      // __Hotfix0_ForceCommandEnd: XLua.DelegateBridge;
      // __Hotfix0_OnStoryEnd: XLua.DelegateBridge;
      // __Hotfix0_CalculateFadetime: XLua.DelegateBridge;
      // __Hotfix0_NeedSkipAnimation: XLua.DelegateBridge;
    }
    export interface CommonExecutors {
      _clickAutoDelay: System.Single;
      _soundDefaultFadeTime: System.Single;
      // m_onStoryEnd: System.Action;
      // m_loopSoundChannels: Torappu.ListSet<System.String>;
      // m_delayCoroutine: UnityEngine.Coroutine;
      // m_onClickCallback: Torappu.EventPool.EventCallbackDelegate;
      // m_gotoFinishCb: System.Action;
      // m_gotoWaitForSignal: System.String;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetCommandExecutors: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_OnStoryEnd: XLua.DelegateBridge;
      // __Hotfix0_CalculateFadetime: XLua.DelegateBridge;
      // __Hotfix0_NeedSkipAnimation: XLua.DelegateBridge;
      // __Hotfix0__ExecuteDelayCommand: XLua.DelegateBridge;
      // __Hotfix0__ForceEndDelayCommand: XLua.DelegateBridge;
      // __Hotfix0__ExecuteClickCommand: XLua.DelegateBridge;
      // __Hotfix0__ForceEndClickCommand: XLua.DelegateBridge;
      // __Hotfix0__ResetAudio: XLua.DelegateBridge;
      // __Hotfix0__ExecutePlaySoundCommand: XLua.DelegateBridge;
      // __Hotfix0__ExecuteStopSoundCommand: XLua.DelegateBridge;
      // __Hotfix0__ExecuteSoundVolumeCommand: XLua.DelegateBridge;
      // __Hotfix0__ExecutePlayMusicCommand: XLua.DelegateBridge;
      // __Hotfix0__ExecuteStopMusicCommand: XLua.DelegateBridge;
      // __Hotfix0__ExecuteMusicVolumeCommand: XLua.DelegateBridge;
      // __Hotfix0__ExecuteConsumeGuideOnStoryEndCommand: XLua.DelegateBridge;
      // __Hotfix0__ExtractStrFromCommand: XLua.DelegateBridge;
      // __Hotfix0__ExecuteGotoPageCommand: XLua.DelegateBridge;
      // __Hotfix0__RouteToTarget: XLua.DelegateBridge;
      // __Hotfix0__SignalGotoPageReceiver: XLua.DelegateBridge;
      // __Hotfix0__ExecuteStartBattleCommand: XLua.DelegateBridge;
      // __Hotfix0__InvokeStartBattle: XLua.DelegateBridge;
      // __Hotfix0__TryGetRouteTargetFromGotoDest: XLua.DelegateBridge;
      // __Hotfix0_DontInvoke_PlzImplInternalResRefCollector: XLua.DelegateBridge;
    }
    export interface DecisionPanel {
      PARAM_NAME_OPTIONS: System.String;
      PARAM_NAME_VALUES: System.String;
      PARAM_NAME_REFERENCES: System.String;
      COMMAND_NAME_DECISION: System.String;
      COMMAND_NAME_PREDICATE: System.String;
      // _optionRoots: UnityEngine.GameObject[];
      // m_optionTexts: UnityEngine.UI.Text[];
      // m_optionButtons: UnityEngine.UI.Button[];
      // m_command: Torappu.AVG.Command;
      // m_decisionCommandPredicator: Torappu.AVG.DecisionPanel.DesicionCommandPrecidator;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetExecutors: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_OnOptionButtonPressed: XLua.DelegateBridge;
      // __Hotfix0__ExecuteDecision: XLua.DelegateBridge;
      // __Hotfix0__ExecutePredicate: XLua.DelegateBridge;
      // __Hotfix0__SetupOptionText: XLua.DelegateBridge;
      // __Hotfix0__GetOptionValue: XLua.DelegateBridge;
      // __Hotfix0__GetReferenceValue: XLua.DelegateBridge;
      // __Hotfix0_OnFinish: XLua.DelegateBridge;
      // __Hotfix0_ForceCommandEnd: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
    }
    export interface DialogPanel {
      MESSAGE_ASIDE_X_POS: System.Single;
      // _name: UnityEngine.UI.Text;
      _typeWriter: Torappu.AVG.AVGTypeWriterText;
      _hideDuration: System.Single;
      _autoWaitBaseTime: System.Single;
      _autoWaitTimePerText: System.Single;
      // _hideEase: DG.Tweening.Ease;
      // _message: UnityEngine.UI.Text;
      _messageBottomPadding: System.Single;
      _messageTextMaxHeight: System.Single;
      _nameTextMaxHeight: System.Single;
      // m_hidden: System.Boolean;
      // m_messageOriginYPos: System.Single;
      // m_messageOriginXPos: System.Single;
      // m_nameOriginYPos: System.Single;
      // m_canvasGroup: UnityEngine.CanvasGroup;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_isHidden: XLua.DelegateBridge;
      // __Hotfix0_set_isHidden: XLua.DelegateBridge;
      // __Hotfix0_get_isTyping: XLua.DelegateBridge;
      // __Hotfix0_GetExecutors: XLua.DelegateBridge;
      // __Hotfix0_OnStoryBegin: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0__SetTypeWriterDelay: XLua.DelegateBridge;
      // __Hotfix0__AdjustMessagePosition: XLua.DelegateBridge;
      // __Hotfix0__ExecuteAside: XLua.DelegateBridge;
      // __Hotfix0__ExecuteDialog: XLua.DelegateBridge;
      // __Hotfix0__CalculateTextHeight: XLua.DelegateBridge;
      // __Hotfix0_OnFinish: XLua.DelegateBridge;
      // __Hotfix0_ForceCommandEnd: XLua.DelegateBridge;
      // __Hotfix0__OnClicked: XLua.DelegateBridge;
      // __Hotfix0__OnTypeWriterEnd: XLua.DelegateBridge;
      // __Hotfix0__SetHiddenInternal: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
    }
    export interface PlaybackPanel {
      PARAM_NAME_OPTIONS: System.String;
      COMMAND_NAME_DECISION: System.String;
      COMMAND_NAME_PREDICATE: System.String;
      COMMAND_SUBTITLE: System.String;
      _avgPlaybackTextView: Torappu.AVG.AVGPlaybackTextView;
      // _scrollView: UnityEngine.UI.ScrollRect;
      // _closeBtn: UnityEngine.GameObject;
      // m_canvasGroup: UnityEngine.CanvasGroup;
      // m_playbackTween: Torappu.UI.FadeSwitchTween;
      // m_cells: System.Collections.Generic.List<Torappu.AVG.AVGPlaybackTextView>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_OnPointerClick: XLua.DelegateBridge;
      // __Hotfix0_GetExecutors: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0__ExecuteDialog: XLua.DelegateBridge;
      // __Hotfix0__ExecuteDecision: XLua.DelegateBridge;
      // __Hotfix0__ExecutePredicate: XLua.DelegateBridge;
      // __Hotfix0__ExecuteSubtitle: XLua.DelegateBridge;
      // __Hotfix0__ExecuteAside: XLua.DelegateBridge;
      // __Hotfix0__ResetLastCurrentIcon: XLua.DelegateBridge;
      // __Hotfix0_get_canvasGroup: XLua.DelegateBridge;
      // __Hotfix0_get_fadeSwitchTween: XLua.DelegateBridge;
      // __Hotfix0__UpdateShown: XLua.DelegateBridge;
      // __Hotfix0_get_isShown: XLua.DelegateBridge;
      // __Hotfix0_set_isShown: XLua.DelegateBridge;
      // __Hotfix0_OnCloseBtnClicked: XLua.DelegateBridge;
      // __Hotfix0_ForceCommandEnd: XLua.DelegateBridge;
    }
    export interface SkipBriefPanel {
      // _chapterName: UnityEngine.UI.Text;
      // _title: UnityEngine.UI.Text;
      // _avgTag: UnityEngine.UI.Text;
      // _content: UnityEngine.UI.Text;
      // _nonBriefPanel: UnityEngine.GameObject;
      // _briefPanel: UnityEngine.GameObject;
      // _onConfirm: System.Action;
      // m_canvasGroup: UnityEngine.CanvasGroup;
      // m_skipBriefTween: Torappu.UI.FadeSwitchTween;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
      // __Hotfix0_RenderBriefSkip: XLua.DelegateBridge;
      // __Hotfix0_RenderNonBriefSkip: XLua.DelegateBridge;
      // __Hotfix0_get_canvasGroup: XLua.DelegateBridge;
      // __Hotfix0_get_fadeSwitchTween: XLua.DelegateBridge;
      // __Hotfix0__UpdateShown: XLua.DelegateBridge;
      // __Hotfix0_get_isShown: XLua.DelegateBridge;
      // __Hotfix0_set_isShown: XLua.DelegateBridge;
      // __Hotfix0_OnCloseBtnClicked: XLua.DelegateBridge;
      // __Hotfix0_OnConfirmBtnClicked: XLua.DelegateBridge;
    }
    export interface SubtitlePanel {
      _typeWriter: Torappu.AVG.AVGTypeWriterText;
      _hideDuration: System.Single;
      _autoWaitBaseTime: System.Single;
      _autoWaitTimePerText: System.Single;
      // _hideEase: DG.Tweening.Ease;
      // _message: UnityEngine.UI.Text;
      // _textTransform: UnityEngine.RectTransform;
      // m_hidden: System.Boolean;
      // m_CanvasGroup: UnityEngine.CanvasGroup;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetExecutors: XLua.DelegateBridge;
      // __Hotfix0_get_isHidden: XLua.DelegateBridge;
      // __Hotfix0_set_isHidden: XLua.DelegateBridge;
      // __Hotfix0_get_isTyping: XLua.DelegateBridge;
      // __Hotfix0_Awake: XLua.DelegateBridge;
      // __Hotfix0__ExecuteSubtitle: XLua.DelegateBridge;
      // __Hotfix0__OnTypeWriterEnd: XLua.DelegateBridge;
      // __Hotfix0_ForceCommandEnd: XLua.DelegateBridge;
      // __Hotfix0__OnClicked: XLua.DelegateBridge;
      // __Hotfix0_OnStoryBegin: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0__SetTypeWriterDelay: XLua.DelegateBridge;
      // __Hotfix0__SetHiddenInternal: XLua.DelegateBridge;
    }
    export interface Consts {
      COMMAND_DIALOG: System.String;
      COMMAND_HEADER: System.String;
      COMMAND_ASIDE: System.String;
      COMMAND_SKIP_TO_THIS: System.String;
      PARAM_IS_TUTORIAL: System.String;
      PARAM_IS_SKIPPABLE: System.String;
      PARAM_IS_AUTOABLE: System.String;
      PARAM_DENY_AUTO_SWITCH_SCENE: System.String;
      PARAM_DONT_CLEAR_GAMEOBJECTPOOL_ONSTART: System.String;
      PARAM_KEY: System.String;
      PARAM_FIT_MODE: System.String;
      PARAM_CHARACTER_SORT_TYPE: System.String;
      EXECUTOR_TUTORIAL: System.String;
      EXECUTOR_GOTOPAGE: System.String;
      SIGNAL_ANY: System.String;
      KEY_BTN_FIRST_ZONESTAGE: System.String;
      KEY_BTN_FIRST_ZONE: System.String;
      KEY_BTN_SUBSTAGE_TRAIN_FORMAT: System.String;
      KEY_BTN_ZONETAB_TRAINNING: System.String;
      KEY_BTN_ZONETAB_WEEKLY_MTL: System.String;
      KEY_BTN_ZONETAB_WEEKLY_EVOLVE: System.String;
      KEY_BTN_ZONETAB_CAMPAIGN: System.String;
      KEY_BTN_SQUAD_FIRST_EMPTY_SLOT: System.String;
      KEY_BTN_SQUAD_SELECT_FIRST_ITEM: System.String;
      KEY_BTN_RECRUIT_FIRST_EMPTY_SLOT: System.String;
      KEY_BTN_CHAR_REPO_FIRST_ITEM: System.String;
      KEY_BTN_HANDBOOK_DEFAULT_ITEM: System.String;
      KEY_BTN_BUILDING_STATIONSELECT_FIRST_ITEM: System.String;
      KEY_BTN_BUILDING_ROOM_STATION_FIRST_EMPTY_SLOT: System.String;
      KEY_BTN_BUILDING_MANUFACT_FORMULA_FIRST_ITEM: System.String;
      KEY_BTN_BUILDING_WORKSHOP_FORMULA_FIRST_ITEM: System.String;
      KEY_BTN_BUILDING_TRADING_FIRST_ORDER: System.String;
      KEY_BTN_BUILDING_ASSIST_REPORT_FIRST_SLOT: System.String;
      KEY_BTN_BUILDING_ASSIST_REPORT_SECOND_SLOT: System.String;
      KEY_BTN_CAMPAIGN_ZONE: System.String;
      KEY_BTN_CAMPAIGN_FIRST_ZONE_STAGE: System.String;
      CUSTTRIGGER_BUILDING_CLOSED: System.String;
      COMMANDS_ALLOW_NO_EXECUTOR: System.String[];
      DELAY_SINGLE_FRAME: System.Single;
      EXECUTOR_SHOP_SWITCH_TOP_TAB: System.String;
      SIGNAL_SHOP_TOPTAB_SWITCHED: System.String;
      EXECUTOR_CAMPAIGN_FOCUS_ZONE: System.String;
      EXECUTOR_CAMPAIGN_REGISTER_ZONE_BTN: System.String;
    }
    export interface AVGException {
    }
    export interface CustomOperationKeys {
      SQUAD_ALLOW_ASSIST: System.String;
      SQUAD_ALLOW_MODIFY: System.String;
      STAGE_ALLOW_AUTOBATTLE: System.String;
      BUILDING_TOUCH_CONTROL: System.String;
      BUILDING_TOUCH_DORMITORY: System.String;
      BUILDING_TOUCH_HIRE: System.String;
      BUILDING_TOUCH_MEETING: System.String;
      BUILDING_ENTER_WORKSHOP: System.String;
      BUILDING_ENTER_TRADE_LV3: System.String;
      BUILDING_CONTROL_LV3_ENTER_MANUFACT: System.String;
      BUILDING_CONTROL_LV4_UPGRADE_OR_BUILDING: System.String;
      TYPE_ACT3D0_CAMP_SELECT: System.String;
      CRISIS_SYS: System.String;
      STAGE_HOME_INTRO: System.String;
    }
    export interface CustomOperationUtils {
    }
    export interface QuickPlayKnownNotifyView {
      QUICK_PLAY_TOAST_SIG: System.String;
      // _text: UnityEngine.UI.Text;
      // _btnText: UnityEngine.UI.Text;
      // _knownBtn: UnityEngine.GameObject;
      // _alphaHandler: UnityEngine.CanvasGroup;
      // _showPos: UnityEngine.Vector2;
      // _hidePos: UnityEngine.Vector2;
      _toastDuration: System.Single;
      // m_switchTween: Torappu.UI.UISwitchTween;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Render: XLua.DelegateBridge;
      // __Hotfix0_OnReadToastClick: XLua.DelegateBridge;
      // __Hotfix0_GetSwitchTween: XLua.DelegateBridge;
    }
    export interface IAVGParser {
    }
    export interface IAVGVariableConverter {
    }
    export interface AVGParser {
      ESCAPE_CHAR: System.Char;
      COMMAND_REGEX: RegExp;
      COMMENT_REGEX: RegExp;
      ONLY_SPACE_REGEX: RegExp;
      // m_errors: System.Collections.Generic.List<System.String>;
      // <variableConverter>k__BackingField: Torappu.AVG.IAVGVariableConverter;
    }
    export interface IAVGTextTranslater {
    }
    export interface VariableTranslater {
      // m_varGetter: Torappu.AVG.VariableTranslater.VariableGetterDelegate;
    }
    export interface ResourceRouter {
      BACKGROUND_FOLDER: System.String;
      IMAGE_FOLDER: System.String;
      CHARACTER_FOLDER: System.String;
      ITEM_FOLDER: System.String;
      SOUND_FOLDER: System.String;
      MUSIC_FOLDER: System.String;
      STORY_FOLDER: System.String;
    }
    export interface Story {
      id: System.String;
      title: System.String;
      isTutorial: System.Boolean;
      isSkippable: System.Boolean;
      isAutoable: System.Boolean;
      denyAutoSwitchScene: System.Boolean;
      dontClearGameObjectPoolOnStart: System.Boolean;
      fitMode: Torappu.AVG.AVGController.FitMode;
      // characterSortType: Torappu.UI.CharacterSortType;
      commands: System.Collections.Generic.List<Torappu.AVG.Command>;
    }
    export interface StorySceneParam {
      storyData: Torappu.StoryData;
      nextScene: System.String;
      originOptions: Torappu.GameFlowController.Options;
    }
    export interface TutorialObjectHolder {
      // _tutorialObjs: UnityEngine.GameObject[];
    }
    export interface CharSpriteConfig {
      // faceOffset: UnityEngine.Vector2;
      // faceScale: UnityEngine.Vector2;
      blackStart: System.Single;
      blackEnd: System.Single;
    }
    export interface AlphaSplitImageHolder {
      // m_image: UnityEngine.UI.Image;
      // m_alphaSplitMaterial: UnityEngine.Material;
    }
    export interface AVGAutoButton {
      // _image: UnityEngine.RectTransform;
      // _text: UnityEngine.GameObject;
      _noPlayWidth: System.Single;
      _defaultWidth: System.Single;
      _stepWidth: System.Single;
      _stepCount: System.Single;
      _stepTime: System.Single;
      // _defaultPos: UnityEngine.Vector2;
      // _posWithoutSkipBtn: UnityEngine.Vector2;
      // m_tweener: DG.Tweening.Tweener;
      // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
    }
    export interface AVGCharacterCutinSlot {
      // _canvasGroup: UnityEngine.CanvasGroup;
      // _offsetTransform: UnityEngine.RectTransform;
      // _maskRectTransform: UnityEngine.RectTransform;
      _characterSlot: Torappu.AVG.AVGCharacterSlot;
      _defaultFadetime: System.Single;
      _defaultSlotWidth: System.Int32;
      _showFadeStyle: Torappu.AVG.AVGCharacterCutinSlot.FadeStyle;
    }
    export interface AVGCharacterSlot {
      INDEX_TOKEN: System.Char;
      ALIAS_TOKEN: System.Char;
      // _foreImage: UnityEngine.UI.Image;
      // _backImage: UnityEngine.UI.Image;
      // _offset: UnityEngine.RectTransform;
      // _foreFaceImage: UnityEngine.UI.Image;
      // _backFaceImage: UnityEngine.UI.Image;
      // _fadeEase: DG.Tweening.Ease;
      // m_currentKey: System.String;
      // m_currBlackStart: System.Single;
      // m_currBlackEnd: System.Single;
      // m_currentFaceKey: System.String;
      // m_foreImageHolder: Torappu.AVG.AlphaSplitImageHolder;
      // m_backImageHolder: Torappu.AVG.AlphaSplitImageHolder;
      // m_foreFaceImageHolder: Torappu.AVG.AlphaSplitImageHolder;
      // m_backFaceImageHolder: Torappu.AVG.AlphaSplitImageHolder;
    }
    export interface AVGCharacterSpriteHub {
      sprites: Torappu.AVG.AVGCharacterSpriteHub.SpriteConfig[];
      // FacePos: UnityEngine.Vector3;
      // FaceSize: UnityEngine.Vector2;
      // m_rectTransform: UnityEngine.RectTransform;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_SetImage: XLua.DelegateBridge;
      // __Hotfix1_SetImage: XLua.DelegateBridge;
      // __Hotfix0__PickSetImageImpl: XLua.DelegateBridge;
      // __Hotfix0__HasFace: XLua.DelegateBridge;
      // __Hotfix0__SetImage: XLua.DelegateBridge;
      // __Hotfix0__SetImageLegency: XLua.DelegateBridge;
    }
    export interface AVGFakeButton {
      // onClickCB: System.Action;
      // m_longPressBtnOnTarget: Torappu.UI.UILongPressButton;
      // m_target: UnityEngine.UI.Button;
    }
    export interface AVGPlaybackTextView {
      // _name: UnityEngine.UI.Text;
      // _content: UnityEngine.UI.Text;
      // _current: UnityEngine.GameObject;
      // _options: UnityEngine.GameObject;
      // _optionsChosen: UnityEngine.UI.Image[];
    }
    export interface AVGShowItemCutinSlot {
      _defaultFadeTime: System.Single;
      // _offsetTransform: UnityEngine.RectTransform;
      // _maskRectTransform: UnityEngine.RectTransform;
      _showFadeStyle: Torappu.AVG.AVGShowItemCutinSlot.FadeStyle;
    }
    export interface AVGShowItemPhotoSlot {
      _defaultFadeTime: System.Single;
    }
    export interface AVGShowItemSlot {
      // _image: UnityEngine.UI.Image;
      // _black: UnityEngine.UI.Image;
      _defaultBlackAlpha: System.Single;
      // _canvasGroup: UnityEngine.CanvasGroup;
      // _onAnimEnd: System.Action;
    }
    export interface AVGTutorialDialog {
      _typeWriter: Torappu.AVG.AVGTypeWriterText;
      // _headImage: UnityEngine.UI.Image;
      _defaultFadeTime: System.Single;
      // _defaultPos: UnityEngine.Vector2;
      // m_group: UnityEngine.CanvasGroup;
    }
    export interface AVGTutorialFocus {
      // _focusRect: UnityEngine.RectTransform;
      _defaultFadeTime: System.Single;
      // _circleStyle: UnityEngine.GameObject;
      _extraScale: System.Single;
      // _highlightCircleStyle: UnityEngine.GameObject;
      // _highlightCircleObj: UnityEngine.GameObject;
      // _highlightRectStyle: UnityEngine.GameObject;
      // _highlightRectObj: UnityEngine.GameObject;
      // _blackMasks: Torappu.UI.UICustomAnchor[];
      // m_group: UnityEngine.CanvasGroup;
    }
    export interface AVGTutorialPointer {
      // _pointer: UnityEngine.UI.Image;
      _dragAnimTime: System.Single;
      // _pointerAnimator: UnityEngine.Animator;
      // _dragMoveCurve: UnityEngine.AnimationCurve;
      // _dragTrail: UnityEngine.TrailRenderer;
      // _dragStartIcon: UnityEngine.UI.Image;
      // _dragEndIcon: UnityEngine.UI.Image;
    }
    export interface AVGTypeWriterText {
      _typeWriterDelay: System.Single;
      _ignoreTimeScale: System.Boolean;
      _onMiddle: System.Boolean;
      _maxWidth: System.Single;
      // m_text: UnityEngine.UI.Text;
      // m_message: System.String;
      // m_onTypeEnd: System.Action;
      // m_typerTime: System.Single;
      // m_typing: System.Boolean;
      // m_onMiddle: System.Boolean;
      // m_sb: System.Text.StringBuilder;
      // m_rect: UnityEngine.RectTransform;
      // m_sizeFitter: UnityEngine.UI.ContentSizeFitter;
      // m_typeWriterDelay: System.Single;
      // m_textMessageIterator: System.Collections.Generic.IEnumerator<System.String>;
    }
    export namespace AVGController {
      export enum FitMode {
        DEFAULT = "DEFAULT",
        BLACK_MASK = "BLACK_MASK",
      }
      export enum Event {
        ON_BEGIN = "ON_BEGIN",
        ON_END_SUCCEED = "ON_END_SUCCEED",
        ON_END_FAILED = "ON_END_FAILED",
        ON_RESET = "ON_RESET",
        ON_CLICK = "ON_CLICK",
        ON_SPEED_SET = "ON_SPEED_SET",
        ON_PRE_END = "ON_PRE_END",
      }
      export interface ICommandPredicator {
      }
      export interface ICommandFlowController {
      }
      export interface ICommandSkipController {
      }
    }
    export namespace AVGLoader {
    }
    export namespace AVGSignalActions {
      export interface Signals {
        SIGNAL_BATTLE_START: System.String;
        SIGNAL_TOPMENU_SHOWN: System.String;
        SIGNAL_HOME_ROUTED: System.String;
        SIGNAL_STAGE_ROUTED: System.String;
        SIGNAL_SQUAD_ROUTED: System.String;
        SIGNAL_SHOP_ROUTED: System.String;
        SIGNAL_CHARACTERREPO_ROUTED: System.String;
        SIGNAL_RECRUIT_ADVANCED_ROUTED: System.String;
        SIGNAL_RECRUIT_NORMAL_ROUTED: System.String;
        SIGNAL_MISSION_ROUTED: System.String;
        SIGNAL_FRIEND_ROUTED: System.String;
        SIGNAL_GAINITEM_ROUTED: System.String;
        SIGNAL_BUILDING_ROUTED: System.String;
        SIGNAL_ZONE_SWITCHED_OR_RESUMED: System.String;
        SIGNAL_STAGEPREVIEW_RESUMED: System.String;
        SIGNAL_STAGEPREVIEW_PANEL_SWITCHED: System.String;
        SIGNAL_STAGE_WEEKLY_ZONETYPE_SELECTED: System.String;
        SIGNAL_STAGE_CAMPAIGN_ZONETYPE_SELECTED: System.String;
        SIGNAL_STAGE_MAINLINE_ZONETYPE_SELECTED: System.String;
        SIGNAL_SQUADSELECT_ENTERED: System.String;
        SIGNAL_SQUADSELECT_RESUMED: System.String;
        SIGNAL_SQUAD_FRIENDASSIST_RESUMED: System.String;
        SIGNAL_SQUADHOME_RESUMED: System.String;
        SIGNAL_SAVED_SQUAD: System.String;
        SIGNAL_SQUADSELECT_CHARCARD_SELECTED: System.String;
        SIGNAL_SHOP_QC_SUBTAB_SWITCHED: System.String;
        SIGNAL_CHARACTERINFO_HOME_RESUMED: System.String;
        SIGNAL_CHARACTERINFO_LVLUP_RESUMED: System.String;
        SIGNAL_CHARACTERINFO_SKILL_SELECT_RESUMED: System.String;
        SIGNAL_RECRUIT_BUILDCONFIG_RESUMED: System.String;
        SIGNAL_RECRUIT_GACHAEFFECT_SHOWN: System.String;
        SIGNAL_RECRUIT_GACHA_DRAWN: System.String;
        SIGNAL_MISSION_PAGE_SWITCHED: System.String;
        SIGNAL_MISSION_CONFIRMED_MISSION: System.String;
        SIGNAL_BUILDING_MODE_CHANGED: System.String;
        SIGNAL_BUILDING_OPERATION_MODE_CHANGED: System.String;
        SIGNAL_BUILDING_STATIONSELECT_RESUMED: System.String;
        SIGNAL_BUILDING_STATIONSELECT_CHARCARD_SELECTD: System.String;
        SIGNAL_BUILDING_ARCHITECTURE_VIEW_SETUP: System.String;
        SIGNAL_BUILDING_ROOM_CLEAN_CONFIRMED: System.String;
        SIGNAL_BUILDING_ROOM_BUILD_CONFIRMED: System.String;
        SIGNAL_BUILDING_MANUFACT_ROUTED: System.String;
        SIGNAL_BUILDING_MANUFACT_HOME_RESUMED: System.String;
        SIGNAL_BUILDING_MANUFACT_FORMULA_RESUMED: System.String;
        SIGNAL_BUILDING_MANUFACT_REMAINCNT_EDITABLE: System.String;
        SIGNAL_BUILDING_TRADING_ROUTED: System.String;
        SIGNAL_BUILDING_TRADING_HOME_RESUMED: System.String;
        SIGNAL_BUILDING_TRADING_NEGOTIATION_RESUMED: System.String;
        SIGNAL_BUILDING_WORKSHOP_HOME_RESUMED: System.String;
        SIGNAL_BUILDING_WORKSHOP_FORMULA_RESUMED: System.String;
        SIGNAL_BUILDING_WORKSHOP_FORMULA_FILTER_TOGGLED: System.String;
        SIGNAL_BUILDING_MEETING_ROUTED: System.String;
        SIGNAL_BUILDING_MEETING_CLUE_PRODUCT_TOGGLED: System.String;
        SIGNAL_BUILDING_ASSIST_REPORT_RESUMED: System.String;
        SIGNAL_GAINITEM_CONFIRMED: System.String;
        SIGNAL_CAMPAIGN_WORLD_HOME_STATE_READY: System.String;
        SIGNAL_CAMPAIGN_WORLD_ZONE_FOCUSED: System.String;
        SIGNAL_CAMPAIGN_ZONE_MAP_STATE_RESUMED: System.String;
        SIGNAL_CAMPAIGN_STAGE_PREVIEW_RESUMED: System.String;
        SIGNAL_CAMPAIGN_STAGE_BREAK_DETAIL_SHOWN: System.String;
      }
    }
    export namespace Command {
      export interface TryGetParamDelegate<T> {
      }
    }
    export namespace CommandExecutorWrapper {
      export interface CommandExecuteDelegate {
      }
      export interface RaiseSignalDelegate {
      }
    }
    export namespace ExecutorComponent {
      export interface Executor {
      }
      export interface SignalReceiver {
      }
    }
    export namespace AVGButton {
      export enum State {
        NONE = "NONE",
        CLICK = "CLICK",
        LONG_PRESS = "LONG_PRESS",
      }
      export interface DragContext {
        EMPTY: Torappu.AVG.AVGButton.DragContext;
        // <pointerId>k__BackingField: System.Int32;
        // <isEmpty>k__BackingField: System.Boolean;
        // <startPos>k__BackingField: UnityEngine.Vector2;
      }
    }
    export namespace AVGCameraEffect {
    }
    export namespace AVGCharacterCutinPanel {
      export interface InternalResRefCollector {
        // m_regex: RegExp;
      }
    }
    export namespace AVGGotoLabel {
      export interface GotoLabelController {
        // m_labelMap: System.Collections.Generic.Dictionary<System.String,System.Int32>;
        // m_gotoIndex: System.Int32;
      }
    }
    export namespace AVGImagePanel {
      export interface InternalResRefCollector {
      }
    }
    export namespace AVGQuickPlay {
      export enum State {
        NONE = "NONE",
        COUNT = "COUNT",
        QUICK_PLAY = "QUICK_PLAY",
      }
    }
    export namespace AVGShowItemPanel {
      export interface InternalResRefCollector {
      }
      export interface SlotStyle {
        styleKey: System.String;
        // slotPrefab: UnityEngine.Object;
      }
    }
    export namespace AVGSkipLabel {
      export interface SkipLabelController {
      }
    }
    export namespace AVGStoryCache {
      export enum AVGAutoMode {
        DEFAULT = "DEFAULT",
        BUTTON_AUTO = "BUTTON_AUTO",
        QUICK_PLAY = "QUICK_PLAY",
      }
    }
    export namespace AVGTutorialPanel {
      export enum AnchorType {
        Center = "Center",
        TopLeft = "TopLeft",
        TopRight = "TopRight",
        BottomRight = "BottomRight",
        BottomLeft = "BottomLeft",
        Top = "Top",
        Right = "Right",
        Bottom = "Bottom",
        Left = "Left",
      }
      export enum TutorialAnimStyle {
        None = "None",
        Highlight = "Highlight",
        Click = "Click",
        Drag = "Drag",
        NoWait = "NoWait",
      }
    }
    export namespace BackgroundPanel {
      export interface InternalResRefCollector {
      }
    }
    export namespace CharacterPanel {
      export interface InternalResRefCollector {
        // m_regex: RegExp;
      }
    }
    export namespace CommonExecutors {
      export interface InternalSoundRefCollector {
      }
      export interface InternalMusicRefCollector {
      }
    }
    export namespace DecisionPanel {
      export interface DesicionCommandPrecidator {
        decisionValue: System.Int32;
        referenceValues: System.Int32[];
      }
    }
    export namespace Demo {
      export interface AVGDemo {
        // _storyText: UnityEngine.TextAsset;
      }
      export interface AVGTutorialUI {
        // _specificButton: UnityEngine.GameObject;
      }
      export interface MockAVGLoader {
        BUTTON_WIDTH: System.Single;
        BUTTON_HEIGHT: System.Single;
        TOP_OFFSET: System.Single;
        _isScriptListShow: System.Boolean;
        // _scripts: UnityEngine.TextAsset[];
        // m_demo: Torappu.AVG.Demo.AVGDemo;
        // m_scroll: UnityEngine.Vector2;
      }
      export namespace AVGTutorialUI {
      }
    }
    export namespace QuickPlayKnownNotifyView {
      export interface Param {
        text: System.String;
        isShowBtn: System.Boolean;
        btnText: System.String;
      }
    }
    export namespace AVGParser {
      export interface TextBlock {
        text: System.String;
        isConcat: System.Boolean;
        readLineCount: System.Int32;
      }
    }
    export namespace VariableTranslater {
      export interface VariableGetterDelegate {
      }
    }
    export namespace AVGCharacterCutinSlot {
      export enum FadeStyle {
        fade = "fade",
        horiz_expand_center = "horiz_expand_center",
        horiz_expand_left2right = "horiz_expand_left2right",
        horiz_expand_right2left = "horiz_expand_right2left",
        vert_expand_center = "vert_expand_center",
        vert_expand_top2bottom = "vert_expand_top2bottom",
        vert_expand_bottom2top = "vert_expand_bottom2top",
      }
    }
    export namespace AVGCharacterSpriteHub {
      export interface SpriteConfig {
        // sprite: UnityEngine.Sprite;
        // alphaTex: UnityEngine.Texture;
        alias: System.String;
      }
    }
    export namespace AVGShowItemCutinSlot {
      export enum FadeStyle {
        fade = "fade",
        horiz_expand_center = "horiz_expand_center",
        horiz_expand_left2right = "horiz_expand_left2right",
        horiz_expand_right2left = "horiz_expand_right2left",
        vert_expand_center = "vert_expand_center",
        vert_expand_top2bottom = "vert_expand_top2bottom",
        vert_expand_bottom2top = "vert_expand_bottom2top",
      }
    }
    export namespace AVGTutorialFocus {
      export enum Style {
        Circle = "Circle",
        HighlightCircle = "HighlightCircle",
        HighlightRect = "HighlightRect",
      }
    }
    export namespace AVGTypeWriterText {
    }
  }
  export namespace TextManager {
    export interface SimpleVariableGetter {
    }
  }
  export namespace BattleTweenMgr {
    export interface Tween {
      // m_onUpdate: System.Action<Torappu.FP>;
      // m_onKill: System.Action;
      // m_startValue: Torappu.FP;
      // m_endValue: Torappu.FP;
      // m_duration: Torappu.FP;
      // m_easeFunc: EaseFunctions.Interpolator.EasingFunction;
      // m_delayTime: Torappu.FP;
      // m_accumTime: Torappu.FP;
      // m_state: Torappu.BattleTweenMgr.Tween.State;
      // m_vec2Bundle: Torappu.BattleTweenMgr.Tween.Vector2Bundle;
    }
    export namespace Tween {
      export enum State {
        NONE = "NONE",
        INITED = "INITED",
        PLAYING = "PLAYING",
        STOPPED = "STOPPED",
      }
      export interface Vector2Bundle {
        // onUpdate: System.Action<UnityEngine.Vector2>;
        // startPos: UnityEngine.Vector2;
        // endPos: UnityEngine.Vector2;
      }
    }
  }
  export namespace Building {
    export interface AbstractRoomSlot {
      // m_model: Torappu.Building.RoomSlotModel;
    }
    export interface Consts {
      HEIGHT_PER_STOREY: System.Int32;
      MANUFACT_COST_SLOTS: System.Int32;
      SHOP_STOCK_SLOTS: System.Int32;
      WORKSHOP_COST_SLOTS: System.Int32;
      MANUFACT_MAX_TARGET: System.Int32;
      DORM_RECOVER_AP_FACTOR: System.Int32;
      STATIC_BATCH_EXCLUSIVE_TAG: System.String;
      // BASE_BUFF_VAL_TAG_BKG_COLOR: UnityEngine.Color;
      // BASE_BUFF_VAL_TAG_TEXT_COLOR: UnityEngine.Color;
      MAX_FURNITURE_STORAGE: System.Int32;
      GRID_HALF_SIZE: System.Single;
      TAG_ROOM_OBJECT: System.String;
      DORMITORY_ADD_NUMBER_COLOR_STRING: System.String;
    }
    export enum ScaleType {
      FIT_CENTER = "FIT_CENTER",
      CROP_CENTER = "CROP_CENTER",
      FIT_HEIGHT = "FIT_HEIGHT",
    }
    export enum BuildingEvent {
      BUILDING_DATA_LOADED = "BUILDING_DATA_LOADED",
      BUILDING_MODE_CHANGED = "BUILDING_MODE_CHANGED",
      VAULT_LAYOUT_UPDATE = "VAULT_LAYOUT_UPDATE",
      VAULT_ROOM_OBJ_CREATED = "VAULT_ROOM_OBJ_CREATED",
      VAULT_ROOM_OBJ_CHANGED = "VAULT_ROOM_OBJ_CHANGED",
      VAULT_ROOM_OBJ_DESTROYED = "VAULT_ROOM_OBJ_DESTROYED",
      OPERATION_MODE_CHANGED = "OPERATION_MODE_CHANGED",
      ROOM_SELECTED = "ROOM_SELECTED",
      ROOM_UNSELECTED = "ROOM_UNSELECTED",
      ROOM_REQUEST_CLEAN = "ROOM_REQUEST_CLEAN",
      ROOM_REQUEST_BUILD = "ROOM_REQUEST_BUILD",
      ROOM_REQUEST_LEVELUP = "ROOM_REQUEST_LEVELUP",
      ROOM_REQUEST_TEARDOWN = "ROOM_REQUEST_TEARDOWN",
      ROOM_REQUEST_DIY = "ROOM_REQUEST_DIY",
      ROOM_REQUEST_DIY_CANCEL = "ROOM_REQUEST_DIY_CANCEL",
      ROOM_REQUEST_DIY_LEVELUP = "ROOM_REQUEST_DIY_LEVELUP",
      ROOM_REQUEST_DIY_LEVELUP_OK = "ROOM_REQUEST_DIY_LEVELUP_OK",
      ROOM_REQUEST_DIY_LEVELUP_CANCEL = "ROOM_REQUEST_DIY_LEVELUP_CANCEL",
      ROOM_SHOW_DETAIL = "ROOM_SHOW_DETAIL",
      ROOM_BUILD_CHOICE_SELECTED = "ROOM_BUILD_CHOICE_SELECTED",
      BP_ROOM_SETTLE_REQUESTED = "BP_ROOM_SETTLE_REQUESTED",
      BP_HILIGHT_MASK_CLICKED = "BP_HILIGHT_MASK_CLICKED",
      DIY_PAGE_SAVED_CHANGES = "DIY_PAGE_SAVED_CHANGES",
      TODO_NOTIFY_STATE_CHANGED = "TODO_NOTIFY_STATE_CHANGED",
      DIY_CHANGE_VAULT_ROOMS_REFLECT = "DIY_CHANGE_VAULT_ROOMS_REFLECT",
    }
    export enum RoomSlotState {
      UNCLEANED = "UNCLEANED",
      EMPTY = "EMPTY",
      UPGRADING = "UPGRADING",
      BUILT = "BUILT",
    }
    export enum OperationMode {
      NONE = "NONE",
      NORMAL = "NORMAL",
      ARCHITECTURE = "ARCHITECTURE",
      VISIT = "VISIT",
    }
    export enum RaycastBlockKey {
      NONE = "NONE",
      VAULT_MODE = "VAULT_MODE",
      BP_MODE = "BP_MODE",
      COMMON_PAGE_TRANSITION = "COMMON_PAGE_TRANSITION",
      FLOAT_PAGE_POPUP = "FLOAT_PAGE_POPUP",
      NETWORK = "NETWORK",
      VAULT_STATION_FLOAT = "VAULT_STATION_FLOAT",
      VAULT_DETAIL_FLOAT = "VAULT_DETAIL_FLOAT",
      EMPTY_PAGE = "EMPTY_PAGE",
      AVG = "AVG",
      GUIDEBOOK = "GUIDEBOOK",
    }
    export interface IBuildingContext {
    }
    export interface DynamicBuildingContext {
      // m_refCount: System.Int32;
      // m_content: Torappu.Building.DynamicBuildingContext.Content;
      // m_isInitRetain: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetInstSignature: XLua.DelegateBridge;
      // __Hotfix0_Retain: XLua.DelegateBridge;
      // __Hotfix0_Release: XLua.DelegateBridge;
      // __Hotfix0_Clear: XLua.DelegateBridge;
      // __Hotfix0_UpdateTime: XLua.DelegateBridge;
      // __Hotfix0_get_model: XLua.DelegateBridge;
      // __Hotfix0_get_service: XLua.DelegateBridge;
      // __Hotfix0_get_isEmpty: XLua.DelegateBridge;
      // __Hotfix0__CreateInst: XLua.DelegateBridge;
    }
    export interface BuildingContextProvider {
      // s_dynamicContext: Torappu.Building.DynamicBuildingContext;
    }
    export interface BuildingController {
      _blueprintMode: Torappu.Building.BP.BlueprintMode;
      _architecture: Torappu.Building.BP.BuildingArchitecture;
      _vaultMode: Torappu.Building.Vault.VaultMode;
      _factory: Torappu.Building.BuildingFactory;
      _moduleHolder: Torappu.Building.BuildingModuleHolder;
      // _buildingHolder: UnityEngine.Transform;
      _options: Torappu.Building.BuildingController.Options;
      // _globalNotifyViewHolder: Torappu.Building.UI.BuildingGlobalNotificationHolder;
      _diyRoomIndexConfig: Torappu.Building.DIY.DIYRoomIndexConfig;
      _useMock: System.Boolean;
      // m_diy: Torappu.Building.DIY.IDIYFeatureComponents;
      // m_visitFurnitureManager: Torappu.Building.DIY.FurnitureManager;
      // m_visitModifierManager: Torappu.Building.DIY.DIYRoomModifierManager;
      // m_furnitureManagerInitialized: System.Boolean;
      // m_roomModifierManagerInitialized: System.Boolean;
      // m_furnitureTypeDatabaseInitialized: System.Boolean;
      // m_presetManagerInitialized: System.Boolean;
      // m_diyShopInitialized: System.Boolean;
      // m_operationMode: Torappu.Building.OperationMode;
      // m_model: Torappu.Building.BuildingModel;
      // m_stateMachine: Torappu.Building.BuildingStateMachine;
      // m_eventPool: Torappu.EventPool<Torappu.Building.BuildingEvent>;
      // m_raycastBlockMngr: Torappu.Building.BuildingModeRaycastManager;
      // m_serviceController: Torappu.Building.BuildingServiceController;
      // m_reflectShaderProfile: Torappu.GraphicEffect.Reflection.HGReflectionShaderProfile;
      // m_isRefectProfileUnavailable: System.Boolean;
      // m_isToDoNotifyOn: System.Boolean;
      // <>f__am$cache0: System.Action<Torappu.UI.UIRouteTarget,System.Object,System.Action<Torappu.UI.UIRouteTarget,System.Object>>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_isToDoNotifyOn: XLua.DelegateBridge;
      // __Hotfix0_set_isToDoNotifyOn: XLua.DelegateBridge;
      // __Hotfix0_get_factory: XLua.DelegateBridge;
      // __Hotfix0_get_model: XLua.DelegateBridge;
      // __Hotfix0_get_service: XLua.DelegateBridge;
      // __Hotfix0_get_isEmpty: XLua.DelegateBridge;
      // __Hotfix0_get_options: XLua.DelegateBridge;
      // __Hotfix0_get_eventPool: XLua.DelegateBridge;
      // __Hotfix0_get_furnitureDataProvider: XLua.DelegateBridge;
      // __Hotfix0_get_modifierDataProvider: XLua.DelegateBridge;
      // __Hotfix0_get_operationMode: XLua.DelegateBridge;
      // __Hotfix0_set_operationMode: XLua.DelegateBridge;
      // __Hotfix0_get_furnitureManager: XLua.DelegateBridge;
      // __Hotfix0_get_DIYRoomModifierManager: XLua.DelegateBridge;
      // __Hotfix0_get_furnitureTypeDB: XLua.DelegateBridge;
      // __Hotfix0_get_DIYRoomInfoManager: XLua.DelegateBridge;
      // __Hotfix0_get_DIYPresetManager: XLua.DelegateBridge;
      // __Hotfix0_get_DIYItemShop: XLua.DelegateBridge;
      // __Hotfix0_get_furnitureStorage: XLua.DelegateBridge;
      // __Hotfix0_get_furnitureSaver: XLua.DelegateBridge;
      // __Hotfix0_get_furnitureGroupDataDB: XLua.DelegateBridge;
      // __Hotfix0_get_notifyHolder: XLua.DelegateBridge;
      // __Hotfix0_ReleaseDIYCachedResources: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_get_showBuildings: XLua.DelegateBridge;
      // __Hotfix0_set_showBuildings: XLua.DelegateBridge;
      // __Hotfix0_RMOnly_BlockVaultRaycast: XLua.DelegateBridge;
      // __Hotfix0_RMOnly_BlockBlueprintRaycast: XLua.DelegateBridge;
      // __Hotfix0_BMOnly_BlockBuildingModeRaycast: XLua.DelegateBridge;
      // __Hotfix0_AVGOnly_BlockBuildingModeRaycastForAllModes: XLua.DelegateBridge;
      // __Hotfix0_BlockBuildingRaycast: XLua.DelegateBridge;
      // __Hotfix0_InitBuildingForCurrentPlayer: XLua.DelegateBridge;
      // __Hotfix0_InitBuildingForVisit: XLua.DelegateBridge;
      // __Hotfix0_Display: XLua.DelegateBridge;
      // __Hotfix0_ToggleMode: XLua.DelegateBridge;
      // __Hotfix0_SwitchMode: XLua.DelegateBridge;
      // __Hotfix0_GetBlurBlueprintImage: XLua.DelegateBridge;
      // __Hotfix0_GetState: XLua.DelegateBridge;
      // __Hotfix0_get_curBuildingMode: XLua.DelegateBridge;
      // __Hotfix0_QueryRoomIndex: XLua.DelegateBridge;
      // __Hotfix0_QueryRoomSlotId: XLua.DelegateBridge;
      // __Hotfix0_get_buildingCamera: XLua.DelegateBridge;
      // __Hotfix0_get_reflectShaderProfile: XLua.DelegateBridge;
      // __Hotfix0_IsReflectionEnabled: XLua.DelegateBridge;
      // __Hotfix0_ConfigTopMenuRouteEvents: XLua.DelegateBridge;
      // __Hotfix0_FocusRoomInVault: XLua.DelegateBridge;
      // __Hotfix0__InitStateMachineForCurPlayer: XLua.DelegateBridge;
      // __Hotfix0__InitStateMachineForVisiting: XLua.DelegateBridge;
      // __Hotfix0__LoadDataForCurPlayer: XLua.DelegateBridge;
      // __Hotfix0__LoadDataForVisiting: XLua.DelegateBridge;
      // __Hotfix0__ChangeOperationModeInternal: XLua.DelegateBridge;
      // __Hotfix0_FixedUpdate: XLua.DelegateBridge;
      // __Hotfix0_OnDestroy: XLua.DelegateBridge;
    }
    export interface BuildingFactory {
      _defaultBRoom: Torappu.Building.BP.BRoom;
      _defaultVRoom: Torappu.Building.Vault.VRoom;
      // m_loadBalancer: Torappu.Building.GameObjectSplitFrameLoadBalancer;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_directAssetLoader: XLua.DelegateBridge;
      // __Hotfix0_OnStart: XLua.DelegateBridge;
      // __Hotfix0_CreateBRoomSlot: XLua.DelegateBridge;
      // __Hotfix0_CreateBRoom: XLua.DelegateBridge;
      // __Hotfix0_CreateBRoomSlotHilight: XLua.DelegateBridge;
      // __Hotfix0_CreateVRoom: XLua.DelegateBridge;
      // __Hotfix0_CreateVDoor: XLua.DelegateBridge;
      // __Hotfix0_CreateVCharacterAsync: XLua.DelegateBridge;
      // __Hotfix0__OnBuildingModeChanged: XLua.DelegateBridge;
      // __Hotfix0__CheckIsPauseForSplitFrameLoader: XLua.DelegateBridge;
      // __Hotfix0_OnDestroy: XLua.DelegateBridge;
      // __Hotfix0_Update: XLua.DelegateBridge;
    }
    export interface IBuildingMode {
    }
    export interface BuildingMode<T> {
      // <stateMachine>k__BackingField: Torappu.Building.BuildingStateMachine;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_isActiveNode: XLua.DelegateBridge;
      // __Hotfix0_get_selectedRoom: XLua.DelegateBridge;
      // __Hotfix0_get_stateMachine: XLua.DelegateBridge;
      // __Hotfix0_set_stateMachine: XLua.DelegateBridge;
      // __Hotfix0_get_model: XLua.DelegateBridge;
      // __Hotfix0_Register: XLua.DelegateBridge;
      // __Hotfix0_OnEnter: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_OnExit: XLua.DelegateBridge;
      // __Hotfix0_CheckSwitchOut: XLua.DelegateBridge;
      // __Hotfix0_ShowCoroutine: XLua.DelegateBridge;
      // __Hotfix0_HideCoroutine: XLua.DelegateBridge;
    }
    export interface BuildingModuleHolder {
    }
    export interface BuildingStateMachine {
      // m_isTransiting: System.Boolean;
      // <controller>k__BackingField: Torappu.Building.BuildingController;
    }
    export interface GridMap {
      HORIZONTAL_EDGE_NODE_COST: System.Int32;
      VERTICAL_EDGE_NODE_COST: System.Int32;
      // s_sharedNodeList: System.Collections.Generic.List<Torappu.Building.GridMap.Node>;
      // m_verticalEdgeIndexOffset: System.Int32;
      // m_objToPosMap: System.Collections.Generic.Dictionary<Torappu.Building.GridMap.IGridObject,Torappu.GridPosition>;
      // m_cachedMapPath: System.Collections.Generic.Dictionary<Torappu.Building.GridMap.PathKey,Torappu.Building.Path>;
      // m_map: Torappu.Building.GridMap.GridNode[][];
      // m_edges: Torappu.Building.GridMap.EdgeNode[];
      // m_pathFinder: Torappu.Building.TwoPointPathFinder;
      // m_emptyGrids: Torappu.Heap<Torappu.Building.GridMap.GridNode>;
      // <width>k__BackingField: System.Int32;
      // <height>k__BackingField: System.Int32;
    }
    export interface Path {
      NULL: Torappu.Building.Path;
      distance: System.Int32;
      nodes: Torappu.Building.GridMap.Node[];
    }
    export interface TwoPointPathFinder {
      // m_openList: Torappu.Building.TwoPointPathFinder.Heap;
      // m_closedList: System.Collections.Generic.HashSet<Torappu.Building.TwoPointPathFinder.InternalNode>;
      // m_nodeMap: System.Collections.Generic.Dictionary<Torappu.Building.GridMap.Node,Torappu.Building.TwoPointPathFinder.InternalNode>;
      // m_path: System.Collections.Generic.List<Torappu.Building.GridMap.Node>;
      // <map>k__BackingField: Torappu.Building.GridMap;
    }
    export interface ResourceRouter {
    }
    export interface BuildingPrefabMaker {
      VCHARACTER_PATH: System.String;
      FILTER_SEPARATORS: System.Char[];
      REQUIRED_ANIMATIONS: System.String[];
      WARNING_ANIMATIONS: System.String[];
      _spineFolder: System.String;
      _characterProto: Torappu.Building.Vault.VCharacter;
      // _characterSpecJson: UnityEngine.TextAsset;
      _charDB: Torappu.CharacterDB;
      _charFilter: System.String;
    }
    export enum BuildingAssistantType {
      NONE = "NONE",
      MAIN = "MAIN",
      LAYER = "LAYER",
    }
    export interface BuildingAssistantModel {
      EMPTY: Torappu.Building.BuildingAssistantModel;
      // m_targetSlotWhenIdel: System.String;
      type: Torappu.Building.BuildingAssistantType;
      charModel: Torappu.Building.BuildingCharModel;
      index: System.Int32;
      // <>f__mg$cache0: System.Comparison<System.Collections.Generic.KeyValuePair<System.String,System.Int32>>;
      // __Hotfix0_IsEmpty: XLua.DelegateBridge;
      // __Hotfix0_get_staySlotId: XLua.DelegateBridge;
      // __Hotfix0_LoadAssistants: XLua.DelegateBridge;
      // __Hotfix0_LoadAssistTargetSlotsWhenIdel: XLua.DelegateBridge;
      // __Hotfix0__LoadSortedDorms4Assits: XLua.DelegateBridge;
      // __Hotfix0__CompareDormSlotOffsetPair: XLua.DelegateBridge;
      // __Hotfix0__LoadSingleAssist: XLua.DelegateBridge;
    }
    export interface BuildingCharModel {
      EMPTY: Torappu.Building.BuildingCharModel;
      instId: System.Int32;
      charId: System.String;
      skinInfo: Torappu.CharUISkinStruct;
      name: System.String;
      lastManpower: System.Int64;
      maxManpower: System.Int64;
      powerCost: System.Int64;
      slotId: System.String;
      stationIndex: System.Int32;
      lastApAddTime: System.DateTime;
      stateFinishTime: System.DateTime;
      isTraining: System.Boolean;
      canGainIntimacy: System.Boolean;
      assistIntimacy: System.Boolean;
      // <isVisitor>k__BackingField: System.Boolean;
      extension: System.String;
    }
    export interface BuildingCharMPHelper {
      // m_countDown: Torappu.CountDownTask;
      // m_cachedModel: Torappu.Building.BuildingCharModel;
      // onManpowerChanged: System.Action;
    }
    export interface BuildingLaborViewModel {
      // m_laborRecoverPoint: System.Int64;
      // m_lastServiceTime: System.DateTime;
      // m_lastServiceLabor: System.Int32;
      // m_lastProcessPoint: System.Double;
      // m_countDown: Torappu.CountDownTask;
      // <maxLabor>k__BackingField: System.Int32;
      // <buffSpeed>k__BackingField: System.Single;
      // <currentLabor>k__BackingField: System.Int32;
      // onValueTick: System.Action<Torappu.Building.BuildingLaborViewModel>;
      // onValueChanged: System.Action<Torappu.Building.BuildingLaborViewModel>;
    }
    export interface BuildingModel {
      MAX_MEETING_VISITOR_NUM: System.Int32;
      // m_slotSearchTable: System.Collections.Generic.Dictionary<System.String,Torappu.Building.RoomSlotModel>;
      // m_buildingBound: Torappu.GridPosition;
      // m_sharedLaborModel: Torappu.Building.BuildingLaborViewModel;
      // m_buildingCharSearchTable: System.Collections.Generic.Dictionary<System.Int32,Torappu.Building.BuildingCharModel>;
      slotGraph: Torappu.Building.RoomSlotGraph;
      layout: System.Collections.Generic.List<Torappu.Building.RoomSlotModel>;
      storeys: Torappu.ListDict<System.String,Torappu.Building.StoreyViewModel>;
      // <assistants>k__BackingField: System.Collections.Generic.List<Torappu.Building.BuildingAssistantModel>;
      // <visitors>k__BackingField: System.Collections.Generic.List<Torappu.Building.BuildingVisitorModel>;
      // <playerRooms>k__BackingField: Torappu.PlayerBuildingRoom;
      // <playerChars>k__BackingField: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerBuildingChar>;
      // m_playerAssist: System.Collections.Generic.List<System.Int32>;
      // <playerLabor>k__BackingField: Torappu.PlayerBuildingLabor;
      // <playerFurnitureInfo>k__BackingField: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerBuildingFurnitureInfo>;
      // <curElectric>k__BackingField: System.Int32;
      // <maxElectric>k__BackingField: System.Int32;
      // <layoutId>k__BackingField: System.String;
      // <controlRoom>k__BackingField: Torappu.Building.RoomSlotModel;
      // <meetingRoom>k__BackingField: Torappu.Building.RoomSlotModel;
      // <>f__am$cache0: System.Comparison<Torappu.Building.RoomSlotModel>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_assistants: XLua.DelegateBridge;
      // __Hotfix0_set_assistants: XLua.DelegateBridge;
      // __Hotfix0_get_visitors: XLua.DelegateBridge;
      // __Hotfix0_set_visitors: XLua.DelegateBridge;
      // __Hotfix0_get_playerRooms: XLua.DelegateBridge;
      // __Hotfix0_set_playerRooms: XLua.DelegateBridge;
      // __Hotfix0_get_playerChars: XLua.DelegateBridge;
      // __Hotfix0_set_playerChars: XLua.DelegateBridge;
      // __Hotfix0_get_playerLabor: XLua.DelegateBridge;
      // __Hotfix0_set_playerLabor: XLua.DelegateBridge;
      // __Hotfix0_get_playerFurnitureInfo: XLua.DelegateBridge;
      // __Hotfix0_set_playerFurnitureInfo: XLua.DelegateBridge;
      // __Hotfix0_get_currentLabor: XLua.DelegateBridge;
      // __Hotfix0_get_playerBuildingTraining: XLua.DelegateBridge;
      // __Hotfix0_get_playerBuildingTrainingSlotId: XLua.DelegateBridge;
      // __Hotfix0_get_playerBuildingHiring: XLua.DelegateBridge;
      // __Hotfix0_get_playerBuildingHiringSlotId: XLua.DelegateBridge;
      // __Hotfix0_get_playerMeetingRoom: XLua.DelegateBridge;
      // __Hotfix0_get_curElectric: XLua.DelegateBridge;
      // __Hotfix0_set_curElectric: XLua.DelegateBridge;
      // __Hotfix0_get_maxElectric: XLua.DelegateBridge;
      // __Hotfix0_set_maxElectric: XLua.DelegateBridge;
      // __Hotfix0_get_layoutId: XLua.DelegateBridge;
      // __Hotfix0_set_layoutId: XLua.DelegateBridge;
      // __Hotfix0_get_controlRoom: XLua.DelegateBridge;
      // __Hotfix0_set_controlRoom: XLua.DelegateBridge;
      // __Hotfix0_get_meetingRoom: XLua.DelegateBridge;
      // __Hotfix0_set_meetingRoom: XLua.DelegateBridge;
      // __Hotfix0_LoadDataForCurPlayer: XLua.DelegateBridge;
      // __Hotfix0_LoadDataForVisiting: XLua.DelegateBridge;
      // __Hotfix0_UpdateData: XLua.DelegateBridge;
      // __Hotfix0_GetSlotById: XLua.DelegateBridge;
      // __Hotfix0_GetBuildingCharByInstId: XLua.DelegateBridge;
      // __Hotfix0_CheckOtherRoomChangedByInstId: XLua.DelegateBridge;
      // __Hotfix0_CheckOtherRoomChanged: XLua.DelegateBridge;
      // __Hotfix0__CheckSpCharRoomChanged: XLua.DelegateBridge;
      // __Hotfix0_CheckOtherRoomChangedByAssist: XLua.DelegateBridge;
      // __Hotfix0_GetRoomSide: XLua.DelegateBridge;
      // __Hotfix0_GetStoreyByIndex: XLua.DelegateBridge;
      // __Hotfix0_CheckIfLaborAccelUnlocked: XLua.DelegateBridge;
      // __Hotfix0_GetBuildingAssitant: XLua.DelegateBridge;
      // __Hotfix0_GetBuildingAssistantIndex: XLua.DelegateBridge;
      // __Hotfix0_UpdateRecentVisitorsCurPlayer: XLua.DelegateBridge;
      // __Hotfix0__UpdateRecentVisitorsForVisiting: XLua.DelegateBridge;
      // __Hotfix0_FindRecentVisitor: XLua.DelegateBridge;
      // __Hotfix0__UpdatePlayerDataPre: XLua.DelegateBridge;
      // __Hotfix1__UpdatePlayerDataPre: XLua.DelegateBridge;
      // __Hotfix0__UpdatePlayerDataPost: XLua.DelegateBridge;
      // __Hotfix0__InitRoomStoreyInfo: XLua.DelegateBridge;
      // __Hotfix0__LoadElectricInfo: XLua.DelegateBridge;
      // __Hotfix0__LoadAssistants: XLua.DelegateBridge;
      // __Hotfix0_OnReset: XLua.DelegateBridge;
      // __Hotfix0_OnTick: XLua.DelegateBridge;
      // __Hotfix0_OnStop: XLua.DelegateBridge;
    }
    export interface BuildingVisitorModel {
      uid: System.String;
      nickName: System.String;
      charId: System.String;
      skinId: System.String;
      level: System.Int32;
    }
    export interface RoomSlotGraph {
      // m_graph: System.Collections.Generic.IDictionary<System.String,System.Collections.Generic.List<Torappu.Building.RoomSlotGraph.Edge>>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_LoadData: XLua.DelegateBridge;
      // __Hotfix0_GetConnectedSlots: XLua.DelegateBridge;
      // __Hotfix0_IsEmpty: XLua.DelegateBridge;
      // __Hotfix0_Clear: XLua.DelegateBridge;
      // __Hotfix0__LoadDataInternal: XLua.DelegateBridge;
      // __Hotfix0__TryMakeConnection: XLua.DelegateBridge;
      // __Hotfix0__IsRoomConnected: XLua.DelegateBridge;
      // __Hotfix0__AddEdge: XLua.DelegateBridge;
      // __Hotfix0_QueryConnection: XLua.DelegateBridge;
    }
    export interface RoomConditionCheckOptions {
      EMPTY: Torappu.Building.RoomConditionCheckOptions;
      slotId: System.String;
      predictLevel: System.Int32;
      predictRoomId: Torappu.BuildingData.RoomType;
    }
    export interface RoomSlotModel {
      PREFAB_UNCLEAN_TEMPLATE: System.String;
      PREFAB_EMPTY_TEMPALTE: System.String;
      PREFAB_LEVELUP_TEMPLATE: System.String;
      PREFAB_COMPLETE_TEMPALTE: System.String;
      // m_isContentUpdated: System.Boolean;
      // m_slotData: Torappu.BuildingData.LayoutData.RoomSlot;
      // m_cleanCostData: Torappu.BuildingData.LayoutData.SlotCleanCost;
      // m_roomData: Torappu.BuildingData.RoomData;
      // m_phaseData: Torappu.BuildingData.RoomData.PhaseData;
      // m_maxPhaseData: Torappu.BuildingData.RoomData.PhaseData;
      // m_nextLevelPhaseData: Torappu.BuildingData.RoomData.PhaseData;
      // m_prefabInfo: Torappu.BuildingData.PrefabInfo;
      // m_bean: Torappu.BuildingData.IRoomBean;
      // m_storeyData: Torappu.BuildingData.LayoutData.StoreyData;
      // m_roomCode: System.String;
      // m_playerStatus: Torappu.Building.RoomSlotModel.PlayerSlotStatus;
      // m_listeners: System.Collections.Generic.List<Torappu.Building.RoomSlotModel.IListener>;
      // <prefabId>k__BackingField: System.String;
    }
    export interface StoreyViewModel {
      id: System.String;
      name: System.String;
      isUnlocked: System.Boolean;
      requireLevel: System.Int32;
      yOffset: System.Int32;
      isUnderground: System.Boolean;
      // <>f__am$cache0: System.Comparison<System.Collections.Generic.KeyValuePair<System.String,Torappu.Building.StoreyViewModel>>;
    }
    export interface BuildingSceneParam {
      isVisit: System.Boolean;
      hasVisitedToday: System.Boolean;
      visitUid: System.String;
      autoFocusRoom: Torappu.BuildingData.RoomType;
      visitResponse: Torappu.VisitBuildingResponse;
      visitContext: Torappu.BuildingVisitContext;
    }
    export interface BuildingAVGAdapter {
      // m_bRoomTutorialBtn: UnityEngine.UI.Button;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetExecutors: XLua.DelegateBridge;
      // __Hotfix0_ForceCommandEnd: XLua.DelegateBridge;
      // __Hotfix0__OnStoryBegin: XLua.DelegateBridge;
      // __Hotfix0__OnStoryEnd: XLua.DelegateBridge;
      // __Hotfix0__BlockBuildingModeRaycast: XLua.DelegateBridge;
      // __Hotfix0__ExecuteFocusBRoom: XLua.DelegateBridge;
      // __Hotfix0__ExecuteBlockRaycaster: XLua.DelegateBridge;
      // __Hotfix0__ExecuteEnsureOperationMode: XLua.DelegateBridge;
      // __Hotfix0_Start: XLua.DelegateBridge;
      // __Hotfix0_OnDestroy: XLua.DelegateBridge;
    }
    export interface BuildingModeRaycastManager {
      // m_blockInfos: Torappu.ListDict<Torappu.Building.RaycastBlockKey,Torappu.Building.BuildingModeRaycastManager.BlockContext>;
    }
    export interface BuildingServiceController {
      // m_updateCountDown: Torappu.CountDownTask;
      // m_playerDataListeners: Torappu.ListSet<System.Action<System.Object>>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Tick: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_NotifyPlayerDataChanged: XLua.DelegateBridge;
      // __Hotfix0_AddPlayerDataListener: XLua.DelegateBridge;
      // __Hotfix0_RemovePlayerDataListener: XLua.DelegateBridge;
      // __Hotfix0_SendRequest: XLua.DelegateBridge;
      // __Hotfix0__UpdateCountDown: XLua.DelegateBridge;
      // __Hotfix0__GetNextUpdateTime: XLua.DelegateBridge;
      // __Hotfix0__PickNextUpdateTime: XLua.DelegateBridge;
      // __Hotfix0__SendSyncDataRequest: XLua.DelegateBridge;
    }
    export interface BuildingServiceHandler<ResType> {
      // m_internalProceed: System.Action<ResType>;
      // m_internalFinal: System.Action;
      // <broadcastChange>k__BackingField: System.Boolean;
    }
    export interface BuildingUIBridge {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_RegisterListeners: XLua.DelegateBridge;
    }
    export interface ManufactSnapshot {
      DEFAULT: Torappu.Building.ManufactSnapshot;
      time: System.DateTime;
      formulaId: System.String;
      weight: System.Int32;
      outputSolutionCount: System.Int32;
      remainSolutionCount: System.Int32;
      nextRemainSecs: System.Int32;
      baseRemainPoint: System.Double;
      totalRemainSecs: System.Int32;
      saveTime: System.Int64;
      costs: Torappu.ShallowEqualArray<Torappu.ItemBundle>;
      // __Hotfix0_get_remainSecsForProgress: XLua.DelegateBridge;
      // __Hotfix0_get_isEmpty: XLua.DelegateBridge;
      // __Hotfix0_get_outputWeight: XLua.DelegateBridge;
    }
    export interface ManufactInfoViewModel {
      serviceSnapshot: Torappu.Building.ManufactSnapshot;
      baseSpeed: System.Single;
      buffSpeed: System.Single;
      baseBuffSpeed: System.Single;
      specBuffSpeed: System.Single;
      secPerItem: System.Single;
      maxProductWeight: System.Int32;
      mpCostPerHourBase: System.Int64;
      mpCostPerHourBaseBuff: System.Int64;
      mpCostPerHourSpecBuff: System.Int64;
      formula: Torappu.BuildingData.ManufactFormula;
      isWorking: System.Boolean;
      maxChars: System.Int32;
      finalMaxChars: System.Int32;
      chars: Torappu.Building.BuildingCharModel[];
      stationedNum: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_LoadData: XLua.DelegateBridge;
      // __Hotfix0_get_totalSavedSeconds: XLua.DelegateBridge;
      // __Hotfix0_CurrentSnapshot: XLua.DelegateBridge;
      // __Hotfix0__CreateSnapshot: XLua.DelegateBridge;
      // __Hotfix0_CheckIfCanHarvest: XLua.DelegateBridge;
      // __Hotfix0_CheckIfOverloaded: XLua.DelegateBridge;
      // __Hotfix0_UpdateCountDownForManufact: XLua.DelegateBridge;
    }
    export interface ShopStockSnapshot {
      DEFAULT: Torappu.Building.ShopStockSnapshot;
      time: System.DateTime;
      itemId: System.String;
      formulaId: System.String;
      remainCount: System.Int32;
      baseRemainPoint: System.Double;
      additionOutput: System.Int32;
      nextRemainSecs: System.Int32;
      totalRemainSecs: System.Int32;
    }
    export interface ShopStockInfoViewModel {
      serviceSnapshot: Torappu.Building.ShopStockSnapshot;
      index: System.Int32;
      buffSpeed: System.Single;
      baseSpeed: System.Single;
      isWorking: System.Boolean;
      character: Torappu.Building.BuildingCharModel;
      formula: Torappu.BuildingData.ShopFormula;
      maxCount: System.Int32;
      isUnlocked: System.Boolean;
      secsPerItem: System.Int32;
    }
    export interface ShopInfoViewModel {
      serverOutput: Torappu.ListDict<Torappu.ItemType,System.Int32>;
      capacity: System.Int32;
      unlockStockNum: System.Int32;
      stocks: System.Collections.Generic.List<Torappu.Building.ShopStockInfoViewModel>;
    }
    export enum TradingOrderReward {
      NONE = "NONE",
      GOLD = "GOLD",
      DIAMOND = "DIAMOND",
    }
    export interface TradingInfoViewStruct {
      EMPTY: Torappu.Building.TradingInfoViewStruct;
      roomSlotId: System.String;
      maxChars: System.Int32;
      finalMaxChars: System.Int32;
      chars: Torappu.Building.BuildingCharModel[];
      mpCostPerHourBase: System.Int64;
      mpCostPerHourBuffSpec: System.Int64;
      mpCostPerHourBuffBase: System.Int64;
      orderSpeedBuffBase: System.Single;
      orderSpeedBuffSpec: System.Single;
      preferredType: Torappu.BuildingData.OrderType;
      isStrategyEnabled: System.Boolean;
      orderNumLimit: System.Int32;
      orders: Torappu.ListDict<System.Int64,Torappu.Building.TradingOrderStruct>;
      nextOrder: System.Int64;
      gainSnapshot: Torappu.Building.TradingGainOrderSnapshot;
      // __Hotfix0_IsEmpty: XLua.DelegateBridge;
      // __Hotfix0_LoadData: XLua.DelegateBridge;
    }
    export interface TradingInfoViewProperty {
    }
    export interface TradingGainOrderSnapshot {
      EMPTY: Torappu.Building.TradingGainOrderSnapshot;
      // m_isEmpty: System.Boolean;
      lastUpdateTime: System.DateTime;
      processPoint: System.Double;
      speed: System.Double;
      totalPoint: System.Int32;
      isWorking: System.Boolean;
      // __Hotfix0__LoadData: XLua.DelegateBridge;
      // __Hotfix0_IsEmpty: XLua.DelegateBridge;
      // __Hotfix0_GetRemainTime: XLua.DelegateBridge;
      // __Hotfix0_GetProgress: XLua.DelegateBridge;
      // __Hotfix0_CreateSnapshot: XLua.DelegateBridge;
    }
    export interface TradingOrderStruct {
      EMPTY: Torappu.Building.TradingOrderStruct;
      orderId: System.Int64;
      type: Torappu.BuildingData.OrderType;
      requires: Torappu.ShallowEqualArray<Torappu.Building.TradingOrderRequireStruct>;
      rewardType: Torappu.Building.TradingOrderReward;
      rewardCount: System.Int32;
      sortId: System.Int64;
      isComplete: System.Boolean;
      // __Hotfix0_LoadData: XLua.DelegateBridge;
    }
    export interface TradingOrderRequireStruct {
      itemId: System.String;
      itemType: Torappu.ItemType;
      requireCount: System.Int32;
      reserve: System.Int32;
    }
    export interface BuildingDataConverter {
      LARGE_COUNT_NUMBER: System.Int32;
      MANPOWER_DISPLAY_FACTOR: System.Single;
      // <>f__mg$cache0: System.Converter<Torappu.Building.RoomSlotModel,Torappu.Building.UI.LevelConditionCheckItem>;
      // <>f__mg$cache1: System.Func<Torappu.Building.RoomSlotModel,System.Boolean>;
      // <>f__am$cache0: System.Action<Torappu.Building.DIY.DIYRoomModifier>;
      // <>f__am$cache1: System.Action<Torappu.Building.DIY.DIYRoomModifier>;
      // __Hotfix0_IsBigRoomSlot: XLua.DelegateBridge;
      // __Hotfix0_CountAllRooms: XLua.DelegateBridge;
      // __Hotfix0_ConvertPlayerRoomSlotState: XLua.DelegateBridge;
      // __Hotfix0_GetRoomMaxLevel: XLua.DelegateBridge;
      // __Hotfix0_GetMaxRoomCount: XLua.DelegateBridge;
      // __Hotfix0_GetPhase: XLua.DelegateBridge;
      // __Hotfix0_LoadStationedChars: XLua.DelegateBridge;
      // __Hotfix0_LoadStationedCharsForVisiting: XLua.DelegateBridge;
      // __Hotfix0__FindCharWorkFinishTime: XLua.DelegateBridge;
      // __Hotfix0__GetManufactFinishTime: XLua.DelegateBridge;
      // __Hotfix0__GetTrainingFinishTime: XLua.DelegateBridge;
      // __Hotfix0__GetHireFinishTime: XLua.DelegateBridge;
      // __Hotfix0_GetManufactFormula: XLua.DelegateBridge;
      // __Hotfix0_GetShopFormula: XLua.DelegateBridge;
      // __Hotfix0_GetRoomData: XLua.DelegateBridge;
      // __Hotfix0_GetManufactCostReserve: XLua.DelegateBridge;
      // __Hotfix0_GetShopSaleReserve: XLua.DelegateBridge;
      // __Hotfix0_CountUnlockedManufactFormulaRoomLevelOnly: XLua.DelegateBridge;
      // __Hotfix0_CountUnlockedWorkshopFormulaRoomLevelOnly: XLua.DelegateBridge;
      // __Hotfix0_LoadManufactFormulaUnlockCondition: XLua.DelegateBridge;
      // __Hotfix0_LoadWorkshopFormulaUnlockCondition: XLua.DelegateBridge;
      // __Hotfix0__CheckRequiredRoomLevel: XLua.DelegateBridge;
      // __Hotfix0__CheckRequireStage: XLua.DelegateBridge;
      // __Hotfix0__CheckIfUnlockedInPlayerDexNav: XLua.DelegateBridge;
      // __Hotfix0_LoadManufactSpeed: XLua.DelegateBridge;
      // __Hotfix0_CheckRoomLevelConditionE: XLua.DelegateBridge;
      // __Hotfix1_CheckRoomLevelConditionE: XLua.DelegateBridge;
      // __Hotfix0_QueryRoomConnectedWithControl: XLua.DelegateBridge;
      // __Hotfix0_CheckRoomCanBeCleaned: XLua.DelegateBridge;
      // __Hotfix0_CheckRoomCanBeCleanedSimple: XLua.DelegateBridge;
      // __Hotfix0_SumElectricForBuild: XLua.DelegateBridge;
      // __Hotfix0_SumElectricForUpgrade: XLua.DelegateBridge;
      // __Hotfix0_GetRoomArchitectureValidPredicator: XLua.DelegateBridge;
      // __Hotfix0_GetOutputCountFromItemInShop: XLua.DelegateBridge;
      // __Hotfix0_GetCardCountInShop: XLua.DelegateBridge;
      // __Hotfix0_GetStationedCharState: XLua.DelegateBridge;
      // __Hotfix0_GetNotTooLargeCount: XLua.DelegateBridge;
      // __Hotfix0_CheckingGeneralBuildCost: XLua.DelegateBridge;
      // __Hotfix0_CheckIfRoomWorking: XLua.DelegateBridge;
      // __Hotfix0_CheckIfRoomBusyToUpLevel: XLua.DelegateBridge;
      // __Hotfix0_CheckIfRoomBusyToTearDown: XLua.DelegateBridge;
      // __Hotfix0_CheckIfTrainingRoomBusy: XLua.DelegateBridge;
      // __Hotfix0__CheckIfTrainingRoomBusy: XLua.DelegateBridge;
      // __Hotfix0_CheckingCleanCost: XLua.DelegateBridge;
      // __Hotfix0_DisplayDormApRecovery: XLua.DelegateBridge;
      // __Hotfix0_DisplayCommonRate: XLua.DelegateBridge;
      // __Hotfix0_DisplayCommonRealNumber: XLua.DelegateBridge;
      // __Hotfix0_GetDIYComfortValue: XLua.DelegateBridge;
      // __Hotfix0__CalculateComfortSingleFurniture: XLua.DelegateBridge;
      // __Hotfix0__CalculateComfortFurnitureGroup: XLua.DelegateBridge;
      // __Hotfix0_CalculateComfort: XLua.DelegateBridge;
      // __Hotfix0_CreateDIYPresetByRoom: XLua.DelegateBridge;
      // __Hotfix0_ApplyDIYPresetWithoutCheck: XLua.DelegateBridge;
      // __Hotfix0_ApplyDIYPreset: XLua.DelegateBridge;
      // __Hotfix0_CalcCreditProvidedByDorms: XLua.DelegateBridge;
      // __Hotfix0_ParseRequireItemCount: XLua.DelegateBridge;
      // __Hotfix1_ParseRequireItemCount: XLua.DelegateBridge;
      // __Hotfix0_CalcCreditProvidedBySingleDorm: XLua.DelegateBridge;
      // __Hotfix0__DormComfortToCreditFormula: XLua.DelegateBridge;
      // __Hotfix0_GetTradingStrategyUnlockCond: XLua.DelegateBridge;
      // __Hotfix0_GetTradingOrderTypeName: XLua.DelegateBridge;
      // __Hotfix0_CalcCharManpowerState: XLua.DelegateBridge;
      // __Hotfix0_GetCharManpowerStateName: XLua.DelegateBridge;
      // __Hotfix0_GetLaborAccelUnlockAlert: XLua.DelegateBridge;
      // __Hotfix0_IsRoomCategoryCoded: XLua.DelegateBridge;
      // __Hotfix0_GetRoomName: XLua.DelegateBridge;
      // __Hotfix0_GetLevelInfoTypeName: XLua.DelegateBridge;
      // __Hotfix0_FormatBuffedValue: XLua.DelegateBridge;
      // __Hotfix1_FormatBuffedValue: XLua.DelegateBridge;
      // __Hotfix0_FormatBuffedPercent: XLua.DelegateBridge;
      // __Hotfix0_FormatBuildingRestTime: XLua.DelegateBridge;
      // __Hotfix0_GetNextMeetingUpdateTime: XLua.DelegateBridge;
      // __Hotfix0_CheckIfMeetingRoomTransferring: XLua.DelegateBridge;
      // __Hotfix0__GetFurnitureTotalCount: XLua.DelegateBridge;
    }
    export interface BuildingRouter {
      FOCUS_TIME: System.Single;
      // <>f__am$cache0: System.Func<System.String,System.Object>;
      // <>f__am$cache1: System.Func<System.String,System.Object>;
      // <>f__am$cache2: System.Func<System.String,System.Object>;
    }
    export interface BuildingServiceUtil {
      // <>f__am$cache0: System.Action<Torappu.BuildingSyncResponse>;
      // <>f__am$cache1: System.Action;
      // <>f__am$cache2: System.Action<Torappu.BuildingGetRecentVisitorsResponse>;
      // <>f__am$cache3: System.Func<Torappu.Network.ResponseError,System.Boolean>;
      // __Hotfix0_SendSyncService: XLua.DelegateBridge;
      // __Hotfix0_SendSettleManufact: XLua.DelegateBridge;
      // __Hotfix0_SendSettleShop: XLua.DelegateBridge;
      // __Hotfix0_SendClearChars: XLua.DelegateBridge;
      // __Hotfix0_SendAssginChar: XLua.DelegateBridge;
      // __Hotfix1_SendAssginChar: XLua.DelegateBridge;
      // __Hotfix0__SendAssginCharsInternal: XLua.DelegateBridge;
      // __Hotfix0__CheckAssignCharSlotsValid: XLua.DelegateBridge;
      // __Hotfix0__SendAssignCharsService: XLua.DelegateBridge;
      // __Hotfix0_SendIncIntimacy: XLua.DelegateBridge;
      // __Hotfix0_SendIncAssistIntimacy: XLua.DelegateBridge;
      // __Hotfix0_SendUpgradeComplete: XLua.DelegateBridge;
      // __Hotfix0_SendGetRecentVisitors: XLua.DelegateBridge;
      // __Hotfix0_SendDeliveryBatchOrder: XLua.DelegateBridge;
    }
    export interface BuildingUtil {
      ALMOST_VERTICAL_THRESHOLD: System.Single;
    }
    export interface RaycastBlocker {
    }
    export interface GameObjectSplitFrameLoadBalancer {
      // m_assetLoader: Torappu.Resource.AbstractAssetLoader;
      // m_options: Torappu.Building.GameObjectSplitFrameLoadBalancer.Options;
      // m_pendingTasks: System.Collections.Generic.Queue<Torappu.Building.GameObjectSplitFrameLoadBalancer.AsyncTask>;
      // m_idleTicker: Torappu.PeriodicTicker;
      // m_isPaused: System.Boolean;
    }
    export namespace BP {
      export interface BuildingArchitecture {
      }
      export interface BCameraController {
        // _touchCamera: BitBenderGames.MobileTouchCamera;
        // m_tanFOV: System.Nullable<System.Single>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_camera: XLua.DelegateBridge;
        // __Hotfix0_get_camZoom: XLua.DelegateBridge;
        // __Hotfix0_set_camZoom: XLua.DelegateBridge;
        // __Hotfix0_get_camZoomMin: XLua.DelegateBridge;
        // __Hotfix0_set_camZoomMin: XLua.DelegateBridge;
        // __Hotfix0_get_camZoomMax: XLua.DelegateBridge;
        // __Hotfix0_set_camZoomMax: XLua.DelegateBridge;
        // __Hotfix0_get_boundaryMin: XLua.DelegateBridge;
        // __Hotfix0_set_boundaryMin: XLua.DelegateBridge;
        // __Hotfix0_get_boundaryMax: XLua.DelegateBridge;
        // __Hotfix0_set_boundaryMax: XLua.DelegateBridge;
        // __Hotfix0_ResetPosition: XLua.DelegateBridge;
        // __Hotfix0_ResetCameraBoundaries: XLua.DelegateBridge;
        // __Hotfix0_get_allowCameraDrag: XLua.DelegateBridge;
        // __Hotfix0_set_allowCameraDrag: XLua.DelegateBridge;
        // __Hotfix0_CalcCamZoom: XLua.DelegateBridge;
        // __Hotfix0__TangentVertFOV: XLua.DelegateBridge;
        // __Hotfix0__TangentHoriFOV: XLua.DelegateBridge;
      }
      export interface BLayoutManager {
        // FTG_PADDING: UnityEngine.Vector2;
        // BKG_PADDING: UnityEngine.Vector2;
        ZOOM_IN_FACTOR: System.Single;
        _container: Torappu.SafeParentComponent;
        _hilightContainer: Torappu.SafeParentComponent;
        // _toggleGroup: UnityEngine.UI.ToggleGroup;
        // _frontground: UnityEngine.RectTransform;
        // _background: UnityEngine.RectTransform;
        _tweenTime: System.Single;
        // _tweenEaseType: DG.Tweening.Ease;
        // <listener>k__BackingField: Torappu.Building.BP.BLayoutManager.IListener;
        // m_initZoom: System.Single;
        // m_activeRoom: Torappu.Building.BP.BRoomSlot;
        // m_state: Torappu.Building.BP.BlueprintMode;
        // m_rooms: System.Collections.Generic.List<Torappu.Building.BP.BRoomSlot>;
        // m_modelToRoomMap: System.Collections.Generic.Dictionary<System.String,Torappu.Building.BP.BRoomSlot>;
        // m_hilightedSlots: System.Collections.Generic.List<Torappu.Building.BP.BRoomHilightContainer>;
        // m_pendingHilightChange: Torappu.Building.BP.BRoomHilightViewModel;
      }
      export interface BlueprintMode {
        CAM_TWEEN_DUR: System.Single;
        _layout: Torappu.Building.BP.BLayoutManager;
        // _camera: UnityEngine.Camera;
        // _raycastBlocker: UnityEngine.Transform;
        // _hilightMask: UnityEngine.CanvasGroup;
        // m_hilightModel: Torappu.Building.BP.BRoomHilightViewModel;
        // m_hilightMaskTween: Torappu.UI.FadeSwitchTween;
        // m_sharedBPTween: DG.Tweening.Tween;
        // m_bCamController: Torappu.Building.BP.BCameraController;
        // m_plugin: Torappu.Building.BP.BlueprintMode.IPlugin;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_bCamController: XLua.DelegateBridge;
        // __Hotfix0_get_plugin: XLua.DelegateBridge;
        // __Hotfix0_set_plugin: XLua.DelegateBridge;
        // __Hotfix0_get_camera: XLua.DelegateBridge;
        // __Hotfix0_get_AVGOnly_layout: XLua.DelegateBridge;
        // __Hotfix0_EnterArchitectureMode: XLua.DelegateBridge;
        // __Hotfix0_ExitArchitectureMode: XLua.DelegateBridge;
        // __Hotfix0_OnArchitectureRoomSelected: XLua.DelegateBridge;
        // __Hotfix0_get_isRaycastBlocked: XLua.DelegateBridge;
        // __Hotfix0_set_isRaycastBlocked: XLua.DelegateBridge;
        // __Hotfix0_get_selectedRoom: XLua.DelegateBridge;
        // __Hotfix0_OnRegister: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_OnExit: XLua.DelegateBridge;
        // __Hotfix0_HideCoroutine: XLua.DelegateBridge;
        // __Hotfix0_TweenToOverview: XLua.DelegateBridge;
        // __Hotfix0__TweenBPCamTo: XLua.DelegateBridge;
        // __Hotfix0__ClearBPTweens: XLua.DelegateBridge;
        // __Hotfix0_HilightRoomSlots: XLua.DelegateBridge;
        // __Hotfix0_NotifySettleEffects: XLua.DelegateBridge;
        // __Hotfix0_GetRoomAnchor: XLua.DelegateBridge;
        // __Hotfix0_EventOnHilightedMaskClicked: XLua.DelegateBridge;
      }
      export interface BRoom {
        // _textName: UnityEngine.UI.Text;
        // _panelArchitectOnly: UnityEngine.GameObject;
        // _panelNormalOnly: UnityEngine.GameObject;
        // _canLevelupIcon: UnityEngine.GameObject;
        // m_roomSlot: Torappu.Building.BP.BRoomSlot;
        // m_roomSlotModel: Torappu.Building.RoomSlotModel;
        // m_inArchitecture: System.Boolean;
      }
      export interface BRoomSlot {
        NAME_DUMMY_TUTORIAL_BTN: System.String;
        // _roomContainer: UnityEngine.RectTransform;
        // _selectEffect: UnityEngine.GameObject;
        _upgradePanel: Torappu.Building.BP.BUpgradePanel;
        // _tutorialBtnPrefab: UnityEngine.UI.Button;
        // m_room: Torappu.Building.BP.BRoom;
        // m_roomPlayerChangedListener: System.Action<System.Object>;
        // m_rectTransform: UnityEngine.RectTransform;
        // m_isOn: System.Boolean;
        // m_cachedPrefabId: System.String;
        // m_archActiveCache: System.Boolean;
        // m_dummyTutorialBtn: UnityEngine.UI.Button;
        // <layout>k__BackingField: Torappu.Building.BP.BLayoutManager;
      }
      export interface BUpgradePanel {
        // _restTimeLabel: UnityEngine.UI.Text;
        // _progressBar: Torappu.UI.PiecewiseProgressBar;
        // _inprogressLabel: UnityEngine.GameObject;
        // _completeLabel: UnityEngine.GameObject;
        _progressBarWidthFactor: System.Single;
        _completeBGVerticalOffset: System.Single;
        // m_model: Torappu.Building.RoomSlotModel;
        // m_cdTask: Torappu.CountDownTask;
        // m_needUpdateBarScale: System.Boolean;
        // m_completeBGInstance: UnityEngine.GameObject;
        // onComplete: System.Action;
        // m_modelListener: Torappu.Building.BP.BUpgradePanel.RoomSlotModelListener;
      }
      export interface BRoomHilightViewModel {
        // m_hilightedSlots: System.Collections.Generic.List<Torappu.Building.RoomSlotModel>;
      }
      export interface BStationInfoModel {
        stationedChars: Torappu.Building.BuildingCharModel[];
        stationedNum: System.Int32;
        maxStationedChars: System.Int32;
      }
      export interface BControlRoom {
        // _textLevel: UnityEngine.UI.Text;
        // _textLevelShadow: UnityEngine.UI.Text;
      }
      export interface BCorridorRoom {
      }
      export interface BCustomRoom {
        // _textRoomCategory: UnityEngine.UI.Text;
      }
      export interface BDormRoom {
        // _panelLevel: Torappu.UI.SimpleLayoutContent;
        // _textCharNum: UnityEngine.UI.Text;
        // _textCharLimit: UnityEngine.UI.Text;
        // _textState: UnityEngine.UI.Text;
        // m_levelAdapter: Torappu.Building.BP.BRoomLevelAdapter;
      }
      export interface BElevatorRoom {
        // _armLeft: UnityEngine.GameObject;
        // _armUp: UnityEngine.GameObject;
        // _armRight: UnityEngine.GameObject;
        // _armDown: UnityEngine.GameObject;
      }
      export interface BEmptyRoom {
        // _infoPanel: UnityEngine.GameObject;
        // _categoryLabel: UnityEngine.UI.Text;
        _categoryLabelMap: Torappu.Building.BP.BEmptyRoom.CategoryLabelMapEntry[];
      }
      export interface BFunctionRoom {
        // _textStationNum: UnityEngine.UI.Text;
        // _textStationLimit: UnityEngine.UI.Text;
        // _levelContent: Torappu.UI.SimpleLayoutContent;
        // _colorMain: UnityEngine.Color;
        // _textRoomCategory: UnityEngine.UI.Text;
        // m_levelAdapter: Torappu.Building.BP.BRoomLevelAdapter;
      }
      export interface BHireRoom {
        // _textState: UnityEngine.UI.Text;
        // _progressBar: Torappu.UI.PiecewiseProgressBar;
        // m_hiringViewModel: Torappu.PlayerBuildingHire;
        // m_hireSnapshot: Torappu.Building.UI.Hire.HiringSnapshot;
        // m_countDown: Torappu.CountDownTask;
      }
      export interface BManufactureRoom {
        // _iconProduct: UnityEngine.GameObject;
        // m_countDown: Torappu.CountDownTask;
        // m_manufactModel: Torappu.Building.ManufactInfoViewModel;
        // m_isHarvestable: System.Boolean;
      }
      export interface BMeetingRoom {
        // _clueHintMark: UnityEngine.GameObject;
        // m_session: Torappu.Building.UI.Meeting.BuildingMeetingSession;
      }
      export interface BOutputRoom {
        EFFECT_WORK_ANIM_DUR: System.Single;
        // _textRoomState: UnityEngine.UI.Text;
        // _stateHilightColor: UnityEngine.Color;
        // _stateNormalColor: UnityEngine.Color;
        _stationView: Torappu.Building.BP.BStationViewForProgressRoom;
        // _levelView: Torappu.UI.SimpleLayoutContent;
        // _highlightView: UnityEngine.GameObject;
        // _mainColorComponents: Torappu.UI.UIColorGraphic;
        // _mainColor: UnityEngine.Color;
        // _progressBar: Torappu.UI.PiecewiseProgressBar;
        // _effectWorking: Torappu.UI.PiecewiseProgressBar;
        // _textRoomCategory: UnityEngine.UI.Text;
        // m_levelAdapter: Torappu.Building.BP.BRoomLevelAdapter;
        // m_stationModel: Torappu.Building.BP.BStationInfoModel;
        // m_isStateHilight: System.Boolean;
        // m_stateDescColorCache: UnityEngine.Color;
        // m_effectWorkTween: DG.Tweening.Tween;
        // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
        // <>f__am$cache1: System.Action<Torappu.Building.UI.BuildingUIResMenu.AsyncSettleInfo>;
      }
      export interface BPowerRoom {
        TWEEN_DURATION: System.Single;
        // m_progressTween: DG.Tweening.Tweener;
        // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
      }
      export interface BShopRoom {
        // _iconProduct: UnityEngine.GameObject;
        // m_countDowns: Torappu.CountDownTask[];
        // m_snapshots: Torappu.Building.ShopStockSnapshot[];
        // m_shopModel: Torappu.Building.ShopInfoViewModel;
        // m_isHarvestable: System.Boolean;
      }
      export interface BTradingRoom {
        NOTIFY_INTERVAL: System.Single;
        // _iconOrders: UnityEngine.GameObject;
        // m_tradingInfo: Torappu.Building.TradingInfoViewStruct;
        // m_isDelivertable: System.Boolean;
      }
      export interface BTrainingRoom {
        // _progressBar: Torappu.UI.PiecewiseProgressBar;
        // _isFinish: UnityEngine.GameObject;
        // _stateText: UnityEngine.UI.Text;
        // _shiningAnimator: UnityEngine.Animator;
        // _startImage: UnityEngine.UI.Image;
        // _finishImage: UnityEngine.UI.Image;
        // m_trainingViewModel: Torappu.PlayerBuildingTraining;
        // m_trainSnapshot: Torappu.Building.UI.Train.LevelUpSnapshot;
        // m_countDown: Torappu.CountDownTask;
      }
      export interface BUncleanedRoom {
        // _infoPanel: UnityEngine.GameObject;
      }
      export interface BWorkshopRoom {
      }
      export interface BRoomLevelAdapter {
        // m_level: System.Int32;
        // mainColor: UnityEngine.Color;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_SetLevel: XLua.DelegateBridge;
        // __Hotfix0_get_count: XLua.DelegateBridge;
        // __Hotfix0_RenderView: XLua.DelegateBridge;
      }
      export interface BRoomHilightContainer {
        // m_rectTrans: UnityEngine.RectTransform;
        // m_wrapContext: Torappu.Building.BP.BRoomHilightContainer.WrapContext;
        // <slotId>k__BackingField: System.String;
      }
      export interface BStationViewForProgressRoom {
        // _textNumber: UnityEngine.UI.Text;
        // _textHilightNumber: UnityEngine.UI.Text;
        // _textLimit: UnityEngine.UI.Text;
        // _iconCharTired: UnityEngine.GameObject;
        // _iconCharNormal: UnityEngine.GameObject;
      }
      export namespace BuildingArchitecture {
      }
      export namespace BLayoutManager {
        export interface IListener {
        }
      }
      export namespace BlueprintMode {
        export interface IPlugin {
        }
      }
      export namespace BRoomSlot {
      }
      export namespace BUpgradePanel {
        export interface RoomSlotModelListener {
          // m_panel: Torappu.Building.BP.BUpgradePanel;
        }
      }
      export namespace BEmptyRoom {
        export interface CategoryLabelMapEntry {
          category: Torappu.BuildingData.RoomCategory;
          text: System.String;
        }
      }
      export namespace BRoomHilightContainer {
        export interface WrapContext {
          // roomTrans: UnityEngine.RectTransform;
          // anchorPos: UnityEngine.Vector2;
          // pivot: UnityEngine.Vector2;
          // scale: UnityEngine.Vector3;
          // anchorMin: UnityEngine.Vector2;
          // anchorMax: UnityEngine.Vector2;
        }
      }
    }
    export namespace Consts {
      export interface Blueprint {
        // ROOM_UNIT: UnityEngine.Vector2;
        // LAYOUT_PADDING: UnityEngine.Vector2;
      }
      export interface Vault {
        FURNITURE_INTERACT_TELEPORT_DURATION: System.Single;
        DEFAULT_CHARACTER_ANIMATION_CROSSFADE: System.Single;
        // ROOM_UNIT: UnityEngine.Vector3;
        // CUSTOMIZABLE_ROOM_INTERNAL_GRID_SIZE: UnityEngine.Vector3;
        // CUSTOMIZABLE_ROOM_UNIT: UnityEngine.Vector3;
        DEFAULT_DOOR_DEPTH: System.Single;
      }
      export interface Animation {
        IDLE_KEY: System.String;
        MOVE_KEY: System.String;
        INTERACT_KEY: System.String;
        SPECIAL_KEY: System.String;
      }
      export interface Navigation {
        MIN_OBSTACLE_AVOID_INFLUENCE_FACTOR: System.Single;
        OBSTACLE_AVOID_FORCE_FACTOR: System.Single;
        GRID_NEAR_THRESHOLD: System.Single;
        INTERMEDIATE_NODE_REACH_DISTANCE: System.Single;
        // RANDOM_OFFSET: UnityEngine.Vector2;
      }
      export interface Layers {
        LAYER_INDEX_BLUEPRINT: System.Int32;
        LAYER_INDEX_VAULT: System.Int32;
        LAYER_MASK_BLUEPRINT: System.Int32;
        LAYER_MASK_VAULT: System.Int32;
      }
      export interface AnimatorNames {
        BOOL_IS_WORKING: System.String;
      }
    }
    export namespace DynamicBuildingContext {
      export interface Content {
        EMPTY: Torappu.Building.DynamicBuildingContext.Content;
        model: Torappu.Building.BuildingModel;
        service: Torappu.Building.BuildingServiceController;
      }
    }
    export namespace BuildingController {
      export interface Options {
        enableCharacterSleep: System.Boolean;
      }
    }
    export namespace BuildingFactory {
    }
    export namespace EditorTools {
      export interface BuildingLoader {
        _layoutId: System.String;
        // _playerDataText: UnityEngine.TextAsset;
        _usePlayerDataText: System.Boolean;
        // _visitBuildingText: UnityEngine.TextAsset;
        _useVisitBuildingText: System.Boolean;
      }
      export interface VRoomEditor {
        _buildingDB: Torappu.BuildingDB;
        _prefabId: System.String;
        _obstacleId: System.String;
        _roomId: Torappu.BuildingData.RoomType;
        // <isLoaded>k__BackingField: System.Boolean;
        // <room>k__BackingField: Torappu.Building.Vault.VRoom;
        // m_prefabInfo: Torappu.BuildingData.PrefabInfo;
        // m_obstacleData: Torappu.BuildingData.ObstacleData;
      }
    }
    export namespace BuildingMode {
    }
    export namespace BuildingStateMachine {
      export interface TransitionParam {
        DEFAULT: Torappu.Building.BuildingStateMachine.TransitionParam;
        transitionType: Torappu.Building.BuildingStateMachine.TransitionParam.TransitionType;
        targetRoom: Torappu.Building.RoomSlotModel;
        fromMode: Torappu.Building.IBuildingMode;
      }
      export namespace TransitionParam {
        export enum TransitionType {
          NONE = "NONE",
          ZOOM_IN_TO_VAULT = "ZOOM_IN_TO_VAULT",
          ZOOM_OUT_TO_BP = "ZOOM_OUT_TO_BP",
        }
      }
    }
    export namespace GridMap {
      export interface PathKey {
        from: Torappu.GridPosition;
        to: Torappu.GridPosition;
      }
      export interface Node {
        nextNodes: System.Collections.Generic.List<Torappu.Building.GridMap.Node>;
        weight: System.Single;
        // <gridPos>k__BackingField: Torappu.GridPosition;
      }
      export interface GridNode {
        // <state>k__BackingField: Torappu.Building.GridMap.GridNode.State;
        edges: Torappu.Building.GridMap.EdgeNode[];
        objectId: System.UInt32;
        objectRef: System.Object;
      }
      export interface EdgeNode {
        occupyGrids: System.Collections.Generic.List<Torappu.Building.GridMap.GridNode>;
        // <dir>k__BackingField: Torappu.SharedConsts.Direction;
      }
      export interface IGridObject {
      }
      export namespace GridNode {
        export enum State {
          EMPTY = "EMPTY",
          OCCUPIED = "OCCUPIED",
          ABANDONED = "ABANDONED",
        }
      }
    }
    export namespace TwoPointPathFinder {
      export interface Heap {
        // m_list: System.Collections.Generic.List<Torappu.Building.TwoPointPathFinder.InternalNode>;
        // m_hashSet: System.Collections.Generic.HashSet<Torappu.Building.TwoPointPathFinder.InternalNode>;
      }
      export interface InternalNode {
        node: Torappu.Building.GridMap.Node;
        distance: System.Int32;
        fScore: System.Int32;
        prevNode: Torappu.Building.TwoPointPathFinder.InternalNode;
        heapIndex: System.Int32;
      }
    }
    export namespace ResourceRouter {
      export interface Vault {
        ROOM_PATH_FORMAT: System.String;
        DOOR_PATH_FORMAT: System.String;
        CHARACTER_PATH_FORMAT: System.String;
      }
      export interface Blueprint {
        ROOM_SLOT_NAME: System.String;
        ROOM_FOLDER: System.String;
        HILIGHT_CONTAINER_NAME: System.String;
      }
    }
    export namespace Vault {
      export interface IMovable {
      }
      export interface VMoveController {
        OBSTACLE_AVOID_TICK_PERIOD: System.Int32;
        _steeringFactor: System.Single;
        _maxSteeringForce: System.Single;
        _halfBodyWidth: System.Single;
        // m_path: Torappu.Building.Path;
        // m_cursor: System.Int32;
        // m_finalPosOffset: UnityEngine.Vector2;
        // m_lastObstacleAvoidForce: UnityEngine.Vector2;
        // m_lastVelocity: UnityEngine.Vector2;
        // m_obstacleAvoidTicker: Torappu.PeriodicTicker;
        // <mover>k__BackingField: Torappu.Building.Vault.IMovable;
      }
      export interface VCharacter {
        HEAD_ANCHOR_NAME: System.String;
        SHADOW_OBJ_NAME: System.String;
        INIT_FADEIN_DURATION: System.Single;
        // _centerTransform: UnityEngine.Transform;
        // _shadowTransform: UnityEngine.Transform;
        // _skeleton: Spine.Unity.SkeletonAnimation;
        _options: Torappu.Building.Vault.VCharacter.Options;
        _spineScale: System.Single;
        // m_faceSign: System.Int32;
        // m_stateMachine: Torappu.StateMachine;
        // m_moveController: Torappu.Building.Vault.VMoveController;
        // m_outline: Torappu.SpineOutline;
        // m_headAnchor: UnityEngine.Transform;
        // m_listeners: System.Collections.Generic.List<Torappu.Building.Vault.VCharacter.IListener>;
        // m_startTween: DG.Tweening.Tween;
        // m_isSleep: System.Boolean;
        // m_isMovable: System.Boolean;
        // m_isInteractable: System.Boolean;
        // m_hasSpecialAnim: System.Boolean;
        // <charModel>k__BackingField: Torappu.Building.BuildingCharModel;
        // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
        // <>f__am$cache1: System.Func<Torappu.Building.GridMap,Torappu.Building.GridMap.Node,System.Boolean>;
      }
      export interface VFurnitureBridge {
        // m_gridPos: Torappu.GridPosition;
        // m_slots: Torappu.Building.Vault.VFurnitureBridge.InteractSlot[];
        // m_attachPointExporter: Torappu.Building.DIY.DIYRoom.IAttachPointExporter;
        // <worldCenter>k__BackingField: UnityEngine.Vector3;
        // <plane>k__BackingField: Torappu.Building.Vault.VGridPlane;
      }
      export interface VFurnitureManager {
        // s_sharedSlotList: System.Collections.Generic.List<Torappu.Building.Vault.VFurnitureBridge.InteractSlot>;
        // m_furnitures: System.Collections.Generic.List<Torappu.Building.Vault.VFurnitureBridge>;
        // m_slots: System.Collections.Generic.List<Torappu.Building.Vault.VFurnitureBridge.InteractSlot>;
      }
      export interface VBackwallPlane {
        _obstacleRects: Torappu.BuildingData.ObstacleRect[];
      }
      export interface VFloorPlane {
        _obstacleRects: Torappu.BuildingData.ObstacleRect[];
      }
      export interface VGridPlane {
        // <gridSize>k__BackingField: Torappu.GridPosition;
        // <gridUnit>k__BackingField: UnityEngine.Vector2;
        // <gridMap>k__BackingField: Torappu.Building.GridMap;
        // <bounds>k__BackingField: UnityEngine.Rect;
        // <room>k__BackingField: Torappu.Building.Vault.VRoom;
        // <inited>k__BackingField: System.Boolean;
      }
      export interface VaultReflectionConfigHolder {
        _reflectCameras: Torappu.Building.Vault.VaultReflectionConfigHolder.ReflectCameraItem[];
        _reflectExcludeMaterialNames: System.String[];
        // m_isInited: System.Boolean;
        // m_matFilter: Torappu.Building.Vault.VaultReflectionConfigHolder.ReflectMatFilter;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_GetReflectFilter: XLua.DelegateBridge;
        // __Hotfix0_GetReflectCamera: XLua.DelegateBridge;
        // __Hotfix0_GetReflectCameraPlaneHeight: XLua.DelegateBridge;
        // __Hotfix0_UpdateReflectStatusByConfig: XLua.DelegateBridge;
        // __Hotfix0_OnDestroy: XLua.DelegateBridge;
      }
      export interface VRoomGraphic {
        // <inited>k__BackingField: System.Boolean;
        // <roomSize>k__BackingField: Torappu.GridPosition;
      }
      export interface VRoomMeshGraphic {
        NAME_LDOOR: System.String;
        NAME_RDOOR: System.String;
        DEFAULT_DOOR_ID: System.String;
        _roomDepth: System.Single;
        _floorOffset: System.Single;
        // _floorValidRegion: UnityEngine.Rect;
        // _walkThicknessScale: UnityEngine.Vector3;
        _autoScaleMesh: System.Boolean;
        // _builtInSize: UnityEngine.Vector3;
        // _leftDoorPlaceholder: UnityEngine.Transform;
        // _rightDoorPlaceholder: UnityEngine.Transform;
        // _animator: UnityEngine.Animator;
      }
      export interface VDIYRoom {
        _diyRoom: Torappu.Building.DIY.DIYRoom;
        _reflectFadeHeight: System.Single;
        // m_reflectCamera: Torappu.GraphicEffect.Reflection.ReflectCamera;
        // m_reflectRegistedRenderers: System.Collections.Generic.List<UnityEngine.MeshRenderer>;
        // m_needBuildInteractSlot: System.Boolean;
        // m_buildInteractSlotLatestNonce: System.Byte;
        // <>f__am$cache0: System.Predicate<Torappu.Building.Vault.VRoom.IObject>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnPreInit: XLua.DelegateBridge;
        // __Hotfix0_OnPostInit: XLua.DelegateBridge;
        // __Hotfix0__RefreshFurnitureBridge: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_OnDestroyRoom: XLua.DelegateBridge;
        // __Hotfix0_GenerateDynamicObstacles: XLua.DelegateBridge;
        // __Hotfix0_OnVCharacterUpdated: XLua.DelegateBridge;
        // __Hotfix0_OnVCharacterToDestroy: XLua.DelegateBridge;
        // __Hotfix0__SetupInternalDIYRoom: XLua.DelegateBridge;
      }
      export interface VElevatorRoom {
        _graphicNotOnTop: Torappu.Building.Vault.VRoomGraphic;
        // m_graphicInUse: Torappu.Building.Vault.VRoomGraphic;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_graphic: XLua.DelegateBridge;
        // __Hotfix0_OnDestroyRoom: XLua.DelegateBridge;
        // __Hotfix0__CheckThisIsTopElevator: XLua.DelegateBridge;
      }
      export interface VOutputRoom {
        // m_isWorking: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_isWorking: XLua.DelegateBridge;
        // __Hotfix0_set_isWorking: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_OnPreInit: XLua.DelegateBridge;
        // __Hotfix0_OnDestroyRoom: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
        // __Hotfix0__OnPlayerDataChanged: XLua.DelegateBridge;
        // __Hotfix0__UpdateIsWorking: XLua.DelegateBridge;
        // __Hotfix0__SetIsWorkingInternal: XLua.DelegateBridge;
      }
      export interface VRoom {
        FLOOR_CONTAINER_NAME: System.String;
        BACKWALL_CONTAINER_NAME: System.String;
        // s_sharedRaycastResults: System.Collections.Generic.List<UnityEngine.EventSystems.RaycastResult>;
        // s_sharedCharIdList: System.Collections.Generic.List<System.String>;
        // m_stayChars: System.Collections.Generic.List<Torappu.Building.BuildingCharModel>;
        // m_stayCharSignature: System.String;
        // m_loadedOrLoadingChars: Torappu.ListSet<System.Int32>;
        _graphic: Torappu.Building.Vault.VRoomGraphic;
        _floorPlane: Torappu.Building.Vault.VFloorPlane;
        _backwallPlane: Torappu.Building.Vault.VBackwallPlane;
        _enableBackWall: System.Boolean;
        // m_isEntered: System.Boolean;
        // m_leftDoor: Torappu.Building.Vault.VDoor;
        // m_rightDoor: Torappu.Building.Vault.VDoor;
        // m_objects: System.Collections.Generic.List<Torappu.Building.Vault.VRoom.IObject>;
        // m_furnitureMgr: Torappu.Building.Vault.VFurnitureManager;
        // <model>k__BackingField: Torappu.Building.RoomSlotModel;
        // <slot>k__BackingField: Torappu.Building.Vault.VRoomSlot;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_isOn: XLua.DelegateBridge;
        // __Hotfix0_get_size: XLua.DelegateBridge;
        // __Hotfix0_get_gridUnit: XLua.DelegateBridge;
        // __Hotfix0_get_floorPlane: XLua.DelegateBridge;
        // __Hotfix0_get_backwallPlane: XLua.DelegateBridge;
        // __Hotfix0_get_enableBackWall: XLua.DelegateBridge;
        // __Hotfix0_get_model: XLua.DelegateBridge;
        // __Hotfix0_set_model: XLua.DelegateBridge;
        // __Hotfix0_get_graphic: XLua.DelegateBridge;
        // __Hotfix0_get_furnitureMgr: XLua.DelegateBridge;
        // __Hotfix0_get_slot: XLua.DelegateBridge;
        // __Hotfix0_set_slot: XLua.DelegateBridge;
        // __Hotfix0_get_leftDoor: XLua.DelegateBridge;
        // __Hotfix0_get_rightDoor: XLua.DelegateBridge;
        // __Hotfix0_get_layout: XLua.DelegateBridge;
        // __Hotfix0_get_animator: XLua.DelegateBridge;
        // __Hotfix0_get_isEntered: XLua.DelegateBridge;
        // __Hotfix0_TryGetRoomObject: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_Init_EditorOnly: XLua.DelegateBridge;
        // __Hotfix0_OnSiblingReconstruct: XLua.DelegateBridge;
        // __Hotfix0_OnContentChanged: XLua.DelegateBridge;
        // __Hotfix0_OnDestroy: XLua.DelegateBridge;
        // __Hotfix0_OnSelectChanged: XLua.DelegateBridge;
        // __Hotfix0_OnPreInit: XLua.DelegateBridge;
        // __Hotfix0_OnPostInit: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_OnExit: XLua.DelegateBridge;
        // __Hotfix0_OnInteractSelf: XLua.DelegateBridge;
        // __Hotfix0_OnClicked: XLua.DelegateBridge;
        // __Hotfix0__TryInteractObjects: XLua.DelegateBridge;
        // __Hotfix0__UpdateCharacters: XLua.DelegateBridge;
        // __Hotfix0__InitFloorAndBackwall: XLua.DelegateBridge;
        // __Hotfix0_OnDestroyRoom: XLua.DelegateBridge;
        // __Hotfix0_OnVCharacterUpdated: XLua.DelegateBridge;
        // __Hotfix0_OnVCharacterToDestroy: XLua.DelegateBridge;
        // __Hotfix0_GenerateDynamicObstacles: XLua.DelegateBridge;
        // __Hotfix0__ContainsStayCharacter: XLua.DelegateBridge;
        // __Hotfix0__AddVaultCharacter: XLua.DelegateBridge;
        // __Hotfix0__RemoveVaultCharacter: XLua.DelegateBridge;
        // __Hotfix0__FindStayCharByInstId: XLua.DelegateBridge;
        // __Hotfix0__FindStayCharByCharId: XLua.DelegateBridge;
      }
      export interface VRoomSlot {
        HIGHLIGHT_OFFSET_Z: System.Single;
        // _highlight: UnityEngine.SpriteRenderer;
        // m_clickHandler: Torappu.DragCancellableClickHandler;
        // m_boxCollider: UnityEngine.BoxCollider2D;
        // m_isOn: System.Boolean;
        // m_isVisible: System.Boolean;
        // m_isEntered: System.Boolean;
        // m_internalRoom: Torappu.Building.Vault.VRoom;
        // m_dataCache: System.Nullable<Torappu.Building.Vault.VRoomSlot.SlotCache>;
        // <leftSlot>k__BackingField: Torappu.Building.Vault.VRoomSlot;
        // <rightSlot>k__BackingField: Torappu.Building.Vault.VRoomSlot;
        // <layout>k__BackingField: Torappu.Building.Vault.VLayoutManager;
      }
      export interface VaultMode {
        _layout: Torappu.Building.Vault.VLayoutManager;
        // _camera: UnityEngine.Camera;
        // _raycastBlocker: UnityEngine.Transform;
        // m_characterMgr: Torappu.Building.Vault.VCharacterManager;
        // m_reflectConfig: Torappu.Building.Vault.VaultReflectionConfigHolder;
        // m_isReflectConfigUnavailable: System.Boolean;
        // m_isDisabledByDIYPage: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_camera: XLua.DelegateBridge;
        // __Hotfix0_get_isRaycastBlocked: XLua.DelegateBridge;
        // __Hotfix0_set_isRaycastBlocked: XLua.DelegateBridge;
        // __Hotfix0_get_roomContainer: XLua.DelegateBridge;
        // __Hotfix0_get_selectedRoom: XLua.DelegateBridge;
        // __Hotfix0_get_selectedRoomSlot: XLua.DelegateBridge;
        // __Hotfix0_get_isActiveAndDisplayed: XLua.DelegateBridge;
        // __Hotfix0_get_layout: XLua.DelegateBridge;
        // __Hotfix0_OnRegister: XLua.DelegateBridge;
        // __Hotfix0_OnEnter: XLua.DelegateBridge;
        // __Hotfix0_OnExit: XLua.DelegateBridge;
        // __Hotfix0_OnTick: XLua.DelegateBridge;
        // __Hotfix0_RegisterCharacter: XLua.DelegateBridge;
        // __Hotfix0_UnregisterCharacter: XLua.DelegateBridge;
        // __Hotfix0_ShowCoroutine: XLua.DelegateBridge;
        // __Hotfix0_HideCoroutine: XLua.DelegateBridge;
        // __Hotfix0_ZoomInToRoom: XLua.DelegateBridge;
        // __Hotfix0__EnsureReflectConfig: XLua.DelegateBridge;
        // __Hotfix0_GetRefectFilter: XLua.DelegateBridge;
        // __Hotfix0_GetReflectCamera: XLua.DelegateBridge;
        // __Hotfix0_GetReflectCameraPlaneHeight: XLua.DelegateBridge;
        // __Hotfix0__OnDIYChangeVaultReflectConfig: XLua.DelegateBridge;
        // __Hotfix0__FocusRoomCoroutine: XLua.DelegateBridge;
        // __Hotfix0__UpdateReflectCamera: XLua.DelegateBridge;
        // __Hotfix0_Awake: XLua.DelegateBridge;
      }
      export interface VCameraController {
        MAX_LOD: System.Int32;
        // _touchCamera: BitBenderGames.MobileTouchCamera;
        _lodDists: System.Single[];
        _matchType: Torappu.Building.Vault.VCameraController.FocusMatchType;
        // _focsusZRange: UnityEngine.Vector2;
        // _roomWidthRange: UnityEngine.Vector2;
        // _roomHeightRange: UnityEngine.Vector2;
        _focusTime: System.Single;
        // _focusEaseType: DG.Tweening.Ease;
        _flashInTime: System.Single;
        // _flashInEaseType: DG.Tweening.Ease;
        _flashInFromZ: System.Single;
        _flashOutTime: System.Single;
        // _flashOutEaseType: DG.Tweening.Ease;
        // m_lod: Torappu.Building.Vault.VCameraController.LOD;
        // m_tween: DG.Tweening.Tween;
        // m_initialPosition: UnityEngine.Vector3;
        // onDragOrPinch: UnityEngine.Events.UnityEvent;
        onZoomUpdate: Torappu.Building.Vault.VCameraController.OnZoomUpdateEvent;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_camera: XLua.DelegateBridge;
        // __Hotfix0_get_enableTouchCamera: XLua.DelegateBridge;
        // __Hotfix0_set_enableTouchCamera: XLua.DelegateBridge;
        // __Hotfix0_get_isTweening: XLua.DelegateBridge;
        // __Hotfix0_get_isDraggingOrPinching: XLua.DelegateBridge;
        // __Hotfix0_get_lod: XLua.DelegateBridge;
        // __Hotfix0_get_camZoom: XLua.DelegateBridge;
        // __Hotfix0_set_camZoom: XLua.DelegateBridge;
        // __Hotfix0_get_camZoomMax: XLua.DelegateBridge;
        // __Hotfix0_get_camZoomMin: XLua.DelegateBridge;
        // __Hotfix0_SetBoundingBox: XLua.DelegateBridge;
        // __Hotfix0_Focus: XLua.DelegateBridge;
        // __Hotfix1_Focus: XLua.DelegateBridge;
        // __Hotfix0_ForcusCharacter: XLua.DelegateBridge;
        // __Hotfix2_Focus: XLua.DelegateBridge;
        // __Hotfix0_FlashIn: XLua.DelegateBridge;
        // __Hotfix0_FlashOut: XLua.DelegateBridge;
        // __Hotfix0_ResetCameraPosition: XLua.DelegateBridge;
        // __Hotfix0_UpdateTouchCamera: XLua.DelegateBridge;
        // __Hotfix0__UpdateLOD: XLua.DelegateBridge;
        // __Hotfix0__FocusInternal: XLua.DelegateBridge;
        // __Hotfix0__CalculateFocusPosition: XLua.DelegateBridge;
        // __Hotfix0__StopTween: XLua.DelegateBridge;
        // __Hotfix0__OnDragOrPinch: XLua.DelegateBridge;
        // __Hotfix0__OnZoomUpdate: XLua.DelegateBridge;
        // __Hotfix0_Start: XLua.DelegateBridge;
        // __Hotfix0_Update: XLua.DelegateBridge;
      }
      export interface VCharacterManager {
        // m_list: System.Collections.Generic.List<Torappu.Building.Vault.VCharacter>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Register: XLua.DelegateBridge;
        // __Hotfix0_Unregister: XLua.DelegateBridge;
        // __Hotfix0_ClearAll: XLua.DelegateBridge;
        // __Hotfix0_OnFixedUpdate: XLua.DelegateBridge;
      }
      export interface VDoor {
        _defaultSide: Torappu.SharedConsts.LeftOrRight;
        // <side>k__BackingField: Torappu.SharedConsts.LeftOrRight;
      }
      export interface VLayoutManager {
        // _viewport: UnityEngine.Transform;
        // _container: UnityEngine.Transform;
        _wallGenerator: Torappu.Building.Vault.VWallGenerator;
        _roomSlot: Torappu.Building.Vault.VRoomSlot;
        // _raycaster: UnityEngine.EventSystems.BaseRaycaster;
        _paddingX: System.Single;
        _paddingY: System.Single;
        // m_state: Torappu.Building.Vault.VaultMode;
        // m_rooms: System.Collections.Generic.List<Torappu.Building.Vault.VRoomSlot>;
        // m_modelToRoomMap: System.Collections.Generic.Dictionary<Torappu.Building.RoomSlotModel,Torappu.Building.Vault.VRoomSlot>;
        // m_currentSelectedRoom: Torappu.Building.Vault.VRoomSlot;
        // m_currentSelectedObject: Torappu.Building.Vault.VRoom.Object;
        // m_frustumCorners: UnityEngine.Vector3[];
        // <visibleRect>k__BackingField: UnityEngine.Rect;
        // <>f__am$cache0: System.Comparison<Torappu.Building.Vault.VRoomSlot>;
      }
      export interface VWallGenerator {
        // _wallMaterial: UnityEngine.Material;
        _paddingX: System.Single;
        _paddingY: System.Single;
        // m_meshFilter: UnityEngine.MeshFilter;
        // m_meshRenderer: UnityEngine.MeshRenderer;
        // m_generator: Torappu.EasyMeshGenerator;
      }
      export namespace VCharacter {
        export interface Options {
          // idleTimeRange: UnityEngine.Vector2;
          moveSpeed: System.Single;
          moveAnimScale: System.Single;
          probToInteractFurniture: System.Single;
          interactSlot: Torappu.Building.Vault.VFurnitureBridge.InteractSlot;
          probToPlaySpecialAnim: System.Single;
        }
        export interface IListener {
        }
        export interface States {
        }
        export namespace States {
          export enum State {
            DEFAULT = "DEFAULT",
            IDLE = "IDLE",
            MOVE = "MOVE",
            INTERACT = "INTERACT",
            SLEEP = "SLEEP",
            FURNITURE = "FURNITURE",
            SPECIAL = "SPECIAL",
            TERMINAL = "TERMINAL",
          }
          export interface IdleState {
            // m_remainingTime: System.Single;
          }
          export interface SpecialState {
            // m_waitTime: System.Single;
          }
          export interface MoveState {
            // <>f__am$cache0: System.Func<Torappu.Building.GridMap,Torappu.Building.GridMap.Node,System.Boolean>;
          }
          export interface InteractState {
            // m_waitTime: System.Single;
          }
          export interface SleepState {
          }
          export interface FurnitureState {
          }
          export namespace FurnitureState {
            export enum SubState {
              DEFAULT = "DEFAULT",
              MOVE = "MOVE",
              INTERACT = "INTERACT",
              TERMINAL = "TERMINAL",
            }
            export interface MoveState {
            }
            export interface InteractState {
              // m_isAnimationFinished: System.Boolean;
              // m_coroutine: UnityEngine.Coroutine;
              // m_tween: DG.Tweening.Tween;
              // m_protectTimeToExit: System.Single;
            }
            export namespace InteractState {
            }
          }
        }
      }
      export namespace VFurnitureBridge {
        export interface InteractSlot {
          SLOT_REACH_DISTANCE: System.Single;
          // m_character: Torappu.Building.Vault.VCharacter;
          // <owner>k__BackingField: Torappu.Building.Vault.VFurnitureBridge;
          // <options>k__BackingField: Torappu.Building.Vault.VFurnitureBridge.InteractSlot.Options;
          // <weightValue>k__BackingField: System.Single;
        }
        export namespace InteractSlot {
          export interface Options {
            animKey: System.String;
            startPosList: Torappu.GridPosition[];
            // interactWorldPos: UnityEngine.Vector3;
            // interactTime: UnityEngine.Vector2;
            specifyDir: System.Boolean;
            lOrR: Torappu.SharedConsts.LeftOrRight;
          }
        }
      }
      export namespace VGridPlane {
        export interface Options {
          // area: UnityEngine.Rect;
          offset: System.Single;
          gridSize: Torappu.GridPosition;
          ignoreBuiltInObstacles: System.Boolean;
          dynamicObstacleRects: Torappu.BuildingData.ObstacleRect[];
        }
      }
      export namespace VaultReflectionConfigHolder {
        export interface ReflectCameraItem {
          roomIndex: System.Int32;
          reflectIdx: Torappu.GraphicEffect.Reflection.ReflectCamera.ReflectIdx;
          height: System.Single;
          reflectCamera: Torappu.GraphicEffect.Reflection.ReflectCamera;
        }
        export interface ReflectMatFilter {
          NON_REFLECT_MAT: System.String;
          // m_excludeNames: System.Collections.Generic.List<System.String>;
        }
      }
      export namespace VRoomGraphic {
        export interface Options {
          roomSize: Torappu.GridPosition;
          hasLeftDoor: System.Boolean;
          hasRightDoor: System.Boolean;
        }
      }
      export namespace VDIYRoom {
      }
      export namespace VRoom {
        export interface IObject {
        }
        export interface Object {
          // m_isOn: System.Boolean;
          // <room>k__BackingField: Torappu.Building.Vault.VRoom;
          // <plane>k__BackingField: Torappu.Building.Vault.VGridPlane;
        }
      }
      export namespace VRoomSlot {
        export interface SlotCache {
          prefabId: System.String;
        }
      }
      export namespace VaultMode {
      }
      export namespace VCameraController {
        export enum LOD {
          LEVEL_0 = "LEVEL_0",
          LEVEL_1 = "LEVEL_1",
          TOO_FAR = "TOO_FAR",
        }
        export interface OnZoomUpdateEvent {
        }
        export enum FocusMatchType {
          WIDTH = "WIDTH",
          HEIGHT = "HEIGHT",
        }
      }
      export namespace VWallGenerator {
        export interface BoundaryItem {
          room: Torappu.Building.RoomSlotModel;
          boundaryType: Torappu.Building.Vault.VWallGenerator.BoundaryItem.BoundaryType;
          yRow: System.Single;
        }
        export interface RoomWrapper {
          room: Torappu.Building.RoomSlotModel;
        }
        export namespace BoundaryItem {
          export enum BoundaryType {
            BEGIN = "BEGIN",
            END = "END",
          }
        }
      }
    }
    export namespace BuildingPrefabMaker {
      export interface CharacterSpecEntry {
        buildingSpineScale: System.Single;
        battleSpineScale: System.Single;
        moveSpeed: System.Single;
      }
    }
    export namespace DIY {
      export interface DIYFeatureComponents {
        // m_cachedResourcesLoader: Torappu.Resource.CachedAssetLoader;
        // m_furnitureManager: Torappu.Building.DIY.FurnitureManager;
        // m_modifierManager: Torappu.Building.DIY.DIYRoomModifierManager;
        // m_presetManager: Torappu.Building.DIY.FurniturePresetManager;
        // m_furnitureSaver: Torappu.Building.DIY.FurnitureSaver;
        // m_diyRoomInfoManager: Torappu.Building.DIY.DIYRoomInfoManager;
        // m_diyShop: Torappu.Building.DIY.DIYShop;
        // m_furnitureDatabase: Torappu.Building.DIY.FurnitureDatabase;
        // m_modifierDatabase: Torappu.Building.DIY.DIYRoomModifierDatabase;
        // m_furnitureTypeDatabase: Torappu.Building.DIY.FurnitureTypeDatabase;
        // m_furnitureStorage: Torappu.Building.DIY.FurnitureStorage;
        // m_diyRoomTemplateDatabase: Torappu.Building.DIY.DIYRoomTemplateDatabase;
        // m_furnitureGroupDatabase: Torappu.Building.DIY.FurnitureGroupDatabase;
        // m_inited: System.Boolean;
      }
      export interface IDIYFeatureComponents {
      }
      export interface DIYPreset {
        itemList: System.Collections.Generic.List<Torappu.Building.DIY.DIYPresetItem>;
        // <name>k__BackingField: System.String;
        // <floorModifierId>k__BackingField: System.String;
        // <wallModifierId>k__BackingField: System.String;
      }
      export interface DIYPresetItem {
        id: System.String;
        pos0: System.Int32;
        pos1: System.Int32;
      }
      export interface IDIYPreset {
      }
      export interface IDIYPresetProvider {
      }
      export interface IDIYPresetManager {
      }
      export interface DIYRoom {
        VCHARACTER_HEIGHT_BOUNDING_GRID_SIZE: System.Int32;
        _groundGridSize: System.Single;
        _wallGridSize: System.Single;
        _roomWidth: System.Int32;
        _roomHeight: System.Int32;
        _roomDepth: System.Int32;
        // _mainCamera: UnityEngine.Camera;
        // _indicatorCamera: UnityEngine.Camera;
        _cameraMarginMin: System.Single;
        _cameraMarginMax: System.Single;
        // _cameraOffset: UnityEngine.Vector3;
        // _cameraLookOffset: UnityEngine.Vector3;
        _useDIYRoomInfo: System.Boolean;
        _overrideDIYRoomPrefabSetting: Torappu.Building.DIY.DIYRoomPrefabSettings;
        // _markShader: UnityEngine.Shader;
        // _okTexture: UnityEngine.Texture2D;
        // _ngTexture: UnityEngine.Texture2D;
        // _okSelectTexture: UnityEngine.Texture2D;
        // _ngSelectTexture: UnityEngine.Texture2D;
        // _indicatorProto: UnityEngine.GameObject;
        // m_locatorGround: Torappu.Building.DIY.GridLocator;
        // m_locatorWall: Torappu.Building.DIY.GridLocator;
        // m_locatorCeiling: Torappu.Building.DIY.GridLocator;
        // m_gridMachineGround: Torappu.Building.DIY.GridMachine;
        // m_gridMachineCarpet: Torappu.Building.DIY.GridMachine;
        // m_gridMachinePoster: Torappu.Building.DIY.GridMachine;
        // m_gridMachineCeilingDecal: Torappu.Building.DIY.GridMachine;
        // m_gridMachine3D: Torappu.Building.DIY.GridMachine3D;
        // m_furnitureProvider: Torappu.Building.DIY.IFurnitureProvider;
        // m_DIYRoomModifierProvider: Torappu.Building.DIY.IDIYRoomModifierProvider;
        // m_DIYRoomInfoProvider: Torappu.Building.DIY.IDIYRoomInfoProvider;
        // m_wallModifier: Torappu.Building.DIY.DIYRoomModifier;
        // m_floorModifier: Torappu.Building.DIY.DIYRoomModifier;
        // m_wallOriginMaterial: UnityEngine.Material;
        // m_floorOriginMaterial: UnityEngine.Material;
        // m_wallOriginMesh: UnityEngine.Mesh;
        // m_floorOriginMesh: UnityEngine.Mesh;
        // m_currentRoomIndex: System.Int32;
        // m_dormitoryGameObject: UnityEngine.GameObject;
        // m_wallRenderer: UnityEngine.Renderer;
        // m_floorRenderer: UnityEngine.Renderer;
        // m_floorReflect: Torappu.GraphicEffect.Reflection.ReflectCamera;
        // m_floorRefectMatFilter: Torappu.Building.DIY.DIYRoom.IRefectionMaterialFilter;
        // m_floorReflectBound: UnityEngine.MeshRenderer;
        // m_floorReflectDistance: System.Single;
        // m_floorReflectFadeHeight: System.Single;
        // m_doorRenderers: UnityEngine.Renderer[];
        // m_wallMeshFilter: UnityEngine.MeshFilter;
        // m_floorMeshFilter: UnityEngine.MeshFilter;
        // m_listeners: System.Collections.Generic.List<Torappu.Building.DIY.DIYRoom.IListener>;
        // m_highlightMarks: System.Collections.Generic.List<UnityEngine.GameObject>;
        // m_floorGridMesh: UnityEngine.Mesh;
        // m_wallGridMesh: UnityEngine.Mesh;
        // m_ceilingGridMesh: UnityEngine.Mesh;
        // m_floorGridMeshRenderer: UnityEngine.MeshRenderer;
        // m_wallGridMeshRenderer: UnityEngine.MeshRenderer;
        // m_ceilingGridMeshRenderer: UnityEngine.MeshRenderer;
        // m_obstacleIndicatorList: System.Collections.Generic.List<UnityEngine.GameObject>;
        // m_preIntersectCarpet: System.Boolean;
        // m_preIntersectPoster: System.Boolean;
        // m_preIntersectCeilingDecal: System.Boolean;
        // m_preIntersect3D: System.Boolean;
        // m_awakeInited: System.Boolean;
        // m_alreadySetup: System.Boolean;
        // m_outerCamera: UnityEngine.Camera;
        // m_furnitureList: System.Collections.Generic.List<Torappu.Building.DIY.DIYRoom.FurnitureControlNode>;
        // <>f__am$cache0: System.Predicate<Torappu.Building.DIY.Furniture>;
        // <>f__am$cache1: System.Predicate<Torappu.Building.DIY.DIYRoomModifier>;
        // <>f__am$cache2: System.Predicate<Torappu.Building.DIY.Furniture>;
        // <>f__am$cache3: System.Action<Torappu.Building.DIY.Furniture>;
        // <>f__am$cache4: System.Action<Torappu.Building.DIY.DIYRoomModifier>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_mainCamera: XLua.DelegateBridge;
        // __Hotfix0_get_roomWidth: XLua.DelegateBridge;
        // __Hotfix0_get_roomHeight: XLua.DelegateBridge;
        // __Hotfix0_get_roomDepth: XLua.DelegateBridge;
        // __Hotfix0_get_roomIndex: XLua.DelegateBridge;
        // __Hotfix0_SetCameraMarginRatioBottom: XLua.DelegateBridge;
        // __Hotfix0__AwakeInit: XLua.DelegateBridge;
        // __Hotfix0_Awake: XLua.DelegateBridge;
        // __Hotfix0__SetupReflect: XLua.DelegateBridge;
        // __Hotfix0_ClearupGridMesh: XLua.DelegateBridge;
        // __Hotfix0_SetOuterCamera: XLua.DelegateBridge;
        // __Hotfix0_SetReflectMaterialFilter: XLua.DelegateBridge;
        // __Hotfix0__GenerateGridMesh: XLua.DelegateBridge;
        // __Hotfix0_ForEachFloorRect: XLua.DelegateBridge;
        // __Hotfix0_RemoveHighlightMark: XLua.DelegateBridge;
        // __Hotfix0_ClearHighlightMark: XLua.DelegateBridge;
        // __Hotfix0_HasFurnitureIntersection: XLua.DelegateBridge;
        // __Hotfix0__CheckIntersectedFurnitures: XLua.DelegateBridge;
        // __Hotfix0__CheckIntersectedFurnitures3D: XLua.DelegateBridge;
        // __Hotfix1__CheckIntersectedFurnitures: XLua.DelegateBridge;
        // __Hotfix0__OnFurnitureControlNodePositionSetEvent: XLua.DelegateBridge;
        // __Hotfix0__OnFurnitureControlNodeRoomIndexChangeEvent: XLua.DelegateBridge;
        // __Hotfix0__RegisterFurniture: XLua.DelegateBridge;
        // __Hotfix0__UnregisterFurniture: XLua.DelegateBridge;
        // __Hotfix0__ApplyDIYRoomModifier: XLua.DelegateBridge;
        // __Hotfix0__ApplyFloorDIYRoomModifier: XLua.DelegateBridge;
        // __Hotfix0__ApplyWallDIYRoomModifier: XLua.DelegateBridge;
        // __Hotfix0__UpdateCamera: XLua.DelegateBridge;
        // __Hotfix0_LateUpdate: XLua.DelegateBridge;
        // __Hotfix0_OnDestroy: XLua.DelegateBridge;
        // __Hotfix0_RegisterListener: XLua.DelegateBridge;
        // __Hotfix0_UnregisterListener: XLua.DelegateBridge;
        // __Hotfix0_ShowGridMesh: XLua.DelegateBridge;
        // __Hotfix0_HideAllGridMesh: XLua.DelegateBridge;
        // __Hotfix0_Setup: XLua.DelegateBridge;
        // __Hotfix0_ClearUp: XLua.DelegateBridge;
        // __Hotfix0_RefreshIntersection: XLua.DelegateBridge;
        // __Hotfix0_ForEachFurnitureController: XLua.DelegateBridge;
        // __Hotfix0_ForEachAttachPointExporterAsync: XLua.DelegateBridge;
        // __Hotfix0_OnFurnitureAdded: XLua.DelegateBridge;
        // __Hotfix0_OnFurnitureRemoved: XLua.DelegateBridge;
        // __Hotfix0_OnDIYRoomModifierAdded: XLua.DelegateBridge;
        // __Hotfix0_OnDIYRoomModifierRemoved: XLua.DelegateBridge;
        // __Hotfix0_OnDIYRoomModifierRoomIndexChanged: XLua.DelegateBridge;
        // __Hotfix0_OnFurniturePositionChanged: XLua.DelegateBridge;
        // __Hotfix0_OnFurnitureRoomIndexChanged: XLua.DelegateBridge;
      }
      export interface DIYRoomInfoManager {
        // m_templateProvider: Torappu.Building.DIY.IDIYRoomTemplateProvider;
      }
      export interface DIYRoomModifierDatabase {
        DEFAULT_FURNITURE_PREFAB_NAME: System.String;
        // <cachedAssetLoader>k__BackingField: Torappu.Resource.CachedAssetLoader;
        // m_adapters: System.Collections.Generic.List<Torappu.Building.DIY.DIYRoomModifierDatabase.DIYRoomModifierDataAdapter>;
        // m_furniIdToAdapter: System.Collections.Generic.Dictionary<System.String,Torappu.Building.DIY.IDIYRoomModifierData>;
        // m_themeIdToAdapters: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.IList<Torappu.Building.DIY.IDIYRoomModifierData>>;
        // m_typeToAdapters: System.Collections.Generic.Dictionary<Torappu.BuildingData.FurnitureType,System.Collections.Generic.IList<Torappu.Building.DIY.IDIYRoomModifierData>>;
        // m_roomPartToAdapter: System.Collections.Generic.Dictionary<Torappu.Building.DIY.DIYRoomPart,System.Collections.Generic.IList<Torappu.Building.DIY.IDIYRoomModifierData>>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_cachedAssetLoader: XLua.DelegateBridge;
        // __Hotfix0_set_cachedAssetLoader: XLua.DelegateBridge;
        // __Hotfix0_Setup: XLua.DelegateBridge;
        // __Hotfix0_QueryData: XLua.DelegateBridge;
        // __Hotfix0_QueryDatas: XLua.DelegateBridge;
        // __Hotfix0_GetData: XLua.DelegateBridge;
        // __Hotfix0_GetDatasByType: XLua.DelegateBridge;
        // __Hotfix0_GetDatasByThemeId: XLua.DelegateBridge;
        // __Hotfix0_GetDatasByRoomPart: XLua.DelegateBridge;
        // __Hotfix0__SetupSearchTables: XLua.DelegateBridge;
        // __Hotfix0__AddToListInDict: XLua.DelegateBridge;
      }
      export interface DIYRoomModifierManager {
        // m_listeners: System.Collections.Generic.List<Torappu.Building.DIY.IDIYRoomModifierProviderListener>;
        // m_DIYRoomModifiers: System.Collections.Generic.List<Torappu.Building.DIY.DIYRoomModifier>;
        // m_dataProvider: Torappu.Building.DIY.IDIYRoomModifierDataProvider;
        // m_diyRoomModifierDataDirty: System.Boolean;
      }
      export interface DIYRoomModifierMemento {
        // m_listeners: System.Collections.Generic.List<Torappu.Building.DIY.IDIYRoomModifierProviderListener>;
        // m_modifiers: System.Collections.Generic.List<Torappu.Building.DIY.DIYRoomModifier>;
        // <>f__am$cache0: System.Predicate<Torappu.Building.DIY.DIYRoomModifier>;
      }
      export interface DIYRoomPrefabSettings {
        // wallRenderer: UnityEngine.Renderer;
        // wallMeshFilter: UnityEngine.MeshFilter;
        // floorRenderer: UnityEngine.Renderer;
        // floorMeshFilter: UnityEngine.MeshFilter;
        // reflectCameraBound: UnityEngine.MeshRenderer;
        // floorGridMeshFilter: UnityEngine.MeshFilter;
        // wallGridMeshFilter: UnityEngine.MeshFilter;
        // ceilingGridMeshFilter: UnityEngine.MeshFilter;
        // leftDoorRenderer: UnityEngine.Renderer;
        // rightDoorRenderer: UnityEngine.Renderer;
        obstacles: Torappu.Building.DIY.DIYRoomPrefabSettings.ObstacleItem[];
        // overrideLeftDoorTransform: UnityEngine.Transform;
        // overrideRightDoorTransform: UnityEngine.Transform;
      }
      export interface DIYRoomTemplateDatabase {
        DEFAULT_ROOM_PATH: System.String;
        // <cachedAssetLoader>k__BackingField: Torappu.Resource.CachedAssetLoader;
      }
      export enum DIYRoomPart {
        FLOOR = "FLOOR",
        WALL = "WALL",
      }
      export interface IDIYRoomModifierData {
      }
      export interface IDIYRoomModifierDataProvider {
      }
      export interface DIYRoomModifier {
        // m_listener: Torappu.Building.DIY.DIYRoomModifier.IListener;
        // m_data: Torappu.Building.DIY.IDIYRoomModifierData;
        // m_roomIndex: System.Int32;
      }
      export interface IDIYRoomModifierProviderListener {
      }
      export interface IDIYRoomModifierProvider {
      }
      export interface IDIYRoomModifierManager {
      }
      export interface Obstacle {
        // m_x: System.Int32;
        // m_y: System.Int32;
        // m_z: System.Int32;
        // m_w: System.Int32;
        // m_h: System.Int32;
        // m_d: System.Int32;
      }
      export interface IDIYRoomTemplate {
      }
      export interface IDIYRoomTemplateProvider {
      }
      export interface DIYRoomInfo {
        // m_data: Torappu.Building.DIY.IDIYRoomTemplate;
        // m_index: System.Int32;
      }
      export interface IDIYRoomInfoProvider {
      }
      export interface Furniture {
        // m_listener: Torappu.Building.DIY.Furniture.IListener;
        // m_data: Torappu.Building.DIY.IFurnitureData;
        // m_pos0: System.Int32;
        // m_pos1: System.Int32;
        // m_roomIndex: System.Int32;
      }
      export interface IFurnitureProviderListener {
      }
      export interface IFurnitureProvider {
      }
      export interface IFurnitureManager {
      }
      export interface FurnitureControllerHolder {
        furnitureController: Torappu.Building.DIY.DIYRoom.IFurnitureController;
      }
      export interface FurnitureDatabase {
        DEFAULT_FURNITURE_PREFAB_NAME: System.String;
        // <loadBalancer>k__BackingField: Torappu.Building.GameObjectSplitFrameLoadBalancer;
        // m_adapters: System.Collections.Generic.List<Torappu.Building.DIY.FurnitureDatabase.FurnitureDataAdapter>;
        // m_buildingDB: Torappu.BuildingDB;
        // m_furniIdToAdapter: System.Collections.Generic.Dictionary<System.String,Torappu.Building.DIY.IFurnitureData>;
        // m_themeIdToAdapters: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.IList<Torappu.Building.DIY.IFurnitureData>>;
        // m_typeToAdapters: System.Collections.Generic.Dictionary<Torappu.BuildingData.FurnitureType,System.Collections.Generic.IList<Torappu.Building.DIY.IFurnitureData>>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_loadBalancer: XLua.DelegateBridge;
        // __Hotfix0_set_loadBalancer: XLua.DelegateBridge;
        // __Hotfix0_Setup: XLua.DelegateBridge;
        // __Hotfix0_QueryData: XLua.DelegateBridge;
        // __Hotfix0_QueryDatas: XLua.DelegateBridge;
        // __Hotfix0_GetData: XLua.DelegateBridge;
        // __Hotfix0_GetDatasByType: XLua.DelegateBridge;
        // __Hotfix0_GetDatasByThemeId: XLua.DelegateBridge;
        // __Hotfix0_UpdateTime: XLua.DelegateBridge;
        // __Hotfix0_OnRelease: XLua.DelegateBridge;
        // __Hotfix0__SetupSearchTables: XLua.DelegateBridge;
        // __Hotfix0__AddToListInDict: XLua.DelegateBridge;
      }
      export interface FurnitureEntity {
        attachPoints: Torappu.Building.DIY.FurnitureEntity.AttachPoint[];
      }
      export interface FurnitureGroupDatabase {
        // m_dataList: System.Collections.Generic.List<Torappu.Building.DIY.FurnitureGroupDatabase.FurnitureGroupDataAdapter>;
        // m_furniIdToGroupData: System.Collections.Generic.Dictionary<System.String,Torappu.Building.DIY.IFurnitureGroupData>;
        // m_quickSetup: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<Torappu.Building.DIY.FurnitureGroupDatabase.FurnitureQuickSetupItemAdapter>>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_SetupGroup: XLua.DelegateBridge;
        // __Hotfix0_SetupQuickSetup: XLua.DelegateBridge;
        // __Hotfix0_get_datas: XLua.DelegateBridge;
        // __Hotfix0_GetFurnitureQuickSetup: XLua.DelegateBridge;
        // __Hotfix0_GetGroupDataByFurniture: XLua.DelegateBridge;
      }
      export interface IFurnitureGroupData {
      }
      export interface IFurnitureQuickSetupItem {
      }
      export interface IFurnitureGroupDataProvider {
      }
      export interface FurnitureManager {
        // m_listeners: System.Collections.Generic.List<Torappu.Building.DIY.IFurnitureProviderListener>;
        // m_furnitures: System.Collections.Generic.List<Torappu.Building.DIY.Furniture>;
        // m_furnitureDB: Torappu.Building.DIY.IFurnitureDataProvider;
        // m_furnitureDataDirty: System.Boolean;
      }
      export interface FurnitureMemento {
        // m_listeners: System.Collections.Generic.List<Torappu.Building.DIY.IFurnitureProviderListener>;
        // m_furnitures: System.Collections.Generic.List<Torappu.Building.DIY.Furniture>;
        // <>f__am$cache0: System.Predicate<Torappu.Building.DIY.Furniture>;
      }
      export interface FurniturePresetManager {
        SLOT_COUNT: System.Int32;
      }
      export interface FurnitureSaver {
      }
      export interface IFurnitureSaver {
      }
      export interface FurnitureSorter {
        // m_furnitureStorageItemCache: System.Collections.Generic.Dictionary<System.String,System.Int32>;
        // m_cacheList: System.Collections.Generic.List<Torappu.Building.DIY.FurnitureSorter.CacheItem<Torappu.Building.DIY.IDIYItem>>;
        // m_shopCacheList: System.Collections.Generic.List<Torappu.Building.DIY.FurnitureSorter.CacheItem<Torappu.Building.DIY.IDIYShopItem>>;
        // <>f__am$cache0: System.Predicate<Torappu.Building.DIY.FurnitureStorageItem>;
        // <>f__mg$cache0: System.Func<Torappu.Building.DIY.IDIYItem,System.Int32>;
        // <>f__mg$cache1: System.Func<Torappu.Building.DIY.IDIYItem,System.Int32>;
        // <>f__mg$cache2: System.Func<Torappu.Building.DIY.IDIYItem,System.Int32>;
        // <>f__mg$cache3: System.Func<Torappu.Building.DIY.IDIYItem,System.Int32>;
        // <>f__mg$cache4: System.Func<Torappu.Building.DIY.IDIYItem,System.Int32>;
        // <>f__mg$cache5: System.Func<Torappu.Building.DIY.IDIYItem,System.Int32>;
        // <>f__mg$cache6: System.Func<Torappu.Building.DIY.IDIYItem,System.Int32>;
        // <>f__mg$cache7: System.Func<Torappu.Building.DIY.IDIYItem,System.Int32>;
        // <>f__mg$cache8: System.Func<Torappu.Building.DIY.IDIYItem,System.Int32>;
        // <>f__mg$cache9: System.Func<Torappu.Building.DIY.IDIYItem,System.Int32>;
      }
      export interface FurnitureStorage {
      }
      export interface FurnitureStorageItem {
        EMPTY: Torappu.Building.DIY.FurnitureStorageItem;
        furnitureId: System.String;
        totalCount: System.Int32;
      }
      export interface IFurnitureStorage {
      }
      export interface FurnitureTypeDatabase {
        // m_data: System.Collections.Generic.List<Torappu.Building.DIY.FurnitureTypeDatabase.Entry>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Setup: XLua.DelegateBridge;
        // __Hotfix0_QueryTypeFurnitures: XLua.DelegateBridge;
        // __Hotfix0_GetDisplayName: XLua.DelegateBridge;
      }
      export interface GridLocator {
        _calculationMatrix: System.Single[][];
      }
      export interface GridMachine {
        // m_rectList: System.Collections.Generic.List<Torappu.Building.DIY.GridMachine.IGridRect>;
      }
      export interface GridMachine3D {
        // m_cubeList: System.Collections.Generic.List<Torappu.Building.DIY.GridMachine3D.IGridCube>;
      }
      export enum FurnitureLocationType {
        GROUND = "GROUND",
        WALL = "WALL",
        CARPET = "CARPET",
        CEILING = "CEILING",
        POSTER = "POSTER",
        CEILING_DECAL = "CEILING_DECAL",
      }
      export interface IFurnitureData {
      }
      export interface IFurnitureDataProvider {
      }
      export interface PersistentImageProxy {
        CACHE_MAP_FILE_NAME: System.String;
        // m_imageCache: System.Collections.Generic.Dictionary<System.String,UnityEngine.Texture2D>;
        // m_basePath: System.String;
        // m_cacheInfoList: System.Collections.Generic.List<Torappu.Building.DIY.PersistentImageProxy.CacheInfo>;
        // m_cacheInfoFileName: System.String;
      }
      export interface PersistentImageProxyMonitor {
      }
      export interface ResourceRouter {
        FURNITURE_FOLDER: System.String;
        MODIFIER_MATERIAL_FOLDER: System.String;
        FURNITURE_ICON_FOLDER: System.String;
        DIY_ROOM_BACKGROUND_FOLDER: System.String;
        DIY_ROOM_PREFAB_FOLDER: System.String;
      }
      export interface DIYShop {
        // m_items: System.Collections.Generic.List<Torappu.Building.DIY.DIYShop.Item>;
      }
      export interface IDIYItem {
      }
      export interface IDIYShopItem {
      }
      export interface IDIYShop {
      }
      export interface DIYRoomIndexConfig {
        _entries: Torappu.Building.DIY.DIYRoomIndexConfig.Entry[];
      }
      export interface DIYRoomIndicator {
        // _coordinatorText: UnityEngine.UI.Text;
        _coordinatorFormat: System.String;
        // _operationButtonRoot: UnityEngine.Transform;
        _positiveOffset: System.Single;
        _negativeOffset: System.Single;
        _horizontalOffset: System.Single;
        // _frameObjects: UnityEngine.Transform[];
        // _frameEdgeObjects: UnityEngine.Transform[];
        _edgeLengthWeight: System.Single;
        _edgeLengthBias: System.Single;
        _animInterval: System.Single;
        // _toneColor: UnityEngine.Color;
        // _innerCubeRenderer: UnityEngine.Renderer;
        // _innerCubeColor: UnityEngine.Color;
        _innerCubePadding: System.Single;
        _operationButtonHorizontalOffset: System.Single;
        // m_currentOccupation: Torappu.Building.DIY.DIYRoom.ISpaceOccupation;
        // m_locationType: Torappu.Building.DIY.FurnitureLocationType;
        // m_prePosition0: System.Int32;
        // m_prePosition1: System.Int32;
        // m_colorMaterials: System.Collections.Generic.List<UnityEngine.Material>;
      }
      export interface DIYRoomIndicatorButton {
        buttonType: Torappu.Building.DIY.DIYRoomIndicatorButton.ButtonType;
      }
      export interface DIYTouchHandler {
        // _raycaster: UnityEngine.EventSystems.BaseRaycaster;
        // _targetCamera: UnityEngine.Camera;
        _dragThreshold: System.Single;
        _advancedLayer: System.String;
        // m_currentControllerHolder: Torappu.Building.DIY.FurnitureControllerHolder;
        // m_dragOriginPosition: UnityEngine.Vector3;
        // m_currentDragOrigin: UnityEngine.GameObject;
        // m_moveFactor: UnityEngine.Vector2;
        // m_dragState: Torappu.Building.DIY.DIYTouchHandler.DragState;
        // m_dragging: System.Boolean;
        // m_emptyDragOrigin: UnityEngine.Vector2;
        // m_pointResult: System.Collections.Generic.List<UnityEngine.EventSystems.RaycastResult>;
        // targetPointEmpty: System.Action;
        // targetDragEmpty: System.Action<UnityEngine.Vector2>;
        // targetStartDrag: System.Action<Torappu.Building.DIY.DIYRoom.IFurnitureController>;
        // targetDragged: System.Action<Torappu.Building.DIY.DIYRoom.IFurnitureController,System.Int32,System.Int32>;
        // indicatorButtonPressed: System.Action<Torappu.Building.DIY.DIYRoomIndicatorButton>;
      }
      export interface FurnitureGenreConfig {
        genres: Torappu.Building.DIY.FurnitureGenreConfig.FurnitureGenre[];
      }
      export namespace DIYRoom {
        export interface IListener {
        }
        export interface IRefectionMaterialFilter {
        }
        export interface DefaultReflectFilter {
        }
        export interface FurnitureGridRect {
          // m_furniture: Torappu.Building.DIY.Furniture;
        }
        export interface GeneralGridRect {
          // <x>k__BackingField: System.Int32;
          // <y>k__BackingField: System.Int32;
          // <w>k__BackingField: System.Int32;
          // <h>k__BackingField: System.Int32;
        }
        export interface FurnitureGridCube {
          // m_furniture: Torappu.Building.DIY.Furniture;
          // m_roomHeigit: System.Int32;
        }
        export interface ObstacleGridCube {
          // <x>k__BackingField: System.Int32;
          // <y>k__BackingField: System.Int32;
          // <z>k__BackingField: System.Int32;
          // <w>k__BackingField: System.Int32;
          // <h>k__BackingField: System.Int32;
          // <d>k__BackingField: System.Int32;
          // m_gridSizeX: System.Single;
          // m_gridSizeY: System.Single;
          // m_gridSizeZ: System.Single;
          // m_parent: UnityEngine.Transform;
          // m_indicator: Torappu.Building.DIY.DIYRoomIndicator;
          // m_gridLocator: Torappu.Building.DIY.GridLocator;
        }
        export interface ISpaceOccupation {
        }
        export interface IFurnitureController {
        }
        export interface IAttachPoint {
        }
        export interface IAttachPointExporter {
        }
        export interface FurnitureControlNode {
          // m_furniture: Torappu.Building.DIY.Furniture;
          // m_gameObject: UnityEngine.GameObject;
          // m_attachPoints: Torappu.Building.DIY.FurnitureEntity.AttachPoint[];
          // m_locator: Torappu.Building.DIY.GridLocator;
          // m_gridMachine: Torappu.Building.DIY.GridMachine;
          // m_gridMachine3D: Torappu.Building.DIY.GridMachine3D;
          // m_gridMark: UnityEngine.GameObject;
          // m_gridMarkMesh: UnityEngine.Mesh;
          // m_gridMarkMat: UnityEngine.Material;
          // m_maxPos0: System.Int32;
          // m_maxPos1: System.Int32;
          // m_roomIndex: System.Int32;
          // m_markState: System.Boolean;
          // m_markWaitingForHide: System.Boolean;
          // m_select: System.Boolean;
          // m_originListener: Torappu.Building.DIY.Furniture.IListener;
          // m_xUnit: System.Single;
          // m_yUnit: System.Single;
          // m_zUnit: System.Single;
          // m_markShader: UnityEngine.Shader;
          // m_reflectCamera: Torappu.GraphicEffect.Reflection.ReflectCamera;
          // m_reflectFilter: Torappu.Building.DIY.DIYRoom.IRefectionMaterialFilter;
          // m_registeredRenderer: System.Collections.Generic.List<UnityEngine.MeshRenderer>;
          // m_onGameObjectLoaded: System.Action<Torappu.Building.DIY.DIYRoom.FurnitureControlNode>;
          // <okTexture>k__BackingField: UnityEngine.Texture2D;
          // <ngTexture>k__BackingField: UnityEngine.Texture2D;
          // <okSelectTexture>k__BackingField: UnityEngine.Texture2D;
          // <ngSelectTexture>k__BackingField: UnityEngine.Texture2D;
          // positionSetEvent: System.Action<Torappu.Building.DIY.DIYRoom.FurnitureControlNode,System.Int32,System.Int32>;
          // roomIndexChangeEvent: System.Action<Torappu.Building.DIY.DIYRoom.FurnitureControlNode>;
        }
        export namespace FurnitureControlNode {
        }
      }
      export namespace DIYRoomInfoManager {
      }
      export namespace DIYRoomModifierDatabase {
        export interface DIYRoomModifierDataAdapter {
          // m_buildingFurnitureData: Torappu.BuildingData.CustomData.FurnitureData;
          // m_groupData: Torappu.Building.DIY.IFurnitureGroupData;
          // m_cachedAssetLoader: Torappu.Resource.CachedAssetLoader;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_id: XLua.DelegateBridge;
          // __Hotfix0_get_displayName: XLua.DelegateBridge;
          // __Hotfix0_get_comfort: XLua.DelegateBridge;
          // __Hotfix0_get_rarity: XLua.DelegateBridge;
          // __Hotfix0_get_themeId: XLua.DelegateBridge;
          // __Hotfix0_get_groupId: XLua.DelegateBridge;
          // __Hotfix0_get_part: XLua.DelegateBridge;
          // __Hotfix0_get_mesh: XLua.DelegateBridge;
          // __Hotfix0_get_material: XLua.DelegateBridge;
          // __Hotfix0_get_icon: XLua.DelegateBridge;
          // __Hotfix0_get_desc: XLua.DelegateBridge;
          // __Hotfix0_get_usage: XLua.DelegateBridge;
          // __Hotfix0_get_furniType: XLua.DelegateBridge;
        }
      }
      export namespace DIYRoomModifierManager {
      }
      export namespace DIYRoomPrefabSettings {
        export interface ObstacleItem {
          x: System.Int32;
          y: System.Int32;
          z: System.Int32;
          w: System.Int32;
          h: System.Int32;
          d: System.Int32;
        }
      }
      export namespace DIYRoomTemplateDatabase {
        export interface Template {
          roomSlotModel: Torappu.Building.RoomSlotModel;
          // m_cachedAssetLoader: Torappu.Resource.CachedAssetLoader;
        }
      }
      export namespace DIYRoomModifier {
        export interface IListener {
        }
      }
      export namespace Furniture {
        export interface IListener {
        }
      }
      export namespace FurnitureDatabase {
        export interface FurnitureDataAdapter {
          // m_buildingFurnitureData: Torappu.BuildingData.CustomData.FurnitureData;
          // m_groupData: Torappu.Building.DIY.IFurnitureGroupData;
          // m_loadBalancer: Torappu.Building.GameObjectSplitFrameLoadBalancer;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_get_assetLoader: XLua.DelegateBridge;
          // __Hotfix0_get_id: XLua.DelegateBridge;
          // __Hotfix0_get_displayName: XLua.DelegateBridge;
          // __Hotfix0_get_dimX: XLua.DelegateBridge;
          // __Hotfix0_get_dimY: XLua.DelegateBridge;
          // __Hotfix0_get_dimZ: XLua.DelegateBridge;
          // __Hotfix0_get_comfort: XLua.DelegateBridge;
          // __Hotfix0_get_rarity: XLua.DelegateBridge;
          // __Hotfix0_get_themeId: XLua.DelegateBridge;
          // __Hotfix0_get_groupId: XLua.DelegateBridge;
          // __Hotfix0_get_locationType: XLua.DelegateBridge;
          // __Hotfix0_get_prefab: XLua.DelegateBridge;
          // __Hotfix0_get_icon: XLua.DelegateBridge;
          // __Hotfix0_get_desc: XLua.DelegateBridge;
          // __Hotfix0_get_usage: XLua.DelegateBridge;
          // __Hotfix0_get_furniType: XLua.DelegateBridge;
          // __Hotfix0_LoadPrefabAsync: XLua.DelegateBridge;
        }
        export namespace FurnitureDataAdapter {
        }
      }
      export namespace FurnitureEntity {
        export interface IntPair {
          x: System.Int32;
          y: System.Int32;
        }
        export interface AttachPoint {
          // _targetPoint: UnityEngine.Transform;
          _animationKey: System.String;
          _leftOrRight: Torappu.SharedConsts.LeftOrRight;
          _specifyDir: System.Boolean;
          // _interactTime: UnityEngine.Vector2;
          _entries: Torappu.Building.DIY.FurnitureEntity.IntPair[];
        }
      }
      export namespace FurnitureGroupDatabase {
        export interface FurnitureGroupDataAdapter {
          // m_groupData: Torappu.BuildingData.CustomData.GroupData;
        }
        export interface FurnitureQuickSetupItemAdapter {
          // m_item: Torappu.BuildingData.CustomData.ThemeQuickSetupItem;
          // m_diyItem: Torappu.Building.DIY.IDIYItem;
        }
        export namespace FurnitureGroupDataAdapter {
        }
        export namespace FurnitureQuickSetupItemAdapter {
        }
      }
      export namespace FurnitureManager {
      }
      export namespace FurniturePresetManager {
        export interface Preset {
          buildingPreset: Torappu.PlayerBuildingDIYPreset;
        }
        export namespace Preset {
        }
      }
      export namespace FurnitureSaver {
      }
      export namespace FurnitureSorter {
        export enum FurnitureSortingOption {
          COMFORT = "COMFORT",
          RARITY = "RARITY",
          COUNT = "COUNT",
          PRICE = "PRICE",
          SHOP_DEFAULT = "SHOP_DEFAULT",
          ENUM_COUNT = "ENUM_COUNT",
        }
        export enum SortingMethod {
          ASCENT = "ASCENT",
          DESCENT = "DESCENT",
          ENUM_COUNT = "ENUM_COUNT",
        }
        export interface CacheItem<T> {
          option: Torappu.Building.DIY.FurnitureSorter.FurnitureSortingOption;
          method: Torappu.Building.DIY.FurnitureSorter.SortingMethod;
          // func: System.Func<T,T,System.Int32>;
        }
      }
      export namespace FurnitureTypeDatabase {
        export interface Entry {
          type: Torappu.BuildingData.FurnitureType;
          names: System.Collections.Generic.List<System.String>;
        }
      }
      export namespace GridMachine {
        export interface IGridRect {
        }
      }
      export namespace GridMachine3D {
        export interface IGridCube {
        }
      }
      export namespace PersistentImageProxy {
        export interface CacheInfo {
          fileName: System.String;
          presetString: System.String;
        }
        export interface PerfReport {
          basePath: System.String;
          memCacheItemInfos: System.Collections.Generic.List<Torappu.Building.DIY.PersistentImageProxy.PerfReport.CacheItemInfo>;
          localCacheItemInfos: System.Collections.Generic.List<Torappu.Building.DIY.PersistentImageProxy.PerfReport.CacheItemInfo>;
          mapInfo: Torappu.Building.DIY.PersistentImageProxy.PerfReport.CacheItemInfo;
        }
        export namespace PerfReport {
          export interface CacheItemInfo {
            name: System.String;
            size: System.Int32;
            available: System.Boolean;
          }
        }
      }
      export namespace DIYShop {
        export interface Item {
          good: Torappu.BuildingGetFurnitureGoodListResponse.Good;
          playerGoodItemData: Torappu.PlayerGoodItemData;
          // <diyItem>k__BackingField: Torappu.Building.DIY.IDIYItem;
        }
      }
      export namespace Test {
        export interface DIYTestScene {
          _furnitureManager: Torappu.Building.DIY.Test.MockFurnitureManager;
          _furnitureFromTableManager: Torappu.Building.DIY.Test.MockFurnitureFromTableManager;
          _DIYRoomModifierManager: Torappu.Building.DIY.Test.MockDIYRoomModifierManager;
          _DIYRoomInfoManager: Torappu.Building.DIY.Test.MockDIYRoomInfoManager;
          _useTable: System.Boolean;
          _room: Torappu.Building.DIY.DIYRoom;
          _tablesToLoad: Torappu.DB.AbstractTable[];
          // m_controllerList: System.Collections.Generic.List<Torappu.Building.DIY.DIYRoom.IFurnitureController>;
          // m_controllerIndex: System.Int32;
          // m_outlineWidth: System.Single;
          // m_outlineZ: System.Single;
          // m_roomCount: System.Int32;
          // m_roomIndex: System.Int32;
          // m_currentFurniture: Torappu.Building.DIY.Furniture;
          // m_scrollVecRoomFurniture: UnityEngine.Vector2;
          // m_scrollVecStackFurniture: UnityEngine.Vector2;
          // m_scrollVecStackModifier: UnityEngine.Vector2;
          // m_uiCollapsed: System.Boolean;
          // m_backTexture0: UnityEngine.Texture2D;
          // m_backTexture1: UnityEngine.Texture2D;
          // m_currentFurnitureManager: Torappu.Building.DIY.IFurnitureManager;
          // <>f__am$cache0: System.Predicate<Torappu.Building.DIY.DIYRoomInfo>;
          // <>f__am$cache1: System.Action<Torappu.Building.DIY.DIYRoomModifier>;
          // <>f__am$cache2: System.Predicate<Torappu.Building.DIY.Furniture>;
          // <>f__am$cache3: System.Predicate<Torappu.Building.DIY.DIYRoomModifier>;
        }
        export interface InteractCheck {
          _characterScale: System.Single;
          // _characterDefaultPosition: UnityEngine.Transform;
          characterFolderPath: System.String;
          furnitureFolderPath: System.String;
          // _gridMark: UnityEngine.Transform;
          // _gridRenderer: UnityEngine.Renderer;
          // m_selectedFurn: Torappu.Building.DIY.Test.InteractCheck.FurniSelection;
          // m_currentAttachPoint: Torappu.Building.DIY.FurnitureEntity.AttachPoint;
          // m_currentCharacterIndex: System.Int32;
          // m_currentFurnitureEntityInst: Torappu.Building.DIY.FurnitureEntity;
          // m_currentMarkOrigin: UnityEngine.Vector3;
          // m_currentCharacterInst: Torappu.Building.Vault.VCharacter;
          // m_currentAnimation: Spine.Unity.SkeletonAnimation;
          _listWidth: System.Single;
          // m_charList: System.Collections.Generic.List<Torappu.Building.DIY.Test.InteractCheck.VCharAsset>;
          // m_furnList: System.Collections.Generic.List<Torappu.Building.DIY.Test.InteractCheck.VFurnAsset>;
          // m_filteredFurnList: System.Collections.Generic.List<Torappu.Building.DIY.Test.InteractCheck.VFurnAsset>;
          // m_rectFurnitureList: UnityEngine.Rect;
          // m_scrollPosFurnitureList: UnityEngine.Vector2;
          // m_rectCharacterList: UnityEngine.Rect;
          // m_scrollPosCharacterList: UnityEngine.Vector2;
          // m_rectAttachPointList: UnityEngine.Rect;
          // m_scrollPosAttachPointList: UnityEngine.Vector2;
          // m_rectAttachPointInfo: UnityEngine.Rect;
          // m_scrollPosAttachPointInfo: UnityEngine.Vector2;
          // m_searchKeyword: System.String;
          // m_entryMark: UnityEngine.GameObject;
          // m_outputInfo: System.String;
          // m_markPool: Torappu.Building.DIY.Test.InteractCheck.MarkPool;
        }
        export interface MockDIYFeatureComponents {
          _furnitureManager: Torappu.Building.DIY.Test.MockFurnitureFromTableManager;
          _roomModifierManager: Torappu.Building.DIY.Test.MockDIYRoomModifierManager;
          _roomInfoManager: Torappu.Building.DIY.Test.MockDIYRoomInfoManager;
          _presetManager: Torappu.Building.DIY.Test.MockDIYPresetManager;
          _diyShop: Torappu.Building.DIY.Test.MockDIYShop;
          _furnitureStorage: Torappu.Building.DIY.Test.MockFurnitureStorage;
          _furnitureSaver: Torappu.Building.DIY.Test.MockFurnitureSaver;
          _furnitureGroupDatabase: Torappu.Building.DIY.Test.MockFurnitureGroupDB;
          // m_furnitureDatabase: Torappu.Building.DIY.FurnitureDatabase;
          // m_modifierDatabase: Torappu.Building.DIY.DIYRoomModifierDatabase;
          // m_furnitureTypeDatabase: Torappu.Building.DIY.FurnitureTypeDatabase;
          // m_cachedResourceLoader: Torappu.Resource.CachedAssetLoader;
          // m_inited: System.Boolean;
        }
        export interface MockDIYPresetManager {
          _presets: Torappu.Building.DIY.Test.MockDIYPresetManager.Preset[];
          _slotCount: System.Int32;
          // m_presetItems: Torappu.Building.DIY.IDIYPreset[];
        }
        export interface MockDIYRoomInfoManager {
          _templateIds: System.String[];
          _templateDB: Torappu.Building.DIY.Test.MockDIYRoomTemplateDB;
          // m_DIYRoomInfoList: System.Collections.Generic.List<Torappu.Building.DIY.DIYRoomInfo>;
        }
        export interface MockDIYRoomModifierDB {
          _DIYRoomModifierData: Torappu.Building.DIY.Test.MockDIYRoomModifierDB.DIYRoomModifierData[];
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_QueryData: XLua.DelegateBridge;
          // __Hotfix0_QueryDatas: XLua.DelegateBridge;
          // __Hotfix0_GetData: XLua.DelegateBridge;
          // __Hotfix0_GetDatasByType: XLua.DelegateBridge;
          // __Hotfix0_GetDatasByThemeId: XLua.DelegateBridge;
          // __Hotfix0_GetDatasByRoomPart: XLua.DelegateBridge;
        }
        export interface MockDIYRoomModifierManager {
          _DIYRoomModifierConfigs: Torappu.Building.DIY.Test.MockDIYRoomModifierManager.MockDIYRoomModifierConfig[];
          _DIYRoomModifierDB: Torappu.Building.DIY.Test.MockDIYRoomModifierDB;
          // m_listeners: System.Collections.Generic.List<Torappu.Building.DIY.IDIYRoomModifierProviderListener>;
          // m_DIYRoomModifiers: System.Collections.Generic.List<Torappu.Building.DIY.DIYRoomModifier>;
          // m_dataProvider: Torappu.Building.DIY.IDIYRoomModifierDataProvider;
        }
        export interface MockDIYRoomTemplateDB {
          _templates: Torappu.Building.DIY.Test.MockDIYRoomTemplateDB.DIYRoomTemplate[];
        }
        export interface MockDIYShop {
          _items: Torappu.Building.DIY.Test.MockDIYShop.Item[];
          _cash: System.Int32;
          _furnitureCoin: System.Int32;
          _furnitureStorage: Torappu.Building.DIY.Test.MockFurnitureStorage;
          _fakeDelayTime: System.Single;
          // m_timeCnt: System.Single;
          // m_resultCode: System.Int32;
          // m_handler: System.Action<System.Int32>;
        }
        export interface MockFurnitureDB {
          _furnitureData: Torappu.Building.DIY.Test.MockFurnitureDB.FurnitureData[];
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_QueryData: XLua.DelegateBridge;
          // __Hotfix0_QueryDatas: XLua.DelegateBridge;
          // __Hotfix0_GetData: XLua.DelegateBridge;
          // __Hotfix0_GetDatasByType: XLua.DelegateBridge;
          // __Hotfix0_GetDatasByThemeId: XLua.DelegateBridge;
        }
        export interface MockFurnitureFromTableManager {
          _furnitureConfigs: Torappu.Building.DIY.Test.MockFurnitureFromTableManager.MockFurnitureConfig[];
          _additionalManager: Torappu.Building.DIY.Test.MockFurnitureManager;
          _furnitureGroupDB: Torappu.Building.DIY.Test.MockFurnitureGroupDB;
          // m_listeners: System.Collections.Generic.List<Torappu.Building.DIY.IFurnitureProviderListener>;
          // m_furnitures: System.Collections.Generic.List<Torappu.Building.DIY.Furniture>;
          // m_furnitureDB: Torappu.Building.DIY.IFurnitureDataProvider;
          // m_assetLoader: Torappu.Resource.DirectAssetLoader;
          // <>f__am$cache0: System.Predicate<Torappu.Building.DIY.Furniture>;
        }
        export interface MockFurnitureGroupDB {
          _entries: System.Collections.Generic.List<Torappu.Building.DIY.Test.MockFurnitureGroupDB.Entry>;
          _quickSetupItem: System.Collections.Generic.List<Torappu.Building.DIY.Test.MockFurnitureGroupDB.QuickSetupItem>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_Setup: XLua.DelegateBridge;
          // __Hotfix0_get_datas: XLua.DelegateBridge;
          // __Hotfix0_GetFurnitureQuickSetup: XLua.DelegateBridge;
          // __Hotfix0_GetGroupDataByFurniture: XLua.DelegateBridge;
        }
        export interface MockFurnitureManager {
          _furnitureConfigs: Torappu.Building.DIY.Test.MockFurnitureManager.MockFurnitureConfig[];
          _furnitureDB: Torappu.Building.DIY.Test.MockFurnitureDB;
          // m_listeners: System.Collections.Generic.List<Torappu.Building.DIY.IFurnitureProviderListener>;
          // m_furnitures: System.Collections.Generic.List<Torappu.Building.DIY.Furniture>;
          // m_furnitureDB: Torappu.Building.DIY.IFurnitureDataProvider;
        }
        export interface MockFurnitureSaver {
          _fakeDelay: System.Single;
          // <>f__am$cache0: System.Predicate<Torappu.Building.DIY.Furniture>;
          // <>f__am$cache1: System.Predicate<Torappu.Building.DIY.DIYRoomModifier>;
        }
        export interface MockFurnitureStorage {
          _items: Torappu.Building.DIY.Test.MockFurnitureStorage.Item[];
          _each99: System.Boolean;
          // <>f__am$cache0: System.Predicate<Torappu.Building.DIY.IFurnitureData>;
          // <>f__am$cache1: System.Predicate<Torappu.Building.DIY.IDIYRoomModifierData>;
        }
        export interface TestOutputFurnitureState {
        }
        export namespace DIYTestScene {
        }
        export namespace InteractCheck {
          export interface VaultAsset<T> {
            assetPath: System.String;
            name: System.String;
            // m_inst: T;
          }
          export interface VCharAsset {
          }
          export interface VFurnAsset {
          }
          export interface FurniSelection {
            EMPTY: Torappu.Building.DIY.Test.InteractCheck.FurniSelection;
            index: System.Int32;
            id: System.String;
          }
          export interface MarkPool {
            // m_pool: System.Collections.Generic.List<UnityEngine.GameObject>;
          }
        }
        export namespace MockDIYPresetManager {
          export interface PresetItem {
            id: System.String;
            pos0: System.Int32;
            pos1: System.Int32;
          }
          export interface Preset {
            _name: System.String;
            // _bgSprite: UnityEngine.Sprite;
            _items: Torappu.Building.DIY.Test.MockDIYPresetManager.PresetItem[];
            _floorModifierId: System.String;
            _wallModifierId: System.String;
            // m_diyPresets: Torappu.Building.DIY.DIYPresetItem[];
          }
        }
        export namespace MockDIYRoomInfoManager {
        }
        export namespace MockDIYRoomModifierDB {
          export interface DIYRoomModifierData {
            _id: System.String;
            _displayName: System.String;
            _comfort: System.Int32;
            _rarity: System.Int32;
            _themeId: System.String;
            _groupId: System.String;
            _part: Torappu.Building.DIY.DIYRoomPart;
            // _mesh: UnityEngine.Mesh;
            // _material: UnityEngine.Material;
            // _icon: UnityEngine.Sprite;
            _desc: System.String;
            _usage: System.String;
            _furnitureType: System.String;
            // _c__Hotfix0_ctor: XLua.DelegateBridge;
            // __Hotfix0_get_id: XLua.DelegateBridge;
            // __Hotfix0_get_displayName: XLua.DelegateBridge;
            // __Hotfix0_get_comfort: XLua.DelegateBridge;
            // __Hotfix0_get_rarity: XLua.DelegateBridge;
            // __Hotfix0_get_themeId: XLua.DelegateBridge;
            // __Hotfix0_get_groupId: XLua.DelegateBridge;
            // __Hotfix0_get_part: XLua.DelegateBridge;
            // __Hotfix0_get_mesh: XLua.DelegateBridge;
            // __Hotfix0_get_material: XLua.DelegateBridge;
            // __Hotfix0_get_icon: XLua.DelegateBridge;
            // __Hotfix0_get_desc: XLua.DelegateBridge;
            // __Hotfix0_get_usage: XLua.DelegateBridge;
            // __Hotfix0_get_furniType: XLua.DelegateBridge;
          }
        }
        export namespace MockDIYRoomModifierManager {
          export interface MockDIYRoomModifierConfig {
            id: System.String;
            roomIndex: System.Int32;
          }
        }
        export namespace MockDIYRoomTemplateDB {
          export interface DIYRoomTemplate {
            _id: System.String;
            _width: System.Int32;
            _height: System.Int32;
            _depth: System.Int32;
            // _prefab: UnityEngine.GameObject;
            _obtacles: Torappu.Building.DIY.Test.MockDIYRoomTemplateDB.DIYRoomTemplate.RectConfig[];
          }
          export namespace DIYRoomTemplate {
            export interface RectConfig {
              x: System.Int32;
              y: System.Int32;
              z: System.Int32;
              w: System.Int32;
              h: System.Int32;
              d: System.Int32;
            }
          }
        }
        export namespace MockDIYShop {
          export interface Item {
            furnitureId: System.String;
            cashCostNumber: System.Int32;
            furnitureCoinCostNumber: System.Int32;
            cashDiscountNumber: System.Int32;
            furnitureCoinDiscountNumber: System.Int32;
            buyLimitNumber: System.Int32;
            startTimeNumber: System.Int64;
            endTimeNumber: System.Int64;
            // m_shopItemId: System.String;
            // m_diyItem: Torappu.Building.DIY.IDIYItem;
            // m_costs: System.Collections.Generic.List<Torappu.ItemBundle>;
          }
        }
        export namespace MockFurnitureDB {
          export interface FurnitureData {
            _id: System.String;
            _displayName: System.String;
            _dimX: System.Int32;
            _dimY: System.Int32;
            _dimZ: System.Int32;
            _comfort: System.Int32;
            _rarity: System.Int32;
            _themeId: System.String;
            _groupId: System.String;
            _locationType: Torappu.Building.DIY.FurnitureLocationType;
            // _prefab: UnityEngine.GameObject;
            // _icon: UnityEngine.Sprite;
            _desc: System.String;
            _usage: System.String;
            _furnitureType: System.String;
            // _c__Hotfix0_ctor: XLua.DelegateBridge;
            // __Hotfix0_get_id: XLua.DelegateBridge;
            // __Hotfix0_get_displayName: XLua.DelegateBridge;
            // __Hotfix0_get_dimX: XLua.DelegateBridge;
            // __Hotfix0_get_dimY: XLua.DelegateBridge;
            // __Hotfix0_get_dimZ: XLua.DelegateBridge;
            // __Hotfix0_get_comfort: XLua.DelegateBridge;
            // __Hotfix0_get_rarity: XLua.DelegateBridge;
            // __Hotfix0_get_themeId: XLua.DelegateBridge;
            // __Hotfix0_get_groupId: XLua.DelegateBridge;
            // __Hotfix0_get_locationType: XLua.DelegateBridge;
            // __Hotfix0_get_prefab: XLua.DelegateBridge;
            // __Hotfix0_get_icon: XLua.DelegateBridge;
            // __Hotfix0_get_desc: XLua.DelegateBridge;
            // __Hotfix0_get_usage: XLua.DelegateBridge;
            // __Hotfix0_get_furniType: XLua.DelegateBridge;
            // __Hotfix0_LoadPrefabAsync: XLua.DelegateBridge;
          }
        }
        export namespace MockFurnitureFromTableManager {
          export interface MockFurnitureConfig {
            id: System.String;
            pos0: System.Int32;
            pos1: System.Int32;
            roomIndex: System.Int32;
          }
        }
        export namespace MockFurnitureGroupDB {
          export interface Entry {
            _id: System.String;
            _displayName: System.String;
            _themeId: System.String;
            _furnitures: System.Collections.Generic.List<System.String>;
            _collects: System.Collections.Generic.List<Torappu.Building.DIY.Test.MockFurnitureGroupDB.Entry.CollectInfo>;
          }
          export interface QuickSetupItem {
            _themeId: System.String;
            _furnitureId: System.String;
            _posX: System.Int32;
            _posY: System.Int32;
            // m_diyItem: Torappu.Building.DIY.IDIYItem;
          }
          export namespace Entry {
            export interface CollectInfo {
              count: System.Int32;
              comfort: System.Int32;
            }
          }
        }
        export namespace MockFurnitureManager {
          export interface MockFurnitureConfig {
            id: System.String;
            pos0: System.Int32;
            pos1: System.Int32;
            roomIndex: System.Int32;
          }
        }
        export namespace MockFurnitureSaver {
        }
        export namespace MockFurnitureStorage {
          export interface Item {
            id: System.String;
            count: System.Int32;
          }
        }
        export namespace TestOutputFurnitureState {
        }
      }
      export namespace DIYRoomIndexConfig {
        export interface Entry {
          roomId: System.String;
          index: System.Int32;
        }
      }
      export namespace DIYRoomIndicatorButton {
        export enum ButtonType {
          NONE = "NONE",
          RESET = "RESET",
          UNEQUIP = "UNEQUIP",
          COMFIRM = "COMFIRM",
        }
      }
      export namespace DIYTouchHandler {
        export enum DragState {
          NONE = "NONE",
          FURNITURE = "FURNITURE",
          EMPTY = "EMPTY",
          BUTTON = "BUTTON",
        }
      }
      export namespace FurnitureGenreConfig {
        export interface FurnitureGenre {
          furnitureTypes: System.Collections.Generic.List<Torappu.BuildingData.FurnitureType>;
        }
      }
    }
    export namespace RoomSlotGraph {
      export interface Edge {
        direction: Torappu.SharedConsts.Direction;
        toSlot: System.String;
      }
    }
    export namespace RoomSlotModel {
      export enum RoomStayType {
        STATION = "STATION",
        ASSIST = "ASSIST",
        VISITOR = "VISITOR",
      }
      export interface IListener {
      }
      export interface PlayerSlotStatus {
        slotId: System.String;
        roomId: Torappu.BuildingData.RoomType;
        slotState: Torappu.Building.RoomSlotState;
        constructCompleteTime: System.DateTime;
        level: System.Int32;
        stationedChars: Torappu.ShallowEqualArray<Torappu.Building.BuildingCharModel>;
        stationedNum: System.Int32;
      }
    }
    export namespace BuildingModeRaycastManager {
      export enum Mode {
        NONE = "NONE",
        VAULT = "VAULT",
        BLUEPRINT = "BLUEPRINT",
        ALL = "ALL",
      }
      export interface BlockContext {
        modeType: Torappu.Building.BuildingModeRaycastManager.Mode;
        isBlocked: System.Boolean;
      }
    }
    export namespace BuildingDataConverter {
    }
    export namespace BuildingRouter {
    }
    export namespace BuildingServiceUtil {
    }
    export namespace GameObjectSplitFrameLoadBalancer {
      export interface Options {
        DEFAULT: Torappu.Building.GameObjectSplitFrameLoadBalancer.Options;
        maxCntInSingleFrame: System.Int32;
        idleTicksForNextLoadFrame: System.Int32;
        isInitialPaused: System.Boolean;
      }
      export interface AsyncTask {
        path: System.String;
        // callback: System.Action<System.Boolean,UnityEngine.GameObject>;
      }
    }
  }
  export namespace TestLogConsole {
    export interface Item {
      log: System.String;
      trace: System.String;
      // type: UnityEngine.LogType;
    }
  }
  export namespace BuildingVisitContext {
    export interface PlayerInfo {
      uid: System.String;
      level: System.Int32;
      charId: System.String;
      skinId: System.String;
      nickName: System.String;
    }
    export interface FriendInfo {
      EMPTY: Torappu.BuildingVisitContext.FriendInfo;
      uid: System.String;
      isSharing: System.Boolean;
      isSharingVisited: System.Boolean;
      isVisited: System.Boolean;
      rawIndex: System.Int32;
    }
  }
  export namespace BuildingVisitController {
  }
  export namespace BuildingToDoNotifyModel {
    export interface NotifyContext {
      slots: System.Collections.Generic.List<System.String>;
      count: System.Int32;
    }
  }
  export namespace CharWord {
    export interface VoiceQuery {
      EMPTY: Torappu.CharWord.VoiceQuery;
      charId: System.String;
      tmplId: System.String;
      voiceId: System.String;
      voiceType: Torappu.SkinVoiceType;
    }
    export interface VoiceManager {
      AUDIO_CHANNEL_VOICE: System.String;
      CROSSFADE_DURATION: System.Single;
      // m_avaliableDict: System.Collections.Generic.Dictionary<System.String,System.Boolean>;
      // m_randomBuffer: System.Collections.Generic.List<Torappu.CharWordData>;
      // m_filterBuffer: System.Collections.Generic.List<Torappu.CharWordData>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_OnResourceListUpdate: XLua.DelegateBridge;
      // __Hotfix0_get_isPlaying: XLua.DelegateBridge;
      // __Hotfix0_GetCurrentTimePercent: XLua.DelegateBridge;
      // __Hotfix0_GetCurrentTime: XLua.DelegateBridge;
      // __Hotfix0_PlayRandomLoadingVoice: XLua.DelegateBridge;
      // __Hotfix0_PlayRandomVoice: XLua.DelegateBridge;
      // __Hotfix1_PlayRandomVoice: XLua.DelegateBridge;
      // __Hotfix2_PlayRandomVoice: XLua.DelegateBridge;
      // __Hotfix0_PlayVoice: XLua.DelegateBridge;
      // __Hotfix0_StopVoice: XLua.DelegateBridge;
      // __Hotfix0_PreloadAssets: XLua.DelegateBridge;
      // __Hotfix1_PreloadAssets: XLua.DelegateBridge;
      // __Hotfix0_UnloadPreloadedAssets: XLua.DelegateBridge;
      // __Hotfix0_CheckVoiceAvailable: XLua.DelegateBridge;
      // __Hotfix1_CheckVoiceAvailable: XLua.DelegateBridge;
      // __Hotfix0__ClearCache: XLua.DelegateBridge;
      // __Hotfix0__InitCacheFromScratch: XLua.DelegateBridge;
      // __Hotfix0__ConvertScratchName: XLua.DelegateBridge;
    }
    export namespace VoiceManager {
      export interface PlayResult {
        NULL: Torappu.CharWord.VoiceManager.PlayResult;
        data: Torappu.CharWordData;
        length: System.Single;
      }
    }
  }
  export namespace AttributesCalculator {
    export interface Input {
      evolvePhase: Torappu.EvolvePhase;
      level: System.Int32;
      potentialRank: System.Int32;
      favorBattlePhase: System.Int32;
    }
  }
  export namespace Bugly {
    export interface BuglySDK {
    }
  }
  export namespace ClearAssets {
  }
  export namespace DataFromServer {
    export interface IDataConfig {
    }
    export interface ServerDataValidStatus {
      NO_DATA: Torappu.DataFromServer.ServerDataValidStatus;
      hasData: System.Boolean;
      needCrossDay: System.Boolean;
      validInCustomRules: System.Boolean;
      // __Hotfix0_IsDataValid: XLua.DelegateBridge;
    }
    export interface DataFromServer<DataType> {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetDataChunkConfig: XLua.DelegateBridge;
      // __Hotfix0_get_clearWhenLogin: XLua.DelegateBridge;
      // __Hotfix0_get_clearWhenCrossDay: XLua.DelegateBridge;
      // __Hotfix0_OnCustomDataValidCheck: XLua.DelegateBridge;
      // __Hotfix0_GetData: XLua.DelegateBridge;
      // __Hotfix0_CheckIfDataValid: XLua.DelegateBridge;
      // __Hotfix0_CheckDataValidStatus: XLua.DelegateBridge;
      // __Hotfix0_UpdateData: XLua.DelegateBridge;
    }
    export interface DataFromServerStorage {
      // m_storage: System.Collections.Generic.Dictionary<System.String,Torappu.DataFromServer.DataFromServerStorage.DataChunk>;
      // m_sharedList: System.Collections.Generic.List<System.String>;
      // <>f__am$cache0: System.Func<System.Collections.Generic.KeyValuePair<System.String,Torappu.DataFromServer.DataFromServerStorage.DataChunk>,System.Boolean>;
      // <>f__am$cache1: System.Func<System.Collections.Generic.KeyValuePair<System.String,Torappu.DataFromServer.DataFromServerStorage.DataChunk>,System.Boolean>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_UpdateStatusWhenLogin: XLua.DelegateBridge;
      // __Hotfix0_UpdateStatusWhenSyncStatus: XLua.DelegateBridge;
      // __Hotfix0_DataFromServer_SetData: XLua.DelegateBridge;
      // __Hotfix0_DataFromServer_GetData: XLua.DelegateBridge;
      // __Hotfix0__UpdateDataOnEvents: XLua.DelegateBridge;
      // __Hotfix0__GenerateCurrentStatus: XLua.DelegateBridge;
      // __Hotfix0__CheckIfNeedCrossDay: XLua.DelegateBridge;
      // __Hotfix0__CheckIfValidForCrossDay: XLua.DelegateBridge;
    }
    export namespace DataFromServerStorage {
      export interface DataChunk {
        EMPTY: Torappu.DataFromServer.DataFromServerStorage.DataChunk;
        key: System.String;
        config: Torappu.DataFromServer.DataFromServerStorage.DataChunk.Config;
        status: Torappu.DataFromServer.DataFromServerStorage.DataChunk.Status;
        data: System.Object;
      }
      export interface GetDataResult {
        needCrossDay: System.Boolean;
        chunk: Torappu.DataFromServer.DataFromServerStorage.DataChunk;
      }
      export namespace DataChunk {
        export interface Config {
          DEFAULT: Torappu.DataFromServer.DataFromServerStorage.DataChunk.Config;
          clearWhenLogin: System.Boolean;
          clearWhenCrossDay: System.Boolean;
        }
        export interface Status {
          lastRefreshTs: System.DateTime;
        }
      }
    }
  }
  export namespace DOTweenExtensions {
  }
  export namespace GameFlowController {
    export interface Options {
      DEFAULT: Torappu.GameFlowController.Options;
      FAST_MODE: Torappu.GameFlowController.Options;
      LOADING_MODE: Torappu.GameFlowController.Options;
      FAST_LOADING_MODE: Torappu.GameFlowController.Options;
      param: Torappu.ISceneParam;
      unloadAllAssets: System.Boolean;
      reloadAllAssets: System.Boolean;
      reloadLuaIfReloadAllAssets: System.Boolean;
      stopMusic: System.Boolean;
      notUseEmptySceneToClear: System.Boolean;
      dontResetTimeScale: System.Boolean;
      enableDBAsyncLoad: System.Boolean;
      mode: Torappu.GameFlowController.Options.Mode;
      // maskType: Torappu.UI.UIMaskType;
    }
    export namespace Options {
      export enum Mode {
        DEFAULT = "DEFAULT",
        FAST_MODE = "FAST_MODE",
        LOADING_MODE = "LOADING_MODE",
      }
    }
  }
  export namespace GameFlowListener {
    export interface RedirectBundle {
      sceneName: System.String;
      options: Torappu.GameFlowController.Options;
    }
  }
  export namespace GlobalInitializerAndUpdater {
  }
  export namespace Gyro {
    export interface CameraGyroController {
      // targetCamera: UnityEngine.Transform;
      // cameraAim: UnityEngine.Transform;
      // cameraOffset: UnityEngine.Vector2;
      // aimOffset: UnityEngine.Vector2;
      // maxAttitude: UnityEngine.Vector2;
      maxSpeedFactor: System.Single;
      minSpeedFactor: System.Single;
      maxSpeedDistance: System.Single;
      minSpeedDistance: System.Single;
      // m_oriCameraPosition: UnityEngine.Vector3;
      // m_oriAimPosition: UnityEngine.Vector3;
      // m_autoUpdate: System.Boolean;
      // m_tweener: DG.Tweening.Tweener;
      // <>f__am$cache0: DG.Tweening.Core.DOGetter<System.Single>;
    }
    export interface GyroControllerTest {
      // targetCamera: UnityEngine.Transform;
      // cameraAim: UnityEngine.Transform;
      // cameraOffset: UnityEngine.Vector2;
      // aimOffset: UnityEngine.Vector2;
      speedFactor: System.Single;
      // m_oriCameraPosition: UnityEngine.Vector3;
      // m_oriAimPosition: UnityEngine.Vector3;
    }
    export interface GyroControllerTest2 {
      // targetCamera: UnityEngine.Transform;
      // cameraAim: UnityEngine.Transform;
      // cameraOffset: UnityEngine.Vector2;
      // aimOffset: UnityEngine.Vector2;
      maxSpeedFactor: System.Single;
      minSpeedFactor: System.Single;
      maxSpeedDistance: System.Single;
      minSpeedDistance: System.Single;
      // m_oriCameraPosition: UnityEngine.Vector3;
      // m_oriAimPosition: UnityEngine.Vector3;
    }
    export interface GyroInput {
      BOUNCE_BACK_SPEED: System.Double;
      MIN_ROTATE_SPEED: System.Single;
      _updateInterval: System.Single;
      // m_simpleAttitude: UnityEngine.Vector2;
      // m_rotateX: System.Double;
      // m_rotateY: System.Double;
      // m_gyroSupported: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_simpleAttitude: XLua.DelegateBridge;
      // __Hotfix0_get_gyroSupported: XLua.DelegateBridge;
      // __Hotfix0_OnDestroy: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_Start: XLua.DelegateBridge;
      // __Hotfix0_FixedUpdate: XLua.DelegateBridge;
      // __Hotfix0_SetOriginRotation: XLua.DelegateBridge;
      // __Hotfix0__GetNormalized: XLua.DelegateBridge;
      // __Hotfix0__GetInverse: XLua.DelegateBridge;
      // __Hotfix0__IsValidQuaternion: XLua.DelegateBridge;
    }
    export namespace CameraGyroController {
    }
  }
  export namespace GlobalResCache {
    export interface ComponentOptions {
      id: System.String;
      resPath: System.String;
      // instantiate: System.Func<UnityEngine.GameObject,UnityEngine.GameObject>;
    }
    export interface CompCache {
      id: System.String;
      // obj: UnityEngine.GameObject;
    }
  }
  export namespace SafeArea {
    export namespace Core {
      export interface SafeAreaImpl {
      }
      export interface SafeAreaImplAndroid {
        // m_mainActivity: UnityEngine.AndroidJavaObject;
        // m_clsSafeAreaController: UnityEngine.AndroidJavaClass;
      }
    }
  }
  export namespace SafeAreaController {
  }
  export namespace ArrayDict {
    export interface SerializableKV<TKey,TValue> {
      key: TKey;
      value: TValue;
    }
  }
  export namespace CountDownTask {
    export interface TickValue {
      remainSeconds: System.Int64;
    }
  }
  export namespace DoubleBufferedList {
    export interface ForwardEnumerator<T> {
      // m_items: System.Collections.Generic.IList<T>;
      // m_onDisposed: System.Action;
      // m_cursor: System.Int32;
    }
    export interface BackwardEnumerator<T> {
      // m_items: System.Collections.Generic.IList<T>;
      // m_onDisposed: System.Action;
      // m_cursor: System.Int32;
    }
  }
  export namespace DragCancellableClickHandler {
    export interface ClickEvent {
    }
  }
  export namespace EventPool {
    export interface EventCallbackDelegate {
    }
    export interface AddOrRemoveSafeCallbackSet<TEnum> {
      // m_iterCounter: System.UInt16;
      // m_internalSet: System.Collections.Generic.HashSet<Torappu.EventPool.EventCallbackDelegate>;
      // m_pendingAddOrRemove: System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<System.Boolean,Torappu.EventPool.EventCallbackDelegate>>;
    }
  }
  export namespace FileLogger {
    export enum LogLevel {
      DEBUG = "DEBUG",
      INFO = "INFO",
      WARN = "WARN",
      ERROR = "ERROR",
      FATAL = "FATAL",
    }
    export interface Options {
      logLevel: Torappu.FileLogger.LogLevel;
      receiveUnityLog: System.Boolean;
      autoFlush: System.Boolean;
    }
  }
  export namespace Heap {
    export interface Enumerator<T> {
      // m_enumerator: System.Collections.Generic.IEnumerator<Torappu.Heap.InternalHeapNode<T>>;
    }
    export interface InternalHeapNode<T> {
      data: T;
      index: System.Int32;
    }
  }
  export namespace ListPool {
    export interface Options<T> {
      preloadSize: System.Int32;
      initListCapacity: System.Int32;
    }
  }
  export namespace PersistentFileStorage {
    export enum OptStatus {
      OK = "OK",
      IO_EXCEPTION = "IO_EXCEPTION",
      IO_EXCEPTION_RETRY_EXCEED = "IO_EXCEPTION_RETRY_EXCEED",
      HANDLER_EXCEPTION = "HANDLER_EXCEPTION",
      ALREADY_DISPOSED = "ALREADY_DISPOSED",
    }
  }
  export namespace ProfessionSpriteHub {
    export interface DataPair {
      key: Torappu.ProfessionCategory;
      // sprite: UnityEngine.Sprite;
    }
  }
  export namespace SafeParentComponent {
    export interface Wrapper {
      // onChildAdded: System.Action<UnityEngine.Transform>;
      // child: UnityEngine.Transform;
    }
  }
  export namespace SplashController {
  }
  export namespace TaskTimer {
    export interface Options<Value> {
      interval: System.Int64;
      // updateValue: System.Func<Torappu.TaskTimer.Context<Value>,Value>;
      // onValueChanged: System.Action<Torappu.TaskTimer.Context<Value>>;
      // onTaskEnd: System.Action<Torappu.TaskTimer.Context<Value>>;
    }
    export interface Context<Value> {
      curTime: System.Int64;
      startTime: System.Int64;
      endTime: System.Int64;
      value: Value;
      timer: Torappu.TaskTimer<Value>;
    }
  }
  export namespace TimeTracer {
    export interface TimeTask {
      targetTime: System.Single;
      // task: System.Action;
    }
    export interface TimeWatcherGroup {
      isActive: System.Boolean;
      watchers: System.Collections.Generic.List<Torappu.ITimeWatcher>;
    }
  }
  export namespace TorappuMemoryPool {
    export interface Value {
      value: System.String;
    }
  }
  export namespace UnorderedArray {
    export interface Enumerator<T> {
      // m_items: T[];
      // m_index: System.Int32;
      // m_count: System.Int32;
    }
  }
  export namespace AdapterUtil {
    export enum FitMode {
      FIT_WIDTH = "FIT_WIDTH",
      FIT_HEIGHT = "FIT_HEIGHT",
    }
  }
  export namespace FileUtil {
  }
  export namespace FormatUtil {
    export interface LightStringStream {
      // m_source: System.String;
      // m_length: System.Int32;
      // m_head: System.Int32;
    }
    export interface TagHandleRet {
      EMPTY: Torappu.FormatUtil.TagHandleRet;
      str: System.String;
      contentLength: System.Int32;
    }
    export interface RichTextTagHandler {
    }
    export enum ClickableRichTextType {
      NONE = "NONE",
      STYLE = "STYLE",
      CLICKABLE = "CLICKABLE",
    }
  }
  export namespace FpsController {
    export enum FpsMode {
      BATTLE = "BATTLE",
      UI = "UI",
      BUILDING = "BUILDING",
      UNLOCK = "UNLOCK",
      E_NUM = "E_NUM",
    }
  }
  export namespace GameObjectUtil {
  }
  export namespace RandomFactory {
    export enum AlgorithmType {
      DEFAULT = "DEFAULT",
      LCG = "LCG",
      MERSENNE_TWISTER = "MERSENNE_TWISTER",
      MOTHER_OF_ALL = "MOTHER_OF_ALL",
      RANROT_B = "RANROT_B",
      SFMT = "SFMT",
      WELL = "WELL",
      XORSHIFT = "XORSHIFT",
    }
  }
  export namespace ZipUtils {
    export interface UnzipThreadContext {
      isContinue: System.Boolean;
      progressForCurrentTask: System.Single;
    }
  }
  export namespace CoroutineOnEnable {
    export interface Options {
      EMPTY: Torappu.CoroutineOnEnable.Options;
      // task: System.Collections.IEnumerator;
      retryIfInterrupted: System.Boolean;
    }
  }
  export namespace WaitForAsyncTask {
  }
  export namespace YieldSemaphore {
    export interface Options<Param> {
      // condition: System.Func<Param,System.Boolean>;
      // onRelease: System.Action;
      overrideTimeoutFrameCount: System.Int32;
      // onTimeout: System.Action;
    }
    export interface WaitTask<Param> {
      // m_keepWaiting: System.Boolean;
      timeoutFrameCnt: System.Int32;
      // condition: System.Func<Param,System.Boolean>;
      // <isDisposed>k__BackingField: System.Boolean;
    }
  }
  export namespace Config {
    export interface DynamicConfig {
      // m_config: Torappu.Config.DynamicConfig.InternalConfig;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_disableLuaTick: XLua.DelegateBridge;
      // __Hotfix0_get_disableMinorAlert: XLua.DelegateBridge;
      // __Hotfix0_get_disableAutoReplayCleanup: XLua.DelegateBridge;
      // __Hotfix0_get_checkHotUpdateConsistency: XLua.DelegateBridge;
      // __Hotfix0_get_checkHotUpdateAbSize: XLua.DelegateBridge;
      // __Hotfix0_get_deleteFileIfConsistCheckFailed: XLua.DelegateBridge;
      // __Hotfix0_get_defaultServiceLicenseSelect: XLua.DelegateBridge;
      // __Hotfix0_get_defaultRegisterPolicySelect: XLua.DelegateBridge;
      // __Hotfix0_get_enableUIPageAudioSignal: XLua.DelegateBridge;
      // __Hotfix0_get_enableLuaManagerDispose: XLua.DelegateBridge;
      // __Hotfix0_get_enableLuaEnvDispose: XLua.DelegateBridge;
      // __Hotfix0_get_enableDelayUpdateTileForEnemy: XLua.DelegateBridge;
      // __Hotfix0_get_alertIfLuaValidationFailed: XLua.DelegateBridge;
      // __Hotfix0_get_exitGameIfLuaValidationFailed: XLua.DelegateBridge;
      // __Hotfix0_get_enableLicenseUpdate: XLua.DelegateBridge;
      // __Hotfix0_get_enableRequestRetry: XLua.DelegateBridge;
      // __Hotfix0_get_enableRequestChunked: XLua.DelegateBridge;
      // __Hotfix0_get_enableListPool: XLua.DelegateBridge;
      // __Hotfix0_get_preloadAudioFromBuff: XLua.DelegateBridge;
      // __Hotfix0_get_enableBattleLua: XLua.DelegateBridge;
      // __Hotfix0_get_preloadBuffEffectExtraDepth: XLua.DelegateBridge;
      // __Hotfix0_get_alertIfTableValidationFailed: XLua.DelegateBridge;
      // __Hotfix0_get_exitGameIfTableValidationFailed: XLua.DelegateBridge;
      // __Hotfix0_get_enableSkipIdentityVerify: XLua.DelegateBridge;
      // __Hotfix0_get_enableLoginIdentityVerify: XLua.DelegateBridge;
      // __Hotfix0_get_keepGuestWhenClearCache: XLua.DelegateBridge;
      // __Hotfix0_get_enableTwoStepIdentityVerify: XLua.DelegateBridge;
      // __Hotfix0_get_enableHgsdkPing: XLua.DelegateBridge;
      // __Hotfix0_get_enableHgsdkPingInBattle: XLua.DelegateBridge;
      // __Hotfix0_get_defaultPingIntervalIfFailed: XLua.DelegateBridge;
      // __Hotfix0_get_enablePreloadSpineAudioEvent: XLua.DelegateBridge;
      // __Hotfix0_get_enableMD5Check: XLua.DelegateBridge;
      // __Hotfix0_get_enableBackPress: XLua.DelegateBridge;
      // __Hotfix0_get_useRecycleToFinishScheduler: XLua.DelegateBridge;
      // __Hotfix0_get_enableAppetizer: XLua.DelegateBridge;
      // __Hotfix0_get_webViewUseInstCenter: XLua.DelegateBridge;
      // __Hotfix0_get_enableAVGAlphaSplitContainer: XLua.DelegateBridge;
      // __Hotfix0_get_enableUndeterDirtyFix: XLua.DelegateBridge;
      // __Hotfix0_get_enableGachaAudioPreload: XLua.DelegateBridge;
      // __Hotfix0_get_enableBuildingReflection: XLua.DelegateBridge;
      // __Hotfix0_get_enableLoginoutRequest: XLua.DelegateBridge;
      // __Hotfix0_get_enableUIDelayUnload: XLua.DelegateBridge;
      // __Hotfix0_get_enableManyUIUUA: XLua.DelegateBridge;
      // __Hotfix0_Load: XLua.DelegateBridge;
    }
    export interface RemoteConfig {
      // m_config: Torappu.Config.RemoteConfig.InternalConfig;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_enableAssetMigrate: XLua.DelegateBridge;
      // __Hotfix0_get_isAuditMode: XLua.DelegateBridge;
      // __Hotfix0_get_enableSDKNetSecure: XLua.DelegateBridge;
      // __Hotfix0_get_enableDBAsync: XLua.DelegateBridge;
      // __Hotfix0_get_enablePersistResLoadCheck: XLua.DelegateBridge;
      // __Hotfix0_get_enableRecoverPersistInfo: XLua.DelegateBridge;
      // __Hotfix0_get_enableLuaPlayerData: XLua.DelegateBridge;
      // __Hotfix0_get_enableHotupdatePref: XLua.DelegateBridge;
      // __Hotfix0_get_enableGameBI: XLua.DelegateBridge;
      // __Hotfix0_get_enableHGSDKPollingConfirm: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
      // __Hotfix0_GetRemoteConfigUrl: XLua.DelegateBridge;
    }
    export namespace DynamicConfig {
      export interface InternalConfig {
        disableLuaTick: System.Boolean;
        disableMinorAlert: System.Boolean;
        disableAutoReplayCleanup: System.Boolean;
        checkHotUpdateConsistency: System.Boolean;
        checkHotUpdateAbSize: System.Boolean;
        deleteFileIfConsistCheckFailed: System.Boolean;
        defaultServiceLicenseSelect: System.Boolean;
        defaultRegisterPolicySelect: System.Boolean;
        enableUIPageAudioSignal: System.Boolean;
        enableLuaManagerDispose: System.Boolean;
        enableLuaEnvDispose: System.Boolean;
        enableDelayUpdateTileForEnemy: System.Boolean;
        alertIfLuaValidationFailed: System.Boolean;
        exitGameIfLuaValidationFailed: System.Boolean;
        enableLicenseUpdate: System.Boolean;
        enableRequestRetry: System.Boolean;
        enableRequestChunked: System.Boolean;
        enableListPool: System.Boolean;
        preloadAudioFromBuff: System.Boolean;
        enableBattleLua: System.Boolean;
        preloadBuffEffectExtraDepth: System.Int32;
        alertIfTableValidationFailed: System.Boolean;
        exitGameIfTableValidationFailed: System.Boolean;
        enableSkipIdentityVerify: System.Boolean;
        enableLoginIdentityVerify: System.Boolean;
        keepGuestWhenClearCache: System.Boolean;
        enableTwoStepIdentityVerify: System.Boolean;
        enableHgsdkPing: System.Boolean;
        enableHgsdkPingInBattle: System.Boolean;
        defaultPingIntervalIfFailed: System.Int32;
        enablePreloadSpineAudioEvent: System.Boolean;
        enableMD5Check: System.Boolean;
        enableBackPress: System.Boolean;
        useRecycleToFinishScheduler: System.Boolean;
        enableAppetizer: System.Boolean;
        webViewUseInstCenter: System.Boolean;
        enableAVGAlphaSplitContainer: System.Boolean;
        enableUndeterDirtyFix: System.Boolean;
        enableGachaAudioPreload: System.Boolean;
        enableBuildingReflection: System.Boolean;
        enableLoginoutRequest: System.Boolean;
        enableUIDelayUnload: System.Boolean;
        enableManyUIUUA: System.Boolean;
      }
    }
    export namespace RemoteConfig {
      export interface InternalConfig {
        enableAssetMigrate: System.Boolean;
        isAuditMode: System.Boolean;
        enableHotupdatePref: System.Boolean;
        enableSDKNetSecure: System.Boolean;
        enableDBAsync: System.Boolean;
        enablePersistResLoadCheck: System.Boolean;
        enableRecoverPersistInfo: System.Boolean;
        enableLuaPlayerData: System.Boolean;
        enableGameBI: System.Boolean;
        enableHGSDKPollingConfirm: System.Boolean;
      }
    }
  }
  export namespace DataStream {
    export interface ByteArray {
      // ENCODING: System.Text.Encoding;
      // m_inc: System.Int32;
      // m_buffer: System.Byte[];
      // m_pos: System.Int32;
      // m_size: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // _c__Hotfix1_ctor: XLua.DelegateBridge;
      // __Hotfix0_Clear: XLua.DelegateBridge;
      // __Hotfix0_RemoveFront: XLua.DelegateBridge;
      // __Hotfix0_get_isLittleEndian: XLua.DelegateBridge;
      // __Hotfix0_set_isLittleEndian: XLua.DelegateBridge;
      // __Hotfix0_get_bytes: XLua.DelegateBridge;
      // __Hotfix0_get_position: XLua.DelegateBridge;
      // __Hotfix0_set_position: XLua.DelegateBridge;
      // __Hotfix0_get_size: XLua.DelegateBridge;
      // __Hotfix0_set_size: XLua.DelegateBridge;
      // __Hotfix0_get_capacity: XLua.DelegateBridge;
      // __Hotfix0_get_residualCapacity: XLua.DelegateBridge;
      // __Hotfix0_get_bytesAvailable: XLua.DelegateBridge;
      // __Hotfix0_ReadBool: XLua.DelegateBridge;
      // __Hotfix0_ReadSByte: XLua.DelegateBridge;
      // __Hotfix0_ReadByte: XLua.DelegateBridge;
      // __Hotfix0_ReadInt16: XLua.DelegateBridge;
      // __Hotfix0_ReadUint16: XLua.DelegateBridge;
      // __Hotfix0_ReadInt32: XLua.DelegateBridge;
      // __Hotfix0_ReadUint32: XLua.DelegateBridge;
      // __Hotfix0_ReadInt64: XLua.DelegateBridge;
      // __Hotfix0_ReadUint64: XLua.DelegateBridge;
      // __Hotfix0_ReadString: XLua.DelegateBridge;
      // __Hotfix0_ReadString2: XLua.DelegateBridge;
      // __Hotfix0__ReadString: XLua.DelegateBridge;
      // __Hotfix0_ReadBytes: XLua.DelegateBridge;
      // __Hotfix0__CheckAvaliable: XLua.DelegateBridge;
      // __Hotfix0_WriteBool: XLua.DelegateBridge;
      // __Hotfix0_WriteSByte: XLua.DelegateBridge;
      // __Hotfix0_WriteByte: XLua.DelegateBridge;
      // __Hotfix0_WriteInt16: XLua.DelegateBridge;
      // __Hotfix0_WriteUint16: XLua.DelegateBridge;
      // __Hotfix0_WriteInt32: XLua.DelegateBridge;
      // __Hotfix0_WriteUint32: XLua.DelegateBridge;
      // __Hotfix0_WriteInt64: XLua.DelegateBridge;
      // __Hotfix0_WriteUint64: XLua.DelegateBridge;
      // __Hotfix0_WriteBytes: XLua.DelegateBridge;
      // __Hotfix0_WriteString: XLua.DelegateBridge;
      // __Hotfix0_WriteString2: XLua.DelegateBridge;
      // __Hotfix1_WriteBytes: XLua.DelegateBridge;
      // __Hotfix0__AdjustCapacity: XLua.DelegateBridge;
      // __Hotfix0__CalculateInitialOffset: XLua.DelegateBridge;
      // __Hotfix0__Offset: XLua.DelegateBridge;
      // __Hotfix0_OnAllocate: XLua.DelegateBridge;
      // __Hotfix0_OnRecycle: XLua.DelegateBridge;
    }
    export interface FileReader {
      // m_reader: System.IO.BinaryReader;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Dispose: XLua.DelegateBridge;
      // __Hotfix0_ReadBool: XLua.DelegateBridge;
      // __Hotfix0_ReadSByte: XLua.DelegateBridge;
      // __Hotfix0_ReadByte: XLua.DelegateBridge;
      // __Hotfix0_ReadBytes: XLua.DelegateBridge;
      // __Hotfix0_ReadInt16: XLua.DelegateBridge;
      // __Hotfix0_ReadInt32: XLua.DelegateBridge;
      // __Hotfix0_ReadInt64: XLua.DelegateBridge;
      // __Hotfix0_ReadString: XLua.DelegateBridge;
      // __Hotfix0_ReadString2: XLua.DelegateBridge;
      // __Hotfix0_ReadUint16: XLua.DelegateBridge;
      // __Hotfix0_ReadUint32: XLua.DelegateBridge;
      // __Hotfix0_ReadUint64: XLua.DelegateBridge;
    }
    export interface FileWriter {
      // m_file: System.IO.BinaryWriter;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Dispose: XLua.DelegateBridge;
      // __Hotfix0_WriteBool: XLua.DelegateBridge;
      // __Hotfix0_WriteSByte: XLua.DelegateBridge;
      // __Hotfix0_WriteByte: XLua.DelegateBridge;
      // __Hotfix0_WriteBytes: XLua.DelegateBridge;
      // __Hotfix0_WriteInt16: XLua.DelegateBridge;
      // __Hotfix0_WriteInt32: XLua.DelegateBridge;
      // __Hotfix0_WriteInt64: XLua.DelegateBridge;
      // __Hotfix0_WriteString: XLua.DelegateBridge;
      // __Hotfix0_WriteString2: XLua.DelegateBridge;
      // __Hotfix0_WriteUint16: XLua.DelegateBridge;
      // __Hotfix0_WriteUint32: XLua.DelegateBridge;
      // __Hotfix0_WriteUint64: XLua.DelegateBridge;
    }
    export interface IStreamReader {
    }
    export interface IStreamWriter {
    }
  }
  export namespace DB {
    export interface BsonNetConverter {
      // m_settings: Newtonsoft.Json.JsonSerializerSettings;
      // m_format: Newtonsoft.Json.Formatting;
      // m_serializer: Newtonsoft.Json.JsonSerializer;
    }
    export interface ConverterFactory {
    }
    export interface CrypticConverter {
      // m_settings: Newtonsoft.Json.JsonSerializerSettings;
      // m_serializer: Newtonsoft.Json.JsonSerializer;
    }
    export interface CrypticConverter_A {
      KEY_LENGTH: System.Int32;
      IV_LENGTH: System.Int32;
      // m_token: System.String;
    }
    export interface CrypticConverter_B {
      MOD: System.UInt64;
      SEED_HASH_STR: System.String;
      // m_seed: System.UInt32;
      // random: SharpNeatLib.Maths.FastRandom;
    }
    export interface CrypticConverter_WithSign {
      SIGN_HEADER_LENGTH: System.Int32;
      // m_signPubKey: System.String;
    }
    export interface ConverterInput {
      text: System.String;
      bytes: System.Byte[];
    }
    export interface IConverter {
    }
    export interface JsonNetConverter {
      // m_settings: Newtonsoft.Json.JsonSerializerSettings;
      // m_format: Newtonsoft.Json.Formatting;
      // m_serializer: Newtonsoft.Json.JsonSerializer;
    }
    export interface DBLoader {
      // s_hasLoadedAll: System.Boolean;
      // s_asyncLoadTask: Torappu.DB.DBLoader.AsyncLoadTask;
      // <>f__am$cache0: System.Action;
    }
    export interface DBOptions {
      mode: Torappu.DB.DBOptions.Mode;
      defaultEncryptType: Torappu.DB.ConverterFactory.ConverterType;
      excelEncryptType: Torappu.DB.ConverterFactory.ConverterType;
      tableAssets: Torappu.DB.AbstractTable[];
    }
    export interface AbstractKVTable<TValue,TSingleton> {
      // m_sharedList: System.Collections.Generic.List<TValue>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_System.Collections.IEnumerable.GetEnumerator: XLua.DelegateBridge;
      // __Hotfix0_GetValue: XLua.DelegateBridge;
      // __Hotfix0_GetValueOrDefault: XLua.DelegateBridge;
      // __Hotfix0_GetValues: XLua.DelegateBridge;
      // __Hotfix0_ContainsKey: XLua.DelegateBridge;
      // __Hotfix0_ToString: XLua.DelegateBridge;
    }
    export interface TableConfig {
      loadFromResource: System.Boolean;
      assetPath: System.String;
      // textAsset: UnityEngine.TextAsset;
      convertType: Torappu.DB.ConverterFactory.ConverterType;
    }
    export interface AbstractTable {
      _devConfig: Torappu.DB.TableConfig;
      _prodConfig: Torappu.DB.TableConfig;
      _requireConfig: Torappu.DB.AbstractTable.RequireConfig;
      _enableAsyncLoad: System.Boolean;
      _samplePaths: System.Collections.Generic.List<System.String>;
      disableSampleData: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get__dragSamplesHere: XLua.DelegateBridge;
      // __Hotfix0_set__dragSamplesHere: XLua.DelegateBridge;
      // __Hotfix0_RemoveSamples: XLua.DelegateBridge;
      // __Hotfix0_get_isProdMode: XLua.DelegateBridge;
      // __Hotfix0_get_requireConfig: XLua.DelegateBridge;
      // __Hotfix0_get_enableAsyncLoad: XLua.DelegateBridge;
      // __Hotfix0_GetConfig: XLua.DelegateBridge;
      // __Hotfix0_CreateDeserializeTask: XLua.DelegateBridge;
    }
    export interface SingletonAbstractTable<T> {
      // s_instance: T;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_instance: XLua.DelegateBridge;
      // __Hotfix0_OnEnable: XLua.DelegateBridge;
      // __Hotfix0_OnDisable: XLua.DelegateBridge;
    }
    export interface ConstTable<TValue,TSingleton> {
      // m_inited: System.Boolean;
      // m_data: TValue;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_inited: XLua.DelegateBridge;
      // __Hotfix0_get_data: XLua.DelegateBridge;
      // __Hotfix0_get_instData: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix1_Init: XLua.DelegateBridge;
      // __Hotfix0_InitCoroutine: XLua.DelegateBridge;
      // __Hotfix0_InitAsync: XLua.DelegateBridge;
      // __Hotfix0__InitWithData: XLua.DelegateBridge;
      // __Hotfix0_SerializeToString: XLua.DelegateBridge;
      // __Hotfix0_GetDebugString: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
    }
    export interface LRUKVTable<TValue,TSingleton> {
      _lruCapacity: System.Int32;
      // m_inited: System.Boolean;
      // m_rawBytesMap: System.Collections.Generic.Dictionary<System.String,System.Byte[]>;
      // m_lruCache: Torappu.LRUCache<System.String,TValue>;
      // m_converter: Torappu.DB.IConverter;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_inited: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix1_Init: XLua.DelegateBridge;
      // __Hotfix0_InitCoroutine: XLua.DelegateBridge;
      // __Hotfix0_InitAsync: XLua.DelegateBridge;
      // __Hotfix0__InitWithData: XLua.DelegateBridge;
      // __Hotfix0_SerializeToString: XLua.DelegateBridge;
      // __Hotfix0_GetDebugString: XLua.DelegateBridge;
      // __Hotfix0_TryGetValue: XLua.DelegateBridge;
      // __Hotfix0_GetEnumerator: XLua.DelegateBridge;
    }
    export interface SimpleKVTable<TValue,TSingleton> {
      // m_inited: System.Boolean;
      // m_dataMap: System.Collections.Generic.Dictionary<System.String,TValue>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_inited: XLua.DelegateBridge;
      // __Hotfix0_get_data: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix1_Init: XLua.DelegateBridge;
      // __Hotfix0_InitCoroutine: XLua.DelegateBridge;
      // __Hotfix0_InitAsync: XLua.DelegateBridge;
      // __Hotfix0__InitWithData: XLua.DelegateBridge;
      // __Hotfix0_SerializeToString: XLua.DelegateBridge;
      // __Hotfix0_GetDebugString: XLua.DelegateBridge;
      // __Hotfix0_get_Count: XLua.DelegateBridge;
      // __Hotfix0_GetEnumerator: XLua.DelegateBridge;
      // __Hotfix0_TryGetValue: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
    }
    export namespace ConverterFactory {
      export enum ConverterType {
        JSON_DOT_NET = "JSON_DOT_NET",
        BSON_DOT_NET = "BSON_DOT_NET",
        CRYPTIC_A = "CRYPTIC_A",
        CRYPTIC_B = "CRYPTIC_B",
        CRYPTIC_WITH_SIGN = "CRYPTIC_WITH_SIGN",
      }
    }
    export namespace DBLoader {
      export interface AsyncLoadTask {
        // m_pendingTasks: Torappu.ThreadSafeQueue<System.Collections.Generic.KeyValuePair<Torappu.DB.ConverterInput,Torappu.DB.AbstractTable.IAsyncLoadRequest>>;
        // m_finishedTasks: Torappu.ThreadSafeQueue<System.Collections.Generic.KeyValuePair<Torappu.DB.AbstractTable.AsyncLoadResult,Torappu.DB.AbstractTable.IAsyncLoadRequest>>;
        // m_keepWorking: System.Boolean;
        // m_isValid: System.Boolean;
        // <worker>k__BackingField: Torappu.WaitForAsyncTask<System.Int32>;
      }
      export namespace AsyncLoadTask {
      }
    }
    export namespace DBOptions {
      export enum Mode {
        DEVELOPMENT = "DEVELOPMENT",
        PRODUCTION = "PRODUCTION",
      }
    }
    export namespace AbstractTable {
      export interface DeserializeResult<ResType> {
        data: ResType;
      }
      export interface AsyncLoadResult {
        EMPTY: Torappu.DB.AbstractTable.AsyncLoadResult;
        // exception: System.Exception;
        data: System.Object;
      }
      export interface IAsyncLoadRequest {
      }
      export interface AsyncLoadRequest<TValue> {
        // m_dataCb: System.Action<TValue>;
        // m_converter: Torappu.DB.IConverter;
        // m_dbType: System.Type;
      }
      export interface RequireConfig {
        hotupdate: System.Boolean;
        login: System.Boolean;
      }
    }
    export namespace ConstTable {
    }
    export namespace LRUKVTable {
      export interface Enumerator<TValue,TSingleton> {
        // m_enumerator: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.String,System.Byte[]>>;
        // m_table: Torappu.DB.AbstractKVTable<TValue,TSingleton>;
      }
    }
    export namespace SimpleKVTable {
    }
    export namespace Test {
      export interface DBTest {
        _tables: Torappu.DB.AbstractTable[];
        // m_key: System.String;
        // m_value: System.String;
      }
      export interface SettingsDef {
        name: System.String;
        list: System.Collections.Generic.List<System.Int32>;
        args: System.Collections.Generic.Dictionary<System.String,System.Object>;
        args2: System.Collections.Generic.Dictionary<System.String,System.Object>;
      }
      export interface SettingsTable {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
      export interface ElementInfo {
        damageScale: System.Single;
        fireScale: System.Single;
        waterScale: System.Single;
        windScale: System.Single;
        earthScale: System.Single;
      }
      export interface BuffData {
        key: System.String;
        paramValues: System.Collections.Generic.Dictionary<System.String,System.String>;
      }
      export interface SkillData {
        key: System.String;
        sortID: System.Int32;
        name: System.String;
        info: System.String;
        animationKey: System.String;
        maxLvl: System.Int32;
        lvlInfo: System.Collections.Generic.Dictionary<System.Int32,System.String>;
        lvlBuffData: System.Collections.Generic.Dictionary<System.Int32,System.Collections.Generic.List<Torappu.DB.Test.BuffData>>;
        childSkillId: System.String;
        preSkillId: System.String;
        scale: System.Single;
        elementInfo: Torappu.DB.Test.ElementInfo;
        actualSkillId: System.String;
      }
      export interface SkillTable {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
      }
    }
  }
  export namespace GachaDB {
    export interface TimeList<Type> {
      // m_timeList: System.Collections.Generic.List<Type>;
      // <>f__mg$cache0: System.Comparison<Type>;
    }
    export namespace TimeList {
    }
  }
  export namespace HandbookTeamDB {
    export enum PowerLevel {
      Nation = "Nation",
      Group = "Group",
      Team = "Team",
    }
  }
  export namespace Gacha {
    export interface GachaDemo {
      _playMode: Torappu.Gacha.GachaController.PlayMode;
      _one: Torappu.Gacha.GachaDemo.GachaConfig;
      _ten: Torappu.Gacha.GachaDemo.GachaConfig[];
      // <>f__am$cache0: System.Action<Torappu.Gacha.GachaController.Output>;
    }
    export interface GachaController {
      AUTO_EXIT_DELAY_NORMAL: System.Single;
      AUTO_EXIT_DELAY_SKIP: System.Single;
      _fadeTime: System.Single;
      // _uiCamera: UnityEngine.Camera;
      // _bodyTransform: UnityEngine.Transform;
      // _uiPhaseContainer: UnityEngine.Transform;
      // _generalPhaseContainer: UnityEngine.Transform;
      // _mask: UnityEngine.UI.Image;
      _phase0Path: System.String;
      _phase1Path: System.String;
      // m_newCnt: System.Int32;
      // m_input: Torappu.Gacha.GachaController.Input;
      // m_assetLoader: Torappu.Resource.AbstractAssetLoader;
      // m_character: Torappu.CharacterData;
      // m_professionHub: Torappu.ProfessionSpriteHub;
      // m_phase0: Torappu.Gacha.GachaController.GachaPhase;
      // m_phase1: Torappu.Gacha.GachaController.GachaPhase;
      // m_endCb: System.Action<Torappu.Gacha.GachaController.Output>;
      // m_interactivePanel: UnityEngine.RectTransform;
      // m_playCorout: UnityEngine.Coroutine;
      // m_pendingInputQueue: System.Collections.Generic.Queue<Torappu.Gacha.GachaController.Input>;
      // m_rarityList: System.Collections.Generic.List<Torappu.RarityRank>;
      // m_isSkipped: System.Boolean;
      // m_totalRarity: Torappu.RarityRank;
      // m_allItems: System.Collections.Generic.List<Torappu.ItemBundle>;
      // <state>k__BackingField: Torappu.Gacha.GachaController.StateEnum;
      // <playMode>k__BackingField: Torappu.Gacha.GachaController.PlayMode;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_state: XLua.DelegateBridge;
      // __Hotfix0_set_state: XLua.DelegateBridge;
      // __Hotfix0_get_charConfig: XLua.DelegateBridge;
      // __Hotfix0_get_isNew: XLua.DelegateBridge;
      // __Hotfix0_get_professionHub: XLua.DelegateBridge;
      // __Hotfix0_get_characterData: XLua.DelegateBridge;
      // __Hotfix0_get_assetLoader: XLua.DelegateBridge;
      // __Hotfix0_get_isRunning: XLua.DelegateBridge;
      // __Hotfix0_get_itemList: XLua.DelegateBridge;
      // __Hotfix0_get_totalRarity: XLua.DelegateBridge;
      // __Hotfix0_get_rarityList: XLua.DelegateBridge;
      // __Hotfix0_get_isMultipleGacha: XLua.DelegateBridge;
      // __Hotfix0_get_isSkipped: XLua.DelegateBridge;
      // __Hotfix0_get_playMode: XLua.DelegateBridge;
      // __Hotfix0_set_playMode: XLua.DelegateBridge;
      // __Hotfix0_Play: XLua.DelegateBridge;
      // __Hotfix1_Play: XLua.DelegateBridge;
      // __Hotfix0_PlayInStandaloneScene: XLua.DelegateBridge;
      // __Hotfix1_PlayInStandaloneScene: XLua.DelegateBridge;
      // __Hotfix0_GetOutput: XLua.DelegateBridge;
      // __Hotfix0_Prewarm: XLua.DelegateBridge;
      // __Hotfix0_StopAll: XLua.DelegateBridge;
      // __Hotfix0_TryFetchAndAddCameras: XLua.DelegateBridge;
      // __Hotfix0_OnMaskClicked: XLua.DelegateBridge;
      // __Hotfix0_PlayInternal: XLua.DelegateBridge;
      // __Hotfix1_PlayInternal: XLua.DelegateBridge;
      // __Hotfix0_InitData: XLua.DelegateBridge;
      // __Hotfix0_FinishIfNot: XLua.DelegateBridge;
      // __Hotfix0_SkipToEndIfNot: XLua.DelegateBridge;
      // __Hotfix0__DoEndCb: XLua.DelegateBridge;
      // __Hotfix0__DoPlay: XLua.DelegateBridge;
      // __Hotfix0__DoPhase1: XLua.DelegateBridge;
      // __Hotfix0__DoSkipFromPhase1ToEnd: XLua.DelegateBridge;
      // __Hotfix0__ClearResource: XLua.DelegateBridge;
      // __Hotfix0__ClearCoroutines: XLua.DelegateBridge;
      // __Hotfix0__LoadResourceIfNot: XLua.DelegateBridge;
      // __Hotfix0__CreatePhase0: XLua.DelegateBridge;
      // __Hotfix0__CreatePhase1: XLua.DelegateBridge;
      // __Hotfix0__CreatePhaseUncached: XLua.DelegateBridge;
      // __Hotfix0__CreatePhaseCached: XLua.DelegateBridge;
      // __Hotfix0__InstGachaPhase: XLua.DelegateBridge;
      // __Hotfix0__DisposePhase0: XLua.DelegateBridge;
      // __Hotfix0__DisposePhase1: XLua.DelegateBridge;
      // __Hotfix0__DisposePhase: XLua.DelegateBridge;
      // __Hotfix0__OnSceneUnloaded: XLua.DelegateBridge;
      // __Hotfix0__GetTotalRarity: XLua.DelegateBridge;
      // __Hotfix1__GetTotalRarity: XLua.DelegateBridge;
      // __Hotfix0__PopulateItems: XLua.DelegateBridge;
      // __Hotfix0__PreloadGachaSounds: XLua.DelegateBridge;
      // __Hotfix0_OnEnable: XLua.DelegateBridge;
      // __Hotfix0_OnDisable: XLua.DelegateBridge;
    }
    export interface GachaSceneParam {
      playMode: Torappu.Gacha.GachaController.PlayMode;
      input: Torappu.Gacha.GachaController.Input;
      nextScene: System.String;
      nextOptions: Torappu.GameFlowController.Options;
      // endCb: System.Action<Torappu.Gacha.GachaController.Output>;
    }
    export interface GachaScene {
    }
    export interface PanelCharacterDialog {
      _fadeinTime: System.Single;
      _text: Torappu.AVG.AVGTypeWriterText;
      // _messageRect: UnityEngine.RectTransform;
      _messageRectBottomPadding: System.Single;
      TRY_FINISH_TIME: System.Single;
      // m_waitSignal: System.Boolean;
      // m_canvasGroup: UnityEngine.CanvasGroup;
      // m_originYPos: System.Single;
    }
    export interface PanelCharacterIllust {
      // m_illust: Torappu.UI.UICharacterIllust;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_mainTexture: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
      // __Hotfix0_Reset: XLua.DelegateBridge;
    }
    export interface PanelCharacterInfo {
      // _nameCn: UnityEngine.UI.Text;
      // _nameEn: UnityEngine.UI.Text;
      // _newImage: UnityEngine.UI.Image;
      // _professionImage: UnityEngine.UI.Image;
      _itemInfo: Torappu.Gacha.PanelItemInfo;
      // _gridContainer: UnityEngine.Transform;
    }
    export interface PanelItemInfo {
      // _itemIcon: UnityEngine.UI.Image;
      // _itemName: UnityEngine.UI.Text;
      // _itemCount: UnityEngine.UI.Text;
      // _getType: UnityEngine.UI.Text;
    }
    export interface BagLightController {
      _pillars: Torappu.Gacha.BagLightController.LightPillar[];
      _padAudioSignal: System.String;
      // _padProgressRange: UnityEngine.Vector2;
      // _padVolumeLevelRange: UnityEngine.Vector2;
      // m_atoms: Torappu.Audio.Middleware.AudioAtom[];
    }
    export interface FolderMultiSkin {
      CUSTOM_SKIN_NAME: System.String;
      PAGE_CNT: System.Int32;
      // _data: Spine.Unity.SkeletonDataAsset;
      // _skeleton: Spine.Unity.SkeletonAnimation;
      _skins: Torappu.Gacha.FolderMultiSkin.SkinSource[];
      _placeholders: Torappu.Gacha.FolderMultiSkin.SkinPlaceholder[];
    }
    export interface GachaPhase0 {
      CAMERA_ANIMATION_CROSSFADE: System.Single;
      BAG_ANIMATION_START: System.String;
      BAG_ANIMATION_OPEN: System.String;
      CAMERA_ANIMATION_START: System.String;
      CAMERA_ANIMATION_HOLD: System.String;
      CAMERA_ANIMATION_SHAKE: System.String;
      SPINE_ANIMATION_DEFAULT: System.String;
      SPINE_ANIMATION_ONE: System.String;
      SPINE_ANIMATION_TEN: System.String;
      FOLDER_ANIMATION_START: System.String;
      _options: Torappu.Gacha.GachaPhase0.Options;
      // _camera: UnityEngine.Camera;
      // _bagAnimation: UnityEngine.Animation;
      // _camAnimation: UnityEngine.Animation;
      // _folderAnimation: UnityEngine.Animation;
      // m_stateMachine: Torappu.StateMachine;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_options: XLua.DelegateBridge;
      // __Hotfix0_get_canSkip: XLua.DelegateBridge;
      // __Hotfix0_get_hasOwnCamera: XLua.DelegateBridge;
      // __Hotfix0_get_stateDebugStr: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0__ResetAnimationState: XLua.DelegateBridge;
      // __Hotfix0_Play: XLua.DelegateBridge;
      // __Hotfix0_SkipToEnd: XLua.DelegateBridge;
      // __Hotfix0_PreloadSounds: XLua.DelegateBridge;
      // __Hotfix0_TryFetchAndAddCameras: XLua.DelegateBridge;
      // __Hotfix0_OnBeginDrag: XLua.DelegateBridge;
      // __Hotfix0_OnDrag: XLua.DelegateBridge;
      // __Hotfix0_OnEndDrag: XLua.DelegateBridge;
      // __Hotfix0_OnSkipAllBtnClicked: XLua.DelegateBridge;
      // __Hotfix0_OnDisposeForReuse: XLua.DelegateBridge;
      // __Hotfix0__ResetAllAnimations: XLua.DelegateBridge;
      // __Hotfix0_OnEnable: XLua.DelegateBridge;
      // __Hotfix0_OnDisable: XLua.DelegateBridge;
      // __Hotfix0_Update: XLua.DelegateBridge;
    }
    export interface GachaPhase1 {
      MASK_TEXTURE: System.String;
      FORWARD_PARTICLE_SYSTEM_SIMULATE_TIME_ON_SKIP: System.Single;
      _playTime: System.Single;
      // _particleSystem: UnityEngine.ParticleSystem;
      // _campRenderers: UnityEngine.Renderer[];
      // _characterMaskRenderers: UnityEngine.Renderer[];
      _characterillust: Torappu.Gacha.PanelCharacterIllust;
      _characterInfo: Torappu.Gacha.PanelCharacterInfo;
      _characterDialog: Torappu.Gacha.PanelCharacterDialog;
      // _interactivePanel: UnityEngine.RectTransform;
      // _skipAllBtn: UnityEngine.RectTransform;
      // _animation: UnityEngine.Animation;
      // _rarityAnimations: UnityEngine.AnimationClip[];
      _imageIllust: Torappu.Fx.FxDelay;
      // _inactiveWhenSkip: UnityEngine.GameObject[];
      // _popStarsToReset: UnityEngine.GameObject[];
      // m_controller: Torappu.Gacha.GachaController;
      // m_character: Torappu.CharacterData;
      // m_canSkip: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_interactivePanel: XLua.DelegateBridge;
      // __Hotfix0_get_canSkip: XLua.DelegateBridge;
      // __Hotfix0_Play: XLua.DelegateBridge;
      // __Hotfix0_SkipToEnd: XLua.DelegateBridge;
      // __Hotfix0_SkipToEndAsync: XLua.DelegateBridge;
      // __Hotfix0_PreloadSounds: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_OnSkipAllBtnClicked: XLua.DelegateBridge;
      // __Hotfix0__DoSkipToDialog: XLua.DelegateBridge;
      // __Hotfix0__Reset: XLua.DelegateBridge;
      // __Hotfix0__SetData: XLua.DelegateBridge;
      // __Hotfix0__GetDisplayLogo: XLua.DelegateBridge;
      // __Hotfix0__SetCanSkip: XLua.DelegateBridge;
      // __Hotfix0__ResetPopStars: XLua.DelegateBridge;
      // __Hotfix0_OnDisposeForReuse: XLua.DelegateBridge;
    }
    export interface LEGACY_GachaPhase0 {
      _earlyExitTime: System.Single;
      _delayToDisable: System.Single;
      // _skeleton: Spine.Unity.SkeletonGraphic;
      _animations: System.String[];
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_canSkip: XLua.DelegateBridge;
      // __Hotfix0_Play: XLua.DelegateBridge;
      // __Hotfix0_SkipToEnd: XLua.DelegateBridge;
      // __Hotfix0_PreloadSounds: XLua.DelegateBridge;
    }
    export namespace GachaDemo {
      export interface GachaConfig {
        characterId: System.String;
        evolvePhase: Torappu.EvolvePhase;
        isNew: System.Boolean;
        isSkippable: System.Boolean;
      }
    }
    export namespace GachaController {
      export interface GachaPhase {
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_hasOwnCamera: XLua.DelegateBridge;
        // __Hotfix0_SkipToEndAsync: XLua.DelegateBridge;
        // __Hotfix0_TryFetchAndAddCameras: XLua.DelegateBridge;
        // __Hotfix0_OnInit: XLua.DelegateBridge;
        // __Hotfix0_OnDisposeForReuse: XLua.DelegateBridge;
        // __Hotfix0_DisposeForReuse: XLua.DelegateBridge;
      }
      export interface CharacterConfig {
        charId: System.String;
        evolvePhase: Torappu.EvolvePhase;
        skinId: System.String;
        tmplId: System.String;
        showGachaText: System.Boolean;
        overrideVoice: Torappu.CharWord.VoiceQuery;
      }
      export interface Input {
        isNew: System.Boolean;
        isAutoExit: System.Boolean;
        isSkippable: System.Boolean;
        // disableTarget: UnityEngine.GameObject;
        characterConfig: Torappu.Gacha.GachaController.CharacterConfig;
        itemGet: Torappu.ItemBundle[];
      }
      export interface Output {
        characterConfig: Torappu.Gacha.GachaController.CharacterConfig;
        itemGet: Torappu.ItemBundle[];
        newCnt: System.Int32;
      }
      export enum PlayMode {
        FULL_GACHA = "FULL_GACHA",
        SIMPLE_GACHA = "SIMPLE_GACHA",
        DISPLAY_ONLY = "DISPLAY_ONLY",
      }
      export enum StateEnum {
        NONE = "NONE",
        INIT = "INIT",
        PHASE_0 = "PHASE_0",
        PHASE_1 = "PHASE_1",
        HOLD = "HOLD",
      }
      export namespace GachaPhase {
      }
    }
    export namespace GachaScene {
    }
    export namespace PanelCharacterDialog {
    }
    export namespace PanelCharacterInfo {
      export interface ProfessionSpritePair {
        profession: Torappu.ProfessionCategory;
        // sprite: UnityEngine.Sprite;
      }
    }
    export namespace BagLightController {
      export interface LightPillar {
        minProgress: System.Single;
        // gameObject: UnityEngine.GameObject;
        audioSignal: System.String;
      }
    }
    export namespace FolderMultiSkin {
      export interface SkinSource {
        skin: System.String;
      }
      export interface SkinPlaceholder {
        slot: System.String;
        attachment: System.String;
      }
    }
    export namespace GachaPhase0 {
      export interface Options {
        zipperSpeed: System.Single;
        zipperAutoThreshold: System.Single;
        zipperAutoFlyCriteria: System.Single;
        zipperAutoFlyAttenuate: System.Single;
        zipperHoldStillTime: System.Single;
        zipperGuide: Torappu.Fx.FxDelay;
        // zipperEffects: UnityEngine.GameObject[];
        probToShowLowerBagLightWhenTopRarity: System.Single;
        // gachaEffects: UnityEngine.GameObject[];
        bagLights: Torappu.Gacha.BagLightController[];
        // folderContainer: UnityEngine.Transform;
        // folderSpine: Spine.Unity.SkeletonAnimation;
        folderSkin: Torappu.Gacha.FolderMultiSkin;
        folderEndTime: System.Single;
        // _skipContainer: UnityEngine.Transform;
        // onDrag: System.Action<UnityEngine.EventSystems.PointerEventData>;
        // onBeginDrag: System.Action<UnityEngine.EventSystems.PointerEventData>;
        // onEndDrag: System.Action<UnityEngine.EventSystems.PointerEventData>;
        zipperHoldStillTimer: Torappu.PeriodicTimer;
      }
      export interface States {
      }
      export namespace States {
        export enum State {
          DEFAULT = "DEFAULT",
          DROP = "DROP",
          UNPACK = "UNPACK",
          FOLDER = "FOLDER",
          TERMINAL = "TERMINAL",
        }
        export interface DropState {
        }
        export interface UnpackState {
          // m_isAuto: System.Boolean;
          // m_isZipperSePlaying: System.Boolean;
          // m_animState: UnityEngine.AnimationState;
          // m_bagLight: Torappu.Gacha.BagLightController;
          // m_remainingDelta: System.Single;
          // m_cachedCurProgress: System.Single;
          // m_cachedLastProgress: System.Single;
        }
        export interface FolderState {
        }
        export namespace FolderState {
        }
      }
    }
    export namespace GachaPhase1 {
    }
    export namespace LEGACY_GachaPhase0 {
    }
  }
  export namespace Rendering {
    export interface BaseSceneEffect {
    }
    export interface SceneEffectConfig {
      _effectProfile: Torappu.Rendering.SceneEffectProfile;
      // m_heightFogParam: UnityEngine.Vector4;
      // m_heightFogNoiseST: UnityEngine.Vector4;
      // m_colorgradingParam: UnityEngine.Vector4;
      // m_profile: Torappu.Rendering.SceneEffectProfile;
    }
    export interface SceneEffectProfile {
      shadowTint: System.Boolean;
      // shadowTintColor: UnityEngine.Color;
      heightFog: System.Boolean;
      fogBaseline: System.Single;
      fogTop: System.Single;
      // fogColor: UnityEngine.Color;
      // fogNoise: UnityEngine.Texture2D;
      // fogNoiseScale: UnityEngine.Vector2;
      fogSpeed: System.Single;
      colorGrading: System.Boolean;
      // colorGradingLut: UnityEngine.Texture2D;
      graphicsGrading: System.Boolean;
    }
    export interface SetEnvProbPos {
      // cubemap: UnityEngine.Cubemap;
    }
    export interface ShaderStrings {
      PROP_HGSHADOW_TEX: System.String;
      PROP_HGSHADOW_MATIRX: System.String;
      PROP_HGSHADOW_PCF_DISTANCE: System.String;
      PROP_HGSHADOW_TINT: System.String;
      PROP_HGHEIGHTFOG_PARAM: System.String;
      PROP_HGHEIGHTFOG_NOISETEX: System.String;
      PROP_HGHEIGHTFOG_NOISETEX_ST: System.String;
      PROP_HGHEIGHTFOG_COLOR: System.String;
      PROP_HGCOLOR_GRADING_LUT: System.String;
      PRPO_HGCOLOR_GRADING_PARAM: System.Int32;
      PROP_HGCOLOR_GRADING_EXPOSURE: System.String;
      PROP_HG_ENV_PROB_CENTER: System.String;
      PROP_HG_ENV_PROB: System.String;
      PROP_HG_WATER_DEPTH_TEX: System.String;
      PROP_HG_WATER_REFL_TEX: System.String;
      PROP_HG_WATER_DISTORT_TEX: System.String;
      PROP_HG_WATER_DISTORT_TEX_ID: System.Int32;
      KEYWORD_HGSHADOW_ON: System.String;
      KEYWORD_HGSHADOW_TINT: System.String;
      KEYWORD_HEIGHT_FOG: System.String;
      KEYWORD_COLOR_GRADING: System.String;
      KEYWORD_GRAPHICS_GRADING: System.String;
      KEYWORD_WATER_DEPTH: System.String;
      KEYWROD_WATER_REFL: System.String;
      KEYWORD_WATER_DISTORT: System.String;
    }
    export interface HGSceneWaterEffect {
      _DistortOn: System.Boolean;
      // _depthShader: UnityEngine.Shader;
      // _underwaterOpaqueList: System.Collections.Generic.List<UnityEngine.MeshRenderer>;
      // _reflObjectList: System.Collections.Generic.List<UnityEngine.MeshRenderer>;
      // _waterMeshList: System.Collections.Generic.List<UnityEngine.MeshRenderer>;
      // m_camera: UnityEngine.Camera;
      // m_depthCB: UnityEngine.Rendering.CommandBuffer;
      // m_depthMat: UnityEngine.Material;
      // m_depthRT: UnityEngine.RenderTexture;
      // m_reflCB: UnityEngine.Rendering.CommandBuffer;
      // m_reflRT: UnityEngine.RenderTexture;
      // m_distortCB: UnityEngine.Rendering.CommandBuffer;
      // m_initializeSuccess: System.Boolean;
      // m_cameraCommandBufferActive: System.Boolean;
      CB_NAME_DEPTH: System.String;
      CB_NAME_REFL: System.String;
      CB_NAME_DISTORT: System.String;
      RT_NAME_DEPTH: System.String;
      RT_NAME_REFL: System.String;
    }
    export namespace PostProcess {
      export interface ColorGradingCtrl {
        // _curve: UnityEngine.AnimationCurve;
        _anmTime: System.Single;
        time: System.Single;
      }
    }
  }
  export namespace GraphicEffect {
    export namespace Reflection {
      export interface HGReflectionShaderMapping {
        fromShaderName: System.String;
        // toShader: UnityEngine.Shader;
      }
      export interface HGReflectionShaderProfile {
        // reflectionPlaneShader: UnityEngine.Shader;
        commonShaderMapping: System.Collections.Generic.List<Torappu.GraphicEffect.Reflection.HGReflectionShaderMapping>;
      }
      export interface ReflectCamera {
        // temp_mainCamera: UnityEngine.Camera;
        // temp_normal: UnityEngine.Vector3;
        temp_distance: System.Single;
        // temp_boundObj: UnityEngine.MeshRenderer;
        // temp_plane: UnityEngine.MeshRenderer;
        // temp_rt: UnityEngine.RenderTexture;
        // temp_reflectObjs: System.Collections.Generic.List<UnityEngine.MeshRenderer>;
        temp_reflectIdx: Torappu.GraphicEffect.Reflection.ReflectCamera.ReflectIdx;
        temp_reflectFadeHeight: System.Single;
        // m_shaderProfile: Torappu.GraphicEffect.Reflection.HGReflectionShaderProfile;
        _cropMode: Torappu.GraphicEffect.Reflection.ReflectCamera.CropMode;
        // m_opaqueCB: UnityEngine.Rendering.CommandBuffer;
        // m_transparentCB: UnityEngine.Rendering.CommandBuffer;
        // m_boundObj: UnityEngine.MeshRenderer;
        // m_planeRenderer: UnityEngine.MeshRenderer;
        // m_planeParamDistance: System.Single;
        // m_planeParamNormal: UnityEngine.Vector3;
        // m_shaderPlaneVector: UnityEngine.Vector4;
        // m_reflectBoundsCenter: UnityEngine.Vector3;
        // m_reflectFadeHeight: System.Single;
        // m_planeMat: UnityEngine.Material;
        // m_planeReflectMat: UnityEngine.Material;
        // m_reflectionRT: UnityEngine.RenderTexture;
        // m_reflectionRTWdith: System.Int32;
        // m_reflectionRTHeight: System.Int32;
        // m_mainCamera: UnityEngine.Camera;
        // m_OpaqueRenderers: System.Collections.Generic.List<UnityEngine.MeshRenderer>;
        // m_transparentRenderers: System.Collections.Generic.List<UnityEngine.MeshRenderer>;
        // m_cachedReflectMat: Torappu.GraphicEffect.Reflection.ReflectCamera.CachedReflectMaterial;
        // s_initializeShaderMapping: System.Boolean;
        // s_resRefCount: System.Int32;
        // s_renderReplaceMapping: System.Collections.Generic.Dictionary<System.String,UnityEngine.Shader>;
        // s_reflectUVCropState: Torappu.GraphicEffect.Reflection.ReflectCamera.ReflectIdx;
        // m_reflectCropManager: Torappu.GraphicEffect.Reflection.ReflectCamera.ReflectCropManager;
        BOUNDS_PROTECT_MARGIN: System.Single;
        UV_MARGIN_LOW: System.Single;
        UV_MARGIN_HIGH: System.Single;
        UV_LENGTH: System.Single;
        // DEFAULT_RT_SIZE: UnityEngine.Vector2;
        PROP_HG_PLANE_PARAM: System.Int32;
        PROP_HG_CROP_UV: System.Int32;
        PROP_HG_MAIN_CAMERA_VP: System.Int32;
        PROP_HG_FADE_HEIGHT: System.Int32;
        PROP_HG_REFLECT_TEX: System.Int32;
        KEYWORD_HG_CROPUV_SURFACE: System.String;
        // m_commandBufferInUse: System.Boolean;
        // m_needRefresh: System.Boolean;
        // m_enabledByMaterial: System.Boolean;
        // m_enabledByConfig: System.Boolean;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_ready: XLua.DelegateBridge;
        // __Hotfix0_get_UseCrop: XLua.DelegateBridge;
        // __Hotfix0_Initialize: XLua.DelegateBridge;
        // __Hotfix0_CreateRenderTarget: XLua.DelegateBridge;
        // __Hotfix0_SetBounds: XLua.DelegateBridge;
        // __Hotfix0_RegisterReflectIdx: XLua.DelegateBridge;
        // __Hotfix0_SetPlane: XLua.DelegateBridge;
        // __Hotfix0_SetCamera: XLua.DelegateBridge;
        // __Hotfix0_SetReflectFadeHeight: XLua.DelegateBridge;
        // __Hotfix0_BuildShaderMapping: XLua.DelegateBridge;
        // __Hotfix0_ReleaseShaderMapping: XLua.DelegateBridge;
        // __Hotfix0_ApplyReflectRT: XLua.DelegateBridge;
        // __Hotfix0__RefreshSelfEnable: XLua.DelegateBridge;
        // __Hotfix0_GetCamera: XLua.DelegateBridge;
        // __Hotfix0_SetEnableByMaterial: XLua.DelegateBridge;
        // __Hotfix0_SetEnableByConfig: XLua.DelegateBridge;
        // __Hotfix0_CheckMaterialHasReflectCapability: XLua.DelegateBridge;
        // __Hotfix0_RegisterReflectObject: XLua.DelegateBridge;
        // __Hotfix0_UnregisterReflectObject: XLua.DelegateBridge;
        // __Hotfix0_CleanupReflectObject: XLua.DelegateBridge;
        // __Hotfix0_SetCropUV: XLua.DelegateBridge;
        // __Hotfix0_CalculateCachedParams: XLua.DelegateBridge;
        // __Hotfix0_RefreshOpaqueCommandBuffer: XLua.DelegateBridge;
        // __Hotfix0_RefreshTransparentCommandBuffer: XLua.DelegateBridge;
        // __Hotfix0_CreateCommandBuffer: XLua.DelegateBridge;
        // __Hotfix0_RemoveCommandBuffer: XLua.DelegateBridge;
        // __Hotfix0_DisableReflection: XLua.DelegateBridge;
        // __Hotfix0_AddCommandBufferSoft: XLua.DelegateBridge;
        // __Hotfix0_RemoveCommandBufferSoft: XLua.DelegateBridge;
        // __Hotfix0_Awake: XLua.DelegateBridge;
        // __Hotfix0_OnEnable: XLua.DelegateBridge;
        // __Hotfix0_OnDisable: XLua.DelegateBridge;
        // __Hotfix0_CleanUp: XLua.DelegateBridge;
        // __Hotfix0_LateUpdate: XLua.DelegateBridge;
        // __Hotfix0_OnDestroy: XLua.DelegateBridge;
        // __Hotfix0_GetReflectMat: XLua.DelegateBridge;
      }
      export namespace ReflectCamera {
        export enum ReflectIdx {
          REFLECTIDX_NONE = "REFLECTIDX_NONE",
          REFLECTIDX_0 = "REFLECTIDX_0",
          REFLECTIDX_1 = "REFLECTIDX_1",
          REFLECTIDX_2 = "REFLECTIDX_2",
          REFLECTIDX_3 = "REFLECTIDX_3",
        }
        export enum CropMode {
          CROP_SPHERE = "CROP_SPHERE",
          CROP_CAPSULE = "CROP_CAPSULE",
        }
        export interface ShaderReplaceMapping {
          // from: UnityEngine.Shader;
          // to: UnityEngine.Shader;
        }
        export interface CachedReflectMaterial {
          // m_cachedMaterial: System.Collections.Generic.List<UnityEngine.Material>;
          // m_cachedReflectMaterialCount: System.Collections.Generic.Dictionary<UnityEngine.Material,System.Int32>;
          // m_cacheMatDic: System.Collections.Generic.Dictionary<UnityEngine.Material,UnityEngine.Material>;
        }
        export interface ReflectCropManager {
          needCrop: System.Boolean;
          assignedID: Torappu.GraphicEffect.Reflection.ReflectCamera.ReflectIdx;
        }
      }
    }
  }
  export namespace I18N {
    export interface AVGPlayer {
      // _okColor: UnityEngine.Color;
      // _errorColor: UnityEngine.Color;
      // m_content: System.String;
      // m_error: System.Boolean;
    }
    export interface LocalizationEnv {
      ENV_TYPE: Torappu.I18N.LocalizationEnv.EnvType;
    }
    export interface LocalizationPreference {
      CONFIG_PATH: System.String;
      // s_configData: Torappu.I18N.LocalizationPreference.ConfigData;
      DEFAULT_UNITS: System.String[];
    }
    export interface LocalizationPreferenceConfig {
      numberUnitFormat: System.String;
      numberUnits: System.String[];
      unitStepSize: System.Int32;
      battleResultCharWordLineLength: System.Int32;
      splitMode: Torappu.I18N.LocalizationPreferenceConfig.BattleResultCharWordSplitMode;
      recruit6StartHint: System.String;
    }
    export interface TextStyles {
      // transSize: UnityEngine.Vector2;
      // alignment: UnityEngine.TextAnchor;
      // verticalOverFlow: UnityEngine.VerticalWrapMode;
      // horizontalOverFlow: UnityEngine.HorizontalWrapMode;
      fontSize: System.Int32;
      isBestFit: System.Boolean;
      minSize: System.Int32;
      maxSize: System.Int32;
    }
    export interface LocalizeTextStyleAdapter {
      _settingType: Torappu.I18N.LocalizeTextStyleAdapter.SettingType;
      _styleInLand: Torappu.I18N.TextStyles;
      _styleJp: Torappu.I18N.TextStyles;
      _styleEn: Torappu.I18N.TextStyles;
      _styleKr: Torappu.I18N.TextStyles;
      _styleTc: Torappu.I18N.TextStyles;
      // m_overrideStyleInLand: System.Boolean;
      // m_overrideStyleJp: System.Boolean;
      // m_overrideStyleEn: System.Boolean;
      // m_overrideStyleKr: System.Boolean;
      // m_overrideStyleTc: System.Boolean;
      // m_text: UnityEngine.UI.Text;
      // m_isStyleInited: System.Boolean;
      // m_useStyle: Torappu.I18N.TextStyles;
      // <>f__mg$cache0: System.Func<System.Boolean>;
      // <>f__mg$cache1: System.Func<System.Boolean>;
      // <>f__mg$cache2: System.Func<System.Boolean>;
      // <>f__mg$cache3: System.Func<System.Boolean>;
      // <>f__mg$cache4: System.Func<System.Boolean>;
    }
    export interface LocalizeTextUIConfig {
      type: Torappu.I18N.LocalizeTextUIConfig.PlaceholderType;
      pathRecord: System.String;
    }
    export interface StringMap {
      // s_stringResDict: System.Collections.Generic.Dictionary<System.String,System.String>;
      I18N_STRING_MAP_PATH: System.String;
      // <>f__am$cache0: System.Action<System.String>;
      // <>f__am$cache1: System.Action<System.String>;
    }
    export namespace LocalizationEnv {
      export enum EnvType {
        INLAND = "INLAND",
        JP = "JP",
        KR = "KR",
        EN = "EN",
        TC = "TC",
      }
    }
    export namespace LocalizationPreference {
      export interface ConfigData {
        numberUnitFormat: System.String;
        numberUnits: System.String[];
        unitStepSize: System.Int32;
        battleResultCharWordLineLength: System.Int32;
        splitMode: Torappu.I18N.LocalizationPreferenceConfig.BattleResultCharWordSplitMode;
        recruit6StartHint: System.String;
      }
    }
    export namespace LocalizationPreferenceConfig {
      export enum BattleResultCharWordSplitMode {
        LetterBased = "LetterBased",
        WordBased = "WordBased",
      }
    }
    export namespace LocalizeTextStyleAdapter {
      export enum SettingType {
        ON_ENABLE = "ON_ENABLE",
        BY_MANUAL = "BY_MANUAL",
      }
    }
    export namespace LocalizeTextUIConfig {
      export enum PlaceholderType {
        PlaceholderByCode = "PlaceholderByCode",
        ManualPlaceholder = "ManualPlaceholder",
        ManualNonPlaceholder = "ManualNonPlaceholder",
      }
    }
  }
  export namespace Lua {
    export interface LuaBattleMgr {
      // m_luaCallback: Torappu.Lua.LuaBattleMgr.ILuaServiceCallback;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_isCallbackReady: XLua.DelegateBridge;
      // __Hotfix0_LuaOnlyBindCallback: XLua.DelegateBridge;
      // __Hotfix0_ResetAll: XLua.DelegateBridge;
      // __Hotfix0_RunActions: XLua.DelegateBridge;
      // __Hotfix0_CreateAbilityBehaviour: XLua.DelegateBridge;
    }
    export interface LuaEntry {
      // Init: System.Action;
      // Dispose: System.Action;
      driveUpdate: System.Boolean;
      // Update: System.Action<System.Single>;
    }
    export interface LuaManager {
      TICK_INTERVAL: System.Single;
      MOCK_EXTENSION: System.String;
      // m_inited: System.Boolean;
      // m_env: XLua.LuaEnv;
      // m_folder: System.String;
      // m_decrypter: Torappu.DB.IConverter;
      // m_tickTimer: Torappu.PeriodicTimer;
      // m_assetLoader: Torappu.Resource.AbstractAssetLoader;
      // m_holdLuaAsset: UnityEngine.TextAsset;
      // <>f__am$cache0: System.Action;
      // <>f__mg$cache0: XLua.LuaDLL.lua_CSFunction;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_luaEnv: XLua.DelegateBridge;
      // __Hotfix0_InitIfNot: XLua.DelegateBridge;
      // __Hotfix0_ReloadScripts: XLua.DelegateBridge;
      // __Hotfix0_Update: XLua.DelegateBridge;
      // __Hotfix0_Dispose: XLua.DelegateBridge;
      // __Hotfix0_FullGC: XLua.DelegateBridge;
      // __Hotfix0__DoInitIfNot: XLua.DelegateBridge;
      // __Hotfix0__DoLoadEntryScript: XLua.DelegateBridge;
      // __Hotfix0__DoReloadScripts: XLua.DelegateBridge;
      // __Hotfix0__DoUpdate: XLua.DelegateBridge;
      // __Hotfix0__DoLoad: XLua.DelegateBridge;
      // __Hotfix0__CustomLoader: XLua.DelegateBridge;
      // __Hotfix0__ConvertToFullPath: XLua.DelegateBridge;
      // __Hotfix0__ClearCachedLuaAsset: XLua.DelegateBridge;
      // __Hotfix0__DoCreateLuaEnv: XLua.DelegateBridge;
      // __Hotfix0__DoDisposeLuaEnv: XLua.DelegateBridge;
      // __Hotfix0__CallLuaDisposeInAnotherStackFrame: XLua.DelegateBridge;
    }
    export interface LuaOptions {
      cryptType: Torappu.DB.ConverterFactory.ConverterType;
      luaFolder: System.String;
      entryFile: System.String;
    }
    export interface Util {
      MESSAGE_FORMAT: System.String;
    }
    export interface LuaSender {
      // m_requestCount: System.Int64;
      // m_luaCallback: Torappu.Lua.LuaSender.ILuaServiceCallback;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_LuaOnlyBindCallback: XLua.DelegateBridge;
      // __Hotfix0_ResetNetwork: XLua.DelegateBridge;
      // __Hotfix0_SendRequest: XLua.DelegateBridge;
      // __Hotfix0__SendRequest: XLua.DelegateBridge;
      // __Hotfix0_SendGet: XLua.DelegateBridge;
      // __Hotfix0__SendGet: XLua.DelegateBridge;
      // __Hotfix0__LuaRequestOnProceed: XLua.DelegateBridge;
      // __Hotfix0__LuaGetOnProceed: XLua.DelegateBridge;
      // __Hotfix0__LuaOnBlock: XLua.DelegateBridge;
      // __Hotfix0__LuaOnFinal: XLua.DelegateBridge;
      // __Hotfix0__LuaOnSystemCancel: XLua.DelegateBridge;
      // __Hotfix0__ProcessRequestData: XLua.DelegateBridge;
      // __Hotfix0__ReplaceEmptyObj2Ary: XLua.DelegateBridge;
      // __Hotfix1__ReplaceEmptyObj2Ary: XLua.DelegateBridge;
    }
    export interface LuaActivityEntry {
      _mainDialog: System.String;
      _activityId: System.String;
      _dlgPath: System.String;
      _overrideBaseCls: System.String;
      // m_context: Torappu.Lua.LuaUIContext;
      // m_mainDialogCls: System.String;
      // <>f__am$cache0: System.Action<Torappu.AVG.Story>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get__dragLuaLayoutHere: XLua.DelegateBridge;
      // __Hotfix0_set__dragLuaLayoutHere: XLua.DelegateBridge;
      // __Hotfix0_get_root: XLua.DelegateBridge;
      // __Hotfix0_get_mainDialog: XLua.DelegateBridge;
      // __Hotfix0_LoadLayout: XLua.DelegateBridge;
      // __Hotfix0_LoadPrefab: XLua.DelegateBridge;
      // __Hotfix0_OnEnter: XLua.DelegateBridge;
      // __Hotfix0_OnExit: XLua.DelegateBridge;
      // __Hotfix0_OnLeaveContext: XLua.DelegateBridge;
      // __Hotfix0_UnloadAsset: XLua.DelegateBridge;
      // __Hotfix0__GetMainDialogClass: XLua.DelegateBridge;
      // __Hotfix0_StartStoryWithSyncMusic: XLua.DelegateBridge;
    }
    export interface LuaUIPage {
      _mainDialog: System.String;
      // m_context: Torappu.Lua.LuaUIContext;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_root: XLua.DelegateBridge;
      // __Hotfix0_get_mainDialog: XLua.DelegateBridge;
      // __Hotfix0_LoadLayout: XLua.DelegateBridge;
      // __Hotfix0_LoadPrefab: XLua.DelegateBridge;
      // __Hotfix0_OnLeaveContext: XLua.DelegateBridge;
      // __Hotfix0_OnCreate: XLua.DelegateBridge;
      // __Hotfix0_OnPageRouted: XLua.DelegateBridge;
    }
    export interface LuaUIState {
      _mainDialog: System.String;
      // m_context: Torappu.Lua.LuaUIContext;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_root: XLua.DelegateBridge;
      // __Hotfix0_get_mainDialog: XLua.DelegateBridge;
      // __Hotfix0_LoadLayout: XLua.DelegateBridge;
      // __Hotfix0_LoadPrefab: XLua.DelegateBridge;
      // __Hotfix0_OnLeaveContext: XLua.DelegateBridge;
      // __Hotfix0_UnloadAsset: XLua.DelegateBridge;
      // __Hotfix0_GetCacheBean: XLua.DelegateBridge;
      // __Hotfix0_OnEnter: XLua.DelegateBridge;
      // __Hotfix0_HandleOpenState: XLua.DelegateBridge;
    }
    export interface PageEntry {
    }
    export interface StateEntry {
      // _engine: Torappu.UI.StateEngine;
    }
    export interface IContextHost {
    }
    export interface ControllerDefine {
      name: System.String;
      // ctrl: UnityEngine.Object;
    }
    export interface ValueFieldDefine {
      name: System.String;
      value: System.String;
    }
    export interface LuaLayout {
      // _sysCloseBtn: UnityEngine.UI.Button;
      _ctrlDefines: Torappu.Lua.ControllerDefine[];
      _valueDefines: Torappu.Lua.ValueFieldDefine[];
      // m_event: Torappu.Lua.ILuaLayoutEvent;
    }
    export interface ILuaLayoutEvent {
    }
    export interface ILuaDialog {
    }
    export interface ILuaDialogMgr {
    }
    export interface LuaUIContext {
      // s_mgr: Torappu.Lua.ILuaDialogMgr;
      // m_host: Torappu.Lua.IContextHost;
      // m_hostData: System.Collections.Generic.Dictionary<System.String,System.String>;
      // m_child: Torappu.Lua.ILuaDialog;
    }
    export interface LuaUIUtil {
    }
    export namespace LuaBattleMgr {
      export interface ILuaServiceCallback {
      }
    }
    export namespace LuaSender {
      export interface WrapHandler<ResType> {
        // <onSystemCancel>k__BackingField: System.Action;
      }
      export interface RawMsgBundle {
        data: System.String;
      }
      export interface Options {
        serviceCode: System.String;
        headers: System.Collections.Generic.Dictionary<System.String,System.String>;
        useInvisibleMask: System.Boolean;
        body: System.String;
        overrideUrl: System.String;
      }
      export interface LuaRespError {
        code: System.Int64;
        error: System.String;
        message: System.String;
        isTimeout: System.Boolean;
        isCanceled: System.Boolean;
      }
      export interface ILuaServiceCallback {
      }
    }
    export namespace Test {
      export interface LuaDemo {
        // _script: UnityEngine.TextAsset;
        // m_env: XLua.LuaEnv;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Start: XLua.DelegateBridge;
        // __Hotfix0_Update: XLua.DelegateBridge;
      }
    }
    export namespace LuaUIUtil {
    }
  }
  export namespace Multiplayer {
    export interface BattlePhase {
      INITIAL_PRESERVE_CNT: System.Int32;
      // m_cachedSteps: System.Collections.Generic.Queue<Torappu.Multiplayer.StepData>;
      // m_preserveCnt: System.Int32;
      // m_receivedStep: System.UInt32;
      // m_receivedStepNotified: System.UInt32;
      // m_playSpeed: System.Single;
      // m_playFramesOnce: System.Single;
      // m_stride: System.Int32;
      // m_leftFrameInStep: System.Int32;
      // m_idleStartTime: System.Single;
      // m_setting: Torappu.ActivityMultiplayData.ConstData;
      // m_gameMode: Torappu.Battle.GameMode.IMultiplayerGameMode;
      // m_status: Torappu.Multiplayer.GameBattleStatus;
      // <>f__am$cache0: System.Action<Torappu.Activity.Act17D1.UI.Act17D1BattleStartResponse>;
      // <>f__am$cache1: System.Action;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0__GetWaiteFrameTime: XLua.DelegateBridge;
      // __Hotfix0_Enter: XLua.DelegateBridge;
      // __Hotfix0_Leave: XLua.DelegateBridge;
      // __Hotfix0__TryParsePlayerData: XLua.DelegateBridge;
      // __Hotfix0__NotifyLoadComplete: XLua.DelegateBridge;
      // __Hotfix0_FixedUpdate: XLua.DelegateBridge;
      // __Hotfix0_OnNetStateChanged: XLua.DelegateBridge;
      // __Hotfix0_RevStepDate: XLua.DelegateBridge;
      // __Hotfix0__PreserveTo: XLua.DelegateBridge;
      // __Hotfix0__ChangeStatus: XLua.DelegateBridge;
      // __Hotfix0__AdjustPlaySpeed: XLua.DelegateBridge;
      // __Hotfix0__RefreshPlaySpeed: XLua.DelegateBridge;
      // __Hotfix0__CalculateRemainFrame: XLua.DelegateBridge;
      // __Hotfix0__ApplyStepSetting: XLua.DelegateBridge;
    }
    export interface MultiBattlePhase {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_FixedUpdate: XLua.DelegateBridge;
      // __Hotfix0_OnGUI: XLua.DelegateBridge;
      // __Hotfix0_OnNetStateChanged: XLua.DelegateBridge;
    }
    export interface PreparePhase {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Enter: XLua.DelegateBridge;
      // __Hotfix0_Leave: XLua.DelegateBridge;
    }
    export interface TeamInfo {
      teamID: System.String;
      stageID: System.String;
      ownerID: System.String;
      start: System.Boolean;
      forceEndTs: System.Int32;
      state: Torappu.Multiplayer.Servers.TeamProtocol.TeamState;
      players: System.Collections.Generic.List<Torappu.Multiplayer.Servers.TeamProtocol.PlayerStatus>;
    }
    export interface BattleInfo {
      // s_latestSettle: System.Nullable<Torappu.Multiplayer.Servers.BattleProtocol.GameSettleInfo>;
      createTs: System.Int32;
      forceEndTs: System.Int32;
      actStageID: System.String;
      randomSeed: System.Int32;
      players: System.Collections.Generic.List<Torappu.Multiplayer.Servers.BattleProtocol.SceneJoinRet.UserInfo>;
      sceneID: System.String;
      started: System.Boolean;
      lastStatus: Torappu.ListDict<System.String,Torappu.Multiplayer.BattlePlayerStatus>;
    }
    export interface MultiplayerActParam {
      actMeta: Torappu.Battle.BattleActivityMeta;
      // battleFinishIndexPlugin: Torappu.UI.BattleFinish.BattleFinishIndexState.IPlugin;
      bundleToJumpBack: Torappu.DataBundle;
      setting: Torappu.ActivityMultiplayData.ConstData;
      // stageDataGetter: System.Func<System.String,Torappu.ActivityMultiplayData.StageData>;
      multiplayerUploadLogClose: System.Boolean;
    }
    export enum RoomConfigKey {
      StageID = "StageID",
      SquadPath = "SquadPath",
      CharGrade = "CharGrade",
    }
    export interface StepData {
      index: System.UInt32;
      duration: System.UInt32;
      oprts: System.Collections.Generic.List<Torappu.Multiplayer.PlayerOprtData>;
      checkSeq: System.Int32;
      pause: System.Byte;
    }
    export interface PlayerOprtData {
      side: Torappu.PlayerSide;
      oprt: Torappu.Multiplayer.PlayerOperator;
      dir: Torappu.SharedConsts.Direction;
      grid: Torappu.GridPosition;
      sig: Torappu.Battle.BattleCharacterData.Signiture;
    }
    export enum PlayerOperator {
      None = "None",
      Spawn = "Spawn",
      Withdraw = "Withdraw",
      Skill = "Skill",
      SYS_SetStride = "SYS_SetStride",
      SYS_Report = "SYS_Report",
      Cheat = "Cheat",
    }
    export enum MultiplayerEvent {
      TeamChanged = "TeamChanged",
      RevTeamChat = "RevTeamChat",
      BattleStart = "BattleStart",
      BattleStatusChanged = "BattleStatusChanged",
      RevPause = "RevPause",
      RevMark = "RevMark",
      BattlePlayerStatusChanged = "BattlePlayerStatusChanged",
      BattleEnd = "BattleEnd",
    }
    export interface TeamChatParam {
      uid: System.String;
      opr: Torappu.Multiplayer.Servers.TeamProtocol.TeamChat.Oprt;
      param: System.Int32;
    }
    export interface GameMarkParam {
      uid: System.String;
      opr: System.SByte;
      row: System.Int32;
      col: System.Int32;
    }
    export enum BattlePlayerStatus {
      Normal = "Normal",
      Cancel = "Cancel",
      Offline = "Offline",
    }
    export enum GameBattleStatus {
      Normal = "Normal",
      Offline = "Offline",
    }
    export enum RequestType {
      None = "None",
      TeamReady = "TeamReady",
      TeamSquad = "TeamSquad",
      TeamKick = "TeamKick",
      TeamChat = "TeamChat",
      LeaveTeam = "LeaveTeam",
      GameReady = "GameReady",
      GameAction = "GameAction",
      GameCheck = "GameCheck",
      GamePause = "GamePause",
      GameMark = "GameMark",
      GameSettle = "GameSettle",
      Chat = "Chat",
      MAX_COUNT = "MAX_COUNT",
    }
    export interface GameSettleParam {
      result: Torappu.Battle.BattleController.GameResult;
      hp: System.Int32;
      killCnt: System.Int32;
      checkSum: System.UInt32;
      battleStats: System.String;
    }
    export interface GameCheckParam {
      seq: System.Int32;
      hash: System.UInt32;
      hp: System.Int32;
    }
    export enum GamePauseParam {
      None = "None",
      Ask = "Ask",
      Stop = "Stop",
      Cancel = "Cancel",
      Refuse = "Refuse",
      Sys_StartPause = "Sys_StartPause",
      Sys_StopPause = "Sys_StopPause",
    }
    export interface TeamSquadParam {
      opr: System.SByte;
      index: System.SByte;
      squad: System.String;
    }
    export interface MultiplayerInput {
      randomSeed: System.Int32;
      levelId: System.String;
      myPlayerSquadData: Torappu.Multiplayer.MultiplayerSquadData;
      anotherPlayerSquadData: Torappu.Multiplayer.MultiplayerSquadData;
      anotherPlayerData: Torappu.Battle.BattlePlayerData;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
    }
    export interface MultiplayerSquadData {
      playerSide: Torappu.PlayerSide;
      squad: System.Collections.Generic.List<Torappu.CharacterInst>;
      nickName: System.String;
      level: System.Int32;
      uid: System.String;
      userInfo: System.String;
      squadRawData: Torappu.Multiplayer.Servers.TeamProtocol.Squad;
    }
    export interface MultiplayerMgr {
      // s_instance: Torappu.Multiplayer.MultiplayerMgr;
      // m_curPhase: Torappu.Multiplayer.MultiBattlePhase;
      // m_mode: Torappu.Multiplayer.Mode.IMultiplayerMode;
      // <eventPool>k__BackingField: Torappu.EventPool<Torappu.Multiplayer.MultiplayerEvent>;
      // <partnerID>k__BackingField: System.String;
      // <actParam>k__BackingField: Torappu.Multiplayer.MultiplayerActParam;
      // <battlePausing>k__BackingField: System.Boolean;
      // s_alerts: System.Collections.Generic.List<System.String>;
      // <>f__mg$cache0: System.Func<System.String,Torappu.ActivityMultiplayData.StageData>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_instance: XLua.DelegateBridge;
      // __Hotfix0__Setup: XLua.DelegateBridge;
      // __Hotfix0_get_started: XLua.DelegateBridge;
      // __Hotfix0_Stop: XLua.DelegateBridge;
      // __Hotfix0_Start: XLua.DelegateBridge;
      // __Hotfix0_Replay: XLua.DelegateBridge;
      // __Hotfix1_Replay: XLua.DelegateBridge;
      // __Hotfix0_get_curMode: XLua.DelegateBridge;
      // __Hotfix0_Dispose: XLua.DelegateBridge;
      // __Hotfix0__HandleSceneChanged: XLua.DelegateBridge;
      // __Hotfix0_get_eventPool: XLua.DelegateBridge;
      // __Hotfix0_set_eventPool: XLua.DelegateBridge;
      // __Hotfix0_get_playerID: XLua.DelegateBridge;
      // __Hotfix0_get_partnerID: XLua.DelegateBridge;
      // __Hotfix0_set_partnerID: XLua.DelegateBridge;
      // __Hotfix0_get_teamInfo: XLua.DelegateBridge;
      // __Hotfix0_get_battleInfo: XLua.DelegateBridge;
      // __Hotfix0_get_actParam: XLua.DelegateBridge;
      // __Hotfix0_set_actParam: XLua.DelegateBridge;
      // __Hotfix0_get_setting: XLua.DelegateBridge;
      // __Hotfix0_get_battlePausing: XLua.DelegateBridge;
      // __Hotfix0_set_battlePausing: XLua.DelegateBridge;
      // __Hotfix0_get_isReal: XLua.DelegateBridge;
      // __Hotfix0_get_isReplay: XLua.DelegateBridge;
      // __Hotfix0_UpdateStatus: XLua.DelegateBridge;
      // __Hotfix0_SendRequest: XLua.DelegateBridge;
      // __Hotfix0_RevStep: XLua.DelegateBridge;
      // __Hotfix0_Update: XLua.DelegateBridge;
      // __Hotfix0_FixedUpdate: XLua.DelegateBridge;
      // __Hotfix0_OnGUI: XLua.DelegateBridge;
      // __Hotfix0_Alert: XLua.DelegateBridge;
      // __Hotfix0_ProcessDelayedAlert: XLua.DelegateBridge;
      // __Hotfix0__ChangeMode: XLua.DelegateBridge;
      // __Hotfix0__ChangePhase: XLua.DelegateBridge;
      // __Hotfix0__CheckMySideAndStatus: XLua.DelegateBridge;
      // __Hotfix1_SendRequest: XLua.DelegateBridge;
      // __Hotfix0__ConstructTempActParam: XLua.DelegateBridge;
    }
    export enum ShowCondition {
      Always = "Always",
      ForbidInBattle = "ForbidInBattle",
    }
    export enum ProcWhenForbid {
      Discard = "Discard",
      AfterBattle = "AfterBattle",
    }
    export interface MultiplayerDriver {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_Update: XLua.DelegateBridge;
      // __Hotfix0_FixedUpdate: XLua.DelegateBridge;
      // __Hotfix0_OnGUI: XLua.DelegateBridge;
      // __Hotfix0_OnApplicationQuit: XLua.DelegateBridge;
      // __Hotfix0_DestroyDriver: XLua.DelegateBridge;
      // __Hotfix0_InitIfNot: XLua.DelegateBridge;
    }
    export interface MultiplayerObjPool {
      // s_stepDataPool: Torappu.ObjectPool.ObjectPool<Torappu.Multiplayer.StepData>;
      // s_oprtDataPool: Torappu.ObjectPool.ObjectPool<Torappu.Multiplayer.PlayerOprtData>;
      // <>f__am$cache0: System.Func<Torappu.Multiplayer.StepData>;
      // <>f__am$cache1: System.Func<Torappu.Multiplayer.PlayerOprtData>;
    }
    export interface MobileFileExplorer {
      // _pathView: UnityEngine.UI.InputField;
      // _scrolll: UnityEngine.UI.ScrollRect;
      // _cellTemplate: UnityEngine.UI.Button;
      // m_rootDir: System.String;
      // m_filter: System.String;
      // m_selected: System.Action<System.String>;
      // m_showedDir: System.String;
    }
    export interface HttpUpload {
      // m_urls: System.String[];
      // m_using: System.Int32;
      // m_data: System.Byte[];
      // m_toPath: System.String;
      // m_raw: System.Boolean;
      // m_complete: System.Action<System.Boolean>;
      // m_uploading: UnityEngine.Networking.UnityWebRequestAsyncOperation;
    }
    export interface MultiplayerBattleLogMgr {
      // m_cur: Torappu.Multiplayer.MultiplayerBattleLogMgr.LogItem;
      // m_waitForUpload: System.Collections.Generic.List<Torappu.Multiplayer.MultiplayerBattleLogMgr.LogItem>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_StartNewBattle: XLua.DelegateBridge;
      // __Hotfix0_GetLogQueue: XLua.DelegateBridge;
      // __Hotfix0_UpdateCurrentLogPath: XLua.DelegateBridge;
      // __Hotfix0_SetCurrentLogNeedToUpload: XLua.DelegateBridge;
      // __Hotfix0_CheckNeedUpload: XLua.DelegateBridge;
      // __Hotfix0_get_count: XLua.DelegateBridge;
      // __Hotfix0_SetLogUploaded: XLua.DelegateBridge;
      // __Hotfix0_ClearAllLog: XLua.DelegateBridge;
      // __Hotfix0_get_storageFile: XLua.DelegateBridge;
      // __Hotfix0__SetLogUploaded: XLua.DelegateBridge;
      // __Hotfix0__DoSave: XLua.DelegateBridge;
      // __Hotfix0__TrySaveCurrent: XLua.DelegateBridge;
      // __Hotfix0__IndexOf: XLua.DelegateBridge;
      // __Hotfix0__NeedUpload: XLua.DelegateBridge;
    }
    export interface Consts {
      PAUSE_WAITING_TIME: System.Single;
      MAX_PIN_MARK_COUNT: System.Int32;
      PIN_MARK_DURATION: System.Single;
      HINT_DURATION: System.Single;
    }
    export interface MultiPlayerDataUtil {
      // __Hotfix0_ConvertToCharCardModel: XLua.DelegateBridge;
    }
    export interface MultiplayerLogUploader {
      // s_closedByServer: System.Boolean;
      MAX_LOG_LENGTH: System.Int32;
      // m_uploader: Torappu.Multiplayer.HttpUpload;
      // m_enableCompress: System.Boolean;
      // m_logs: System.Collections.Generic.Queue<Torappu.Multiplayer.MultiplayerBattleLogMgr.LogItem>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_TryStartUpload: XLua.DelegateBridge;
      // __Hotfix0_InitIfNot: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0__TryUploadNext: XLua.DelegateBridge;
      // __Hotfix0__SendToServer: XLua.DelegateBridge;
      // __Hotfix0__PostToPrivateServer: XLua.DelegateBridge;
      // __Hotfix0__CompressContent: XLua.DelegateBridge;
      // __Hotfix0__Close: XLua.DelegateBridge;
      // __Hotfix0_OnDestroy: XLua.DelegateBridge;
    }
    export namespace TeamInfo {
    }
    export namespace Mode {
      export interface IMultiplayerMode {
      }
      export interface RequestHandlers {
        // m_handlers: Torappu.Multiplayer.Mode.RequestHandlers.RequestHandler[];
      }
      export interface MultiplayerRealMode {
        // m_mgr: Torappu.Multiplayer.MultiplayerMgr;
        // m_suite: Torappu.Multiplayer.Servers.ProtocolSuite;
        // m_teamSvr: Torappu.Multiplayer.Servers.TeamServer;
        // m_battleSvr: Torappu.Multiplayer.Servers.BattleServer;
        // m_statusSvr: Torappu.Multiplayer.Servers.Server;
        // m_reqHandlers: Torappu.Multiplayer.Mode.RequestHandlers;
        // m_cachedUserInfo: Torappu.ListDict<System.String,System.String>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_playerUID: XLua.DelegateBridge;
        // __Hotfix0_get_teamInfo: XLua.DelegateBridge;
        // __Hotfix0_get_battleInfo: XLua.DelegateBridge;
        // __Hotfix0_get_ping: XLua.DelegateBridge;
        // __Hotfix0_Dispose: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_Update: XLua.DelegateBridge;
        // __Hotfix0_JoinTeam: XLua.DelegateBridge;
        // __Hotfix0_TeamSetting: XLua.DelegateBridge;
        // __Hotfix0_SendRequest: XLua.DelegateBridge;
        // __Hotfix0__GameReady: XLua.DelegateBridge;
        // __Hotfix0__ReportSnapshot: XLua.DelegateBridge;
        // __Hotfix0__LeaveTeam: XLua.DelegateBridge;
        // __Hotfix0__ChangeSquad: XLua.DelegateBridge;
        // __Hotfix0__TeamChat: XLua.DelegateBridge;
        // __Hotfix0__KickPartner: XLua.DelegateBridge;
        // __Hotfix0__TeamReady: XLua.DelegateBridge;
        // __Hotfix0__SendAction: XLua.DelegateBridge;
        // __Hotfix0__SendMark: XLua.DelegateBridge;
        // __Hotfix0__GameSettle: XLua.DelegateBridge;
        // __Hotfix0__GamePause: XLua.DelegateBridge;
        // __Hotfix0_UpdateTeamStatus: XLua.DelegateBridge;
        // __Hotfix0_StartBattle: XLua.DelegateBridge;
        // __Hotfix0_UpdateBattleStatus: XLua.DelegateBridge;
        // __Hotfix0_RevStep: XLua.DelegateBridge;
        // __Hotfix0_Alert: XLua.DelegateBridge;
        // __Hotfix0_get_protocolSuite: XLua.DelegateBridge;
        // __Hotfix0_get_eventPool: XLua.DelegateBridge;
      }
      export interface IMultiplayerBattleVideo {
      }
      export interface MultiplayerReplayMode {
        // m_mgr: Torappu.Multiplayer.MultiplayerMgr;
        // m_waiteForPlay: System.Collections.Generic.Queue<System.String>;
        // m_waitingTryNext: System.Boolean;
        // m_video: Torappu.Multiplayer.Mode.IMultiplayerBattleVideo;
        // m_uid: System.String;
        // m_vurl: System.String;
        // m_curStep: System.Int32;
        // m_uploader: Torappu.Multiplayer.HttpUpload;
        // <teamInfo>k__BackingField: Torappu.Multiplayer.TeamInfo;
        // <battleInfo>k__BackingField: Torappu.Multiplayer.BattleInfo;
        // m_reqHandlers: Torappu.Multiplayer.Mode.RequestHandlers;
        REPLAY_SPEED: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_playerUID: XLua.DelegateBridge;
        // __Hotfix0_get_teamInfo: XLua.DelegateBridge;
        // __Hotfix0_set_teamInfo: XLua.DelegateBridge;
        // __Hotfix0_get_battleInfo: XLua.DelegateBridge;
        // __Hotfix0_set_battleInfo: XLua.DelegateBridge;
        // __Hotfix0_get_ping: XLua.DelegateBridge;
        // __Hotfix0_Dispose: XLua.DelegateBridge;
        // __Hotfix0__GetCurStep: XLua.DelegateBridge;
        // __Hotfix0_Init: XLua.DelegateBridge;
        // __Hotfix0_Update: XLua.DelegateBridge;
        // __Hotfix0_Play: XLua.DelegateBridge;
        // __Hotfix1_Play: XLua.DelegateBridge;
        // __Hotfix0_SendRequest: XLua.DelegateBridge;
        // __Hotfix0_TeamSetting: XLua.DelegateBridge;
        // __Hotfix0__GameReady: XLua.DelegateBridge;
        // __Hotfix0__GameSettle: XLua.DelegateBridge;
        // __Hotfix0__Reset: XLua.DelegateBridge;
        // __Hotfix0__TryPlayNext: XLua.DelegateBridge;
        // __Hotfix0__VideoDownloaded: XLua.DelegateBridge;
        // __Hotfix0__SetLogUpload: XLua.DelegateBridge;
      }
      export interface DownloadUtil {
        _url: System.String;
        // _complete: System.Action<System.String,System.String>;
      }
      export namespace RequestHandlers {
        export interface RequestHandler {
        }
      }
      export namespace DownloadUtil {
      }
      export namespace Replay {
        export interface MultiplayerBattleVideoJson {
          stage_id: System.String;
          stage_seed: System.Int32;
          start_ts: System.Int32;
          players: System.Collections.Generic.Dictionary<System.String,Torappu.Multiplayer.Mode.Replay.MultiplayerBattleVideoJson.JsonPlayer>;
          step_seq: System.Int32;
          arr_step: Torappu.Multiplayer.Mode.Replay.MultiplayerBattleVideoJson.JsonStep[];
          arr_check_seq: System.UInt32[];
        }
        export namespace MultiplayerBattleVideoJson {
          export interface JsonPlayer {
            uid: System.String;
            squad: System.String;
            position: System.Int32;
          }
          export interface JsonAction {
            side: System.Int32;
            operate: System.Int32;
            direction: System.Int32;
            position_row: System.Int32;
            position_col: System.Int32;
            unique_id: System.UInt32;
            char_id: System.String;
          }
          export interface JsonStep {
            seq: System.UInt32;
            span_ms: System.UInt32;
            actions: Torappu.Multiplayer.Mode.Replay.MultiplayerBattleVideoJson.JsonAction[];
            check_seq: System.Int32;
          }
        }
      }
    }
    export namespace Servers {
      export interface IBattleClient {
      }
      export interface BattleServer {
        // m_client: Torappu.Multiplayer.Servers.IBattleClient;
        // m_entry: Torappu.Multiplayer.Servers.BattleEntry;
        // m_already: System.Boolean;
        // m_receivedStep: System.UInt32;
        // m_indetical: System.Boolean;
        // m_settleReq: Torappu.Multiplayer.GameSettleParam;
        // <battleInfo>k__BackingField: Torappu.Multiplayer.BattleInfo;
        // m_settle: Torappu.Multiplayer.Servers.BattleProtocol.GameSettleInfo;
        // m_markParam: Torappu.Multiplayer.GameMarkParam;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_battleInfo: XLua.DelegateBridge;
        // __Hotfix0_set_battleInfo: XLua.DelegateBridge;
        // __Hotfix0_OnNetStateChanged: XLua.DelegateBridge;
        // __Hotfix0_OnConnectionLost: XLua.DelegateBridge;
        // __Hotfix0_Start: XLua.DelegateBridge;
        // __Hotfix0_Close: XLua.DelegateBridge;
        // __Hotfix0_NotifySceneAlready: XLua.DelegateBridge;
        // __Hotfix0_Settle: XLua.DelegateBridge;
        // __Hotfix0__DoJoin: XLua.DelegateBridge;
        // __Hotfix0__HandleJoinRet: XLua.DelegateBridge;
        // __Hotfix0__HandleRevStep: XLua.DelegateBridge;
        // __Hotfix0__HandleRevHistoryStep: XLua.DelegateBridge;
        // __Hotfix0__DoRev: XLua.DelegateBridge;
        // __Hotfix0__HandleCheckRet: XLua.DelegateBridge;
        // __Hotfix0__HandleRevPause: XLua.DelegateBridge;
        // __Hotfix0__HandleRevMark: XLua.DelegateBridge;
        // __Hotfix0__HandlePlayerStatusChanged: XLua.DelegateBridge;
        // __Hotfix0__HandleGameSettle: XLua.DelegateBridge;
        // __Hotfix0__HandleSceneEnd: XLua.DelegateBridge;
        // __Hotfix0__SetLogUpload: XLua.DelegateBridge;
      }
      export interface BattleProtocol {
      }
      export interface GeneralProtocol {
        MSG_NOTIFY: System.UInt32;
      }
      export interface ProtocolSuite {
        // m_creators: System.Collections.Generic.List<System.Func<Torappu.SocketNetwork.Protocol>>;
        // m_protocols: System.Collections.Generic.List<Torappu.SocketNetwork.Protocol>;
        // m_idFinder: System.Collections.Generic.Dictionary<Torappu.SocketNetwork.NetMsgID,System.Int32>;
        // m_typeFinder: System.Collections.Generic.Dictionary<System.Type,System.Int32>;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_Get: XLua.DelegateBridge;
        // __Hotfix1_Get: XLua.DelegateBridge;
        // __Hotfix0__GetProtocol: XLua.DelegateBridge;
        // __Hotfix0_Register: XLua.DelegateBridge;
      }
      export interface TeamProtocol {
      }
      export interface IServerSupport {
      }
      export interface Server {
        // m_net: Torappu.SocketNetwork.SocketNet;
        // m_ip: System.String;
        // m_port: System.Int32;
        // m_support: Torappu.Multiplayer.Servers.IServerSupport;
        // m_processor: Torappu.Multiplayer.Servers.ServerMsgProcessor;
        // m_reconnectTime: System.Single;
        // m_reLoginDelay: System.Single;
        // m_maxRetryTime: System.Single;
        // m_retryEndTime: System.Single;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_maxRetryTime: XLua.DelegateBridge;
        // __Hotfix0_set_maxRetryTime: XLua.DelegateBridge;
        // __Hotfix0_get_ping: XLua.DelegateBridge;
        // __Hotfix0__NetStateChanged: XLua.DelegateBridge;
        // __Hotfix0_Update: XLua.DelegateBridge;
        // __Hotfix0_SendMsg: XLua.DelegateBridge;
        // __Hotfix1_SendMsg: XLua.DelegateBridge;
        // __Hotfix0_SendToSelf: XLua.DelegateBridge;
        // __Hotfix0_get_connected: XLua.DelegateBridge;
        // __Hotfix0_ConnectTo: XLua.DelegateBridge;
        // __Hotfix1_ConnectTo: XLua.DelegateBridge;
        // __Hotfix0_Disconnect: XLua.DelegateBridge;
        // __Hotfix0__Disconnect: XLua.DelegateBridge;
        // __Hotfix0_RegisterMsgHandler: XLua.DelegateBridge;
        // __Hotfix0_OnNetStateChanged: XLua.DelegateBridge;
        // __Hotfix0_OnUpdate: XLua.DelegateBridge;
        // __Hotfix0_OnConnectionLost: XLua.DelegateBridge;
      }
      export interface ProtocolHandler {
      }
      export interface ServerMsgProcessor {
        // m_handles: System.Collections.Generic.Dictionary<System.UInt32,Torappu.Multiplayer.Servers.ProtocolHandler>;
        // m_protocols: Torappu.SocketNetwork.INetProtocolSuite;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_ProcMsg: XLua.DelegateBridge;
        // __Hotfix1_ProcMsg: XLua.DelegateBridge;
        // __Hotfix0_Register: XLua.DelegateBridge;
      }
      export interface ITeamClient {
      }
      export interface BattleEntry {
        sceneID: System.String;
        svrAddress: System.String;
        token: System.String;
      }
      export interface TeamServer {
        // m_team: Torappu.Multiplayer.Servers.TeamInst;
        // <teamInfo>k__BackingField: Torappu.Multiplayer.TeamInfo;
        // m_client: Torappu.Multiplayer.Servers.ITeamClient;
        // m_chatParam: Torappu.Multiplayer.TeamChatParam;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_teamInfo: XLua.DelegateBridge;
        // __Hotfix0_set_teamInfo: XLua.DelegateBridge;
        // __Hotfix0_OnNetStateChanged: XLua.DelegateBridge;
        // __Hotfix0_OnConnectionLost: XLua.DelegateBridge;
        // __Hotfix0_Start: XLua.DelegateBridge;
        // __Hotfix0_Close: XLua.DelegateBridge;
        // __Hotfix0__DoJoin: XLua.DelegateBridge;
        // __Hotfix0__JoinResult: XLua.DelegateBridge;
        // __Hotfix0__LeaveResult: XLua.DelegateBridge;
        // __Hotfix0__HandleChatRet: XLua.DelegateBridge;
        // __Hotfix0__UpdateTeamStatus: XLua.DelegateBridge;
        // __Hotfix0__HandleBattleStart: XLua.DelegateBridge;
        // __Hotfix0__EnterBattle: XLua.DelegateBridge;
        // __Hotfix0__HandleKickRet: XLua.DelegateBridge;
      }
      export interface TeamSvrApi {
        GET_TEAM_LIST: System.String;
        CREATE_TEAM: System.String;
        GET_TEAM_INST: System.String;
        UPLOAD_LOG: System.String;
      }
      export enum TeamPos {
        INVALID = "INVALID",
        UP = "UP",
        DOWN = "DOWN",
      }
      export interface TeamBrief {
        teamId: System.String;
        teamName: System.String;
        state: Torappu.Multiplayer.Servers.TeamProtocol.TeamState;
        stage: System.String;
        positions: System.Collections.Generic.List<Torappu.Multiplayer.Servers.TeamPos>;
        ownerInfo: System.String;
      }
      export interface TeamInst {
        brief: Torappu.Multiplayer.Servers.TeamBrief;
        teamId: System.String;
        serverAddress: System.String;
        serverToken: System.String;
      }
      export interface FriendTeamItem {
        nickName: System.String;
        nickNumber: System.String;
        uid: System.String;
        level: System.Int32;
        multiplayerTeam: Torappu.Multiplayer.Servers.TeamBrief;
      }
      export interface GetFriendTeamListRequest {
      }
      export interface GetFriendTeamListResponse {
        list: System.Collections.Generic.List<Torappu.Multiplayer.Servers.FriendTeamItem>;
      }
      export interface CreateTeamRequest {
      }
      export interface CreateTeamResponse {
        team: Torappu.Multiplayer.Servers.TeamInst;
      }
      export interface GetTeamInstRequest {
        teamId: System.String;
      }
      export interface GetTeamInstResponse {
        team: Torappu.Multiplayer.Servers.TeamInst;
      }
      export interface ResponseResult {
        OK: System.String;
        JOIN_FAILED: System.String;
        MATCH_FAILED: System.String;
        ALREADY_IN_TEAM: System.String;
        NOT_IN_MATCH: System.String;
      }
      export interface MultiMatchPair {
        stage: System.String;
        position: System.Int32;
      }
      export interface StartMatchRequest {
        activityId: System.String;
        matchPairList: System.Collections.Generic.List<Torappu.Multiplayer.Servers.MultiMatchPair>;
      }
      export interface StartMatchResponse {
        result: System.Int32;
        debug: Torappu.Multiplayer.Servers.StartMatchResponse.Debug;
      }
      export interface QueryMatchRequest {
        activityId: System.String;
        needLeave: System.Int32;
      }
      export interface QueryMatchResponse {
        result: System.Int32;
        team: Torappu.Multiplayer.Servers.TeamInst;
      }
      export interface TryMatchRequest {
      }
      export interface TryMatchResponse {
        result: System.String;
        success: System.Boolean;
        team: Torappu.Multiplayer.Servers.TeamInst;
      }
      export interface LeaveMatchRequest {
      }
      export interface LeaveMatchResponse {
        result: System.String;
      }
      export interface UploadLogRequest {
        activityId: System.String;
        sceneId: System.String;
        data: System.String;
      }
      export interface UploadLogResponse {
      }
      export namespace BattleProtocol {
        export interface SceneJoin {
          ID: System.UInt32;
          uid: System.String;
          sceneID: System.String;
          token: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnWrite: XLua.DelegateBridge;
        }
        export interface SceneJoinRet {
          ID: System.UInt32;
          code: Torappu.Multiplayer.Servers.GeneralProtocol.RetCode;
          createTs: System.Int32;
          forceEndTs: System.Int32;
          newToken: System.String;
          stageID: System.String;
          stageSeed: System.Int32;
          users: Torappu.ListDict<System.String,Torappu.Multiplayer.Servers.BattleProtocol.SceneJoinRet.UserInfo>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnRead: XLua.DelegateBridge;
        }
        export interface SceneReady {
          ID: System.UInt32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
        }
        export interface SceneReadyRet {
          ID: System.UInt32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
        }
        export interface SceneEnd {
          ID: System.UInt32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
        }
        export interface SceneEndRet {
          ID: System.UInt32;
          reason: Torappu.Multiplayer.Servers.BattleProtocol.SceneEndReason;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnRead: XLua.DelegateBridge;
        }
        export interface GameAction {
          ID: System.UInt32;
          list: System.Collections.Generic.List<Torappu.Multiplayer.PlayerOprtData>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnWrite: XLua.DelegateBridge;
          // __Hotfix0_OnRecycle: XLua.DelegateBridge;
        }
        export interface GameActionRet {
          ID: System.UInt32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
        }
        export interface GameStep {
          ID: System.UInt32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
        }
        export interface GameStepRet {
          ID: System.UInt32;
          step: Torappu.Multiplayer.StepData;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnRead: XLua.DelegateBridge;
        }
        export interface GameCheck {
          ID: System.UInt32;
          seq: System.Int32;
          checksum: System.UInt32;
          hp: System.Int32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnWrite: XLua.DelegateBridge;
        }
        export interface GameCheckRet {
          ID: System.UInt32;
          failSeq: System.Int32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnRead: XLua.DelegateBridge;
        }
        export interface GameSettle {
          ID: System.UInt32;
          oprt: System.Int32;
          checkSum: System.UInt32;
          hp: System.Int32;
          killCnt: System.Int32;
          battleStats: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnWrite: XLua.DelegateBridge;
        }
        export interface GameSettleRet {
          ID: System.UInt32;
          info: Torappu.Multiplayer.Servers.BattleProtocol.GameSettleInfo;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnRead: XLua.DelegateBridge;
        }
        export interface GameActionHistory {
          ID: System.UInt32;
          seq: System.UInt32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnWrite: XLua.DelegateBridge;
        }
        export interface GameActionHistoryRet {
          ID: System.UInt32;
          steps: System.Collections.Generic.List<Torappu.Multiplayer.StepData>;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnRead: XLua.DelegateBridge;
        }
        export interface GamePause {
          ID: System.UInt32;
          opr: Torappu.Multiplayer.GamePauseParam;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnWrite: XLua.DelegateBridge;
        }
        export interface GamePauseRet {
          ID: System.UInt32;
          uid: System.String;
          opr: Torappu.Multiplayer.GamePauseParam;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnRead: XLua.DelegateBridge;
        }
        export interface GameMapMark {
          ID: System.UInt32;
          opr: System.SByte;
          row: System.Int32;
          col: System.Int32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnWrite: XLua.DelegateBridge;
        }
        export interface GameMapMarkRet {
          ID: System.UInt32;
          uid: System.String;
          opr: System.SByte;
          row: System.Int32;
          col: System.Int32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnRead: XLua.DelegateBridge;
        }
        export interface GamePlayerStatus {
          ID: System.UInt32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
        }
        export interface GamePlayerStatusRet {
          ID: System.UInt32;
          uid: System.String;
          status: Torappu.Multiplayer.BattlePlayerStatus;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnRead: XLua.DelegateBridge;
        }
        export enum SceneEndReason {
          EGameEndOK = "EGameEndOK",
          EGameEndPrepareTimeout = "EGameEndPrepareTimeout",
          EGameEndSettleTimeout = "EGameEndSettleTimeout",
          EGameEndAllPlayerLeave = "EGameEndAllPlayerLeave",
          EGameEndTimeLimit = "EGameEndTimeLimit",
          EGameEndFatalInconsistent = "EGameEndFatalInconsistent",
          EGameEndAllLeaveTimeLimit = "EGameEndAllLeaveTimeLimit",
          EGameEndServerStop = "EGameEndServerStop",
        }
        export interface Step {
          seq: System.UInt32;
          spanMS: System.UInt32;
          checkSeq: System.Int32;
          actions: System.Collections.Generic.Dictionary<System.String,Torappu.Multiplayer.PlayerOprtData[]>;
        }
        export interface GameSettleInfo {
          result: System.Byte;
          hasSettle: System.Boolean;
          startTs: System.Int32;
          endTs: System.Int32;
          excpt: Torappu.Multiplayer.Servers.BattleProtocol.GameSettleException;
          excptParam: System.Int32;
        }
        export enum GameSettleException {
          NONE = "NONE",
          REPLAY = "REPLAY",
          PASSIVE_SETTLE = "PASSIVE_SETTLE",
          END_BY_SERVER = "END_BY_SERVER",
          RECONNECT_FAILED = "RECONNECT_FAILED",
        }
        export namespace SceneJoinRet {
          export interface UserInfo {
            uid: System.String;
            squad: Torappu.Multiplayer.Servers.TeamProtocol.Squad;
            pos: Torappu.Multiplayer.Servers.TeamPos;
            level: System.Int32;
            userInfo: System.String;
          }
        }
      }
      export namespace GeneralProtocol {
        export interface HeartBeat {
          ID: System.UInt32;
          seq: System.UInt32;
          time: System.Int64;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnWrite: XLua.DelegateBridge;
        }
        export interface HeartBeatRet {
          ID: System.UInt32;
          seq: System.UInt32;
          time: System.Int64;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnRead: XLua.DelegateBridge;
        }
        export interface MsgNotifyRet {
          ID: System.UInt32;
          msg: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnRead: XLua.DelegateBridge;
        }
        export enum RetCode {
          RetCodeOK = "RetCodeOK",
          RetCodeSceneNotExist = "RetCodeSceneNotExist",
          RetCodeSceneJoinFailed = "RetCodeSceneJoinFailed",
          RetCodeTeamNotExist = "RetCodeTeamNotExist",
          RetCodeTeamJoinFailed = "RetCodeTeamJoinFailed",
          RetCodeTeamSceneStartFailed = "RetCodeTeamSceneStartFailed",
          RetCodeTeamFull = "RetCodeTeamFull",
          RetCodeTeamSceneStartFailedFull = "RetCodeTeamSceneStartFailedFull",
          ClientCodeNetLost = "ClientCodeNetLost",
        }
      }
      export namespace TeamProtocol {
        export interface TeamJoin {
          ID: System.UInt32;
          uid: System.String;
          teamID: System.String;
          token: System.String;
          squad: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnWrite: XLua.DelegateBridge;
        }
        export interface TeamJoinRet {
          ID: System.UInt32;
          retCode: Torappu.Multiplayer.Servers.GeneralProtocol.RetCode;
          reason: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnRead: XLua.DelegateBridge;
        }
        export interface TeamLeave {
          ID: System.UInt32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
        }
        export interface TeamLeaveRet {
          ID: System.UInt32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
        }
        export interface TeamReady {
          ID: System.UInt32;
          ready: System.Boolean;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnWrite: XLua.DelegateBridge;
        }
        export interface TeamSetting {
          ID: System.UInt32;
          stageID: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnWrite: XLua.DelegateBridge;
        }
        export interface TeamSceneStart {
          ID: System.UInt32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
        }
        export interface TeamSceneStartRet {
          ID: System.UInt32;
          retCode: Torappu.Multiplayer.Servers.GeneralProtocol.RetCode;
          sceneInfo: Torappu.Multiplayer.Servers.TeamProtocol.SceneInfo;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnRead: XLua.DelegateBridge;
        }
        export interface TeamStatus {
          ID: System.UInt32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
        }
        export interface TeamStatusRet {
          ID: System.UInt32;
          state: Torappu.Multiplayer.Servers.TeamProtocol.TeamState;
          stageID: System.String;
          ownerID: System.String;
          forceEndTs: System.Int32;
          players: System.Collections.Generic.List<Torappu.Multiplayer.Servers.TeamProtocol.PlayerStatus>;
          sceneInfo: Torappu.Multiplayer.Servers.TeamProtocol.SceneInfo;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnRead: XLua.DelegateBridge;
        }
        export interface TeamSquadChange {
          ID: System.UInt32;
          opr: System.SByte;
          index: System.SByte;
          specSquad: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnWrite: XLua.DelegateBridge;
        }
        export interface TeamSquadChangeRet {
          ID: System.UInt32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
        }
        export interface TeamChat {
          ID: System.UInt32;
          opr: Torappu.Multiplayer.Servers.TeamProtocol.TeamChat.Oprt;
          param1: System.Int32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnWrite: XLua.DelegateBridge;
        }
        export interface TeamChatRet {
          ID: System.UInt32;
          uid: System.String;
          opr: Torappu.Multiplayer.Servers.TeamProtocol.TeamChat.Oprt;
          param1: System.Int32;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnRead: XLua.DelegateBridge;
        }
        export interface TeamKick {
          ID: System.UInt32;
          uid: System.String;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnWrite: XLua.DelegateBridge;
        }
        export interface TeamKickRet {
          ID: System.UInt32;
          opr: Torappu.Multiplayer.Servers.TeamProtocol.TeamKickRet.Oprt;
          // _c__Hotfix0_ctor: XLua.DelegateBridge;
          // __Hotfix0_OnRead: XLua.DelegateBridge;
        }
        export enum TeamMemberRole {
          LEADER = "LEADER",
          MEMBER = "MEMBER",
        }
        export enum TeamMemberState {
          IDLE = "IDLE",
          READY = "READY",
          IN_BATTLE = "IN_BATTLE",
          IN_SQUAD = "IN_SQUAD",
          MISS_CONN = "MISS_CONN",
        }
        export enum TeamState {
          INIT = "INIT",
          NONE = "NONE",
          IDLE = "IDLE",
          COUNT_DOWN = "COUNT_DOWN",
          IN_BATTLE = "IN_BATTLE",
          END = "END",
        }
        export interface PlayerStatus {
          uid: System.String;
          briefData: System.Byte[];
          teamPos: Torappu.Multiplayer.Servers.TeamPos;
          currSquad: System.SByte;
          state: Torappu.Multiplayer.Servers.TeamProtocol.TeamMemberState;
          brief: Torappu.Multiplayer.Servers.TeamProtocol.UserBrief;
        }
        export interface SceneInfo {
          sceneID: System.String;
          address: System.String;
          token: System.String;
        }
        export interface UserBrief {
          uid: System.String;
          info: System.String;
          squads: Torappu.Multiplayer.Servers.TeamProtocol.Squad[];
        }
        export interface UserInfo {
          nickname: System.String;
          level: System.Int32;
          serverName: System.String;
          lastOnlineTs: System.Int64;
          avatar: Torappu.AvatarInfo;
        }
        export interface Squad {
          name: System.String;
          squad: Torappu.Multiplayer.Servers.TeamProtocol.SquadItem[];
        }
        export interface SquadItem {
          inst_id: System.Int32;
          char_id: System.String;
          level: System.Int32;
          phase: System.Int32;
          favor_point: System.Int32;
          potential_rank: System.Int32;
          skill_index: System.Int32;
          spec_skill_level: System.Int32;
          skill_level: System.Int32;
          skin_id: System.String;
          tmpl_id: System.String;
        }
        export namespace TeamChat {
          export enum Oprt {
            NONE = "NONE",
            PRE_DEFINE = "PRE_DEFINE",
          }
        }
        export namespace TeamKickRet {
          export enum Oprt {
            DISBAND = "DISBAND",
            DISLIKE = "DISLIKE",
          }
        }
      }
      export namespace Server {
        export enum NetLostType {
          NORMAL = "NORMAL",
          TIME_OUT = "TIME_OUT",
        }
      }
      export namespace StartMatchResponse {
        export interface Debug {
          score: System.Int32;
          offset: System.Collections.Generic.List<Torappu.Multiplayer.Servers.StartMatchResponse.OffsetPair>;
        }
        export interface OffsetPair {
          stage: System.String;
          offset: System.Collections.Generic.List<System.Int32>;
        }
      }
    }
    export namespace MobileFileExplorer {
      export enum ItemType {
        ReturnParent = "ReturnParent",
        Directory = "Directory",
        File = "File",
      }
    }
    export namespace MultiplayerBattleLogMgr {
      export interface LogItem {
        activityID: System.String;
        remotePath: System.String;
        localPath: System.String;
        toPrivate: System.Boolean;
      }
    }
    export namespace MultiplayerLogUploader {
    }
  }
  export namespace Network {
    export enum ResponseStatus {
      OK = "OK",
      ERROR_IGNORE = "ERROR_IGNORE",
      ERROR_RETRY = "ERROR_RETRY",
      ERROR_SYNC_DATA = "ERROR_SYNC_DATA",
      ERROR_RELOGIN = "ERROR_RELOGIN",
      ERROR_TIMEOUT = "ERROR_TIMEOUT",
      ERROR_CLIENT = "ERROR_CLIENT",
      CANCEL = "CANCEL",
      ERROR_SECURE_SYS = "ERROR_SECURE_SYS",
      ERROR_UNKNOW = "ERROR_UNKNOW",
    }
    export interface DownloadFileTask {
      DOWNLOAD_FRAGMENT_SIZE: System.Int32;
      DEFAULT_CON_TIMEOUT: System.Int32;
      // m_fstream: System.IO.FileStream;
      // m_request: BestHTTP.HTTPRequest;
      // m_isError: System.Boolean;
      // m_isFinished: System.Boolean;
      // m_isDisposed: System.Boolean;
      // m_downloadSize: System.Int64;
      // m_options: Torappu.Network.DownloadFileTask.Options;
      // <targetFileSize>k__BackingField: System.Int64;
      // <errorMessage>k__BackingField: System.String;
    }
    export interface DownloadHandlerFile {
      // m_targetFilePath: System.String;
      // m_fileStream: System.IO.FileStream;
      // m_fileMode: System.IO.FileMode;
      // m_isClosed: System.Boolean;
      // m_isError: System.Boolean;
    }
    export interface FileDownloader {
      MAX_CONNECTION_NUM: System.Int32;
      CONNECTION_TIMEOUT: System.Int32;
      CLIENT_PAUSE_THRESHOLD: System.Single;
      // m_isDispose: System.Boolean;
      // m_isInterrupting: System.Boolean;
      allowProfile: System.Boolean;
      // m_downloadingTasks: System.Collections.Generic.List<Torappu.Network.FileDownloader.DownloadProcHandler>;
      // m_pendingTasks: System.Collections.Generic.Queue<Torappu.Network.FileDownloader.Options>;
    }
    export interface IMsgBundle {
    }
    export interface MsgBundle<T> {
      data: T;
    }
    export interface ICustomizedBundleData {
    }
    export interface RespMsgBundle<T> {
      data: T;
    }
    export interface NetworkDns {
      SHIELD_HOST_FLAG: System.String;
      SHIELD_TARGET_IP: System.String;
    }
    export enum NetworkConfigPriority {
      LOWEST = "LOWEST",
      SDK_INJECTED = "SDK_INJECTED",
      NETWORK_ROUTER = "NETWORK_ROUTER",
      HIGHEST = "HIGHEST",
    }
    export interface Networker {
      CONTENT_TYPE_JSON: System.String;
      CUSTOM_ERROR_CODE_TIMEOUT: System.Int64;
      CUSTOM_ERROR_CODE_SECURE_BASE: System.Int32;
      CUSTOM_ERROR_CODE_CLIENT_ERROR: System.Int64;
      GENERAL_TIMEOUT: System.Int32;
      LARGE_REQUEST_THRESHOLD: System.Int32;
      _enableProfile: System.Boolean;
      // m_loginInfo: Torappu.Network.Networker.LoginInfo;
      // m_overrideNetworkConfigs: Torappu.ListDict<System.Int32,Torappu.Network.Networker.Configuration>;
      // <overrideRouterUrl>k__BackingField: System.String;
      // m_serviceCount: System.Int32;
      // m_lastSeqNumFailed: System.Boolean;
      // m_seqNum: System.Int32;
      // m_latestSucceedSeqNum: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_networkConfig: XLua.DelegateBridge;
      // __Hotfix0_GetOverrideNetworkConfig: XLua.DelegateBridge;
      // __Hotfix0_OverrideNetworkOptions: XLua.DelegateBridge;
      // __Hotfix0_get_overrideRouterUrl: XLua.DelegateBridge;
      // __Hotfix0_set_overrideRouterUrl: XLua.DelegateBridge;
      // __Hotfix0_OverrideNetworkRouterUrl: XLua.DelegateBridge;
      // __Hotfix0_get_serializeSetting: XLua.DelegateBridge;
      // __Hotfix0_get_annouceUrl: XLua.DelegateBridge;
      // __Hotfix0_get_preAnnouceUrl: XLua.DelegateBridge;
      // __Hotfix0_get_serviceLicenseUrl: XLua.DelegateBridge;
      // __Hotfix0_get_isBusy: XLua.DelegateBridge;
      // __Hotfix0_OnDuplicated: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_InitLoginInfo: XLua.DelegateBridge;
      // __Hotfix0_get_uid: XLua.DelegateBridge;
      // __Hotfix0_get_loginInfo: XLua.DelegateBridge;
      // __Hotfix0_get_serviceLicenseVersion: XLua.DelegateBridge;
      // __Hotfix0_SendRequest: XLua.DelegateBridge;
      // __Hotfix0_SendGet: XLua.DelegateBridge;
      // __Hotfix0_SendPost: XLua.DelegateBridge;
      // __Hotfix1_SendPost: XLua.DelegateBridge;
      // __Hotfix0__ParseServiceUrl: XLua.DelegateBridge;
      // __Hotfix0__SendGetCoroutine: XLua.DelegateBridge;
      // __Hotfix0__SendPostCoroutine: XLua.DelegateBridge;
      // __Hotfix0__RequestOnNextFrame: XLua.DelegateBridge;
      // __Hotfix0__HttpGet: XLua.DelegateBridge;
      // __Hotfix0__HttpPost: XLua.DelegateBridge;
      // __Hotfix0__HttpRequest: XLua.DelegateBridge;
      // __Hotfix0__PostImpl: XLua.DelegateBridge;
      // __Hotfix0__CheckNetworkShouldRetry: XLua.DelegateBridge;
      // __Hotfix0__CheckIfRetryWithBestHttp: XLua.DelegateBridge;
      // __Hotfix0__ResetWebResponse: XLua.DelegateBridge;
      // __Hotfix0__PostExtraLargeReqeust: XLua.DelegateBridge;
      // __Hotfix0__CheckIfUseExtraLargeRequest: XLua.DelegateBridge;
      // __Hotfix0__PostWithUnityWebRequest: XLua.DelegateBridge;
      // __Hotfix0__ProcessHttpWebResponse: XLua.DelegateBridge;
      // __Hotfix0__PostWithBestHttp: XLua.DelegateBridge;
      // __Hotfix0__CheckIfRequestDone: XLua.DelegateBridge;
      // __Hotfix0__ProcessPlayerData: XLua.DelegateBridge;
      // __Hotfix1__ProcessHttpWebResponse: XLua.DelegateBridge;
      // __Hotfix0__GenerateRequestHeader: XLua.DelegateBridge;
      // __Hotfix0__DeserializeResponse: XLua.DelegateBridge;
      // __Hotfix0__HandleRequestCanceled: XLua.DelegateBridge;
      // __Hotfix0__HandleResponse: XLua.DelegateBridge;
      // __Hotfix0__HandleResponseError: XLua.DelegateBridge;
      // __Hotfix0__HandleTimeoutError: XLua.DelegateBridge;
      // __Hotfix0__HandleClientInternalError: XLua.DelegateBridge;
      // __Hotfix0__HandleSecureSysError: XLua.DelegateBridge;
      // __Hotfix0__SecureUrl: XLua.DelegateBridge;
      // __Hotfix0__ShouldDoSecureConvert: XLua.DelegateBridge;
    }
    export interface ResponseError {
      statusCode: System.Int32;
      error: System.String;
      message: System.String;
      code: System.Int64;
      level: System.Int32;
      errorStatus: Torappu.Network.ResponseStatus;
    }
    export interface Response<T> {
      status: Torappu.Network.ResponseStatus;
      error: Torappu.Network.ResponseError;
      body: Torappu.Network.RespMsgBundle<T>;
    }
    export interface RequestResult<T> {
      // beforeRequest: System.Func<System.Boolean>;
      // responseCallback: System.Action<Torappu.Network.Response<T>>;
      mockMeta: Torappu.Network.MockMeta;
    }
    export interface Request {
      serviceCode: System.String;
      body: Torappu.Network.IMsgBundle;
      overrideUrl: System.String;
      isRetry: System.Boolean;
      header: System.Collections.Generic.Dictionary<System.String,System.String>;
    }
    export interface MockMeta {
      serviceCase: System.String;
      meta: System.Object;
      DEFAULT: Torappu.Network.MockMeta;
    }
    export interface WebHttpResponse {
      isTimeout: System.Boolean;
      isError: System.Boolean;
      responseCode: System.Int64;
      header: System.Collections.Generic.Dictionary<System.String,System.String>;
      text: System.String;
      data: System.Byte[];
      error: System.String;
    }
    export interface WebHttpResult {
      // m_isCanceled: System.Boolean;
      // response: System.Action<Torappu.Network.WebHttpResponse>;
      // beforeRequest: System.Func<System.String,System.String,System.Boolean>;
      // onCanceled: System.Action;
      forceNotSecured: System.Boolean;
    }
    export interface NetworkOptions {
      serverType: Torappu.Network.NetworkOptions.ServerType;
      routers: System.Collections.Generic.List<Torappu.Network.NetworkOptions.RouteConfig>;
      DEV_SERVER: Torappu.Network.Networker.Configuration;
      STORYTEST_SERVER: Torappu.Network.Networker.Configuration;
      STAGING_SERVER: Torappu.Network.Networker.Configuration;
      BUSINESS_SERVER: Torappu.Network.Networker.Configuration;
      PRODUCTION_SERVER: Torappu.Network.Networker.Configuration;
      DATA_DESIGN: Torappu.Network.Networker.Configuration;
      MOCK_SERVER: Torappu.Network.Networker.Configuration;
    }
    export interface NetworkConfigException {
    }
    export interface NetworkRouter {
      // m_networkConfigVersion: System.String;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_networkConfigVersion: XLua.DelegateBridge;
      // __Hotfix0_ConfirmNetworkConfigVersion: XLua.DelegateBridge;
      // __Hotfix0_FetchConfig: XLua.DelegateBridge;
      // __Hotfix0__GetCurrentConfig: XLua.DelegateBridge;
      // __Hotfix0__SendFetchConfigService: XLua.DelegateBridge;
      // __Hotfix0__DeserializeRouterContent: XLua.DelegateBridge;
    }
    export interface NetworkSecurity {
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_SecureUrl: XLua.DelegateBridge;
      // __Hotfix0_SecureHeader: XLua.DelegateBridge;
      // __Hotfix0__YunCengToken: XLua.DelegateBridge;
    }
    export interface NetworkUtil {
      // s_deviceHash: System.UInt32;
      // __Hotfix0_GetPlatformKey: XLua.DelegateBridge;
      // __Hotfix0_ConvertLatestUrl: XLua.DelegateBridge;
      // __Hotfix0_ConvertUrlByPlatform: XLua.DelegateBridge;
      // __Hotfix0_GetDownloadUrlForCurrentPlatform: XLua.DelegateBridge;
      // __Hotfix0_UpdateServiceLicenseVersionIfNeeded: XLua.DelegateBridge;
      // __Hotfix0_CheckServiceLicenseVersionOutOfDate: XLua.DelegateBridge;
      // __Hotfix0_IsServerBusinessError: XLua.DelegateBridge;
      // __Hotfix0_IsServerAuthTimeout: XLua.DelegateBridge;
    }
    export interface ServiceCode {
      SDK_LOGIN_BY_PWD: System.String;
      SDK_AUTH: System.String;
      SDK_PAY_CREATE_ORDER_APPSTORE: System.String;
      SDK_LEGACY_PAY_CONFIRM_ORDER_APPSTORE: System.String;
      SDK_PAY_CONFIRM_ORDER_APPSTORE: System.String;
      SDK_SEND_SMS_CODE: System.String;
      SDK_USER_REGISTER: System.String;
      SDK_USER_IDENTITY_AUTH: System.String;
      SDK_USER_CHECK_ID_CARD: System.String;
      SDK_GUEST_CAPTCHA: System.String;
      SDK_GUEST_LOGIN: System.String;
      SDK_LOGIN_BY_SMS: System.String;
      SDK_PING: System.String;
      SDK_LOGINOUT: System.String;
      SDK_UPDATE_AGREEMENT: System.String;
      SDK_CHANGE_PWD: System.String;
      SDK_CHANGE_PHONE_CHECK: System.String;
      SDK_CHANGE_PHONE: System.String;
      LOGIN: System.String;
      SYNC_DATA: System.String;
      SYNC_STATUS: System.String;
      CHEAT: System.String;
      VERSION: System.String;
      SQUAD_FORMATION: System.String;
      SQUAD_RENAME: System.String;
      SQUAD_GET_ASSIST_LIST: System.String;
      DEFAULT_BATTLE_START: System.String;
      DEFAULT_BATTLE_FINISH: System.String;
      SAVE_BATTLE_REPLAY: System.String;
      LOAD_BATTLE_REPLAY: System.String;
      FINISH_STORY_STAGE: System.String;
      UNLOCK_STAGE_FOG: System.String;
      GET_SPECIAL_STAGE_REWARD: System.String;
      CAMP_CONFIRM_BREAK_REWARD: System.String;
      CAMP_GET_COMMON_MISSION_REWARD: System.String;
      CAMP_BATTLE_START: System.String;
      CAMP_BATTLE_FINISH: System.String;
      RETRO_UNLOCK: System.String;
      RUNE_BATTLE_START: System.String;
      RUNE_BATTLE_FINISH: System.String;
      SET_DEFAULT_SKILL: System.String;
      UPGRADE_CHAR: System.String;
      EVOLVE_CHAR: System.String;
      LOCK_CHAR: System.String;
      SELL_CHAR: System.String;
      BOOST_POTENTIAL: System.String;
      UPGRADE_SKILL: System.String;
      UPGRADE_SPECIALIZATION: System.String;
      CONFIRM_SPECIALIZATION: System.String;
      CHANGE_SKIN_SELECT: System.String;
      CHANGE_TEMPLATE_SELECT: System.String;
      GET_SP_CHAR_MISSION_REWARD: System.String;
      EVOLVE_CHAR_USE_ITEM: System.String;
      FINISH_STORY: System.String;
      CANCEL_NORMAL_GACHA: System.String;
      REFRESH_TAG_GACHA: System.String;
      SYNC_NORMAL_GACHA: System.String;
      BUY_RECRUIT_SLOT: System.String;
      FINISH_NORMAL_GACHA: System.String;
      NORMAL_GACHA: System.String;
      BOOST_NORMAL_GACHA: System.String;
      GET_POOL_DETAIL: System.String;
      ADVANCED_GACHA: System.String;
      TEN_ADVANCED_GACHA: System.String;
      LIST_MAIL_BOX: System.String;
      RECEIVE_MAIL: System.String;
      MAIL_GET_METAINFO_LIST: System.String;
      RECEIVE_ALL_MAIL: System.String;
      REMOVE_ALL_RECEIVED_MAIL: System.String;
      BIND_NICKNAME: System.String;
      BUY_AP: System.String;
      DIAMOND_EXCHANGE: System.String;
      CHANGE_RESUME: System.String;
      USE_ITEM: System.String;
      USE_ITEMS: System.String;
      USE_RENAME_CARD: System.String;
      GET_VOUCHER_DETAIL: System.String;
      VOUCHER_GACHA: System.String;
      CHAR_GACHA_VOUCHER_DETAIL: System.String;
      ITEM_GACHA_VOUCHER_DETAIL: System.String;
      CHAR_GACHA_VOUCHER: System.String;
      ITEM_GACHA_VOUCHER: System.String;
      ACTIVITY_CHAIN: System.String;
      ACTIVITY_CHECKIN: System.String;
      ACTIVITY_CHAINFINAL: System.String;
      SOCIAL_FRIEND_DELETE: System.String;
      SOCIAL_FRIEND_SEND_REQUEST: System.String;
      SOCIAL_FRIEND_DEAL_REQUEST: System.String;
      SOCIAL_FRIEND_SEARCH_FRIEND: System.String;
      SOCIAL_GET_SORT_FRIEND_INFO: System.String;
      SOCIAL_FRIEND_GET_FRIEND_LIST: System.String;
      SOCIAL_FRIEND_GET_FRIEND_REQUEST_LIST: System.String;
      SOCIAL_FRIEND_SET_ASSIST_CHAR: System.String;
      SOCIAL_FRIEND_SET_FRIEND_ALIAS: System.String;
      SOCIAL_RECIEVE_SOCIRAL_POINT: System.String;
      SET_CARD_SHOW_MEDAL_REQUEST: System.String;
      MEDAL_REWARD_REQUEST: System.String;
      MEDAL_SET_CUSTOM_DATA: System.String;
      CHECKIN_HOME: System.String;
      CHANGE_SECRETARY: System.String;
      RECEIVE_TEAMCOLLECTION_REWARD: System.String;
      UNLOCK_CHAR_WORD_STORY: System.String;
      BATTLE_START_ADDON: System.String;
      BATTLE_FINISH_ADDON: System.String;
      MISSION_EXCHANGEMISSIONREWARDS: System.String;
      MISSION_CONFIRMMISSION: System.String;
      MISSION_CONFIRMMISSIONGROUP: System.String;
      SHOP_GET_FURNITURESHOP_LIST: System.String;
      SHOP_BUY_FURNITURE_ITEM: System.String;
      SHOP_SKIN_LIST: System.String;
      SHOP_CASH_LIST: System.String;
      SHOP_HIGH_QC_LIST: System.String;
      SHOP_LOW_QC_LIST: System.String;
      SHOP_EXTRA_QC_LIST: System.String;
      SHOP_LMTGS_LIST: System.String;
      SHOP_EPGS_LIST: System.String;
      SHOP_REP_LIST: System.String;
      SHOP_GP_LIST: System.String;
      SHOP_SOCIAL_LIST: System.String;
      SHOP_PURCHASE_STATE: System.String;
      SHOP_DECOMPOSE_POTENTIAL: System.String;
      SHOP_BUY_HIGH_GOOD: System.String;
      SHOP_BUY_EXTRA_GOOD: System.String;
      SHOP_BUY_LOW_GOOD: System.String;
      SHOP_BUY_GP_GOOD: System.String;
      SHOP_BUY_SKIN_GOOD: System.String;
      SHOP_FURN_GROUP_GOOD: System.String;
      SHOP_BUY_CASH_GOOD: System.String;
      SHOP_BUY_SOCIAL_GOOD: System.String;
      SHOP_GET_CASH_PURCHASE_RESULT: System.String;
      SHOP_BUY_LMTGS_GOOD: System.String;
      SHOP_BUY_EPGS_GOOD: System.String;
      SHOP_BUY_REP_GOOD: System.String;
      SHOP_GET_VOUCHER_SKIN_GOOD_LIST: System.String;
      SHOP_USE_VOUCHER_SKIN: System.String;
      TEMPLATE_SHOP_GET_GOOD_LIST: System.String;
      TEMPLATE_SHOP_BUY_GOOD: System.String;
      CHANGE_AVATAR: System.String;
      CRISIS_BATTLE_START: System.String;
      CRISIS_BATTLE_FINISH: System.String;
      CRISIS_GET_INFO: System.String;
      CRISIS_GET_SHOP_INFO: System.String;
      CRISIS_BUY_GOODS: System.String;
      CRISIS_CHALLENGE_REWARD_TSK: System.String;
      CRISIS_CHALLENGE_REWARD_LEVEL: System.String;
      CRISIS_CHALLENGE_REWARD_ALL: System.String;
      CRISIS_UNLOCK_MAP_REWARD_ALL: System.String;
      CRISIS_UNLOCK_RUNE: System.String;
      CRISIS_GET_ALL_ITEMS: System.String;
      CHAR_BUILD_INC_INTIMACY: System.String;
      CHAR_BUILD_INC_ASSIST_INTIMACY: System.String;
      CHAR_BUILD_ALL_INTIMACY: System.String;
      SOCIAL_VISIT_BUILDING: System.String;
      BUILDING_UPGRADE_ROOM: System.String;
      BUILDING_UPGRADE_COMPLETE_ROOM: System.String;
      BUILDING_SETTLE_MANUFACT: System.String;
      BUILDING_SYNC: System.String;
      BUILDING_BUILD_ROOM: System.String;
      BUILDING_CLEAN_ROOM_SLOT: System.String;
      BUILDING_VISIT_BUILDING: System.String;
      BUILDING_CHANGE_MANUF_FORMULA: System.String;
      BUILDING_CHANGE_SHOP_FORUMULA: System.String;
      BUILDING_ASSIGN_CHAR: System.String;
      BUILDING_SETTLE_SALE: System.String;
      BUILDING_DEGRADE_ROOM: System.String;
      BUILDING_DEGRADE_DIY_ROOM: System.String;
      BUILDING_CHANGE_DIY_SOLUTION: System.String;
      BUILDING_SAVE_DIY_PRESET_SOLUTION: System.String;
      BUILDING_RENAME_DIY_PRESET_SOLUTION: System.String;
      BUILDING_GET_DIY_PRESET_THUMBNAIL_URL: System.String;
      BUILDING_UPDATE_SKILL: System.String;
      BUILDING_FINISH_UPDATE_SKILL: System.String;
      BUILDING_WORKSHOP_SYNTHESIS: System.String;
      BUILDING_WORKSHOP_FURN_DECOMPOSITE: System.String;
      BUILDING_DELIVERY_ORDER: System.String;
      BUILDING_CHANGE_STRATEGY: System.String;
      BUILDING_DELETE_ORDER: System.String;
      BUILDING_ACCELERATE_ORDER: System.String;
      BUILDING_ACCELERATE_SOLUTION: System.String;
      BUILDING_BUY_LABOR: System.String;
      BUILDING_GET_ASSIST_REPORT: System.String;
      BUILDING_SET_ASSIST: System.String;
      BUILDING_DELETE_OWN_CLUE: System.String;
      BUILDING_DELETE_RECEIVE_CLUE: System.String;
      BUILDING_PUT_CLUE_TO_THE_BOARD: System.String;
      BUILDING_SEND_CLUE: System.String;
      BUILDING_GET_MEETING_ROOM_REWARD: System.String;
      BUILDING_GET_CLUE_BOX: System.String;
      BUILDING_RECEIVE_CLUE_TO_STOCK: System.String;
      BUILDING_START_INFO_SHARE: System.String;
      BUILDING_TAKE_CLUE_FROM_BOARD: System.String;
      BUILDING_GET_INFO_SHARE_VISITOR_NUM: System.String;
      BUILDING_RECEIVE_INFO_SHARE_REWARD: System.String;
      BUILDING_GET_RECENT_VISITOR: System.String;
      BUILDING_GET_DAILY_CLUE: System.String;
      BUILDING_BATCH_DELIVERY: System.String;
      STORY_REVIEW_UNLOCK: System.String;
      STORY_REVIEW_READ: System.String;
      STORY_REVIEW_GET_REWARDS: System.String;
      MARK_STORY_ACCE_KNOWN: System.String;
      ROGUELIKE_SELECT_INITIAL_RELIC: System.String;
      ROGUELIKE_SELECT_INITIAL_CHOICE: System.String;
      ROGUELIKE_SELECT_INITIAL_RECRUIT: System.String;
      ROGUELIKE_MOVE_TO: System.String;
      ROGUELIKE_FINISH_NODE: System.String;
      ROGUELIKE_BUY_GOODS: System.String;
      ROGUELIKE_SELECT_REWARD: System.String;
      ROGUELIKE_SELECT_CHOICE: System.String;
      ROGUELIKE_ACTIVATE_TICKET: System.String;
      ROGUELIKE_RECRUIT_CHAR: System.String;
      ROGUELIKE_UPGRADE_CHAR: System.String;
      ROGUELIKE_BATTLE_START: System.String;
      ROGUELIKE_BATTLE_FINISH: System.String;
      PAY_CREATE_ORDER: System.String;
      PAY_CONFIRM_ORDER: System.String;
      PAY_GET_UNCONFIRMED_ORDER_LIST: System.String;
    }
    export interface NetworkRouterConfig {
      sign: System.String;
      content: System.String;
    }
    export interface UrlOptionalAttribute {
    }
    export interface UrlConfiguration {
      gameServerUrl: System.String;
      sdkServerUrl: System.String;
      u8ServerUrl: System.String;
      hotUpdateUrl: System.String;
      versionUrl: System.String;
      configUrl: System.String;
      announceUrl: System.String;
      preAnnounceUrl: System.String;
      serviceLicenseUrl: System.String;
      officialUrl: System.String;
      packageDownloadUrlAndroid: System.String;
      packageDownloadUrlIOS: System.String;
      enableSecure: System.Boolean;
    }
    export namespace DownloadFileTask {
      export interface Options {
        // m_allowResume: System.Boolean;
        // m_totalSize: System.Int64;
        url: System.String;
        cachedFilePath: System.String;
        connectionTimeout: System.Int32;
      }
    }
    export namespace FileDownloader {
      export enum DownloadState {
        CONNECTING = "CONNECTING",
        DOWNLOADING = "DOWNLOADING",
        RENAMING = "RENAMING",
        COMPLETE = "COMPLETE",
        ERROR = "ERROR",
      }
      export interface DownloadProcHandler {
        // m_isContinue: System.Boolean;
        // <downloadSize>k__BackingField: System.Int64;
        state: Torappu.Network.FileDownloader.DownloadState;
      }
      export interface DownloadTaskInput {
        downloadHandler: Torappu.Network.FileDownloader.DownloadProcHandler;
        options: Torappu.Network.FileDownloader.Options;
      }
      export interface IDownloadMessage {
      }
      export enum DownloadMsgType {
        SIZE = "SIZE",
        FINISH = "FINISH",
      }
      export interface DownloadSizeMessage {
        index: System.Int32;
        downloadSize: System.Int64;
      }
      export interface DownloadFinishMessage {
        index: System.Int32;
        options: Torappu.Network.FileDownloader.Options;
        isSucceed: System.Boolean;
      }
      export interface Options {
        index: System.Int32;
        targetPath: System.String;
        url: System.String;
        allowResume: System.Boolean;
        totalSize: System.Int64;
        messageFlags: System.Int32;
        messageQueue: System.Collections.Generic.Queue<Torappu.Network.FileDownloader.IDownloadMessage>;
      }
    }
    export namespace Networker {
      export interface Configuration {
        EMPTY: Torappu.Network.Networker.Configuration;
        gameServerUrl: System.String;
        sdkServerUrl: System.String;
        u8ServerUrl: System.String;
        hotUpdateUrl: System.String;
        htUdtVerUrl: System.String;
        remoteConfigUrl: System.String;
        announceUrl: System.String;
        preAnnounceUrl: System.String;
        serviceLicenseUrl: System.String;
        officialUrl: System.String;
        packageDownloadUrlAndroid: System.String;
        packageDownloadUrlIOS: System.String;
        enableSecure: System.Boolean;
      }
      export interface LoginInfo {
        uid: System.String;
        secret: System.String;
        serviceLicenseVersion: System.Int32;
      }
      export enum PlayerDataOpt {
        NONE = "NONE",
        INIT = "INIT",
        MODIFY = "MODIFY",
      }
      export interface ResponseDeserializeResult<ResType> {
        playerDataOpt: Torappu.Network.Networker.PlayerDataOpt;
        body: Torappu.Network.RespMsgBundle<ResType>;
        playerData: Torappu.PlayerDataModel;
        rawPlayerData: Newtonsoft.Json.Linq.JObject;
      }
    }
    export namespace NetworkOptions {
      export enum ServerType {
        DEV = "DEV",
        STAGING = "STAGING",
        BUSINESS = "BUSINESS",
        PRODUCTION = "PRODUCTION",
        STORY_TEST = "STORY_TEST",
        DATA_DESIGN = "DATA_DESIGN",
        MOCK_SERVER = "MOCK_SERVER",
      }
      export interface RouteConfig {
        serverType: Torappu.Network.NetworkOptions.ServerType;
        enable: System.Boolean;
        url: System.String;
      }
    }
    export namespace NetworkRouter {
      export interface ConfigHandler {
        // <serviceHandler>k__BackingField: Torappu.Network.WebHttpResult;
        // onSuc: System.Action<Torappu.Network.NetworkRouterConfig.Content,Torappu.Network.NetworkRouterConfig.Config>;
        // onError: System.Action<System.String>;
        // onClientOutOfDate: System.Action<Torappu.Network.NetworkRouterConfig.Content>;
      }
    }
    export namespace NetworkRouterConfig {
      export interface Content {
        configVer: System.String;
        funcVer: System.String;
        configs: System.Collections.Generic.Dictionary<System.String,Torappu.Network.NetworkRouterConfig.Config>;
      }
      export interface Config {
        useOverride: System.Boolean;
        network: Torappu.Network.UrlConfiguration;
      }
    }
  }
  export namespace Optimize {
    export interface Consts {
      ALPHA_SUFFIX_NO_EXTENSION: System.String;
      ALPHA_SUFFIX_WITH_EXTENSION: System.String;
      PLATFORM_ANDROID: System.String;
      PLATFORM_IOS: System.String;
      PLATFORM_STANDALONE: System.String;
      CHARACTER_ILLUSTRATION_PREFIX: System.String;
    }
  }
  export namespace Resource {
    export interface AssetBundleMigrate {
      // m_shouldMigrate: System.Collections.Generic.List<System.String>;
      // m_prgcb: System.Action<System.Int64,System.Int64>;
      // m_compltecb: System.Action;
    }
    export interface AssetBundleEliminate {
      AB_MATCH: RegExp;
      ASSETS_MATCH: RegExp;
      // ASSET_MATCH_FUNCS: System.Func<System.String,System.Boolean>[];
      // <>f__mg$cache0: System.Func<System.String,System.Boolean>;
    }
    export interface MusicBundleEliminate {
      MUSIC_MATCH: RegExp;
      WHITE_LIST: System.Collections.Generic.HashSet<System.String>;
    }
    export interface ConsistencyChecker {
      VITAL_FILES: RegExp;
    }
    export interface ExpiredPersistentRes {
      crossThisBundleVersionToExpire: System.String;
      resRegex: System.String;
    }
    export interface HotUpdateMgr {
      // m_typeInfos: System.Collections.Generic.Dictionary<System.String,System.String>;
      // m_status: System.Collections.Generic.Dictionary<System.String,System.Boolean>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_CheckUpdate: XLua.DelegateBridge;
      // __Hotfix0_CheckUpdateByABName: XLua.DelegateBridge;
      // __Hotfix0_SetUpdate: XLua.DelegateBridge;
      // __Hotfix0_SetUpdateList: XLua.DelegateBridge;
      // __Hotfix0_CheckType: XLua.DelegateBridge;
      // __Hotfix0__Init: XLua.DelegateBridge;
      // __Hotfix0__CheckUpdate: XLua.DelegateBridge;
      // __Hotfix0__SetUpdate: XLua.DelegateBridge;
      // __Hotfix0__SetUpdateList: XLua.DelegateBridge;
      // __Hotfix0__CheckType: XLua.DelegateBridge;
    }
    export interface HotUpdateInfo {
      fullPack: Torappu.Resource.HotUpdateInfo.ABInfo;
      versionId: System.String;
      abInfos: System.Collections.Generic.List<Torappu.Resource.HotUpdateInfo.ABInfo>;
      countOfTypedRes: System.Int32;
    }
    export interface PersistentResInfo {
      abInfos: System.Collections.Generic.List<Torappu.Resource.HotUpdateInfo.ABInfo>;
    }
    export interface HotUpdater {
      PERCENT_THRESHOLD_TO_DOWNLOAD_FULL_PACK: System.Single;
      MIN_BYTES_SIZE_TO_NOTIFY_IF_NOT_WIFI: System.Single;
      GENERATED_VERSION_INFO_FILE_NAME: System.String;
      MIN_DELTA_OF_TRIVIAL_ERROR: System.Single;
      // m_options: Torappu.Resource.HotUpdater.Options;
      // m_allowDownloadCache: Torappu.Resource.HotUpdater.CarrierDownloadCache;
      // m_updateState: Torappu.Resource.HotUpdater.UpdateState;
      // m_downloader: Torappu.Network.FileDownloader;
      // m_unzipThread: Torappu.Resource.HotUpdater.UnzipTaskThread;
      // m_persistResRecover: Torappu.Resource.PersistentResRecover;
      // m_updateInfoQueue: System.Collections.Generic.Queue<Torappu.Network.FileDownloader.IDownloadMessage>;
      // m_resourceQueue: System.Collections.Generic.Queue<Torappu.Network.FileDownloader.IDownloadMessage>;
      // m_newUpdateInfoCache: Torappu.Resource.HotUpdateInfo;
      // m_onNewUpdateInfoAchieved: System.Action<Torappu.Resource.HotUpdateInfo>;
      // m_downloadResList: System.Collections.Generic.List<Torappu.Resource.HotUpdater.ABDownloadInfo>;
      // m_updateResList: System.Collections.Generic.List<Torappu.Resource.HotUpdateInfo.ABInfo>;
      // m_removeResList: System.Collections.Generic.List<Torappu.Resource.HotUpdateInfo.ABInfo>;
      // m_countOfTypedResInUpdateList: System.Int32;
      // m_curResSize: System.Int64;
      // m_totalResSize: System.Int64;
      // m_totalDownloadSize: System.Int64;
      // m_downloadFinishCount: System.Int32;
      // m_startTime: System.Single;
      _hotupdatePrefPanel: Torappu.Resource.UIHotUpdatePreferencePanel;
      // <auditResVersion>k__BackingField: System.String;
      // <>f__am$cache0: System.Action;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Start: XLua.DelegateBridge;
      // __Hotfix0_OnDestroy: XLua.DelegateBridge;
      // __Hotfix0_GenerateVersionInfoFile: XLua.DelegateBridge;
      // __Hotfix0_GenerateZipNameFromAssetOrBundleName: XLua.DelegateBridge;
      // __Hotfix0_DeletePersistentRes: XLua.DelegateBridge;
      // __Hotfix0_MarkUpdateResInvalid: XLua.DelegateBridge;
      // __Hotfix0_MarkPersistResInfoInvalid: XLua.DelegateBridge;
      // __Hotfix0_InterruptDownload: XLua.DelegateBridge;
      // __Hotfix0_LoadLocalUpdateInfo: XLua.DelegateBridge;
      // __Hotfix0_LoadLocalPersistentResInfo: XLua.DelegateBridge;
      // __Hotfix0_MarkUpdateResInvalidNoThrow: XLua.DelegateBridge;
      // __Hotfix0_get_auditResVersion: XLua.DelegateBridge;
      // __Hotfix0_set_auditResVersion: XLua.DelegateBridge;
      // __Hotfix0_GetResVersionId: XLua.DelegateBridge;
      // __Hotfix0_get_updateState: XLua.DelegateBridge;
      // __Hotfix0_set_updateState: XLua.DelegateBridge;
      // __Hotfix0_StartHotUpdate: XLua.DelegateBridge;
      // __Hotfix0_UpdateTime: XLua.DelegateBridge;
      // __Hotfix0_CanInterrupt: XLua.DelegateBridge;
      // __Hotfix0_CheckResHasUpdated: XLua.DelegateBridge;
      // __Hotfix0__OnUpdateInfoDownloaded: XLua.DelegateBridge;
      // __Hotfix0__OnNewUpdateInfoAchieved: XLua.DelegateBridge;
      // __Hotfix0__OnNewUpdateInfoAchievedWithPref: XLua.DelegateBridge;
      // __Hotfix0__OnPreferenceStepFinished: XLua.DelegateBridge;
      // __Hotfix0__OnABDownloadSizeChange: XLua.DelegateBridge;
      // __Hotfix0__OnABDownloadFinish: XLua.DelegateBridge;
      // __Hotfix0__OnAllResourceDownloadFinish: XLua.DelegateBridge;
      // __Hotfix0__OnConfirmError: XLua.DelegateBridge;
      // __Hotfix0__OnTrivialError: XLua.DelegateBridge;
      // __Hotfix0__GenVersionFileUrl: XLua.DelegateBridge;
      // __Hotfix0__GenAssetsFolderUrl: XLua.DelegateBridge;
      // __Hotfix0__GenUpdateInfoUrl: XLua.DelegateBridge;
      // __Hotfix0__GenUpdateInfoPath: XLua.DelegateBridge;
      // __Hotfix0__GenUpdateInfoCachePath: XLua.DelegateBridge;
      // __Hotfix0_GetPersistentResInfoPath: XLua.DelegateBridge;
      // __Hotfix0__GenPersistentResInfoCachedPath: XLua.DelegateBridge;
      // __Hotfix0__GenResZipUrl: XLua.DelegateBridge;
      // __Hotfix0__LoadUpdateInfoFromFile: XLua.DelegateBridge;
      // __Hotfix0__LoadPersistentResInfoFromFile: XLua.DelegateBridge;
      // __Hotfix0__CancelResourceUpdate: XLua.DelegateBridge;
      // __Hotfix0__CancelResourceUpdateAsync: XLua.DelegateBridge;
      // __Hotfix0__ClearWhenCancelResourceUpdate: XLua.DelegateBridge;
      // __Hotfix0__FinishResourceUpdate: XLua.DelegateBridge;
      // __Hotfix0__DeleteLocalPersistentResInfoNoThrow: XLua.DelegateBridge;
      // __Hotfix0__DeleteUnusedFiles: XLua.DelegateBridge;
      // __Hotfix0__CalcUpdateResList: XLua.DelegateBridge;
      // __Hotfix0__CalcUpdateResParams: XLua.DelegateBridge;
      // __Hotfix0__NeedToDownloadEntirePack: XLua.DelegateBridge;
      // __Hotfix0__NeedToShowPreferencePanel: XLua.DelegateBridge;
      // __Hotfix0__AddFullPackDownloadInfo: XLua.DelegateBridge;
      // __Hotfix0__AddResListDownloadInfo: XLua.DelegateBridge;
      // __Hotfix0__CalcResListDownloadSize: XLua.DelegateBridge;
      // __Hotfix0__CheckAllowToDownload: XLua.DelegateBridge;
      // __Hotfix0__ValidateClientVersion: XLua.DelegateBridge;
      // __Hotfix0__CalcAndStoreNewPersistentResInfoToCacheFolder: XLua.DelegateBridge;
      // __Hotfix0__SetUnzipProgress: XLua.DelegateBridge;
      // __Hotfix0__QuitGame: XLua.DelegateBridge;
      // __Hotfix0__CheckIfToRecoverPersistResInfo: XLua.DelegateBridge;
      // __Hotfix0__RecoverPersistInfoIfNecessary: XLua.DelegateBridge;
      // __Hotfix0__RecoverPersistResInfoImpl: XLua.DelegateBridge;
      // __Hotfix0__FetchVersion: XLua.DelegateBridge;
      // __Hotfix0__UpdateWithVersion: XLua.DelegateBridge;
      // __Hotfix0__UpdateHotUpdateInfo: XLua.DelegateBridge;
      // __Hotfix0_TryUpgradeGameVersion: XLua.DelegateBridge;
      // __Hotfix0__OverrideGameUpgrading: XLua.DelegateBridge;
    }
    export interface PersistentResRecover {
      // m_localResFolder: System.String;
      // m_status: Torappu.Resource.PersistentResRecover.Status;
      // m_lock: System.Object;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_isCancelled: XLua.DelegateBridge;
      // __Hotfix0_Cancel: XLua.DelegateBridge;
      // __Hotfix0_get_progress: XLua.DelegateBridge;
      // __Hotfix0_set_progress: XLua.DelegateBridge;
      // __Hotfix0_get_currentTask: XLua.DelegateBridge;
      // __Hotfix0_StartTaskCoroutine: XLua.DelegateBridge;
      // __Hotfix0__StartNewTask: XLua.DelegateBridge;
      // __Hotfix0__FuncWorker: XLua.DelegateBridge;
      // __Hotfix0__CheckIfLocalABValid: XLua.DelegateBridge;
      // __Hotfix0__CheckIfLocalABExists: XLua.DelegateBridge;
    }
    export interface AbstractAssetLoader {
    }
    export interface AssetLoaderBehaviour {
      // m_cached: System.Boolean;
      // m_assetLoader: Torappu.Resource.AbstractAssetLoader;
    }
    export interface CachedAssetLoader {
      // m_cachedAssets: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.HashSet<UnityEngine.Object>>;
      // m_instanceIdToName: System.Collections.Generic.Dictionary<System.Int32,System.String>;
    }
    export interface DirectAssetLoader {
      // m_instanceIds: System.Collections.Generic.List<System.Int32>;
    }
    export interface AsyncResource {
      // m_onLoaded: System.Action<UnityEngine.Object>;
      // m_asset: UnityEngine.Object;
      // m_resRequest: UnityEngine.ResourceRequest;
      // m_abRequest: UnityEngine.AssetBundleRequest;
      // m_isLoaded: System.Boolean;
    }
    export interface AsyncComponent<TComp> {
    }
    export interface IResourceManager {
    }
    export interface RawResManager {
      ROOT_DIR_PATH: System.String;
      AB_DIR_NAME: System.String;
      TAG_FILE_NAME: System.String;
    }
    export interface IResourceListener {
    }
    export interface ResourceManager {
      // s_instance: Torappu.Resource.IResourceManager;
    }
    export interface ResourceConsts {
      AB_BUILD_PATH: System.String;
      HOT_UPDATE_ZIP_PATH: System.String;
      GAMEDATA_BUILD_PATH: System.String;
      AB_MANIFEST_ASSET_NAME: System.String;
      PREFIX_SPRITE_PACK: System.String;
      PREFIX_RES_CACHE: System.String;
      TAG_PUSHDOWN_SUB_FOLDER: System.String;
      TAG_SOLO_PACKED: System.String;
      TAG_PACKED_AND_UNCACHEABLE: System.String;
      TAG_IGNORE: System.String;
      TAG_DEV: System.String;
      TAG_DEPRECATED: System.String;
      SUFFIX_ALPHA_TEXTURE: System.String;
      SUFFIX_INDEX: System.String;
      MULTI_SPRITES_SEPARATOR: System.Char;
      HOT_UPDATE_INDEX_FILE: System.String;
      PERSISTENT_RES_INFO_FILE: System.String;
      SUFFIX_REMOTE_CONFIG_FILE: System.String;
      SUFFIX_HOTUPDATE_VERSION_FILE: System.String;
      SUFFIX_HOTUPDATE_ASSETS_FOLDER: System.String;
      IGNORED_EXTENSIONS: System.String[];
      SOLO_EXTENSIONS: System.String[];
      PLATFORM_KEY_ANDROID: System.String;
      PLATFORM_KEY_IOS: System.String;
      PLATFORM_KEY_WINDOWS: System.String;
      PLATFORM_KEY_OSX: System.String;
      ASSETBUNDLE_PACKER: System.String;
      SPRITES_DEFAULT_MATERIAL_IN_RESOURCES: System.String;
      BUFF_TEMPLATE_HOLDER_PATH: System.String;
      TNODE_BUFF_TEMPLATE_HOLDER_PATH: System.String;
    }
    export interface ResourceIndex {
      versionId: System.String;
      indexBundle: System.String;
      manifestBundle: System.String;
      rawCount: System.Int32;
      bundles: System.Collections.Generic.List<Torappu.Resource.ResourceIndex.BundleMeta>;
      assetToBundleList: System.Collections.Generic.List<Torappu.Resource.ResourceIndex.AssetToBundleMeta>;
    }
    export interface ResourceOptions {
      _mode: Torappu.Resource.ResourceOptions.Mode;
      _resourcePath: System.String;
      _initialAssetsPath: System.String;
      _abPath: System.String;
      _gameDataPath: System.String;
      _rootName: System.String;
      _restoreAssetBundleNames: System.Boolean;
      _cachedAssetsInResourceManager: System.Boolean;
      _deleteResourceIndexAfterPacking: System.Boolean;
    }
    export interface ResourceUtil {
      bundleExtensions: System.String[];
    }
    export interface ResPreferenceController {
      TYPE_VOICE: System.String;
      TYPE_VIDEO: System.String;
      TYPE_DYN_ILLUST: System.String;
      TYPE_LIST: System.Collections.Generic.List<System.String>;
      TYPE_NAME_DIC: System.Collections.Generic.Dictionary<System.String,System.String>;
      // s_sharedTypeList: System.Collections.Generic.List<System.String>;
      // s_sharedStoryList: System.Collections.Generic.List<Torappu.StoryData>;
      // s_alertPref: Torappu.Resource.ResPreferenceController.ResUpdateAlertPref;
      // __Hotfix0_CheckUpdate: XLua.DelegateBridge;
      // __Hotfix0_TryToSetUpdateEnable: XLua.DelegateBridge;
      // __Hotfix0_SetUpdateListEnable: XLua.DelegateBridge;
      // __Hotfix0_HaveShowPrefDialog: XLua.DelegateBridge;
      // __Hotfix0_IsFullHotupdatePreference: XLua.DelegateBridge;
      // __Hotfix0_IsTypeVersionUpgraded: XLua.DelegateBridge;
      // __Hotfix0_MarkHotupdatePreference: XLua.DelegateBridge;
      // __Hotfix0_StartHotUpdate: XLua.DelegateBridge;
      // __Hotfix0_CheckIfResReadyForStartStage: XLua.DelegateBridge;
      // __Hotfix0_CheckIfResReadyForStartStory: XLua.DelegateBridge;
      // __Hotfix0_CheckIfResReadyForVoice: XLua.DelegateBridge;
      // __Hotfix0__TryShowResUpdateAlert: XLua.DelegateBridge;
      // __Hotfix0__CheckIfShowResAlert: XLua.DelegateBridge;
      // __Hotfix0__CheckNeedResAlert: XLua.DelegateBridge;
      // __Hotfix0__ConfirmTypesAlertInfo: XLua.DelegateBridge;
      // __Hotfix0__GenerateTypeVersion: XLua.DelegateBridge;
      // __Hotfix0__GenerateTypeNameStr: XLua.DelegateBridge;
      // __Hotfix0__GetHotupdatePreference: XLua.DelegateBridge;
      // __Hotfix0__SetHotupdatePreference: XLua.DelegateBridge;
    }
    export interface UIHotUpdatePreferencePanel {
      // _fadeFloatPanel: Torappu.UI.UIFadeFloatPanel;
      // _fullToggle: Torappu.UI.TwoStateToggle;
      // _fullUnselectLabel: UnityEngine.UI.Text;
      // _fullSelectLabel: UnityEngine.UI.Text;
      // _baseToggle: Torappu.UI.TwoStateToggle;
      // _baseUnselectLabel: UnityEngine.UI.Text;
      // _baseSelectLabel: UnityEngine.UI.Text;
      // m_options: Torappu.Resource.UIHotUpdatePreferencePanel.Options;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Show: XLua.DelegateBridge;
      // __Hotfix0_OnFullToggleClick: XLua.DelegateBridge;
      // __Hotfix0_OnBaseToggleClick: XLua.DelegateBridge;
      // __Hotfix0_OnQuitBtnClick: XLua.DelegateBridge;
      // __Hotfix0_OnConfirmBtnClick: XLua.DelegateBridge;
    }
    export namespace AssetBundleMigrate {
    }
    export namespace ExpiredPersistentRes {
    }
    export namespace HotUpdateInfo {
      export interface ABInfo {
        EMPTY: Torappu.Resource.HotUpdateInfo.ABInfo;
        name: System.String;
        hash: System.String;
        md5: System.String;
        totalSize: System.Int64;
        abSize: System.Int64;
        type: System.String;
      }
    }
    export namespace HotUpdater {
      export interface ABDownloadInfo {
        downloadSize: System.Int64;
        resFileName: System.String;
        abInfo: Torappu.Resource.HotUpdateInfo.ABInfo;
      }
      export enum UpdateState {
        NONE = "NONE",
        VERSION = "VERSION",
        DOWNLOAD_INFO = "DOWNLOAD_INFO",
        DOWNLOAD_UPZIP_RES = "DOWNLOAD_UPZIP_RES",
        UNZIPPING_RES = "UNZIPPING_RES",
        COMPLETE = "COMPLETE",
        ERROR = "ERROR",
        TRIVIAL_ERROR = "TRIVIAL_ERROR",
        INTERRUPTED = "INTERRUPTED",
        CHECK_CONSISTENCY = "CHECK_CONSISTENCY",
        RECOVER_PERSIST_INFO = "RECOVER_PERSIST_INFO",
      }
      export interface Options {
        // onStateChange: System.Action<Torappu.Resource.HotUpdater.UpdateState,Torappu.Resource.HotUpdater.UpdateState>;
        // onDownloadProgress: System.Action<System.Int64,System.Int64>;
        // onUnzipProgress: System.Action<System.Single>;
        // onCheckConsistencyFailed: System.Action<System.Int32>;
        // onRecoverPersistInfoProgress: System.Action<System.Int32,System.Int32>;
      }
      export interface VersionInfo {
        resVersion: System.String;
        clientVersion: System.String;
      }
      export interface CarrierDownloadCache {
        EMPTY: Torappu.Resource.HotUpdater.CarrierDownloadCache;
        size: System.Int64;
        isAllowed: System.Boolean;
      }
      export interface UnzipTaskThread {
        // m_pendingTasks: Torappu.ThreadSafeQueue<System.Collections.Generic.KeyValuePair<System.String,System.String>>;
        // m_workThread: System.Threading.Thread;
        // m_isError: System.Boolean;
        // m_isDisposed: System.Boolean;
        // m_context: Torappu.ZipUtils.UnzipThreadContext;
        // m_totalTaskCnt: System.Int32;
        // m_completeTaskCnt: System.Int32;
      }
      export enum UpdatePreferenceType {
        BASE = "BASE",
        FULL = "FULL",
      }
      export interface CalcResult {
        updateResList: System.Collections.Generic.List<Torappu.Resource.HotUpdateInfo.ABInfo>;
        typedUpdateResList: System.Collections.Generic.List<Torappu.Resource.HotUpdateInfo.ABInfo>;
        extraResList: System.Collections.Generic.List<Torappu.Resource.HotUpdateInfo.ABInfo>;
        removeResList: System.Collections.Generic.List<Torappu.Resource.HotUpdateInfo.ABInfo>;
        extraTypeHashSet: System.Collections.Generic.HashSet<System.String>;
        countOfTypedResInUpdateList: System.Int32;
        needToDownloadEntirePack: System.Boolean;
        baseDownloadSize: System.Int64;
        extraDownloadSize: System.Int64;
      }
    }
    export namespace PersistentResRecover {
      export interface Status {
        isCancelled: System.Boolean;
        // asyncTask: Torappu.WaitForAsyncTask<Torappu.Resource.PersistentResInfo>;
        prgCurrent: System.Int32;
        prgTotal: System.Int32;
      }
      export interface Options {
        // onComplete: System.Action;
        // onProgress: System.Action<System.Int32,System.Int32>;
      }
    }
    export namespace AbstractAssetLoader {
    }
    export namespace AB {
      export interface ABResourceManager {
        // m_inited: System.Boolean;
        // m_assetNameToBundleInfoMap: System.Collections.Generic.Dictionary<System.String,Torappu.Resource.AB.ABResourceManager.BundleInfo>;
        // m_loadedAssetInstanceIdMap: System.Collections.Generic.Dictionary<System.Int32,Torappu.Resource.AB.ABResourceManager.LoadedAssetEntry>;
        // m_manager: Torappu.Resource.AB.ABResourceManager.BundleManager;
        // m_listeners: Torappu.ListSet<Torappu.Resource.IResourceListener>;
        // m_unfinishedAsyncResources: System.Collections.Generic.HashSet<Torappu.Resource.AsyncResource>;
        // m_tempAsyncResList: System.Collections.Generic.List<Torappu.Resource.AsyncResource>;
        // m_resLangFolder: System.String;
        // m_commonLangFolder: System.String;
        // <options>k__BackingField: Torappu.Resource.ResourceOptions;
        // <index>k__BackingField: Torappu.Resource.ResourceIndex;
        // <manifest>k__BackingField: UnityEngine.AssetBundleManifest;
        // <router>k__BackingField: Torappu.Resource.AB.BundleRouter;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_inited: XLua.DelegateBridge;
        // __Hotfix0_get_loadedBundleCnt: XLua.DelegateBridge;
        // __Hotfix0_get_loadedAssetCnt: XLua.DelegateBridge;
        // __Hotfix0_get_allAssets: XLua.DelegateBridge;
        // __Hotfix0_get_loadedBundles: XLua.DelegateBridge;
        // __Hotfix0_get_loadedBundleNames: XLua.DelegateBridge;
        // __Hotfix0_get_options: XLua.DelegateBridge;
        // __Hotfix0_set_options: XLua.DelegateBridge;
        // __Hotfix0_get_index: XLua.DelegateBridge;
        // __Hotfix0_set_index: XLua.DelegateBridge;
        // __Hotfix0_get_manifest: XLua.DelegateBridge;
        // __Hotfix0_set_manifest: XLua.DelegateBridge;
        // __Hotfix0_get_router: XLua.DelegateBridge;
        // __Hotfix0_set_router: XLua.DelegateBridge;
        // __Hotfix0_InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_ForceReInit: XLua.DelegateBridge;
        // __Hotfix0_GetDebugStr: XLua.DelegateBridge;
        // __Hotfix0_LoadStreamingIndex: XLua.DelegateBridge;
        // __Hotfix0_FetchLoadedAssets: XLua.DelegateBridge;
        // __Hotfix0_Load: XLua.DelegateBridge;
        // __Hotfix1_Load: XLua.DelegateBridge;
        // __Hotfix0_LoadAsync: XLua.DelegateBridge;
        // __Hotfix1_LoadAsync: XLua.DelegateBridge;
        // __Hotfix2_LoadAsync: XLua.DelegateBridge;
        // __Hotfix3_LoadAsync: XLua.DelegateBridge;
        // __Hotfix0_LoadAll: XLua.DelegateBridge;
        // __Hotfix1_LoadAll: XLua.DelegateBridge;
        // __Hotfix0_TryLoad: XLua.DelegateBridge;
        // __Hotfix1_TryLoad: XLua.DelegateBridge;
        // __Hotfix0_UnloadAsset: XLua.DelegateBridge;
        // __Hotfix0_UnloadAssetByInstanceId: XLua.DelegateBridge;
        // __Hotfix0_CheckExists: XLua.DelegateBridge;
        // __Hotfix0_LoadSceneAsync: XLua.DelegateBridge;
        // __Hotfix0_LoadScene: XLua.DelegateBridge;
        // __Hotfix0_UnloadScene: XLua.DelegateBridge;
        // __Hotfix0_UnloadUnusedAssets: XLua.DelegateBridge;
        // __Hotfix0_UnloadAllAssets: XLua.DelegateBridge;
        // __Hotfix0_UnloadAllAssetsExcept: XLua.DelegateBridge;
        // __Hotfix0_RegisterListener: XLua.DelegateBridge;
        // __Hotfix0_UnregisterListener: XLua.DelegateBridge;
        // __Hotfix0__LoadAsync: XLua.DelegateBridge;
        // __Hotfix1__LoadAsync: XLua.DelegateBridge;
        // __Hotfix0__WaitForUnfinishedAsyncResources: XLua.DelegateBridge;
        // __Hotfix0__HandleAsyncResource: XLua.DelegateBridge;
        // __Hotfix0__OnAssetLoaded: XLua.DelegateBridge;
        // __Hotfix0__DoInitIfNot: XLua.DelegateBridge;
        // __Hotfix0__InitResLangFolder: XLua.DelegateBridge;
        // __Hotfix0__InitIndexAndManifest: XLua.DelegateBridge;
        // __Hotfix0__InitBundleManager: XLua.DelegateBridge;
        // __Hotfix0_UnloadABAsset: XLua.DelegateBridge;
        // __Hotfix0__PreprocessAssetPath: XLua.DelegateBridge;
        // __Hotfix0__LogWhenLoadBundleFailed: XLua.DelegateBridge;
        // __Hotfix0__IsAuditMode: XLua.DelegateBridge;
      }
      export interface BundleHolder {
        // m_cachedAssets: UnityEngine.Object[];
        // m_cachedAssetsWithSubAssets: UnityEngine.Object[][];
        // <ab>k__BackingField: UnityEngine.AssetBundle;
        // <info>k__BackingField: Torappu.Resource.AB.ABResourceManager.BundleInfo;
        // <isSceneBundle>k__BackingField: System.Boolean;
        // <isDestroyed>k__BackingField: System.Boolean;
      }
      export interface BundleRef {
        // m_outerSCCBundleRef: System.Int32;
        // m_innerSCCBundleRef: System.Int32;
        // m_assetRef: System.Int32;
      }
      export interface BundleRouter {
        // <streamingResPath>k__BackingField: System.String;
        // <persistentResPath>k__BackingField: System.String;
        // <mode>k__BackingField: Torappu.Resource.ResourceOptions.Mode;
        // m_persistResSet: System.Collections.Generic.HashSet<System.String>;
      }
      export namespace ABResourceManager {
        export interface BundleInfo {
          name: System.String;
          isCacheable: System.Boolean;
          sccIndex: System.Int32;
        }
        export interface LoadedAssetEntry {
          path: System.String;
          refCnt: System.Int32;
        }
        export interface BundleManager {
          // s_tempBundleList: System.Collections.Generic.List<Torappu.Resource.AB.BundleHolder>;
          // m_resManager: Torappu.Resource.AB.ABResourceManager;
          // m_bundleNameToBundleInfoMap: System.Collections.Generic.Dictionary<System.String,Torappu.Resource.AB.ABResourceManager.BundleInfo>;
          // m_activeBundlesMap: System.Collections.Generic.Dictionary<System.String,Torappu.Resource.AB.BundleHolder>;
          // m_activeBundleSCCGroups: System.Collections.Generic.List<Torappu.Resource.AB.BundleHolder>[];
        }
      }
    }
    export namespace Local {
      export interface LocalResourceManager {
        // m_loadedAssets: System.Collections.Generic.Dictionary<System.Int32,System.String>;
        // m_listeners: Torappu.ListSet<Torappu.Resource.IResourceListener>;
        // m_resLangFolder: System.String;
        // m_commonLangFolder: System.String;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_inited: XLua.DelegateBridge;
        // __Hotfix0_get_loadedAssetCnt: XLua.DelegateBridge;
        // __Hotfix0_InitIfNot: XLua.DelegateBridge;
        // __Hotfix0_ForceReInit: XLua.DelegateBridge;
        // __Hotfix0_GetDebugStr: XLua.DelegateBridge;
        // __Hotfix0_Load: XLua.DelegateBridge;
        // __Hotfix1_Load: XLua.DelegateBridge;
        // __Hotfix0_LoadAsync: XLua.DelegateBridge;
        // __Hotfix1_LoadAsync: XLua.DelegateBridge;
        // __Hotfix2_LoadAsync: XLua.DelegateBridge;
        // __Hotfix3_LoadAsync: XLua.DelegateBridge;
        // __Hotfix0_LoadAll: XLua.DelegateBridge;
        // __Hotfix1_LoadAll: XLua.DelegateBridge;
        // __Hotfix0_TryLoad: XLua.DelegateBridge;
        // __Hotfix1_TryLoad: XLua.DelegateBridge;
        // __Hotfix0_UnloadAsset: XLua.DelegateBridge;
        // __Hotfix0_UnloadAssetByInstanceId: XLua.DelegateBridge;
        // __Hotfix0_CheckExists: XLua.DelegateBridge;
        // __Hotfix0_LoadSceneAsync: XLua.DelegateBridge;
        // __Hotfix0_LoadScene: XLua.DelegateBridge;
        // __Hotfix0_UnloadScene: XLua.DelegateBridge;
        // __Hotfix0_UnloadUnusedAssets: XLua.DelegateBridge;
        // __Hotfix0_UnloadAllAssets: XLua.DelegateBridge;
        // __Hotfix0_UnloadAllAssetsExcept: XLua.DelegateBridge;
        // __Hotfix0_RegisterListener: XLua.DelegateBridge;
        // __Hotfix0_UnregisterListener: XLua.DelegateBridge;
        // __Hotfix0__InitResLangFolder: XLua.DelegateBridge;
        // __Hotfix0__OnAssetLoaded: XLua.DelegateBridge;
        // __Hotfix0__HandleAsyncResource: XLua.DelegateBridge;
        // __Hotfix0__LoadAsync: XLua.DelegateBridge;
        // __Hotfix1__LoadAsync: XLua.DelegateBridge;
        // __Hotfix0__PreprocessAssetPath: XLua.DelegateBridge;
      }
      export namespace LocalResourceManager {
        export interface ResourcesWrapper {
        }
      }
    }
    export namespace ResourceManager {
    }
    export namespace ResourceIndex {
      export interface BundleMeta {
        name: System.String;
        hash: System.String;
        md5: System.String;
        isCacheable: System.Boolean;
        sccIndex: System.Int32;
      }
      export interface AssetToBundleMeta {
        assetName: System.String;
        bundleName: System.String;
      }
    }
    export namespace ResourceOptions {
      export enum Mode {
        DEVELOPMENT_LOCAL = "DEVELOPMENT_LOCAL",
        DEVELOPMENT_AB = "DEVELOPMENT_AB",
        PRODUCTION = "PRODUCTION",
      }
      export enum ResLanguage {
        NONE = "NONE",
        CN = "CN",
        JP = "JP",
        KR = "KR",
        EN = "EN",
        E_NUM = "E_NUM",
      }
    }
    export namespace ResPreferenceController {
      export interface HotupdatePreferenceData {
        haveShowDialog: System.Boolean;
        isFull: System.Boolean;
        typeVersion: System.String;
      }
      export interface ResUpdateAlertPref {
        loginSession: System.Int32;
        alertedTypeList: System.Collections.Generic.List<System.String>;
      }
      export interface StepHandler {
        // skipStep: System.Action;
        // negativeStep: System.Action;
      }
    }
    export namespace Test {
      export interface ABLoaderTest {
        // m_assetLoader: Torappu.Resource.AssetLoaderBehaviour;
        // m_loadDelta: UnityEngine.Vector2;
        // m_unloadDelta: UnityEngine.Vector2;
        // m_emptyScene: System.String;
        // m_validAssets: System.Collections.Generic.List<System.String>;
        // m_loadedQueue: System.Collections.Generic.Queue<System.Collections.Generic.KeyValuePair<UnityEngine.Object,System.String>>;
      }
      export interface ResourceTest {
        // m_assetPath: System.String;
        // m_spritePath: System.String;
        // m_emptyScene: System.String;
        // m_image1: UnityEngine.UI.Image;
        // m_image2: UnityEngine.UI.Image;
        // m_asset1: UnityEngine.Sprite;
        // m_asset2: UnityEngine.Sprite;
      }
      export namespace ABLoaderTest {
      }
      export namespace ResourceTest {
      }
    }
    export namespace UIHotUpdatePreferencePanel {
      export interface Options {
        // onConfirm: System.Action<Torappu.Resource.HotUpdater.UpdatePreferenceType>;
        // onQuit: System.Action;
        fullSize: System.String;
        baseSize: System.String;
      }
    }
  }
  export namespace SDK {
    export interface ISDKBase {
    }
    export interface SDKBase<T> {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
    }
    export interface SDKConsts {
      SUB_CHANNEL_TAPTAP: System.String;
      U8_MSG_TYPE_GAME_VERSION_UPGRADE: System.Int32;
      U8_MSG_TYPE_IF_MTP_ENABLED: System.Int32;
      U8_MSG_TYPE_DEVICE_ID: System.Int32;
      U8_MSG_TYPE_TRACKINGIO_DEVICE_ID: System.Int32;
      U8_SET_DATA_APPETIZER: System.Int32;
      U8_SET_DATA_GUEST_CAPTCHA: System.Int32;
      U8_SET_DATA_BI_U8_LOGIN: System.Int32;
      U8_SET_DATA_BI_GS_LOGIN: System.Int32;
      U8_SET_DATA_BI_START_GAME: System.Int32;
      U8_SET_DATA_BI_STOP_GAME: System.Int32;
      U8_SET_DATA_BI_INIT: System.Int32;
      U8_SET_DATA_TRACKINGIO_SET: System.Int32;
      U8_SET_DATA_CLIP_BOARD: System.Int32;
    }
    export interface SDKExtraInfoBridge {
      // m_callbackMap: System.Collections.Generic.Dictionary<System.Type,System.Object>;
      // m_isInited: System.Boolean;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0__InitIfNot: XLua.DelegateBridge;
      // __Hotfix0__GT3MessageEvent: XLua.DelegateBridge;
      // __Hotfix0__TriggerCallback: XLua.DelegateBridge;
      // __Hotfix0_CallGT3Message: XLua.DelegateBridge;
      // __Hotfix0__DoActionWithCallback: XLua.DelegateBridge;
      // __Hotfix0__BindCallback: XLua.DelegateBridge;
      // __Hotfix0_Dispose: XLua.DelegateBridge;
    }
    export interface SDKExtraInfoHandler {
      // m_tpHeartBeat: System.String;
      // m_warnings: System.Collections.Generic.Dictionary<System.Int32,System.String>;
      // eventGT3Message: System.Action<Torappu.SDK.SDKExtraInfoHandler.GT3Message>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_add_eventGT3Message: XLua.DelegateBridge;
      // __Hotfix0_remove_eventGT3Message: XLua.DelegateBridge;
      // __Hotfix0_HandleExtraInfo: XLua.DelegateBridge;
      // __Hotfix0__HandleMessageMTP: XLua.DelegateBridge;
      // __Hotfix0__HandleMessageGT3: XLua.DelegateBridge;
      // __Hotfix0__AddWarning: XLua.DelegateBridge;
      // __Hotfix0_GetTPHeartBeat: XLua.DelegateBridge;
      // __Hotfix0_GetWarnings: XLua.DelegateBridge;
      // __Hotfix0_GenExtraInfoToLog: XLua.DelegateBridge;
      // __Hotfix0__GenHeartBeat: XLua.DelegateBridge;
    }
    export interface SDKGameBI {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_U8Login: XLua.DelegateBridge;
      // __Hotfix0_GSLogin: XLua.DelegateBridge;
      // __Hotfix0_StartGame: XLua.DelegateBridge;
      // __Hotfix0_StopGame: XLua.DelegateBridge;
      // __Hotfix0_SysInit: XLua.DelegateBridge;
      // __Hotfix0__IsSysEnabled: XLua.DelegateBridge;
      // __Hotfix0__SetData: XLua.DelegateBridge;
    }
    export enum SDKType {
      NONE = "NONE",
      HGSDK = "HGSDK",
      YOSTAR = "YOSTAR",
    }
    export interface SDKHolder {
      _curType: Torappu.SDK.SDKType;
      // _curSDKObj: UnityEngine.GameObject;
      _SDKs: System.Collections.Generic.List<Torappu.SDK.SDKHolder.SDKConfig>;
    }
    export interface InjectSettingOptions {
      // panelAccount: UnityEngine.Transform;
      // panelOthers: UnityEngine.Transform;
    }
    export interface InjectShopOptions {
      // panelShop: UnityEngine.Transform;
    }
    export interface SDKInstLoader {
      _sdkHolder: Torappu.SDK.SDKHolder;
      // m_sdkGameObj: UnityEngine.GameObject;
      // m_sdkInst: Torappu.SDK.ISDKBase;
      // <>f__am$cache0: System.Action;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0__InitSDKInstIfNeeded: XLua.DelegateBridge;
      // __Hotfix0_get_sdkInst: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_TryHookDeleteAllPlayerPrefs: XLua.DelegateBridge;
      // __Hotfix0_ShowGlobalAgreement: XLua.DelegateBridge;
      // __Hotfix0_TryInjectSettings: XLua.DelegateBridge;
      // __Hotfix0_TryInjectCashShop: XLua.DelegateBridge;
      // __Hotfix0_TryInjectPopupAgreement: XLua.DelegateBridge;
      // __Hotfix0__BackToLogin: XLua.DelegateBridge;
    }
    export interface SDKLoginoutController {
      // __Hotfix0_TryToCallLogin: XLua.DelegateBridge;
      // __Hotfix0_TryToCallLogout: XLua.DelegateBridge;
    }
    export interface SDKOptions {
      mode: Torappu.SDK.SDKOptions.Mode;
      u8Options: Torappu.SDK.U8Options;
      dev: Torappu.SDK.SDKOptions.Configuration;
      staging: Torappu.SDK.SDKOptions.Configuration;
      production: Torappu.SDK.SDKOptions.Configuration;
      business: Torappu.SDK.SDKOptions.Configuration;
    }
    export interface U8Options {
      serviceKey: System.String;
    }
    export interface BuglyOptions {
      iosAppId: System.String;
      androidAppId: System.String;
      // autoReportLogSeverity: LogSeverity;
    }
    export interface TrackingioOptions {
      iosAppId: System.String;
      androidAppId: System.String;
    }
    export interface AdjustOptions {
      appId: System.String;
      tokens: Torappu.SDK.AdjustOptions.EventTokens;
    }
    export interface YunCengOptions {
      groupId: System.String;
      // appKeyAndroid: UnityEngine.TextAsset;
      // appKeyIOS: UnityEngine.TextAsset;
    }
    export interface U8ErrorCode {
      DESERIALIZE_ERROR_CODE: System.String;
      AUTH_PARSE_DATA_FAILED: System.String;
      CONFIRM_ORDER_TIMEOUT: System.String;
      VERIFY_ACCOUNT_UID_EMPTY: System.String;
    }
    export enum SDKExtraType {
      NONE = "NONE",
      MTP = "MTP",
      GT3 = "GT3",
    }
    export interface SDKExtraData {
      EMPTY: Torappu.SDK.SDKExtraData;
      code: Torappu.SDK.SDKExtraType;
      msg: Newtonsoft.Json.Linq.JObject;
    }
    export interface U8ExternalTools {
      RESPONSE_STATE_SUC: System.Int32;
      PAY_CONFIRM_RETRY_INTERVALS: System.Int32[];
      // s_isInited: System.Boolean;
      // s_isIniting: System.Boolean;
      // s_realPayInTest: System.Boolean;
      // <>f__am$cache0: System.Action;
      // <>f__am$cache1: System.Action<System.Object>;
      // <>f__am$cache2: System.Action<System.String>;
      // <>f__am$cache3: System.Action;
      // <>f__am$cache4: System.Action<System.String>;
      // <>f__am$cache5: System.Action;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_SendSDKAuthRequest: XLua.DelegateBridge;
      // __Hotfix0_SendSDKGetCaptchaRequest: XLua.DelegateBridge;
      // __Hotfix0_SendSDKCreateOrder: XLua.DelegateBridge;
      // __Hotfix0_SendConfirmOrderRequest: XLua.DelegateBridge;
      // __Hotfix0__WrappedConfirmOrderCoroutine: XLua.DelegateBridge;
      // __Hotfix0_SendGetProductListRequest: XLua.DelegateBridge;
      // __Hotfix0_SendUpgradeGuestRequest: XLua.DelegateBridge;
      // __Hotfix0_SendSDKVerifyAccountRequest: XLua.DelegateBridge;
      // __Hotfix0_GetSignKey: XLua.DelegateBridge;
      // __Hotfix0_Log: XLua.DelegateBridge;
      // __Hotfix0_LogWarning: XLua.DelegateBridge;
      // __Hotfix0_LogError: XLua.DelegateBridge;
      // __Hotfix0_SwitchAccount: XLua.DelegateBridge;
      // __Hotfix0_OnInvalidProduct: XLua.DelegateBridge;
      // __Hotfix0_OnSDKExtraInfo: XLua.DelegateBridge;
      // __Hotfix0_OnSDKError: XLua.DelegateBridge;
      // __Hotfix0_InvokeNextFrame: XLua.DelegateBridge;
      // __Hotfix0__NextFrameCoroutine: XLua.DelegateBridge;
      // __Hotfix0__AuthUrl: XLua.DelegateBridge;
      // __Hotfix0__CaptchaUrl: XLua.DelegateBridge;
      // __Hotfix0__GetProductListUrl: XLua.DelegateBridge;
      // __Hotfix0__CreateOrderUrl: XLua.DelegateBridge;
      // __Hotfix0__ConfirmOrderUrl: XLua.DelegateBridge;
      // __Hotfix0__UpdateGuestUserUrl: XLua.DelegateBridge;
      // __Hotfix0__VerifyAccountUrl: XLua.DelegateBridge;
      // __Hotfix0__U8Url: XLua.DelegateBridge;
      // __Hotfix0__ConfirmOrderCoroutine: XLua.DelegateBridge;
      // __Hotfix0__HandleResponseFromU8: XLua.DelegateBridge;
      // __Hotfix0_get_isInited: XLua.DelegateBridge;
      // __Hotfix0_InitSDKSystemIfNeeded: XLua.DelegateBridge;
      // __Hotfix0__HandleInitExtConfigs: XLua.DelegateBridge;
      // __Hotfix0_IsRealPayOnAndroid: XLua.DelegateBridge;
      // __Hotfix0_IsRealPayOnIOS: XLua.DelegateBridge;
      // __Hotfix0_GetU8DeviceID: XLua.DelegateBridge;
      // __Hotfix0_GetDeviceIDs: XLua.DelegateBridge;
      // __Hotfix0_GetPlatformKey: XLua.DelegateBridge;
      // __Hotfix0_OverrideGameVersionUpgrade: XLua.DelegateBridge;
    }
    export namespace SDKExtraInfoBridge {
    }
    export namespace SDKExtraInfoHandler {
      export enum TPMsgType {
        NONE = "NONE",
        DETECT_RESULT = "DETECT_RESULT",
        HEARTBEAT = "HEARTBEAT",
      }
      export interface TPMessage {
        type: Torappu.SDK.SDKExtraInfoHandler.TPMsgType;
        info: System.String;
        id: System.Int32;
      }
      export interface GT3Message {
        EMPTY: Torappu.SDK.SDKExtraInfoHandler.GT3Message;
        flag: System.Int32;
        desc: System.String;
      }
    }
    export namespace SDKGameBI {
      export interface U8LoginParam {
        userId: System.String;
      }
      export interface GSLoginParam {
        roleId: System.String;
        serverId: System.String;
      }
    }
    export namespace SDKHolder {
      export interface SDKConfig {
        type: Torappu.SDK.SDKType;
        assetPath: System.String;
      }
    }
    export namespace SDKOptions {
      export enum Mode {
        DEV = "DEV",
        STAGING = "STAGING",
        PRODUCTION = "PRODUCTION",
        BUSINESS = "BUSINESS",
      }
      export interface Configuration {
        buglyOptions: Torappu.SDK.BuglyOptions;
        adjustOptions: Torappu.SDK.AdjustOptions;
        trackingioOptions: Torappu.SDK.TrackingioOptions;
        yuncengOptions: Torappu.SDK.YunCengOptions;
        talkingdataAppId: System.String;
      }
    }
    export namespace AdjustOptions {
      export interface StageIdAndEvTokenPair {
        stageId: System.String;
        eventToken: System.String;
      }
      export interface EventTokens {
        init: System.String;
        register: System.String;
        login: System.String;
        newGuest: System.String;
        createRole: System.String;
        pay: System.String;
        createOrder: System.String;
        hotUpdateFinished: System.String;
        stageIdToEvTokens: System.Collections.Generic.List<Torappu.SDK.AdjustOptions.StageIdAndEvTokenPair>;
      }
    }
    export namespace U8ExternalTools {
      export interface InitExtConfig {
        EMPTY: Torappu.SDK.U8ExternalTools.InitExtConfig;
        subChannel: System.String;
        networkOptions: Torappu.SDK.U8ExternalTools.InitExtConfig.NetworkOptions;
      }
      export interface U8ProductListData {
        productList: System.Collections.Generic.List<U8.SDK.U8ProductInfo>;
      }
      export interface U8UpdateGuestResponse {
        result: System.Int32;
      }
      export interface U8VerifyAccountResponse {
        uid: System.String;
      }
      export interface U8GetCaptchaResponse {
        result: System.Int32;
        data: Newtonsoft.Json.Linq.JObject;
      }
      export interface U8AuthResponse {
        result: System.Int32;
        uid: System.String;
        channelUid: System.String;
        token: System.String;
        extension: System.String;
        isGuest: System.Boolean;
        error: System.String;
        captchaTips: System.String;
        captcha: Newtonsoft.Json.Linq.JObject;
      }
      export namespace InitExtConfig {
        export interface NetworkOptions {
          routerUrl: System.String;
          gameServerUrl: System.String;
          sdkServerUrl: System.String;
          u8ServerUrl: System.String;
          hotUpdateUrl: System.String;
          configUrl: System.String;
          versionUrl: System.String;
          announceUrl: System.String;
          preAnnounceUrl: System.String;
          serviceLicenseUrl: System.String;
          officialUrl: System.String;
          packageDownloadUrlAndroid: System.String;
          packageDownloadUrlIOS: System.String;
          enableSecure: System.Boolean;
        }
      }
    }
  }
  export namespace PerformanceTest {
    export enum PerformanceTestState {
      IDLE = "IDLE",
      START = "START",
      END = "END",
    }
    export enum DeviceLevel {
      NODEFINE = "NODEFINE",
      LOW = "LOW",
      HIGH = "HIGH",
    }
  }
  export namespace Setting {
    export interface SettingConstVars {
      PERSONAL_SETTING: System.String;
      COMMON_SETTING: System.String;
      HOTUPDATE_PREFERENCE: System.String;
      HOTUPDATE_RES_SETTING: System.String;
      BUTTON_ANIM: System.String;
      TAB_ANIM: System.String;
    }
    export interface SettingManager {
      // m_commonSettingData: Torappu.Setting.SettingManager.CommonSettingData;
      // m_personalSettingData: Torappu.Setting.SettingManager.PersonalSettingData;
      // instantSettingAction: System.Action<Torappu.Setting.SettingConstVars.SettingType>;
      // m_bindingDic: System.Collections.Generic.Dictionary<Torappu.Setting.SettingConstVars.SettingType,Torappu.Setting.SettingManager.SettingDataBinding>;
      // <>f__am$cache0: System.Func<System.Object>;
      // <>f__am$cache1: System.Action<System.Object>;
      // <>f__am$cache2: System.Func<System.Object>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetData: XLua.DelegateBridge;
      // __Hotfix0_SetData: XLua.DelegateBridge;
      // __Hotfix0_GetFlag: XLua.DelegateBridge;
      // __Hotfix0_SetFlag: XLua.DelegateBridge;
      // __Hotfix0_ResetData: XLua.DelegateBridge;
      // __Hotfix0__ResetDataWithType: XLua.DelegateBridge;
      // __Hotfix0_LoadPersonal: XLua.DelegateBridge;
      // __Hotfix0_LoadCommon: XLua.DelegateBridge;
      // __Hotfix0_Save: XLua.DelegateBridge;
      // __Hotfix0__Init: XLua.DelegateBridge;
      // __Hotfix0__InitDataByDataGroupType: XLua.DelegateBridge;
    }
    export namespace SettingConstVars {
      export enum SettingType {
        ALL = "ALL",
        NONE = "NONE",
        MUSIC_VOLUMN = "MUSIC_VOLUMN",
        SE_VOLUMN = "SE_VOLUMN",
        MUSIC_FLAG = "MUSIC_FLAG",
        SE_FLAG = "SE_FLAG",
        LIMIT_FPS = "LIMIT_FPS",
        BATTLE_ROLLBACK_SPEED = "BATTLE_ROLLBACK_SPEED",
        VOICE_VOLUMN = "VOICE_VOLUMN",
        VOICE_FLAG = "VOICE_FLAG",
        BUILDING_BLOOM_FLAG = "BUILDING_BLOOM_FLAG",
        BUILDING_CHAR_TIRED = "BUILDING_CHAR_TIRED",
        BUILDING_TRADE_FINISH = "BUILDING_TRADE_FINISH",
        BUILDING_MANUF_FINISH = "BUILDING_MANUF_FINISH",
        BUILDING_EXIT = "BUILDING_EXIT",
        NOTCH_PADDING = "NOTCH_PADDING",
        BATTLE_CANCEL_DIRECTION_SELECT_HINT_FLAG = "BATTLE_CANCEL_DIRECTION_SELECT_HINT_FLAG",
        BUILDING_MANUF_AUTO = "BUILDING_MANUF_AUTO",
        DYNAMIC_ILLUST_LOAD_STRATEGY = "DYNAMIC_ILLUST_LOAD_STRATEGY",
      }
      export enum InstantFlag {
        INSTANT = "INSTANT",
        DELAY = "DELAY",
      }
      export enum DataType {
        BOOL = "BOOL",
        SLIDER = "SLIDER",
        STATE = "STATE",
      }
      export enum IllustStyleWhenFocusChar {
        FULL = "FULL",
        TRANSPARENT = "TRANSPARENT",
        HIDDEN = "HIDDEN",
      }
    }
    export namespace SettingManager {
      export enum DataGroupType {
        COMMON_DATA = "COMMON_DATA",
        PERSONAL_DATA = "PERSONAL_DATA",
      }
      export interface SettingDataBinding {
        dataGroupType: Torappu.Setting.SettingManager.DataGroupType;
        // getter: System.Func<System.Object>;
        // setter: System.Action<System.Object>;
        // init: System.Func<System.Object>;
      }
      export interface CommonSettingData {
        seVolume: System.Single;
        musicVolume: System.Single;
        voiceVolumn: System.Single;
        seFlag: System.Boolean;
        musicFlag: System.Boolean;
        voiceFlag: System.Boolean;
        limitFpsFlag: System.Boolean;
        bloomFlag: System.Boolean;
        battleCancelDirectionSelectHintFlag: System.Boolean;
      }
      export interface PersonalSettingData {
        rollbackToDefaultSpeedAfterSlowMotion: System.Boolean;
        leaveBuildingHintFlag: System.Boolean;
        manufactureAnnounceFlag: System.Boolean;
        tradingAnnounceFlag: System.Boolean;
        buildingCharTired: System.Boolean;
        manufactureAutoSupplementFlag: System.Boolean;
        dynamicIllustLoadStrategy: System.Int32;
      }
    }
  }
  export namespace SharedConsts {
    export enum LeftOrRight {
      LEFT = "LEFT",
      RIGHT = "RIGHT",
    }
    export enum Direction {
      UP = "UP",
      RIGHT = "RIGHT",
      DOWN = "DOWN",
      LEFT = "LEFT",
      E_NUM = "E_NUM",
      INVALID = "INVALID",
    }
  }
  export namespace BuildingGetFurnitureGoodListResponse {
    export enum FurnShopDisplayPlace {
      BUILDING = "BUILDING",
      ALL = "ALL",
    }
    export interface EventGoodData {
      name: System.String;
      count: System.Int32;
      furniId: System.String;
      set: System.String;
      sequence: System.Int32;
    }
    export interface Good {
      goodId: System.String;
      furniId: System.String;
      displayName: System.String;
      shopDisplay: Torappu.BuildingGetFurnitureGoodListResponse.FurnShopDisplayPlace;
      priceCoin: System.Int32;
      priceDia: System.Int32;
      discount: System.Int32;
      originPriceCoin: System.Int32;
      originPriceDia: System.Int32;
      begin: System.Int64;
      end: System.Int64;
      count: System.Int32;
      sequence: System.Int32;
    }
    export interface ImageDisplayData {
      picId: System.String;
      index: System.Int32;
    }
    export interface GoodData {
      goodId: System.String;
      count: System.Int32;
      set: System.String;
      sequence: System.Int32;
    }
    export interface Group {
      packageId: System.String;
      icon: System.String;
      name: System.String;
      description: System.String;
      sequence: System.Int32;
      saleBegin: System.Int64;
      saleEnd: System.Int64;
      decoration: System.Int32;
      goodList: System.Collections.Generic.List<Torappu.BuildingGetFurnitureGoodListResponse.GoodData>;
      eventGoodList: System.Collections.Generic.List<Torappu.BuildingGetFurnitureGoodListResponse.EventGoodData>;
      imageList: System.Collections.Generic.List<Torappu.BuildingGetFurnitureGoodListResponse.ImageDisplayData>;
    }
  }
  export namespace BuildingBuyFurnitureGoodRequest {
    export enum CostType {
      COIN_FURN = "COIN_FURN",
      DIAMOND = "DIAMOND",
    }
  }
  export namespace BuildingMeetingClueUpdateWaitingClueResponse {
    export interface Clue {
      id: System.String;
      type: System.String;
      number: System.Int32;
      uid: System.Int32;
      nickNum: System.Int32;
      name: System.String;
      chars: System.Collections.Generic.List<Torappu.PlayerBuildingMeetingClueChar>;
      inUse: System.Int32;
      ts: System.Int64;
    }
  }
  export namespace BuildingMeetingClueReceiveInfoShareRewardResponse {
    export interface VisitorInfo {
      uid: System.String;
      nickName: System.String;
      nickNumber: System.Int32;
      level: System.Int32;
      alias: System.String;
      ts: System.Int64;
      avatar: Torappu.AvatarInfo;
    }
  }
  export namespace BuildingGetRecentVisitorsResponse {
    export interface Visitor {
      uid: System.String;
      nickName: System.String;
      nickNumber: System.Int32;
      secretary: System.String;
      secretarySkinId: System.String;
      level: System.Int32;
      ts: System.Int64;
    }
  }
  export namespace CampaignConfirmBreakRewardResponse {
    export interface RewardItem {
      type: Torappu.ItemType;
      id: System.String;
      charGet: Torappu.GachaResult;
      count: System.Int32;
    }
  }
  export namespace CrisisFinishBattleResponse {
    export interface Delta {
      before: System.Int32;
      after: System.Int32;
    }
    export interface UpdateInfo {
      completeness: Torappu.CrisisFinishBattleResponse.Delta;
      point: Torappu.CrisisFinishBattleResponse.Delta;
      unlocked: System.Collections.Generic.List<System.String>;
    }
  }
  export namespace CommonFinishBattleRequest {
    export interface BattleDataInternal {
      isCheat: System.String;
      completeTime: System.Int64;
    }
    export interface BattleDataInRequest {
      stats: System.Collections.Generic.Dictionary<System.String,System.String>;
    }
    export interface BattleData {
      stats: Torappu.Battle.BattleLogger.BattleStats;
    }
  }
  export namespace CommonFinishBattleResponse {
    export interface RewardModel {
      id: System.String;
      type: Torappu.ItemType;
      count: System.Int32;
      charGet: Torappu.GachaResult;
    }
  }
  export namespace CheckInResponse {
    export interface ItemModel {
      type: Torappu.ItemType;
      id: System.String;
      charGet: Torappu.GachaResult;
      count: System.Int32;
    }
  }
  export namespace UseItemsRequest {
    export interface Item {
      instId: System.Int32;
      itemId: System.String;
      cnt: System.Int32;
    }
  }
  export namespace ListMailBoxResponse {
    export interface MailReward {
      type: Torappu.ItemType;
      id: System.String;
      count: System.Int32;
    }
    export enum MailRoute {
      NORMAL = "NORMAL",
      TO_MONTHLYSUB = "TO_MONTHLYSUB",
    }
    export interface MailStyle {
      route: Torappu.ListMailBoxResponse.MailRoute;
      banner: System.String;
    }
    export interface MailItem {
      mailId: System.Int64;
      type: Torappu.MailFromInfo;
      uid: System.String;
      items: System.Collections.Generic.List<Torappu.ListMailBoxResponse.MailReward>;
      from: System.String;
      subject: System.String;
      content: System.String;
      createAt: System.DateTime;
      expireAt: System.DateTime;
      receiveAt: System.DateTime;
      state: System.Int32;
      style: Torappu.ListMailBoxResponse.MailStyle;
    }
  }
  export namespace RoguelikeSelectRewardRequest {
    export interface SelectParam {
      index: System.String;
      sub: System.String;
    }
  }
  export namespace BuyFurnGroupRequest {
    export enum CostType {
      COIN_FURN = "COIN_FURN",
      DIAMOND = "DIAMOND",
    }
    export interface FurnItemInfo {
      id: System.String;
      count: System.Int32;
    }
  }
  export namespace ShopCashGoodPurchaseResponse {
    export interface Good {
      productId: System.String;
      productName: System.String;
      items: System.Collections.Generic.List<Torappu.RewardItemModel>;
      checkInItems: System.Collections.Generic.List<Torappu.RewardItemModel>;
    }
  }
  export namespace PayConfirmOrderResponse {
    export interface Good {
      items: System.Collections.Generic.List<Torappu.RewardItemModel>;
      checkInItems: System.Collections.Generic.List<Torappu.RewardItemModel>;
    }
  }
  export namespace RequestSquadSlot {
    export interface Patch {
      skillIndex: System.Int32;
    }
  }
  export namespace CommonStartBattleRequest {
    export interface SquadModel {
      squadId: System.String;
      name: System.String;
      slots: System.Collections.Generic.List<Torappu.RequestSquadSlot>;
    }
  }
  export namespace UpgradeCharRequest {
    export interface ExpMat {
      id: System.String;
      count: System.Int32;
    }
  }
  export namespace VisitBuildingResponse {
    export interface Snapshot {
      owner: Torappu.VisitBuildingResponse.RoomOwner;
      chars: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerBuildingChar>;
      roomSlots: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerBuildingRoomSlot>;
      rooms: Torappu.PlayerBuildingRoom;
    }
    export interface RoomOwner {
      uid: System.String;
      nickName: System.String;
      nickNumber: System.String;
    }
    export interface VisitorInfo {
      uid: System.String;
      nickName: System.String;
      nickNumber: System.String;
      secretary: System.String;
      secretarySkinId: System.String;
      level: System.Int32;
      ts: System.Int64;
    }
  }
  export namespace PlayerSquadMemberProto {
  }
  export namespace PlayerCarousel {
    export interface PlayerCarouselFurnitureShopData {
      goods: System.Collections.Generic.Dictionary<System.String,System.Int32>;
      groups: System.Collections.Generic.Dictionary<System.String,System.Int32>;
    }
  }
  export namespace PlayerCharacter {
    export interface PatchBuilder {
      skinId: System.String;
      defaultSkillIndex: System.Int32;
      skills: Torappu.PlayerCharSkill[];
    }
  }
  export namespace MileStonePlayerInfo {
    export interface MileStoneRewardTicketItem {
      ts: System.Int64;
      count: System.Int32;
    }
  }
  export namespace PlayerHandBookAddon {
    export interface GetInfo {
      fts: System.Int64;
      rts: System.Int64;
    }
  }
  export namespace PlayerActivity {
    export interface PlayerDefaultActivity {
      coin: System.Int32;
      shop: System.Collections.Generic.Dictionary<System.String,System.Int32>;
    }
    export interface PlayerMissionOnlyTypeActivity {
    }
    export interface PlayerCheckinOnlyTypeActivity {
      history: System.Collections.Generic.List<System.Int32>;
    }
    export interface PlayerCollectionTypeActivity {
      point: System.Collections.Generic.Dictionary<System.String,System.Int32>;
      history: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerActivity.PlayerCollectionTypeActivity.PlayerCollectionInfo>;
    }
    export interface PlayerAVGOnlyTypeActivity {
      isOpen: System.Boolean;
    }
    export interface PlayerLoginOnlyTypeActivity {
      reward: System.Int32;
    }
    export interface PlayerMiniStoryActivity {
      coin: System.Int32;
      favorList: System.Collections.Generic.List<System.String>;
    }
    export interface PlayerRoguelikeActivity {
      buffToken: System.Int32;
      milestone: Torappu.PlayerActivity.PlayerRoguelikeActivity.MileStone;
      game: Torappu.PlayerActivity.PlayerRoguelikeActivity.GameStatus;
    }
    export interface PlayerPrayOnlyActivity {
      lastTs: System.Int64;
      extraCount: System.Int32;
      prayDaily: System.Int32;
      prayMaxIndex: System.Int32;
      praying: System.Boolean;
      prayArray: System.Collections.Generic.List<Torappu.PlayerActivity.PlayerPrayOnlyActivity.RewardInfo>;
    }
    export interface PlayerGridGachaActivity {
      lastDay: System.Boolean;
      firstDay: System.Boolean;
      openedPosition: System.Collections.Generic.List<System.Int32>;
      openedType: System.Int32;
      rewardCount: System.Int32;
      grandPositions: System.Collections.Generic.List<System.Collections.Generic.List<System.Int32>>;
    }
    export interface PlayerMultiplayActivity {
      troop: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerActivity.PlayerMultiplayActivity.Troop>;
      stages: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerActivity.PlayerMultiplayActivity.Stage>;
    }
    export interface PlayerAct3D0Activity {
      faction: System.String;
      gachaCoin: System.Int32;
      ticket: System.Int32;
      clue: System.Collections.Generic.Dictionary<System.String,System.Int32>;
      box: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerActivity.PlayerAct3D0Activity.BoxState>;
      milestone: Torappu.PlayerActivity.PlayerAct3D0Activity.MileStone;
      favorList: System.Collections.Generic.List<System.String>;
    }
    export interface PlayerAct4D0Activity {
      story: System.Collections.Generic.Dictionary<System.String,System.Int32>;
      milestone: Torappu.PlayerActivity.PlayerAct4D0Activity.MileStone;
    }
    export interface PlayerAct5D0Activity {
      milestone: Torappu.MileStonePlayerInfo;
    }
    export interface PlayerAct5D1Activity {
      coin: System.Int32;
      pt: System.Int32;
      shop: Torappu.PlayerActivity.PlayerAct5D1Activity.PlayerAct5D1Shop;
      runeStage: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerActivity.PlayerAct5D1Activity.PlayerActRuneStage>;
      stageEnemy: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<System.String>>;
    }
    export interface PlayerAct9D0Activity {
      coin: System.Int32;
      favorList: System.Collections.Generic.List<System.String>;
      news: System.Collections.Generic.Dictionary<System.String,System.Int64>;
    }
    export interface PlayerAct17D7Activity {
      isOpen: System.Boolean;
    }
    export namespace PlayerCollectionTypeActivity {
      export interface PlayerCollectionInfo {
        ts: System.String;
      }
    }
    export namespace PlayerRoguelikeActivity {
      export interface MileStone {
        token: System.Int32;
        rewards: System.Collections.Generic.Dictionary<System.String,System.Int64>;
      }
      export interface GameStatus {
        lastTs: System.Int64;
      }
    }
    export namespace PlayerPrayOnlyActivity {
      export interface RewardInfo {
        index: System.Int32;
        count: System.Int32;
      }
    }
    export namespace PlayerMultiplayActivity {
      export interface Troop {
        init: System.Int32;
        squads: System.Collections.Generic.List<Torappu.PlayerSquad>;
      }
      export interface Stage {
        stageId: System.String;
        state: Torappu.PlayerStageState;
        completeTimes: System.Int32;
      }
    }
    export namespace PlayerAct3D0Activity {
      export interface BoxState {
        content: System.Collections.Generic.Dictionary<System.String,System.Int32>;
      }
      export interface MileStone {
        point: System.Int32;
        rewards: System.Collections.Generic.Dictionary<System.String,System.Int32>;
      }
    }
    export namespace PlayerAct4D0Activity {
      export interface MileStone {
        point: System.Int32;
        rewards: System.Collections.Generic.Dictionary<System.String,System.Int32>;
      }
    }
    export namespace PlayerAct5D1Activity {
      export interface PlayerAct5D1Shop {
        info: System.Collections.Generic.Dictionary<System.String,System.Int32>;
        progressInfo: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerActivity.PlayerAct5D1Activity.PlayerAct5D1Shop.ProgressInfo>;
      }
      export interface PlayerActRuneStage {
        schedule: System.String;
        available: System.Int32;
        scores: System.Int32;
        rune: System.Collections.Generic.Dictionary<System.String,System.Int32>;
      }
      export namespace PlayerAct5D1Shop {
        export interface ProgressInfo {
          count: System.Int32;
          order: System.Int32;
        }
      }
    }
  }
  export namespace PlayerCampaign {
    export interface StageOpenInfo {
      permanent: System.Collections.Generic.List<System.String>;
      training: System.Collections.Generic.List<System.String>;
      rotate: System.String;
      rotateGroup: System.String;
      trainingGroup: System.String;
      trainingAllOpenGroup: System.String;
    }
    export interface Stage {
      maxKills: System.Int32;
      rewardStatus: System.Int32[];
    }
    export enum MissionState {
      UNCOMPLETE = "UNCOMPLETE",
      COMPLETE = "COMPLETE",
      FINISHED = "FINISHED",
    }
  }
  export namespace PlayerRecruit {
    export interface NormalModel {
      slots: Torappu.ListDict<System.String,Torappu.PlayerRecruit.NormalModel.SlotModel>;
    }
    export namespace NormalModel {
      export interface SlotModel {
        state: Torappu.PlayerRecruit.NormalModel.SlotModel.State;
        tags: System.Int32[];
        selectTags: Torappu.PlayerRecruit.NormalModel.SlotModel.TagItem[];
        startTs: System.DateTime;
        maxFinishTs: System.DateTime;
        realFinishTs: System.DateTime;
        durationInSec: System.Int32;
      }
      export namespace SlotModel {
        export interface TagItem {
          tagId: System.Int32;
          pick: System.Boolean;
        }
        export enum State {
          LOCK = "LOCK",
          IDLE = "IDLE",
          BUSY = "BUSY",
          FAST_FINISH = "FAST_FINISH",
        }
      }
    }
  }
  export namespace PlayerGacha {
    export interface PlayerNewbeeGachaPool {
      openFlag: System.Boolean;
      cnt: System.Int32;
    }
    export interface PlayerGachaPool {
      cnt: System.Int32;
      maxCnt: System.Int32;
      avail: System.Boolean;
    }
    export interface PlayerFreeLimitGacha {
      leastFree: System.Int32;
    }
  }
  export namespace PlayerTroop {
    export enum CharMissionState {
      UNCOMPLETE = "UNCOMPLETE",
      FULLFILLED = "FULLFILLED",
      COMPLETE = "COMPLETE",
    }
  }
  export namespace PlayerBuildingChar {
    export interface BubbleContainer {
      normal: Torappu.PlayerBuildingCharBubble;
      assist: Torappu.PlayerBuildingCharBubble;
    }
  }
  export namespace PlayerBuildingControlBuff {
    export interface Global {
      apCost: System.Int32;
    }
  }
  export namespace PlayerBuildingWorkshopBuff {
    export interface Cost {
      type: System.String;
      limit: System.Int64;
      reduction: System.Int64;
    }
    export interface CostRe {
      type: System.String;
      from: System.Int64;
      change: System.Int64;
    }
    export interface CostForce {
      type: System.String;
      cost: System.Int64;
    }
    export interface Frate {
      fid: System.String;
      rate: System.Single;
    }
  }
  export namespace PlayerBuildingDormitory {
    export interface Buff {
      apCost: Torappu.PlayerBuildingDormitory.Buff.APCost;
    }
    export namespace Buff {
      export interface APCost {
        all: System.Int32;
        single: Torappu.PlayerBuildingDormitory.Buff.APCost.SingleTarget;
      }
      export namespace APCost {
        export interface SingleTarget {
          target: System.String;
          value: System.Int32;
        }
      }
    }
  }
  export namespace MissionPlayerDataGroup {
    export interface MissionTypeString {
      DAILY: System.String;
      WEEKLY: System.String;
      ACTIVITY: System.String;
      MAIN: System.String;
      SUB: System.String;
      GUIDE: System.String;
      OPENSERVER: System.String;
    }
  }
  export namespace MissionPlayerData {
    export enum MissionGroupState {
      Uncomplete = "Uncomplete",
      Complete = "Complete",
    }
  }
  export namespace PlayerCrisisSocialInfo {
    export interface AssistChar {
      charId: System.String;
      cnt: System.Int32;
    }
  }
  export namespace PlayerCrisisChallenge {
    export interface PlayerChallengeTask {
      fts: System.Int64;
      rts: System.Int64;
    }
  }
  export namespace PlayerCrisisPermanent {
    export enum RuneStatusMask {
      UNLOCK = "UNLOCK",
      COMPLETE = "COMPLETE",
    }
  }
  export namespace PlayerCrisis {
    export interface BoxItem {
      id: System.String;
      type: Torappu.ItemType;
      count: System.Int32;
    }
  }
  export namespace PlayerRoguelike {
    export interface CurrentData {
      status: Torappu.PlayerRoguelikeStatus;
      initialRewards: Torappu.PlayerRoguelikeInitialReward;
      map: Torappu.PlayerRoguelikeDungeon;
      inventory: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerRoguelikeItem>;
      chars: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerRoguelikeCharacter>;
      record: Torappu.PlayerRoguelikeRecord;
    }
    export interface StableData {
      outBuff: System.Collections.Generic.Dictionary<System.String,System.Int32>;
      relic: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerRoguelike.StableData.RelicRecord>;
      stages: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerRoguelike.StableData.StageRecord>;
      ending: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerRoguelike.StableData.EndingRecord>;
      mode: System.Collections.Generic.Dictionary<System.String,Torappu.PlayerRoguelike.StableData.ModeRecord>;
      stats: Torappu.PlayerRoguelike.StableData.StatsRecords;
    }
    export namespace StableData {
      export interface RelicRecord {
        uts: System.Int64;
        cnt: System.Int32;
      }
      export interface StageRecord {
        count: System.Int32;
      }
      export interface EndingRecord {
        cnt: System.Int32;
        initialRelic: System.Collections.Generic.Dictionary<System.String,System.Int32>;
      }
      export interface ModeRecord {
        uts: System.Int32;
        cnt: System.Int32;
      }
      export interface StatsRecords {
        complete_battle: System.Int32;
        cost_hp: System.Int32;
        recruit_char: System.Int32;
        into_node_nobattle: System.Int32;
        shop_cost_gold: System.Int32;
        upgrade_char: System.Int32;
        enemy_kill: System.Collections.Generic.Dictionary<System.String,System.Int32>;
        gain_resource: System.Collections.Generic.Dictionary<System.String,System.Int32>;
        scene_count: System.Collections.Generic.Dictionary<System.String,System.Int32>;
        choice_count: System.Collections.Generic.Dictionary<System.String,System.Int32>;
      }
    }
  }
  export namespace PlayerData {
    export enum FakeInstType {
      VAULT = "VAULT",
      ASSIST = "ASSIST",
      PREDEFINED = "PREDEFINED",
    }
  }
  export namespace Act3D0Data {
    export enum GoodType {
      NORMAL = "NORMAL",
      SPECIAL = "SPECIAL",
    }
    export enum GachaBoxType {
      LIMITED = "LIMITED",
      UNLIMITED = "UNLIMITED",
    }
    export interface CampBasicInfo {
      campId: System.String;
      campName: System.String;
      campDesc: System.String;
      rewardDesc: System.String;
    }
    export interface InfinitePoolDetailInfo {
      poolId: System.String;
      poolItemInfo: System.Collections.Generic.List<Torappu.Act3D0Data.InfinitePoolDetailInfo.PoolItemInfo>;
    }
    export interface LimitedPoolDetailInfo {
      poolId: System.String;
      poolItemInfo: System.Collections.Generic.List<Torappu.Act3D0Data.LimitedPoolDetailInfo.PoolItemInfo>;
    }
    export interface InfinitePoolPercent {
      percentDict: System.Collections.Generic.Dictionary<System.String,System.Int32>;
    }
    export interface GachaBoxInfo {
      gachaBoxId: System.String;
      boxType: Torappu.Act3D0Data.GachaBoxType;
      keyGoodId: System.String;
      tokenId: Torappu.ItemBundle;
      tokenNumOnce: System.Int32;
      unlockImg: System.String;
      nextGachaBoxInfoId: System.String;
    }
    export interface CampItemMapInfo {
      goodId: System.String;
      itemDict: System.Collections.Generic.Dictionary<System.String,Torappu.ItemBundle>;
    }
    export interface ZoneDescInfo {
      zoneId: System.String;
      lockedText: System.String;
    }
    export interface CampInfo {
      campId: System.String;
      campChineseName: System.String;
    }
    export interface ClueInfo {
      itemId: System.String;
      campId: System.String;
      orderId: System.Int32;
      imageId: System.String;
    }
    export interface MileStoneInfo {
      mileStoneId: System.String;
      orderId: System.Int32;
      mileStoneType: Torappu.Act3D0Data.GoodType;
      normalItem: Torappu.ItemBundle;
      specialItemDict: System.Collections.Generic.Dictionary<System.String,Torappu.ItemBundle>;
      tokenNum: System.Int32;
    }
    export namespace InfinitePoolDetailInfo {
      export interface PoolItemInfo {
        goodId: System.String;
        goodType: Torappu.Act3D0Data.GoodType;
        itemInfo: Torappu.ItemBundle;
        perCount: System.Int32;
        weight: System.Int32;
        type: System.String;
        orderId: System.Int32;
      }
    }
    export namespace LimitedPoolDetailInfo {
      export interface PoolItemInfo {
        goodId: System.String;
        itemInfo: Torappu.ItemBundle;
        goodType: Torappu.Act3D0Data.GoodType;
        perCount: System.Int32;
        totalCount: System.Int32;
        weight: System.Int32;
        type: System.String;
        orderId: System.Int32;
      }
    }
  }
  export namespace Act4D0Data {
    export interface StageJumpInfo {
      stageKey: System.String;
      zoneId: System.String;
      stageId: System.String;
      unlockDesc: System.String;
      lockDesc: System.String;
    }
    export interface MileStoneItemInfo {
      mileStoneId: System.String;
      orderId: System.Int32;
      tokenNum: System.Int32;
      item: Torappu.ItemBundle;
    }
    export interface MileStoneStoryInfo {
      mileStoneId: System.String;
      orderId: System.Int32;
      tokenNum: System.Int32;
      storyKey: System.String;
      desc: System.String;
    }
    export interface StoryInfo {
      storyKey: System.String;
      storyId: System.String;
      storySort: System.String;
      storyName: System.String;
      lockDesc: System.String;
      storyDesc: System.String;
    }
  }
  export namespace Act5D0Data {
    export interface ZoneDescInfo {
      zoneId: System.String;
      lockedText: System.String;
    }
    export interface MissionExtraInfo {
      difficultLevel: System.Int32;
      levelDesc: System.String;
      sortId: System.Int32;
    }
  }
  export namespace MileStoneInfo {
    export enum GoodType {
      NORMAL = "NORMAL",
      SPECIAL = "SPECIAL",
    }
  }
  export namespace Act5D1Data {
    export interface RewardGroup {
      itemList: System.Collections.Generic.Dictionary<System.Int32,System.Collections.Generic.List<Torappu.ItemBundle>>;
    }
    export interface RuneStageData {
      stageId: System.String;
      levelId: System.String;
      code: System.String;
      name: System.String;
      loadingPicId: System.String;
      description: System.String;
      picId: System.String;
    }
    export interface RuneRecurrentStateData {
      runeReId: System.String;
      stageId: System.String;
      slotId: System.Int32;
      startTime: System.Int64;
      endTime: System.Int64;
      runeList: System.Collections.Generic.List<System.String>;
      isAvail: System.Boolean;
      warningPoint: System.Int32;
    }
    export interface RuneUnlockData {
      runeId: System.String;
      priceItem: Torappu.ItemBundle;
      runeName: System.String;
      bgPic: System.String;
      runeDesc: System.String;
      sortId: System.Int32;
      iconId: System.String;
    }
    export interface RuneReleaseData {
      runeId: System.String;
      stageId: System.String;
      releaseTime: System.Int64;
    }
    export enum GoodType {
      NORMAL = "NORMAL",
      PROGRESS = "PROGRESS",
    }
    export interface ShopGood {
      goodId: System.String;
      slotId: System.Int32;
      price: System.Int32;
      availCount: System.Int32;
      item: Torappu.ItemBundle;
      progressGoodId: System.String;
      goodType: Torappu.Act5D1Data.GoodType;
      rarity: System.String;
    }
    export interface ShopData {
      shopGoods: System.Collections.Generic.Dictionary<System.String,Torappu.Act5D1Data.ShopGood>;
      progressGoods: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<Torappu.Act5D1Data.ProgessGoodItem>>;
    }
    export interface ProgessGoodItem {
      order: System.Int32;
      price: System.Int32;
      displayName: System.String;
      item: Torappu.ItemBundle;
    }
  }
  export namespace Act9D0Data {
    export interface MiscDataHubKeys {
      NEWS_READ_SMALL: System.String;
      NEWS_READ_MIDDLE: System.String;
      NEWS_READ_LARGE: System.String;
      NEWS_UNREAD: System.String;
    }
    export interface ZoneDescInfo {
      zoneId: System.String;
      unlockText: System.String;
      displayStartTime: System.Int64;
    }
    export interface FavorUpInfo {
      charId: System.String;
      displayStartTime: System.Int64;
      displayEndTime: System.Int64;
    }
    export interface SubMissionInfo {
      missionId: System.String;
      missionTitle: System.String;
      sortId: System.Int32;
      missionIndex: System.String;
    }
    export interface ActivityNewsInfo {
      newsId: System.String;
      newsSortId: System.Int32;
      styleInfo: Torappu.Act9D0Data.ActivityNewsStyleInfo;
      preposedStage: System.String;
      titlePic: System.String;
      newsTitle: System.String;
      newsInfShow: System.Int32;
      newsFrom: System.String;
      newsText: System.String;
      newsParam1: System.Int32;
      newsParam2: System.Int32;
      newsParam3: System.Single;
      newsLines: System.Collections.Generic.List<Torappu.Act9D0Data.ActivityNewsLine>;
    }
    export interface ActivityNewsServerInfo {
      newsId: System.String;
      preposedStage: System.String;
    }
    export interface ActivityNewsStyleInfo {
      typeId: System.String;
      typeName: System.String;
      typeLogo: System.String;
      typeMainLogo: System.String;
    }
    export interface ActivityNewsLine {
      lineType: Torappu.Act9D0Data.ActivityNewsLineType;
      content: System.String;
    }
    export enum ActivityNewsLineType {
      TextContent = "TextContent",
      ImageContent = "ImageContent",
    }
  }
  export namespace DefaultCheckInData {
    export interface CheckInDailyInfo {
      itemList: System.Collections.Generic.List<Torappu.ItemBundle>;
      order: System.Int32;
      color: System.Int32;
      keyItem: System.Int32;
      showItemOrder: System.Int32;
    }
  }
  export namespace ActivityCollectionData {
    export interface CollectionInfo {
      id: System.Int32;
      itemType: Torappu.ItemType;
      itemId: System.String;
      itemCnt: System.Int32;
      pointId: System.String;
      pointCnt: System.Int32;
      isBonus: System.Boolean;
      pngName: System.String;
      pngSort: System.Int32;
      isShow: System.Boolean;
      showInList: System.Boolean;
      showIconBG: System.Boolean;
    }
  }
  export namespace ActivityMiniStoryData {
    export interface ZoneDescInfo {
      zoneId: System.String;
      unlockText: System.String;
    }
    export interface FavorUpInfo {
      charId: System.String;
      displayStartTime: System.Int64;
      displayEndTime: System.Int64;
    }
  }
  export namespace ActivityMultiplayData {
    export enum StageDifficulty {
      NONE = "NONE",
      EASY = "EASY",
      NORMAL = "NORMAL",
      HARD = "HARD",
    }
    export interface StageData {
      stageId: System.String;
      levelId: System.String;
      groupId: System.String;
      difficulty: Torappu.ActivityMultiplayData.StageDifficulty;
      loadingPicId: System.String;
      dangerLevel: System.String;
      unlockConds: System.Collections.Generic.List<System.String>;
    }
    export interface StageGroupData {
      groupId: System.String;
      sortId: System.Int32;
      code: System.String;
      name: System.String;
      description: System.String;
    }
    export interface MissionExtraData {
      missionId: System.String;
      isHard: System.Boolean;
    }
    export interface RoomMessageData {
      sortId: System.Int32;
      picId: System.String;
    }
    export interface ConstData {
      linkActId: System.String;
      maxRetryTimeInTeamRoom: System.Int32;
      maxRetryTimeInMatchRoom: System.Int32;
      maxRetryTimeInBattle: System.Int32;
      maxOperatorDelay: System.Single;
      maxPlaySpeed: System.Single;
      delayTimeNeedTip: System.Single;
      blockTimeNeedTip: System.Single;
      hideTeamNameFlag: System.Boolean;
      settleRetryTime: System.Single;
    }
  }
  export namespace ActivityRoguelikeData {
    export interface OuterBuffUnlockInfoData {
      buffId: System.String;
      buffUnlockInfos: Torappu.ListDict<System.Int32,Torappu.ActivityRoguelikeData.OuterBuffUnlockInfo>;
    }
    export interface OuterBuffUnlockInfo {
      buffLevel: System.Int32;
      name: System.String;
      iconId: System.String;
      description: System.String;
      usage: System.String;
      itemId: System.String;
      itemType: Torappu.ItemType;
      cost: System.Int32;
    }
    export interface MileStoneItemInfo {
      mileStoneId: System.String;
      orderId: System.Int32;
      tokenNum: System.Int32;
      item: Torappu.ItemBundle;
    }
  }
  export namespace ActivityTable {
    export interface BasicData {
      id: System.String;
      type: Torappu.ActivityType;
      displayType: Torappu.ActivityDisplayType;
      name: System.String;
      startTime: System.Int64;
      endTime: System.Int64;
      rewardEndTime: System.Int64;
      displayOnHome: System.Boolean;
      hasStage: System.Boolean;
      actTopBarColor: System.String;
      actTopBarText: System.String;
      templateShopId: System.String;
      medalGroupId: System.String;
      isReplicate: System.Boolean;
    }
    export interface CustomUnlockCond {
      actId: System.String;
      stageId: System.String;
    }
    export interface ActivityDetailTable {
      defaultActivityData: System.Collections.Generic.Dictionary<System.String,Torappu.DefaultFirstData>;
      defaultCheckinData: System.Collections.Generic.Dictionary<System.String,Torappu.DefaultCheckInData>;
      typeAct3d0Data: System.Collections.Generic.Dictionary<System.String,Torappu.Act3D0Data>;
      typeAct4d0Data: System.Collections.Generic.Dictionary<System.String,Torappu.Act4D0Data>;
      typeAct5d0Data: System.Collections.Generic.Dictionary<System.String,Torappu.Act5D0Data>;
      typeAct5d1Data: System.Collections.Generic.Dictionary<System.String,Torappu.Act5D1Data>;
      defaultCollectionData: System.Collections.Generic.Dictionary<System.String,Torappu.ActivityCollectionData>;
      typeAct9d0Data: System.Collections.Generic.Dictionary<System.String,Torappu.Act9D0Data>;
      defaultLoginData: System.Collections.Generic.Dictionary<System.String,Torappu.ActivityLoginData>;
      defaultMiniStoryData: System.Collections.Generic.Dictionary<System.String,Torappu.ActivityMiniStoryData>;
      defaultRoguelikeData: System.Collections.Generic.Dictionary<System.String,Torappu.ActivityRoguelikeData>;
      defaultMultiplayData: System.Collections.Generic.Dictionary<System.String,Torappu.ActivityMultiplayData>;
    }
  }
  export namespace PreAnnounceData {
    export enum PreAnnounceType {
      ALWAYS_OPEN = "ALWAYS_OPEN",
      OPEN_ONCE = "OPEN_ONCE",
      NEVER_AUTO_OPEN = "NEVER_AUTO_OPEN",
    }
  }
  export namespace AttributeModifierData {
    export interface AttributeModifier {
      attributeType: Torappu.AttributeType;
      formulaItem: Torappu.AttributeModifierData.AttributeModifier.FormulaItemType;
      value: System.Single;
      loadFromBlackboard: System.Boolean;
      fetchBaseValueFromSourceEntity: System.Boolean;
    }
    export namespace AttributeModifier {
      export enum FormulaItemType {
        ADDITION = "ADDITION",
        MULTIPLIER = "MULTIPLIER",
        FINAL_ADDITION = "FINAL_ADDITION",
        FINAL_SCALER = "FINAL_SCALER",
      }
    }
  }
  export namespace Blackboard {
    export interface DataPair {
      key: System.String;
      value: System.Single;
      valueStr: System.String;
    }
  }
  export namespace BuffData {
    export enum OverrideType {
      DEFAULT = "DEFAULT",
      STACK = "STACK",
      UNIQUE = "UNIQUE",
      EXTEND = "EXTEND",
      EXTEND_TIME = "EXTEND_TIME",
    }
    export enum StatusResistable {
      NO = "NO",
      YES = "YES",
      AUTOMATIC = "AUTOMATIC",
    }
    export enum OnEventPriority {
      HIGHER_PRIORITY = "HIGHER_PRIORITY",
      HIGH_PRIORITY = "HIGH_PRIORITY",
      DEFAULT = "DEFAULT",
      LOW_PRIORITY = "LOW_PRIORITY",
      LOWER_PRIORITY = "LOWER_PRIORITY",
    }
  }
  export namespace BuildingData {
    export enum RoomCategory {
      NONE = "NONE",
      FUNCTION = "FUNCTION",
      OUTPUT = "OUTPUT",
      CUSTOM = "CUSTOM",
      ELEVATOR = "ELEVATOR",
      CORRIDOR = "CORRIDOR",
      SPECIAL = "SPECIAL",
      ALL = "ALL",
    }
    export interface RoomTypeString {
      CONTROL: System.String;
      POWER: System.String;
      MANUFACTURE: System.String;
      SHOP: System.String;
      DORMITORY: System.String;
      MEETING: System.String;
      HIRE: System.String;
      ELEVATOR: System.String;
      CORRIDOR: System.String;
      TRADING: System.String;
      WORKSHOP: System.String;
      TRAINING: System.String;
    }
    export enum RoomType {
      NONE = "NONE",
      CONTROL = "CONTROL",
      POWER = "POWER",
      MANUFACTURE = "MANUFACTURE",
      SHOP = "SHOP",
      DORMITORY = "DORMITORY",
      MEETING = "MEETING",
      HIRE = "HIRE",
      ELEVATOR = "ELEVATOR",
      CORRIDOR = "CORRIDOR",
      TRADING = "TRADING",
      WORKSHOP = "WORKSHOP",
      TRAINING = "TRAINING",
      FUNCTIONAL = "FUNCTIONAL",
      ALL = "ALL",
    }
    export enum OrderType {
      O_COMPOUND = "O_COMPOUND",
      O_GOLD = "O_GOLD",
      O_DIAMOND = "O_DIAMOND",
    }
    export enum FurnitureCategory {
      FURNITURE = "FURNITURE",
      WALL = "WALL",
      FLOOR = "FLOOR",
    }
    export enum FurnitureType {
      FLOOR = "FLOOR",
      CARPET = "CARPET",
      SEATING = "SEATING",
      BEDDING = "BEDDING",
      TABLE = "TABLE",
      CABINET = "CABINET",
      DECORATION = "DECORATION",
      WALLPAPER = "WALLPAPER",
      WALLDECO = "WALLDECO",
      WALLLAMP = "WALLLAMP",
      CEILING = "CEILING",
      CEILINGLAMP = "CEILINGLAMP",
    }
    export interface IRoomBean {
    }
    export enum FurnitureLocation {
      NONE = "NONE",
      WALL = "WALL",
      FLOOR = "FLOOR",
      CARPET = "CARPET",
      CEILING = "CEILING",
      POSTER = "POSTER",
      CEILINGDECAL = "CEILINGDECAL",
    }
    export interface ObstaclePoint {
      offset: Torappu.GridPosition;
      edgeWalkableMask: System.Byte;
    }
    export interface ObstacleRect {
      pos: Torappu.GridPosition;
      size: Torappu.GridPosition;
      edgeWalkableMask: System.Byte;
    }
    export interface ObstacleData {
      floorObstacles: System.Collections.Generic.List<Torappu.BuildingData.ObstaclePoint>;
      backwallObstacles: System.Collections.Generic.List<Torappu.BuildingData.ObstaclePoint>;
    }
    export enum FormulaItemType {
      NONE = "NONE",
      F_EVOLVE = "F_EVOLVE",
      F_BUILDING = "F_BUILDING",
      F_GOLD = "F_GOLD",
      F_DIAMOND = "F_DIAMOND",
      F_FURNITURE = "F_FURNITURE",
      F_EXP = "F_EXP",
      F_ASC = "F_ASC",
      F_SKILL = "F_SKILL",
    }
    export interface PrefabInfo {
      id: System.String;
      blueprintRoomOverrideId: System.String;
      size: Torappu.GridPosition;
      floorGridSize: Torappu.GridPosition;
      backWallGridSize: Torappu.GridPosition;
      obstacleId: System.String;
    }
    export interface RoomUnlockCond {
      id: System.String;
      number: Torappu.ListDict<System.Int32,Torappu.BuildingData.RoomUnlockCond.CondItem>;
    }
    export interface RoomData {
      id: Torappu.BuildingData.RoomType;
      name: System.String;
      description: System.String;
      defaultPrefabId: System.String;
      canLevelDown: System.Boolean;
      maxCount: System.Int32;
      category: Torappu.BuildingData.RoomCategory;
      size: Torappu.GridPosition;
      phases: Torappu.BuildingData.RoomData.PhaseData[];
    }
    export interface LayoutData {
      DEFAULT_LAYOUT_ID: System.String;
      id: System.String;
      slots: System.Collections.Generic.Dictionary<System.String,Torappu.BuildingData.LayoutData.RoomSlot>;
      cleanCosts: System.Collections.Generic.Dictionary<System.String,Torappu.BuildingData.LayoutData.SlotCleanCost>;
      storeys: Torappu.ListDict<System.String,Torappu.BuildingData.LayoutData.StoreyData>;
    }
    export enum BuffCategory {
      NONE = "NONE",
      FUNCTION = "FUNCTION",
      OUTPUT = "OUTPUT",
      RECOVERY = "RECOVERY",
    }
    export interface BuildingCharacter {
      charId: System.String;
      maxManpower: System.Int64;
      buffChar: System.Collections.Generic.List<Torappu.BuildingData.BuildingBuffCharSlot>;
    }
    export interface BuildingBuffCharSlot {
      buffData: System.Collections.Generic.List<Torappu.BuildingData.BuildingBuffCharSlot.SlotItem>;
    }
    export interface BuildingBuff {
      buffId: System.String;
      buffName: System.String;
      buffIcon: System.String;
      skillIcon: System.String;
      sortId: System.Int32;
      buffColor: System.String;
      textColor: System.String;
      buffCategory: Torappu.BuildingData.BuffCategory;
      roomType: Torappu.BuildingData.RoomType;
      description: System.String;
    }
    export interface RoomBeanParam {
    }
    export interface RoomBean<TParam> {
      phases: System.Collections.Generic.List<TParam>;
    }
    export interface ControlRoomBean {
      basicCostBuff: System.Int32;
    }
    export interface ControlRoomPhase {
    }
    export interface ManufactRoomBean {
      basicSpeedBuff: System.Single;
    }
    export interface ManufactPhase {
      speed: System.Single;
      outputCapacity: System.Int32;
    }
    export interface ShopPhase {
      counterNum: System.Int32;
      speed: System.Single;
      moneyCapacity: System.Int32;
    }
    export interface HireRoomBean {
      basicSpeedBuff: System.Single;
    }
    export interface HirePhase {
      economizeRate: System.Single;
      resSpeed: System.Int32;
      refreshTimes: System.Int32;
    }
    export interface DormPhase {
      manpowerRecover: System.Int32;
      decorationLimit: System.Int32;
    }
    export interface MeetingRoomBean {
      basicSpeedBuff: System.Single;
    }
    export interface MeetingPhase {
      friendSlotInc: System.Int32;
      maxVisitorNum: System.Int32;
      gatheringSpeed: System.Int32;
    }
    export interface TradingRoomBean {
      basicSpeedBuff: System.Single;
    }
    export interface TradingPhase {
      orderSpeed: System.Single;
      orderLimit: System.Int32;
      orderRarity: System.Int32;
    }
    export interface WorkshopPhase {
      manpowerFactor: System.Single;
    }
    export interface TrainingBean {
      basicSpeedBuff: System.Single;
    }
    export interface TrainingPhase {
      specSkillLvlLimit: System.Int32;
    }
    export interface PowerRoomBean {
      basicSpeedBuff: System.Single;
    }
    export interface PowerPhase {
    }
    export interface CustomData {
      furnitures: System.Collections.Generic.Dictionary<System.String,Torappu.BuildingData.CustomData.FurnitureData>;
      themes: Torappu.ListDict<System.String,Torappu.BuildingData.CustomData.ThemeData>;
      groups: Torappu.ListDict<System.String,Torappu.BuildingData.CustomData.GroupData>;
      types: Torappu.ListDict<System.String,Torappu.BuildingData.CustomData.FurnitureTypeData>;
      defaultFurnitures: Torappu.ListDict<System.String,System.Collections.Generic.List<Torappu.BuildingData.CustomData.DormitoryDefaultFurnitureItem>>;
    }
    export interface ManufactFormula {
      formulaId: System.String;
      itemId: System.String;
      count: System.Int32;
      weight: System.Int32;
      costPoint: System.Int64;
      formulaType: Torappu.BuildingData.FormulaItemType;
      buffType: System.String;
      costs: System.Collections.Generic.List<Torappu.ItemBundle>;
      requireRooms: System.Collections.Generic.List<Torappu.BuildingData.ManufactFormula.UnlockRoom>;
      requireStages: System.Collections.Generic.List<Torappu.BuildingData.ManufactFormula.UnlockStage>;
    }
    export interface WorkshopExtraWeightItem {
      weight: System.Int32;
      itemId: System.String;
      itemCount: System.Int32;
    }
    export interface WorkshopFormula {
      sortId: System.Int32;
      formulaId: System.String;
      rarity: System.Int32;
      itemId: System.String;
      count: System.Int32;
      goldCost: System.Int64;
      apCost: System.Int64;
      formulaType: Torappu.BuildingData.FormulaItemType;
      buffType: System.String;
      extraOutcomeRate: System.Single;
      extraOutcomeGroup: System.Collections.Generic.List<Torappu.BuildingData.WorkshopExtraWeightItem>;
      costs: System.Collections.Generic.List<Torappu.ItemBundle>;
      requireRooms: System.Collections.Generic.List<Torappu.BuildingData.WorkshopFormula.UnlockRoom>;
      requireStages: System.Collections.Generic.List<Torappu.BuildingData.WorkshopFormula.UnlockStage>;
    }
    export interface ShopFormula {
      formulaId: System.String;
      itemId: System.String;
      formulaType: Torappu.BuildingData.FormulaItemType;
      costPoint: System.Int64;
      gainItem: Torappu.ItemBundle;
      requireRooms: System.Collections.Generic.List<Torappu.BuildingData.ShopFormula.UnlockRoom>;
    }
    export interface CreditFormula {
      initiative: Torappu.ListDict<System.Int32,Torappu.BuildingData.CreditFormula.ValueModel>;
      passive: Torappu.ListDict<System.Int32,Torappu.BuildingData.CreditFormula.ValueModel>;
    }
    export namespace RoomUnlockCond {
      export interface CondItem {
        type: Torappu.BuildingData.RoomType;
        level: System.Int32;
        count: System.Int32;
      }
    }
    export namespace RoomData {
      export interface BuildCost {
        items: Torappu.ItemBundle[];
        time: System.Int64;
        labor: System.Int32;
      }
      export interface PhaseData {
        overrideName: System.String;
        overridePrefabId: System.String;
        unlockCondId: System.String;
        buildCost: Torappu.BuildingData.RoomData.BuildCost;
        electricity: System.Int32;
        maxStationedNum: System.Int32;
        manpowerCost: System.Int64;
      }
    }
    export namespace LayoutData {
      export interface RoomSlot {
        id: System.String;
        cleanCostId: System.String;
        costLabor: System.Int32;
        provideLabor: System.Int32;
        size: Torappu.GridPosition;
        offset: Torappu.GridPosition;
        category: Torappu.BuildingData.RoomCategory;
        storeyId: System.String;
      }
      export interface SlotCleanCost {
        id: System.String;
        number: Torappu.ListDict<System.Int32,Torappu.BuildingData.LayoutData.SlotCleanCost.CountCost>;
      }
      export interface StoreyData {
        id: System.String;
        yOffset: System.Int32;
        unlockControlLevel: System.Int32;
        type: Torappu.BuildingData.LayoutData.StoreyData.Type;
      }
      export namespace SlotCleanCost {
        export interface CountCost {
          items: Torappu.ItemBundle[];
        }
      }
      export namespace StoreyData {
        export enum Type {
          UPGROUND = "UPGROUND",
          DOWNGROUND = "DOWNGROUND",
        }
      }
    }
    export namespace BuildingBuffCharSlot {
      export interface SlotItem {
        buffId: System.String;
        cond: Torappu.CharacterData.UnlockCondition;
      }
    }
    export namespace CustomData {
      export interface FurnitureData {
        id: System.String;
        name: System.String;
        iconId: System.String;
        type: Torappu.BuildingData.FurnitureType;
        location: Torappu.BuildingData.FurnitureLocation;
        category: Torappu.BuildingData.FurnitureCategory;
        rarity: System.Int32;
        themeId: System.String;
        width: System.Int32;
        depth: System.Int32;
        height: System.Int32;
        comfort: System.Int32;
        usage: System.String;
        description: System.String;
        obtainApproach: System.String;
        processedProductId: System.String;
        processedProductCount: System.Int32;
        processedByProductPercentage: System.Int32;
        processedByProductGroup: System.Collections.Generic.List<Torappu.BuildingData.WorkshopExtraWeightItem>;
        canBeDestroy: System.Boolean;
        isOnly: System.Int32;
      }
      export interface ThemeData {
        id: System.String;
        name: System.String;
        desc: System.String;
        quickSetup: System.Collections.Generic.List<Torappu.BuildingData.CustomData.ThemeQuickSetupItem>;
      }
      export interface GroupData {
        id: System.String;
        name: System.String;
        themeId: System.String;
        comfort: System.Int32;
        count: System.Int32;
        furniture: System.Collections.Generic.List<System.String>;
      }
      export interface ThemeQuickSetupItem {
        furnitureId: System.String;
        pos0: System.Int32;
        pos1: System.Int32;
      }
      export interface FurnitureTypeData {
        type: Torappu.BuildingData.FurnitureType;
        name: System.String;
      }
      export interface DormitoryDefaultFurnitureItem {
        furnitureId: System.String;
        xOffset: System.Int32;
        yOffset: System.Int32;
        defaultPrefabId: System.String;
      }
    }
    export namespace ManufactFormula {
      export interface UnlockRoom {
        roomId: Torappu.BuildingData.RoomType;
        roomLevel: System.Int32;
        roomCount: System.Int32;
      }
      export interface UnlockStage {
        stageId: System.String;
        rank: System.Int32;
      }
    }
    export namespace WorkshopFormula {
      export interface UnlockRoom {
        roomId: Torappu.BuildingData.RoomType;
        roomLevel: System.Int32;
        roomCount: System.Int32;
      }
      export interface UnlockStage {
        stageId: System.String;
        rank: System.Int32;
      }
    }
    export namespace ShopFormula {
      export interface UnlockRoom {
        roomId: Torappu.BuildingData.RoomType;
        roomLevel: System.Int32;
      }
    }
    export namespace CreditFormula {
      export interface ValueModel {
        basic: System.Int32;
        addition: System.Int32;
      }
    }
  }
  export namespace CampaignData {
    export interface CampaignDropInfo {
      firstPassRewards: Torappu.ItemBundle[];
      passRewards: Torappu.WeightItemBundle[][];
      displayDetailRewards: System.Collections.Generic.List<Torappu.StageData.DisplayDetailRewards>;
    }
    export interface BreakRewardLadder {
      DEFAULT: Torappu.CampaignData.BreakRewardLadder;
      killCnt: System.Int32;
      breakFeeAdd: System.Int32;
      rewards: Torappu.ItemBundle[];
    }
    export interface DropLadder {
      DEFAULT: Torappu.CampaignData.DropLadder;
      killCnt: System.Int32;
      dropInfo: Torappu.CampaignData.CampaignDropInfo;
    }
    export interface GainLadder {
      DEFAULT: Torappu.CampaignData.GainLadder;
      killCnt: System.Int32;
      apFailReturn: System.Int32;
      favor: System.Int32;
      expGain: System.Int32;
      goldGain: System.Int32;
      displayDiamondShdNum: System.Int32;
    }
    export interface DropGainInfo {
      dropLadders: System.Collections.Generic.List<Torappu.CampaignData.DropLadder>;
      gainLadders: System.Collections.Generic.List<Torappu.CampaignData.GainLadder>;
      displayRewards: System.Collections.Generic.List<Torappu.StageData.DisplayRewards>;
      displayDetailRewards: System.Collections.Generic.List<Torappu.StageData.DisplayDetailRewards>;
    }
  }
  export namespace CharacterData {
    export interface AttributesKeyFrame {
    }
    export interface AttributesDeltaKeyFrame {
    }
    export interface UnlockCondition {
      phase: Torappu.EvolvePhase;
      level: System.Int32;
    }
    export interface TalentDataBundle {
      candidates: Torappu.TalentData[];
      // <>f__am$cache0: System.Comparison<Torappu.TalentData>;
      // <>f__am$cache1: System.Comparison<Torappu.TalentData>;
    }
    export interface TraitData {
      unlockCondition: Torappu.CharacterData.UnlockCondition;
      requiredPotentialRank: System.Int32;
      blackboard: Torappu.Blackboard;
      overrideDescripton: System.String;
      prefabKey: System.String;
      rangeId: System.String;
    }
    export interface TraitDataBundle {
      candidates: Torappu.CharacterData.TraitData[];
      // <>f__am$cache0: System.Comparison<Torappu.CharacterData.TraitData>;
    }
    export interface PhaseData {
      characterPrefabKey: System.String;
      rangeId: System.String;
      maxLevel: System.Int32;
      attributesKeyFrames: Torappu.CharacterData.AttributesKeyFrame;
      evolveCost: Torappu.ItemBundle[];
    }
    export interface MainSkill {
      skillId: System.String;
      overridePrefabKey: System.String;
      overrideTokenKey: System.String;
      specializeLevelUpData: Torappu.CharacterData.MainSkill.SpecializeLevelData[];
      initialUnlockCond: Torappu.CharacterData.UnlockCondition;
    }
    export interface PotentialRank {
      type: Torappu.CharacterData.PotentialRank.TypeEnum;
      description: System.String;
      buff: Torappu.ExternalBuff;
      equivalentCost: Torappu.ItemBundle[];
    }
    export interface PotentialCost {
      itemId: System.String;
      percent: System.Single;
    }
    export interface SkillLevelCost {
      unlockCond: Torappu.CharacterData.UnlockCondition;
      lvlUpCost: Torappu.ItemBundle[];
    }
    export namespace MainSkill {
      export interface SpecializeLevelData {
        unlockCond: Torappu.CharacterData.UnlockCondition;
        lvlUpTime: System.Int32;
        levelUpCost: Torappu.ItemBundle[];
      }
    }
    export namespace PotentialRank {
      export enum TypeEnum {
        BUFF = "BUFF",
        CUSTOM = "CUSTOM",
      }
    }
  }
  export namespace CharacterInst {
    export interface Metadata {
      characterKey: System.String;
      level: System.Int32;
      phase: Torappu.EvolvePhase;
      favorBattlePhase: System.Int32;
      potentialRank: System.Int32;
      playerInstId: System.Int32;
    }
  }
  export namespace CharPatchData {
    export interface PatchInfo {
      tmplIds: System.Collections.Generic.List<System.String>;
      defaultPatch: System.String;
    }
    export interface UnlockCond {
      conds: System.Collections.Generic.List<Torappu.CharPatchData.UnlockCond.Item>;
    }
    export interface PatchDetailInfo {
      patchId: System.String;
      sortId: System.Int32;
      infoParam: System.String;
    }
    export namespace UnlockCond {
      export interface Item {
        stageId: System.String;
        completeState: Torappu.PlayerBattleRank;
      }
    }
  }
  export namespace BattleVoiceOption {
    export enum BattleVoiceType {
      BATTLE_START = "BATTLE_START",
      ENCOUNTER_ENEMY = "ENCOUNTER_ENEMY",
      PLACE_CHAR = "PLACE_CHAR",
      FOCUS_CHAR = "FOCUS_CHAR",
      SKILL_ACTIVE = "SKILL_ACTIVE",
      SKILL_PASSIVE_IMP = "SKILL_PASSIVE_IMP",
      SKILL_PASSIVE_NOR = "SKILL_PASSIVE_NOR",
      NORMAL_ATTACK = "NORMAL_ATTACK",
      E_NUM = "E_NUM",
    }
  }
  export namespace KeyFrames {
    export interface KeyFrame<TInput,TOutput> {
      level: System.Int32;
      data: TInput;
    }
  }
  export namespace CrisisServerData {
    export interface SeasonInfo {
      seasonId: System.String;
      stages: System.Collections.Generic.Dictionary<System.String,Torappu.CrisisStageData>;
      permStageGroup: System.Collections.Generic.List<Torappu.CrisisPermStageGroup>;
      tempStageGroup: System.Collections.Generic.List<Torappu.CrisisTempStageGroup>;
      trainStageGroup: System.Collections.Generic.List<System.String>;
    }
    export interface TrainingInfo {
      stages: System.Collections.Generic.Dictionary<System.String,Torappu.CrisisStageData>;
      runeInfo: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<System.String>>;
    }
  }
  export namespace CrisisClientData {
    export interface SeasonInfo {
      seasonId: System.String;
      startTs: System.Int64;
      endTs: System.Int64;
      name: System.String;
      crisisRuneCoinUnlockItem: Torappu.ItemBundle;
      permBgm: System.String;
      medalGroupId: System.String;
      bgmHardPoint: System.Int32;
      permBgmHard: System.String;
    }
    export interface Meta {
      stages: System.Collections.Generic.Dictionary<System.String,System.String>;
      icons: System.Collections.Generic.List<System.String>;
    }
  }
  export namespace EnemyDatabase {
    export interface EnemyDataMetaAttribute {
      AssignName: System.String;
    }
    export interface EnemyData {
      name: Torappu.Undefinable<System.String>;
      description: Torappu.Undefinable<System.String>;
      prefabKey: Torappu.Undefinable<System.String>;
      attributes: Torappu.EnemyDatabase.AttributesData;
      lifePointReduce: Torappu.Undefinable<System.Int32>;
      rangeRadius: Torappu.Undefinable<System.Single>;
      talentBlackboard: Torappu.Blackboard;
      skills: Torappu.LevelData.EnemyData.ESkillData[];
      spData: Torappu.LevelData.EnemyData.ESpData;
    }
    export interface EnemyLevel {
      level: System.Int32;
      enemyData: Torappu.EnemyDatabase.EnemyData;
    }
    export interface AttributesData {
      maxHp: Torappu.Undefinable<System.Int32>;
      atk: Torappu.Undefinable<System.Int32>;
      def: Torappu.Undefinable<System.Int32>;
      magicResistance: Torappu.Undefinable<System.Single>;
      cost: Torappu.Undefinable<System.Int32>;
      blockCnt: Torappu.Undefinable<System.Int32>;
      moveSpeed: Torappu.Undefinable<System.Single>;
      attackSpeed: Torappu.Undefinable<System.Single>;
      baseAttackTime: Torappu.Undefinable<System.Single>;
      respawnTime: Torappu.Undefinable<System.Int32>;
      hpRecoveryPerSec: Torappu.Undefinable<System.Single>;
      spRecoveryPerSec: Torappu.Undefinable<System.Single>;
      maxDeployCount: Torappu.Undefinable<System.Int32>;
      massLevel: Torappu.Undefinable<System.Int32>;
      baseForceLevel: Torappu.Undefinable<System.Int32>;
      tauntLevel: Torappu.Undefinable<System.Int32>;
      stunImmune: Torappu.Undefinable<System.Boolean>;
      silenceImmune: Torappu.Undefinable<System.Boolean>;
      sleepImmune: Torappu.Undefinable<System.Boolean>;
    }
  }
  export namespace GachaPoolData {
    export interface GachaPoolItem {
      charId: System.String;
      charName: System.String;
      rarity: Torappu.RarityRank;
      professionName: System.String;
      weight: System.Int32;
      dedicatedRate: System.Single;
      rateLockRatio: System.Single;
      computedRate: System.Single;
    }
    export interface GachaPoolConstants {
      baseRarityRate: System.Collections.Generic.Dictionary<System.Int32,System.Single>;
    }
  }
  export namespace BasedRecruitPool {
    export interface RecruitCharacter {
      charId: System.String;
      weight: System.Int32;
    }
    export interface RecruitConstants {
      tagPriceList: System.Collections.Generic.Dictionary<System.Int32,System.Int32>;
      maxRecruitTime: System.Int32;
    }
  }
  export namespace RecruitPool {
    export interface RecruitTime {
      timeLength: System.Int32;
      recruitPrice: System.Int32;
    }
  }
  export namespace SpecialRecruitPool {
    export interface SpecialRecruitCostData {
      timeLength: System.Int32;
      recruitPrice: System.Int32;
      itemCosts: Torappu.ItemBundle[];
    }
  }
  export namespace GachaData {
    export interface RecruitRange {
      rarityStart: System.Int32;
      rarityEnd: System.Int32;
    }
    export interface CarouselData {
      poolId: System.String;
      index: System.Int32;
      startTime: System.Int64;
      endTime: System.Int64;
      spriteId: System.String;
    }
    export interface FreeLimitGachaData {
      poolId: System.String;
      openTime: System.Int64;
      endTime: System.Int64;
      freeCount: System.Int32;
    }
    export interface LimitTenGachaTkt {
      itemId: System.String;
      endTime: System.Int64;
    }
    export interface LinkageTenGachaTkt {
      itemId: System.String;
      endTime: System.Int64;
      gachaPoolId: System.String;
    }
  }
  export namespace GachaDetailData {
    export enum GachaType {
      TEXT = "TEXT",
      UP_CHAR = "UP_CHAR",
      AVAIL_CHAR = "AVAIL_CHAR",
      PICKUP_WITH_6 = "PICKUP_WITH_6",
      PICKUP_WITH_56 = "PICKUP_WITH_56",
      UP_CHAR_WITH_LIMIT = "UP_CHAR_WITH_LIMIT",
    }
    export enum GachaTextType {
      NORMAL_HIGHLIGHT = "NORMAL_HIGHLIGHT",
      NORMAL_GRAY = "NORMAL_GRAY",
      NORMAL_GRAY_UP = "NORMAL_GRAY_UP",
      NEWBEE_HIGHLIGHT = "NEWBEE_HIGHLIGHT",
      NEWBEE_NORMAL_TEXT = "NEWBEE_NORMAL_TEXT",
      NORMAL_TEXT = "NORMAL_TEXT",
    }
    export interface GachaObject {
      gachaObject: Torappu.GachaDetailData.GachaType;
      type: Torappu.GachaDetailData.GachaTextType;
      param: System.String;
    }
    export interface GachaUpChar {
      perCharList: System.Collections.Generic.List<Torappu.GachaDetailData.GachaUpChar.GachaPerChar>;
    }
    export interface GachaAvailChar {
      perAvailList: System.Collections.Generic.List<Torappu.GachaDetailData.GachaAvailChar.GachaPerAvail>;
    }
    export interface GachaWeightUpChar {
      rarityRank: Torappu.RarityRank;
      charId: System.String;
      weight: System.Int32;
    }
    export interface GachaDetailText {
      type: System.Int32;
      title: System.String;
      text: System.String;
    }
    export namespace GachaUpChar {
      export interface GachaPerChar {
        rarityRank: Torappu.RarityRank;
        charIdList: System.Collections.Generic.List<System.String>;
        percent: System.Single;
        count: System.Int32;
      }
    }
    export namespace GachaAvailChar {
      export interface GachaPerAvail {
        rarityRank: Torappu.RarityRank;
        charIdList: System.Collections.Generic.List<System.String>;
        totalPercent: System.Single;
      }
    }
  }
  export namespace GameDataConsts {
    export interface CharAssistRefreshTimeState {
      Hour: System.Int32;
      Minute: System.Int32;
    }
  }
  export namespace HandBookInfoTextViewData {
    export interface InfoTextAudio {
      infoText: System.String;
      audioName: System.String;
    }
  }
  export namespace HandBookStoryViewData {
    export interface StoryText {
      storyText: System.String;
      unLockType: Torappu.DataUnlockType;
      unLockParam: System.String;
      unLockString: System.String;
    }
  }
  export namespace HandbookDisplayCondition {
    export enum DisplayType {
      DISPLAY_IF_CHAREXIST = "DISPLAY_IF_CHAREXIST",
      INVISIBLE_IF_CHAREXIST = "INVISIBLE_IF_CHAREXIST",
    }
  }
  export namespace ItemData {
    export interface StageDropInfo {
      stageId: System.String;
      occPer: Torappu.OccPer;
    }
    export interface BuildingProductInfo {
      roomType: Torappu.BuildingData.RoomType;
      formulaId: System.String;
    }
  }
  export namespace RouteData {
    export interface CheckpointData {
      type: Torappu.CheckpointType;
      time: System.Single;
      position: Torappu.GridPosition;
      // reachOffset: UnityEngine.Vector2;
      randomizeReachOffset: System.Boolean;
      reachDistance: System.Single;
    }
  }
  export namespace LevelData {
    export enum Difficulty {
      NONE = "NONE",
      NORMAL = "NORMAL",
      FOUR_STAR = "FOUR_STAR",
      ALL = "ALL",
    }
    export interface Options {
      characterLimit: System.Int32;
      maxLifePoint: System.Int32;
      initialCost: System.Int32;
      maxCost: System.Int32;
      costIncreaseTime: System.Single;
      moveMultiplier: System.Single;
      steeringEnabled: System.Boolean;
      isTrainingLevel: System.Boolean;
      isHardTrainingLevel: System.Boolean;
      functionDisableMask: Torappu.BattleFunctionDisableMask;
    }
    export interface EnemyData {
      name: System.String;
      description: System.String;
      key: System.String;
      attributes: Torappu.AttributesData;
      alias: System.String;
      lifePointReduce: System.Int32;
      rangeRadius: System.Single;
      talentBlackboard: Torappu.Blackboard;
      skills: Torappu.LevelData.EnemyData.ESkillData[];
      spData: Torappu.LevelData.EnemyData.ESpData;
      // m_runtimeData: Torappu.LevelData.EnemyData.RuntimeData;
    }
    export interface EnemyDataDbReference {
      useDb: System.Boolean;
      id: System.String;
      level: System.Int32;
      overwrittenData: Torappu.EnemyDatabase.EnemyData;
    }
    export interface WaveData {
      preDelay: System.Single;
      postDelay: System.Single;
      maxTimeWaitingForNextWave: System.Single;
      fragments: Torappu.LevelData.WaveData.FragmentData[];
    }
    export interface BranchData {
      phases: Torappu.LevelData.BranchData.PhaseData[];
    }
    export interface GlobalBuffData {
      prefabKey: System.String;
      blackboard: Torappu.Blackboard;
      overrideCameraEffect: System.String;
    }
    export interface PredefinedData {
      characterInsts: Torappu.LevelData.PredefinedData.PredefinedCharacter[];
      tokenInsts: Torappu.LevelData.PredefinedData.PredefinedCharacter[];
      characterCards: Torappu.LevelData.PredefinedData.PredefinedCard[];
      tokenCards: Torappu.LevelData.PredefinedData.PredefinedTokenCard[];
    }
    export namespace EnemyData {
      export interface ESkillData {
        prefabKey: System.String;
        priority: System.Int32;
        cooldown: System.Single;
        initCooldown: System.Single;
        spCost: System.Int32;
        blackboard: Torappu.Blackboard;
      }
      export interface ESpData {
        spType: Torappu.SpType;
        maxSp: System.Int32;
        initSp: System.Int32;
        increment: System.Single;
      }
      export interface RuntimeData {
        dynamicAbilities: System.Collections.Generic.List<Torappu.DynamicAbilityData>;
      }
    }
    export namespace WaveData {
      export interface FragmentData {
        preDelay: System.Single;
        actions: Torappu.LevelData.WaveData.FragmentData.ActionData[];
      }
      export namespace FragmentData {
        export interface ActionData {
          actionType: Torappu.LevelData.WaveData.FragmentData.ActionData.ActionType;
          managedByScheduler: System.Boolean;
          key: System.String;
          count: System.Int32;
          preDelay: System.Single;
          interval: System.Single;
          useExtraRoute: System.Boolean;
          routeIndex: System.Int32;
          blockFragment: System.Boolean;
          autoPreviewRoute: System.Boolean;
          isUnharmfulAndAlwaysCountAsKilled: System.Boolean;
          hiddenGroup: System.String;
          randomSpawnGroupKey: System.String;
          weight: System.Int32;
          dontBlockWave: System.Boolean;
        }
        export namespace ActionData {
          export enum ActionType {
            SPAWN = "SPAWN",
            PREVIEW_CURSOR = "PREVIEW_CURSOR",
            STORY = "STORY",
            TUTORIAL = "TUTORIAL",
            PLAY_BGM = "PLAY_BGM",
            DISPLAY_ENEMY_INFO = "DISPLAY_ENEMY_INFO",
            ACTIVATE_PREDEFINED = "ACTIVATE_PREDEFINED",
            PLAY_OPERA = "PLAY_OPERA",
            TRIGGER_PREDEFINED = "TRIGGER_PREDEFINED",
            E_NUM = "E_NUM",
          }
        }
      }
    }
    export namespace BranchData {
      export interface PhaseData {
        preDelay: System.Single;
        actions: Torappu.LevelData.WaveData.FragmentData.ActionData[];
      }
    }
    export namespace PredefinedData {
      export interface PredefinedInst {
        hidden: System.Boolean;
        alias: System.String;
      }
      export interface PredefinedCharacter {
        position: Torappu.GridPosition;
        direction: Torappu.SharedConsts.Direction;
      }
      export interface PredefinedCard {
      }
      export interface PredefinedTokenCard {
        initialCnt: System.Int32;
      }
    }
  }
  export namespace TileData {
    export enum HeightType {
      LOWLAND = "LOWLAND",
      HIGHLAND = "HIGHLAND",
      E_NUM = "E_NUM",
    }
  }
  export namespace MapData {
    export interface Edge {
      pos: Torappu.GridPosition;
      direction: Torappu.SharedConsts.Direction;
      blockMask: Torappu.MotionMask;
    }
  }
  export namespace MeetingClueData {
    export interface ClueData {
      clueId: System.String;
      clueName: System.String;
      clueType: System.String;
      number: System.Int32;
    }
    export interface ClueTypeData {
      clueType: System.String;
      clueNumber: System.Int32;
    }
    export interface ReceiveTimeBonus {
      receiveTimes: System.Int32;
      receiveBonus: System.Int32;
    }
  }
  export namespace DailyMissionGroupInfo {
    export interface periodInfo {
      missionGroupId: System.String;
      rewardGroupId: System.String;
      period: System.Int32[];
    }
  }
  export namespace RoguelikeConstTable {
    export interface PlayerLevelData {
      exp: System.Int32;
      populationUp: System.Int32;
      squadCapacityUp: System.Int32;
      battleCharLimitUp: System.Int32;
    }
    export interface RecruitData {
      recruitPopulation: System.Int32;
      upgradePopulation: System.Int32;
    }
    export interface CharUpgradeData {
      evolvePhase: Torappu.EvolvePhase;
      skillLevel: System.Int32;
      skillSpecializeLevel: System.Int32;
    }
    export interface EventTypeData {
      name: System.String;
      description: System.String;
    }
  }
  export namespace RuneData {
    export interface Selector {
      professionMask: Torappu.ProfessionCategory;
      buildableMask: Torappu.BuildableType;
      charIdFilter: System.Collections.Generic.List<System.String>;
      enemyIdFilter: System.Collections.Generic.List<System.String>;
      skillIdFilter: System.Collections.Generic.List<System.String>;
      tileKeyFilter: System.Collections.Generic.List<System.String>;
    }
  }
  export namespace RuneTable {
    export interface PackedRuneInput {
      runes: System.Collections.Generic.List<Torappu.RuneTable.PackedRuneData>;
    }
    export interface PackedRuneData {
      id: System.String;
      points: System.Single;
      mutexGroupKey: System.String;
      description: System.String;
      runes: System.Collections.Generic.List<Torappu.RuneData>;
    }
    export interface RuneStageExtraData {
      stageId: System.String;
      runes: System.Collections.Generic.List<Torappu.RuneTable.PackedRuneData>;
    }
  }
  export namespace CrisisData {
    export enum StageType {
      TEMPORARY = "TEMPORARY",
      PERMANENT = "PERMANENT",
    }
    export interface RuneReleaseData {
      stageId: System.String;
      runeId: System.Collections.Generic.List<System.String>;
      releaseTime: System.Int64;
    }
    export interface CrisisStagePointLevelChallengeInfo {
      pointCount: System.Int32;
      shopCoin: System.Int32;
      runeCoin: System.Int32;
      itemReward: Torappu.ItemBundle;
      descrption: System.String;
    }
    export interface CrisisTeRunePackChallengeInfo {
      challengeId: System.String;
      slotIndex: System.Int32;
      shopCoin: System.Int32;
      runeCoin: System.Int32;
      itemReward: Torappu.ItemBundle;
      descrption: System.String;
      ableToUseBenefit: System.Boolean;
    }
    export interface CrisisPeRunePackChallengeInfo {
      challengeId: System.String;
      slotIndex: System.Int32;
      shopCoin: System.Int32;
      runeCoin: System.Int32;
      itemReward: Torappu.ItemBundle;
      descrption: System.String;
      unlockTime: System.Int64;
    }
    export interface RuneInfo {
      stageId: System.String;
      runeId: System.String;
      iconId: System.String;
      bgPicId: System.String;
      slotId: System.Int32;
      groupId: System.String;
      unlockCount: System.Int32;
      runeName: System.String;
      desc: System.String;
    }
    export interface SeasonShopInfo {
      goodId: System.String;
      displayName: System.String;
      slotId: System.Int32;
      item: Torappu.ItemBundle;
      progressGoodId: System.String;
      price: System.Int32;
      availCount: System.Int32;
    }
    export interface PermStageGroup {
      runeGroupId: System.String;
      stageId: System.String;
      releaseInfo: System.Collections.Generic.List<Torappu.CrisisData.RuneReleaseData>;
      runeList: System.String[];
      stagePointLevelInfo: System.Collections.Generic.Dictionary<System.Int32,Torappu.CrisisData.CrisisStagePointLevelChallengeInfo>;
      stageChallengeInfo: System.Collections.Generic.List<Torappu.CrisisData.CrisisPeRunePackChallengeInfo>;
    }
    export interface TempStageGroup {
      runeGroupId: System.String;
      stageName: System.String;
      startTs: System.Int64;
      endTs: System.Int64;
      runeList: System.String[];
      stagePointLevelInfo: System.Collections.Generic.Dictionary<System.Int32,Torappu.CrisisData.CrisisStagePointLevelChallengeInfo>;
      stageChallengeInfo: System.Collections.Generic.List<Torappu.CrisisData.CrisisTeRunePackChallengeInfo>;
    }
    export interface CrisisStageData {
      stageId: System.String;
      mapId: System.String;
      code: System.String;
      name: System.String;
      loadingPicId: System.String;
      description: System.String;
      picId: System.String;
    }
    export interface ProgressGoodItem {
      order: System.Int32;
      price: System.Int32;
      displayName: System.String;
      item: Torappu.ItemBundle;
    }
    export interface LongTermShopInfo {
      goodId: System.String;
      displayName: System.String;
      seasonId: System.String;
      slotId1: System.Int32;
      slotId2: System.Int32;
      item: Torappu.ItemBundle;
      progressGoodId: System.String;
      price: System.Int32;
      availCount: System.Int32;
    }
    export interface SeasonInfo {
      seasonId: System.String;
      startTs: System.Int64;
      endTs: System.Int64;
      crisisStageData: System.Collections.Generic.List<Torappu.CrisisData.CrisisStageData>;
      permStageGroup: System.Collections.Generic.List<Torappu.CrisisData.PermStageGroup>;
      tempStageGroup: System.Collections.Generic.List<Torappu.CrisisData.TempStageGroup>;
      runeInfoList: System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<Torappu.CrisisData.RuneInfo>>;
      shopInfoList: System.Collections.Generic.List<Torappu.CrisisData.SeasonShopInfo>;
      progressGoodInfo: System.Collections.Generic.List<Torappu.CrisisData.ProgressGoodItem>;
    }
    export interface RuneMapInfo {
    }
    export interface TrainingInfo {
    }
  }
  export namespace ShopClientData {
    export interface ShopKeeperData {
      welcomeWords: System.Collections.Generic.List<Torappu.ShopKeeperWord>;
      clickWords: System.Collections.Generic.List<Torappu.ShopKeeperWord>;
    }
  }
  export namespace ShopCarouselData {
    export interface Item {
      spriteId: System.String;
      startTime: System.Int64;
      endTime: System.Int64;
      cmd: Torappu.ShopRouteTarget;
      param1: System.String;
      skinId: System.String;
      furniId: System.String;
    }
  }
  export namespace SkillDataBundle {
    export interface LevelData {
      name: System.String;
      rangeId: System.String;
      description: System.String;
      skillType: Torappu.SkillType;
      spData: Torappu.SpData;
      prefabId: System.String;
      // duration: CodeStage.AntiCheat.ObscuredTypes.ObscuredFloat;
      blackboard: Torappu.Blackboard;
    }
  }
  export namespace CharSkinData {
    export interface DisplaySkin {
      skinName: System.String;
      colorList: System.Collections.Generic.List<System.String>;
      titleList: System.Collections.Generic.List<System.String>;
      modelName: System.String;
      drawerName: System.String;
      skinGroupId: System.String;
      skinGroupName: System.String;
      skinGroupSortIndex: System.Int32;
      content: System.String;
      dialog: System.String;
      usage: System.String;
      description: System.String;
      obtainApproach: System.String;
      sortId: System.Int32;
      displayTagId: System.String;
      getTime: System.Int64;
      onYear: System.Int32;
      onPeriod: System.Int32;
    }
    export interface TokenSkinInfo {
      tokenId: System.String;
      tokenSkinId: System.String;
    }
    export interface BattleSkin {
      EMPTY: Torappu.CharSkinData.BattleSkin;
      overwritePrefab: System.Boolean;
      skinOrPrefabId: System.String;
    }
  }
  export namespace StageData {
    export enum PerformanceStageFlag {
      NORMAL_STAGE = "NORMAL_STAGE",
      PERFORMANCE_STAGE = "PERFORMANCE_STAGE",
    }
    export interface DisplayRewards {
      type: Torappu.ItemType;
      id: System.String;
      dropType: Torappu.StageDropType;
    }
    export interface DisplayDetailRewards {
      occPercent: Torappu.OccPer;
      GetPercent: System.Single;
      CannotGetPercent: System.Single;
    }
    export interface StageDropInfo {
      firstPassRewards: Torappu.ItemBundle[];
      firstCompleteRewards: Torappu.ItemBundle[];
      passRewards: Torappu.WeightItemBundle[][];
      completeRewards: Torappu.WeightItemBundle[][];
      displayRewards: System.Collections.Generic.List<Torappu.StageData.DisplayRewards>;
      displayDetailRewards: System.Collections.Generic.List<Torappu.StageData.DisplayDetailRewards>;
    }
    export interface ConditionDesc {
      stageId: System.String;
      completeState: Torappu.PlayerBattleRank;
    }
    export interface ExtraConditionDesc {
      index: System.Int32;
      template: System.String;
      unlockParam: System.Collections.Generic.List<System.String>;
    }
    export interface SpecialStoryInfo {
      stageId: System.String;
      rewards: System.Collections.Generic.List<Torappu.ItemBundle>;
      progressInfo: Torappu.StageData.SpecialProgressInfo;
    }
    export interface SpecialProgressInfo {
      progressType: Torappu.StageData.SpecialStageUnlockProgressType;
      descList: System.Collections.Generic.Dictionary<System.Int32,System.String>;
    }
    export enum SpecialStageUnlockProgressType {
      ONCE = "ONCE",
      PROGRESS = "PROGRESS",
    }
  }
  export namespace RuneStageGroupData {
    export interface RuneStageInst {
      stageId: System.String;
      activePackedRuneIds: System.String[];
    }
  }
  export namespace StageStartCond {
    export interface RequireChar {
      charId: System.String;
      evolvePhase: Torappu.EvolvePhase;
    }
  }
  export namespace StoryData {
    export interface Trigger {
      TRIGGER_TYPE_NUM: System.Int32;
      type: Torappu.StoryData.Trigger.TriggerType;
      key: System.String;
      useRegex: System.Boolean;
      // m_regex: RegExp;
    }
    export interface Condition {
      minProgress: System.Int32;
      maxProgress: System.Int32;
      minPlayerLevel: System.Int32;
      requiredFlags: System.String[];
      excludedFlags: System.String[];
      requiredStages: Torappu.StoryData.Condition.StageCondition[];
    }
    export namespace Trigger {
      export enum TriggerType {
        GAME_START = "GAME_START",
        BEFORE_BATTLE = "BEFORE_BATTLE",
        AFTER_BATTLE = "AFTER_BATTLE",
        SWITCH_TO_SCENE = "SWITCH_TO_SCENE",
        PAGE_LOADED = "PAGE_LOADED",
        STORY_FINISH = "STORY_FINISH",
        CUSTOM_OPERATION = "CUSTOM_OPERATION",
        STORY_FINISH_OR_PAGE_LOADED = "STORY_FINISH_OR_PAGE_LOADED",
        ACTIVITY_LOADED = "ACTIVITY_LOADED",
        ACTIVITY_ANNOUNCE = "ACTIVITY_ANNOUNCE",
        CRISIS_SEASON_LOADED = "CRISIS_SEASON_LOADED",
        E_NUM = "E_NUM",
      }
    }
    export namespace Condition {
      export interface StageCondition {
        stageId: System.String;
        minState: Torappu.PlayerStageState;
        maxState: Torappu.PlayerStageState;
      }
    }
  }
  export namespace TipData {
    export enum Category {
      NONE = "NONE",
      BATTLE = "BATTLE",
      UI = "UI",
      BUILDING = "BUILDING",
      GACHA = "GACHA",
      MISC = "MISC",
      ALL = "ALL",
    }
  }
  export namespace ListDictConverter {
    export interface GenericContext {
      // dictCls: System.Type;
      // listDictCls: System.Type;
      // keyValueCls: System.Type;
      // keyProp: System.Reflection.PropertyInfo;
      // valueProp: System.Reflection.PropertyInfo;
    }
  }
  export namespace ListDict {
    export interface Equality<TKey,TValue> {
    }
  }
  export namespace SocketNetwork {
    export interface NetMsg {
      // s_rsync_obj: System.Object;
      // s_pool: Torappu.ObjectPool.ObjectPool<Torappu.SocketNetwork.NetMsg>;
      DEFAULT_MSG_DATA_CAPACITY: System.Int32;
      LEN_SIZE: System.Int32;
      ID_SIZE: System.Int32;
      HEAD_SIZE: System.Int32;
      // <id>k__BackingField: Torappu.SocketNetwork.NetMsgID;
      // <data>k__BackingField: Torappu.DataStream.ByteArray;
      // <>f__am$cache0: System.Func<Torappu.SocketNetwork.NetMsg>;
    }
    export interface NetMsgID {
      // <value>k__BackingField: System.UInt32;
    }
    export interface Protocol {
      // <id>k__BackingField: System.UInt32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_id: XLua.DelegateBridge;
      // __Hotfix0_set_id: XLua.DelegateBridge;
      // __Hotfix0_ReadFrom: XLua.DelegateBridge;
      // __Hotfix0_WriteTo: XLua.DelegateBridge;
      // __Hotfix0_Recycle: XLua.DelegateBridge;
      // __Hotfix0_OnRead: XLua.DelegateBridge;
      // __Hotfix0_OnWrite: XLua.DelegateBridge;
      // __Hotfix0_OnRecycle: XLua.DelegateBridge;
      // __Hotfix0_ReadByteArray: XLua.DelegateBridge;
    }
    export interface INetMsgProcessor {
    }
    export interface NetMsgHandler {
    }
    export interface INetProtocolSuite {
    }
    export interface SocketNet {
      // m_connection: Torappu.SocketNetwork.Connections.Connection;
      // m_processor: Torappu.SocketNetwork.INetMsgProcessor;
      // <protocolSuite>k__BackingField: Torappu.SocketNetwork.INetProtocolSuite;
      // m_tempHander: System.Collections.Generic.Dictionary<Torappu.SocketNetwork.NetMsgID,Torappu.SocketNetwork.NetMsgHandler>;
      // m_lastSendTime: System.Int64;
      // eStateChanged: System.Action<Torappu.SocketNetwork.Connections.ConnectionState>;
      // sWatch: System.Diagnostics.Stopwatch;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_protocolSuite: XLua.DelegateBridge;
      // __Hotfix0_set_protocolSuite: XLua.DelegateBridge;
      // __Hotfix0_add_eStateChanged: XLua.DelegateBridge;
      // __Hotfix0_remove_eStateChanged: XLua.DelegateBridge;
      // __Hotfix0_get_ping: XLua.DelegateBridge;
      // __Hotfix0_Init: XLua.DelegateBridge;
      // __Hotfix0_Connect: XLua.DelegateBridge;
      // __Hotfix0_DisConnect: XLua.DelegateBridge;
      // __Hotfix0_SendMsg: XLua.DelegateBridge;
      // __Hotfix1_SendMsg: XLua.DelegateBridge;
      // __Hotfix0_SendMsgWithCallback: XLua.DelegateBridge;
      // __Hotfix0_CancelMsgCallback: XLua.DelegateBridge;
      // __Hotfix0_get_connected: XLua.DelegateBridge;
      // __Hotfix0_Update: XLua.DelegateBridge;
      // __Hotfix0__InternalProcess: XLua.DelegateBridge;
      // __Hotfix0_get_highResolutionTick: XLua.DelegateBridge;
    }
    export namespace Connections {
      export interface Connection {
        REV_BUFF_SIZE: System.Int32;
        // m_revBuffer: Torappu.DataStream.ByteArray;
        // m_sendQueue: System.Collections.Generic.Queue<Torappu.SocketNetwork.NetMsg>;
        // m_receivedQueue: System.Collections.Generic.Queue<Torappu.SocketNetwork.NetMsg>;
        // m_state: Torappu.SocketNetwork.Connections.ConnectionState;
        // m_pathOfStateChange: System.Collections.Generic.Queue<Torappu.SocketNetwork.Connections.ConnectionState>;
        // m_beat: Torappu.SocketNetwork.Connections.HeartBeat;
        // m_asyncLock: System.Object;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_SendMsg: XLua.DelegateBridge;
        // __Hotfix0_GetReceivedMsg: XLua.DelegateBridge;
        // __Hotfix0_Start: XLua.DelegateBridge;
        // __Hotfix0_Stop: XLua.DelegateBridge;
        // __Hotfix0_get_state: XLua.DelegateBridge;
        // __Hotfix0_get_ping: XLua.DelegateBridge;
        // __Hotfix0__GetWaitingSendMsg: XLua.DelegateBridge;
        // __Hotfix0__SaveReceivedData: XLua.DelegateBridge;
        // __Hotfix0__ParseReceivedMsg: XLua.DelegateBridge;
        // __Hotfix0_HeartNoResponse: XLua.DelegateBridge;
        // __Hotfix0__ChangeState: XLua.DelegateBridge;
        // __Hotfix0_GetStateChange: XLua.DelegateBridge;
        // __Hotfix0_OnStart: XLua.DelegateBridge;
        // __Hotfix0_OnStop: XLua.DelegateBridge;
        // __Hotfix0_OnTryToSend: XLua.DelegateBridge;
      }
      export enum ConnectionState {
        NOT_EXIST_STATE = "NOT_EXIST_STATE",
        NULL = "NULL",
        CONNECTING = "CONNECTING",
        CONNECTED = "CONNECTED",
        CONNECTED_FAILED = "CONNECTED_FAILED",
        FAILED = "FAILED",
      }
      export interface HeartBeat {
        // m_connection: Torappu.SocketNetwork.Connections.Connection;
        // m_headCnt: System.UInt32;
        // m_beatThread: System.Threading.Thread;
        // m_watch: System.Diagnostics.Stopwatch;
        // m_estimate: Torappu.SocketNetwork.Connections.HeartBeat.PingCalculator;
        // m_determinate: Torappu.SocketNetwork.Connections.HeartBeat.PingCalculator;
        // m_calculator: Torappu.SocketNetwork.Connections.HeartBeat.PingCalculator;
        // m_tickMS: System.Int64;
        // m_ping: System.Int32;
        // m_noRespCnt: System.Int32;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_get_ping: XLua.DelegateBridge;
        // __Hotfix0__Estimate: XLua.DelegateBridge;
        // __Hotfix0__Determinate: XLua.DelegateBridge;
        // __Hotfix0__SetDeterminate: XLua.DelegateBridge;
        // __Hotfix0_Start: XLua.DelegateBridge;
        // __Hotfix0_NetLost: XLua.DelegateBridge;
        // __Hotfix0__Heat: XLua.DelegateBridge;
        // __Hotfix0_ProcHeartBeatRet: XLua.DelegateBridge;
        // __Hotfix0__GetTicks: XLua.DelegateBridge;
      }
      export interface TCPConnection {
        // m_socket: System.Net.Sockets.Socket;
        // m_asyncSendBuff: Torappu.DataStream.ByteArray;
        // m_asyncRevBuff: Torappu.DataStream.ByteArray;
        // SendCB: System.AsyncCallback;
        // RevCB: System.AsyncCallback;
        // _c__Hotfix0_ctor: XLua.DelegateBridge;
        // __Hotfix0_OnStart: XLua.DelegateBridge;
        // __Hotfix0__Connected: XLua.DelegateBridge;
        // __Hotfix0_OnStop: XLua.DelegateBridge;
        // __Hotfix0_OnTryToSend: XLua.DelegateBridge;
        // __Hotfix0__SendCallback: XLua.DelegateBridge;
        // __Hotfix0__TryRevData: XLua.DelegateBridge;
        // __Hotfix0__Received: XLua.DelegateBridge;
      }
      export namespace HeartBeat {
        export interface PingCalculator {
        }
      }
    }
  }
  export namespace Test {
    export interface EditorChecker {
      title: System.String;
      groups: System.String[];
    }
    export interface UnitTestBase {
    }
    export interface UnitTestLauncher {
    }
    export interface DisableLoggingTest {
      _log: System.Boolean;
    }
    export interface EnumAsDictionaryKeyTest {
      runNum: System.Int32;
      dict_without_comparator_: System.Collections.Generic.Dictionary<Torappu.Test.EnumAsDictionaryKeyTest.EnumType,System.String>;
      dict_with_comparator: System.Collections.Generic.Dictionary<Torappu.Test.EnumAsDictionaryKeyTest.EnumType,System.String>;
      dict_with_int: System.Collections.Generic.Dictionary<System.Int32,System.String>;
    }
    export namespace UnitTestBase {
      export interface UnitTestException {
      }
      export interface UAssert {
      }
    }
    export namespace EnumAsDictionaryKeyTest {
      export enum EnumType {
        kFoo = "kFoo",
        kBar = "kBar",
      }
    }
  }
  export namespace DataBind {
    export interface BindPosition {
      isDynamic: System.Boolean;
      // bindGameObject: UnityEngine.GameObject;
      // bindComponent: UnityEngine.MonoBehaviour;
      bindFieldName: System.String;
      bindListIndex: System.Int32;
      isBindList: System.Boolean;
    }
    export interface IDataBindWrapper {
    }
    export interface IBindProperty {
    }
    export interface BindProperty<T> {
      // _binders: Torappu.DataBind.DataBinder[];
      // m_isDirty: System.Boolean;
      // m_value: T;
    }
    export interface DynamicBindProperty<TProp,TValue> {
      // m_dynamicBinders: System.Collections.Generic.List<Torappu.DataBind.DataBinder>;
      // m_isLocked: System.Boolean;
    }
    export interface DataBinder<T> {
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_GetPropertyType: XLua.DelegateBridge;
      // __Hotfix0_OnValueChanged: XLua.DelegateBridge;
    }
    export interface DataBindSystem {
      // m_dirtyProps: System.Collections.Generic.List<Torappu.DataBind.IBindProperty>;
      // m_propsBuffer: System.Collections.Generic.List<Torappu.DataBind.IBindProperty>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_Update: XLua.DelegateBridge;
      // __Hotfix0_NotifyToUpdate: XLua.DelegateBridge;
    }
  }
  export namespace ObjectPool {
    export enum NotificationEvent {
      ON_ALLOCATE = "ON_ALLOCATE",
      ON_RECYCLE = "ON_RECYCLE",
    }
    export interface GameObjectPool {
      // m_counter: System.Int32;
      // m_options: Torappu.ObjectPool.GameObjectPool.Options;
      // m_unusedObjs: System.Collections.Generic.List<UnityEngine.GameObject>;
      // m_usingObjs: System.Collections.Generic.HashSet<UnityEngine.GameObject>;
      // m_constructor: System.Func<Torappu.ObjectPool.GameObjectPool,UnityEngine.GameObject>;
      // m_pendingObjsToAutoReuse: System.Collections.Generic.Queue<UnityEngine.GameObject>;
    }
    export interface GameObjectPoolComponent {
      _config: Torappu.ObjectPool.PoolManager.ObjectConfig;
      // m_pool: Torappu.ObjectPool.GameObjectPool;
    }
    export interface IReusable {
    }
    export interface ObjectPool<T> {
      // m_options: Torappu.ObjectPool.ObjectPool.Options<T>;
      // m_unusedObjs: System.Collections.Generic.Stack<T>;
      // m_usingObjs: System.Collections.Generic.HashSet<T>;
      // m_constructor: System.Func<T>;
      // m_pendingObjsToAutoReuse: System.Collections.Generic.Queue<T>;
    }
    export interface PoolManager {
      NON_RESOURCE_PREFIX: System.String;
      _usePoolManager: System.Boolean;
      _keepInNextScene: System.Boolean;
      _autoAddMissingPool: System.Boolean;
      _scenePools: Torappu.ObjectPool.PoolManager.ObjectConfig[];
      // m_keepInNextScene: System.Boolean;
      // m_assetLoader: Torappu.Resource.AbstractAssetLoader;
      // m_pools: System.Collections.Generic.Dictionary<System.String,Torappu.ObjectPool.GameObjectPool>;
      // m_instanceIdToPoolMap: System.Collections.Generic.Dictionary<System.Int32,Torappu.ObjectPool.GameObjectPool>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_instance: XLua.DelegateBridge;
      // __Hotfix0_get_usePoolManager: XLua.DelegateBridge;
      // __Hotfix0_get_assetLoader: XLua.DelegateBridge;
      // __Hotfix0_BattleOnly_RawRecycle: XLua.DelegateBridge;
      // __Hotfix0__NewPool: XLua.DelegateBridge;
      // __Hotfix1__NewPool: XLua.DelegateBridge;
      // __Hotfix2__NewPool: XLua.DelegateBridge;
      // __Hotfix0__ContainsPool: XLua.DelegateBridge;
      // __Hotfix0__AllocateInternal: XLua.DelegateBridge;
      // __Hotfix1__AllocateInternal: XLua.DelegateBridge;
      // __Hotfix0__RecycleInternal: XLua.DelegateBridge;
      // __Hotfix1__RecycleInternal: XLua.DelegateBridge;
      // __Hotfix2__RecycleInternal: XLua.DelegateBridge;
      // __Hotfix0__RecycleAsync: XLua.DelegateBridge;
      // __Hotfix1__RecycleAsync: XLua.DelegateBridge;
      // __Hotfix0__WaitForFixedSeconds: XLua.DelegateBridge;
      // __Hotfix0__GetNameOfPrefab: XLua.DelegateBridge;
      // __Hotfix0__NewPoolContainer: XLua.DelegateBridge;
      // __Hotfix0__NormalizeName: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_OnDuplicated: XLua.DelegateBridge;
      // __Hotfix0_OnDestroy: XLua.DelegateBridge;
      // __Hotfix0__OnNewObject: XLua.DelegateBridge;
      // __Hotfix0__OnSceneUnloaded: XLua.DelegateBridge;
      // __Hotfix0__OnSceneLoaded: XLua.DelegateBridge;
      // __Hotfix0_OnEnable: XLua.DelegateBridge;
      // __Hotfix0_OnDisable: XLua.DelegateBridge;
      // __Hotfix0_Start: XLua.DelegateBridge;
      // __Hotfix0_LoadPool: XLua.DelegateBridge;
      // __Hotfix0_LoadPools: XLua.DelegateBridge;
      // __Hotfix1_LoadPools: XLua.DelegateBridge;
      // __Hotfix0_ContainsPool: XLua.DelegateBridge;
      // __Hotfix0_Allocate: XLua.DelegateBridge;
      // __Hotfix1_Allocate: XLua.DelegateBridge;
      // __Hotfix2_Allocate: XLua.DelegateBridge;
      // __Hotfix3_Allocate: XLua.DelegateBridge;
      // __Hotfix4_Allocate: XLua.DelegateBridge;
      // __Hotfix5_Allocate: XLua.DelegateBridge;
      // __Hotfix6_Allocate: XLua.DelegateBridge;
      // __Hotfix7_Allocate: XLua.DelegateBridge;
      // __Hotfix8_Allocate: XLua.DelegateBridge;
      // __Hotfix9_Allocate: XLua.DelegateBridge;
      // __Hotfix10_Allocate: XLua.DelegateBridge;
      // __Hotfix11_Allocate: XLua.DelegateBridge;
      // __Hotfix0_Recycle: XLua.DelegateBridge;
      // __Hotfix1_Recycle: XLua.DelegateBridge;
      // __Hotfix2_Recycle: XLua.DelegateBridge;
      // __Hotfix3_Recycle: XLua.DelegateBridge;
    }
    export interface PreloadConfigAsset {
      configs: Torappu.ObjectPool.PoolManager.ObjectConfig[];
    }
    export namespace GameObjectPool {
      export enum NotificationType {
        NONE = "NONE",
        SEND_MESSAGE = "SEND_MESSAGE",
        BROADCAST_MESSAGE = "BROADCAST_MESSAGE",
      }
      export interface Options {
        DEFAULT: Torappu.ObjectPool.GameObjectPool.Options;
        preloadSize: System.Int32;
        maxCapacity: System.Int32;
        allowPoolAutoReuse: System.Boolean;
        notificationType: Torappu.ObjectPool.GameObjectPool.NotificationType;
        // container: UnityEngine.Transform;
      }
    }
    export namespace GameObjectPoolComponent {
    }
    export namespace ObjectPool {
      export interface Options<T> {
        preloadSize: System.Int32;
        maxCapacity: System.Int32;
        allowPoolAutoReuse: System.Boolean;
      }
    }
    export namespace PoolManager {
      export interface ObjectConfig {
        sourceType: Torappu.ObjectPool.PoolManager.ObjectConfig.SourceType;
        assetName: System.String;
        // prototype: UnityEngine.GameObject;
        poolOptions: Torappu.ObjectPool.GameObjectPool.Options;
      }
      export namespace ObjectConfig {
        export enum SourceType {
          RESOURCE = "RESOURCE",
          PROTOTYPE = "PROTOTYPE",
        }
      }
    }
  }
  export namespace RemoteCommandLine {
    export interface RemoteGeneralProcessor {
    }
    export interface RemoteCommandLineServer {
    }
  }
  export namespace StateMachine {
    export interface IBlackboard {
    }
    export interface IStateNode {
    }
    export interface DefaultBlackboard {
    }
  }
  export namespace HierachyStateMachine {
    export interface StateNode<StateType,DataType,BlackboardType> {
      // m_stateMachine: Torappu.HierachyStateMachine<StateType,DataType,BlackboardType>;
    }
    export interface SubStateMachine<StateType,DataType,BlackboardType,SubStateType> {
      parent: Torappu.HierachyStateMachine<StateType,DataType,BlackboardType>;
    }
    export interface SubStateMachineNode<StateType,DataType,BlackboardType,SubStateType> {
      // <subStateMachine>k__BackingField: Torappu.HierachyStateMachine.SubStateMachine<StateType,DataType,BlackboardType,SubStateType>;
    }
    export namespace SubStateMachineNode {
      export interface SubStateNode<StateType,DataType,BlackboardType,SubStateType> {
        // <parentState>k__BackingField: Torappu.HierachyStateMachine.SubStateMachineNode<StateType,DataType,BlackboardType,SubStateType>;
      }
    }
  }
  export namespace CharacterUtil {
  }
  export namespace BattleStartController {
    export interface IPlugin {
    }
    export interface Param {
      stageId: System.String;
      isPractise: System.Boolean;
      isAutoBattle: System.Boolean;
      assistIsFriend: System.Boolean;
      isHandBookStage: System.Boolean;
      isRetro: System.Boolean;
      squadForRequest: Torappu.CommonStartBattleRequest.SquadModel;
      assistFriend: Torappu.SquadFriendData;
      // squadLocal: Torappu.UI.Squad.SquadItemStruct[];
      finishIllust: Torappu.Battle.BattleFinishIllust;
      runeList: System.Collections.Generic.List<Torappu.RuneTable.PackedRuneData>;
      overrideBgmEvent: System.String;
      overrideStageInfo: Torappu.Battle.BattleStageInfo;
      overrideBattlePlayerData: Torappu.Battle.BattlePlayerData;
      // overrideStageIdStruct: Torappu.UI.StageId;
      customizeStartService: Torappu.IStartBattleServiceConfig;
      customizedFinishService: Torappu.IFinishBattleServiceConfig;
      actMeta: Torappu.Battle.BattleActivityMeta;
      // battleFinishIndexPlugin: Torappu.UI.BattleFinish.BattleFinishIndexState.IPlugin;
      skipBattleFinishWhenFailed: System.Boolean;
      // sysMenuStyle: Torappu.Battle.UI.BattleSysMenuStyle;
      bundleToJumpBack: Torappu.DataBundle;
      uploadBattleLog: System.Boolean;
      stageMeta: Torappu.Battle.BattleStageMeta;
      gameModeMeta: Torappu.Battle.GameModeMeta;
    }
    export interface Handler {
      // onProceed: System.Action;
      // onBlock: System.Action;
    }
    export interface Cache {
      handler: Torappu.BattleStartController.Handler;
      param: Torappu.BattleStartController.Param;
      seed: System.String;
      plugin: Torappu.BattleStartController.IPlugin;
    }
  }
  export namespace SharedCharData {
    export interface SharedCharSkillData {
      skillId: System.String;
      specializeLevel: System.Int32;
    }
    export interface TmplData {
      skillIndex: System.Int32;
      skinId: System.String;
      skills: Torappu.SharedCharData.SharedCharSkillData[];
    }
    export interface TmplModifier {
      skillIndex: System.Int32;
    }
  }
  export namespace RequestAssistChar {
    export interface Patch {
      skillIndex: System.Int32;
    }
  }
  export namespace MedalSetCustomDataRequest {
    export interface LayoutItem {
      id: System.String;
      pos: System.Int32[];
    }
    export interface Data {
      layout: System.Collections.Generic.List<Torappu.MedalSetCustomDataRequest.LayoutItem>;
    }
  }
  export namespace Mission {
    export enum MissionPageType {
      STARTMISSION = "STARTMISSION",
      DAILYMISSION = "DAILYMISSION",
      MAINMISSION = "MAINMISSION",
      ACTIVITYMISSION = "ACTIVITYMISSION",
      WEEKLYMISSION = "WEEKLYMISSION",
    }
    export interface MissionConsts {
      KEY_MISSION_TYPE: System.String;
    }
  }
  export namespace ShopCashPurchaseUtil {
    export interface Context {
      orderId: System.String;
      transactionId: System.String;
      extension: System.String;
    }
  }
  export namespace StageDataUtil {
    export enum StageDataSource {
      NONE = "NONE",
      STAGE_DB = "STAGE_DB",
      RETRO_DB = "RETRO_DB",
    }
    export interface StageDataWrapper {
      EMPTY: Torappu.StageDataUtil.StageDataWrapper;
      data: Torappu.StageData;
      source: Torappu.StageDataUtil.StageDataSource;
    }
  }
  export namespace Upgrade {
    export interface ParticleSystemUpgradeAdapter {
    }
  }
  export namespace PostEffect {
    export interface MobileBloom {
      SHADER_NAME: System.String;
      KEYWORD_FASTEST_BLUR_ON: System.String;
      _settings: Torappu.PostEffect.MobileBloom.Settings;
      // m_thresholdShaderId: System.Int32;
      // m_parameterShaderId: System.Int32;
      // m_bloomTexShaderId: System.Int32;
      // m_cachedBlurQuality: System.Nullable<Torappu.PostEffect.MobileBloom.BlurQuality>;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_settings: XLua.DelegateBridge;
      // __Hotfix0_set_settings: XLua.DelegateBridge;
      // __Hotfix0_get_shaderName: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_OnPostEffect: XLua.DelegateBridge;
    }
    export interface MobileBlur {
      SHADER_NAME: System.String;
      _settings: Torappu.PostEffect.MobileBlur.Settings;
      // m_parameterShaderId: System.Int32;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_settings: XLua.DelegateBridge;
      // __Hotfix0_set_settings: XLua.DelegateBridge;
      // __Hotfix0_get_shaderName: XLua.DelegateBridge;
      // __Hotfix0_OnInit: XLua.DelegateBridge;
      // __Hotfix0_OnPostEffect: XLua.DelegateBridge;
    }
    export interface PostEffectBase {
      // _shader: UnityEngine.Shader;
      // m_allowMSAA: System.Nullable<System.Boolean>;
      // m_isSupported: System.Boolean;
      // m_sourceRT: UnityEngine.RenderTexture;
      // m_rawRenderTarget: UnityEngine.RenderTexture;
      // m_depthBufferSize: System.Int32;
      // m_material: UnityEngine.Material;
      // m_camera: UnityEngine.Camera;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_set_depthBuffer: XLua.DelegateBridge;
      // __Hotfix0_CheckSupport: XLua.DelegateBridge;
      // __Hotfix0__CheckResources: XLua.DelegateBridge;
      // __Hotfix0__NotSupported: XLua.DelegateBridge;
      // __Hotfix0__CheckShaderAndCreateMaterial: XLua.DelegateBridge;
      // __Hotfix0_Start: XLua.DelegateBridge;
      // __Hotfix0_OnEnable: XLua.DelegateBridge;
      // __Hotfix0_OnDisable: XLua.DelegateBridge;
      // __Hotfix0_OnDestroy: XLua.DelegateBridge;
      // __Hotfix0_OnPreRender: XLua.DelegateBridge;
      // __Hotfix0_OnPostRender: XLua.DelegateBridge;
    }
    export interface PostEffectLoader {
      _bloomEnabled: System.Boolean;
      _bloomSettings: Torappu.PostEffect.MobileBloom.Settings;
      _useDepth: System.Boolean;
      _useStencil: System.Boolean;
      // m_bloom: Torappu.PostEffect.MobileBloom;
      // _c__Hotfix0_ctor: XLua.DelegateBridge;
      // __Hotfix0_get_bloomEnabled: XLua.DelegateBridge;
      // __Hotfix0__OnSettingChanged: XLua.DelegateBridge;
      // __Hotfix0__UpdateBloomStatus: XLua.DelegateBridge;
      // __Hotfix0_Start: XLua.DelegateBridge;
      // __Hotfix0_OnDestroy: XLua.DelegateBridge;
    }
    export namespace MobileBloom {
      export enum BloomScreenBlendMode {
        Screen = "Screen",
        Add = "Add",
      }
      export enum BlurQuality {
        STANDARD = "STANDARD",
        FASTEST = "FASTEST",
      }
      export interface Settings {
        screenBlendMode: Torappu.PostEffect.MobileBloom.BloomScreenBlendMode;
        intensity: System.Single;
        // blendColor: UnityEngine.Color;
        threshold: System.Single;
        // thresholdColor: UnityEngine.Color;
        blurQuality: Torappu.PostEffect.MobileBloom.BlurQuality;
        sepBlurSpread: System.Single;
        blurIterations: System.Int32;
        downSampleDivider: System.Int32;
      }
    }
    export namespace MobileBlur {
      export enum BlurType {
        StandardGauss = "StandardGauss",
        SgxGauss = "SgxGauss",
      }
      export interface Settings {
        downsample: System.Int32;
        blurSize: System.Single;
        blurIterations: System.Int32;
        blurType: Torappu.PostEffect.MobileBlur.BlurType;
      }
    }
  }
}
export namespace U8 {
  export namespace SDK {
    export interface ExternalPluginLoginParams {
      // nativeLogin: System.Action;
      // nativeOnLoginSuc: System.Action<System.String>;
      // nativeOnLoginFail: System.Action<System.String>;
    }
    export interface ExternalPluginLogoutParams {
      // nativeLogout: System.Action;
      // nativeOnLogoutSuc: System.Action;
      // nativeOnLogoutFail: System.Action;
    }
    export interface ExternalPluginPayParams {
      payParams: U8.SDK.U8PayParams;
      // nativePay: System.Func<U8.SDK.U8PayParams,U8.SDK.SDKPromise<U8.SDK.U8PayResult>>;
      // onPaySuc: System.Action<U8.SDK.U8PayResult>;
      // onPayFail: System.Action<System.Object>;
    }
    export interface IExternalPlugin {
    }
    export interface SDKExternalTools {
      RANDOM_CHAR_MAP: System.Char[];
      // s_instance: U8.SDK.SDKExternalTools;
      // s_plugin: U8.SDK.IExternalPlugin;
      // <inited>k__BackingField: System.Boolean;
      // <subChannel>k__BackingField: System.String;
      // <>f__am$cache0: System.Action<System.String>;
      // <>f__am$cache1: System.Action<System.String>;
      // <>f__am$cache2: System.Action;
      // <>f__am$cache3: System.Action;
    }
    export interface U8SDKInterface {
      KEY_CACHED_UID: System.String;
      // m_instance: U8.SDK.U8SDKInterface;
      // m_initPromise: U8.SDK.SDKPromiseWrapper;
      // m_loginPromise: U8.SDK.SDKPromiseWrapper;
      // m_logoutPromise: U8.SDK.SDKPromiseWrapper;
      // m_payPromise: U8.SDK.SDKPromiseWrapper;
      // m_sdkMeta: U8.SDK.SDKMeta;
      // m_loginResult: U8.SDK.U8LoginResult;
      // m_loginExt: System.String;
      // m_productList: System.Collections.Generic.List<U8.SDK.U8ProductInfo>;
      // m_isNativePlugin: System.Nullable<System.Boolean>;
      // <>f__am$cache0: System.Comparison<System.Collections.Generic.KeyValuePair<System.String,System.String>>;
    }
    export interface SDKError {
      // <code>k__BackingField: System.String;
      // <msg>k__BackingField: System.String;
    }
    export interface U8ProductInfo {
      app_id: System.String;
      channel_id: System.String;
      world_id: System.Int32;
      store_id: System.Int32;
      product_id: System.String;
      desc: System.String;
      name: System.String;
      type: System.Int32;
      price: System.Int64;
      extra_data: System.String;
      appstore_id: System.String;
      channel_product_id: System.String;
    }
    export interface U8OrderInfo {
      orderId: System.String;
      extension: System.String;
    }
    export interface U8PayParams {
      // <productId>k__BackingField: System.String;
      // <productName>k__BackingField: System.String;
      // <productDesc>k__BackingField: System.String;
      // <price>k__BackingField: System.Int64;
      // <buyNum>k__BackingField: System.Int32;
      // <coinNum>k__BackingField: System.Int32;
      // <serverId>k__BackingField: System.String;
      // <serverName>k__BackingField: System.String;
      // <roleId>k__BackingField: System.String;
      // <roleName>k__BackingField: System.String;
      // <roleLevel>k__BackingField: System.Int32;
      // <vip>k__BackingField: System.String;
      // <orderID>k__BackingField: System.String;
      // <worldID>k__BackingField: System.String;
      // <token>k__BackingField: System.String;
      // <appKey>k__BackingField: System.String;
      // <extension>k__BackingField: System.String;
      // <addition>k__BackingField: System.String;
    }
    export interface U8ExtraGameData {
      TYPE_SELECT_SERVER: System.Int32;
      TYPE_CREATE_ROLE: System.Int32;
      TYPE_ENTER_GAME: System.Int32;
      TYPE_LEVEL_UP: System.Int32;
      TYPE_EXIT_GAME: System.Int32;
      TYPE_STOP_GAME: System.Int32;
      // <dataType>k__BackingField: System.Int32;
      // <roleID>k__BackingField: System.String;
      // <roleName>k__BackingField: System.String;
      // <roleLevel>k__BackingField: System.String;
      // <serverID>k__BackingField: System.Int32;
      // <serverName>k__BackingField: System.String;
      // <moneyNum>k__BackingField: System.Int32;
    }
    export interface U8LoginResult {
      EMPTY: U8.SDK.U8LoginResult;
      result: System.Int32;
      uid: System.String;
      channelUid: System.String;
      token: System.String;
      extension: System.String;
      isGuest: System.Boolean;
      error: System.String;
    }
    export interface U8LoginRejectInfo {
      error: System.String;
      needCaptcha: System.Boolean;
      captcha: System.String;
      captchaTips: System.String;
    }
    export interface U8CaptchaResult {
      result: System.Int32;
      data: System.String;
    }
    export interface U8PayConfirmResult {
      payState: U8.SDK.PayConfirmStatus;
    }
    export enum PayConfirmStatus {
      FAILED = "FAILED",
      THIRD_PARTY_PENDING = "THIRD_PARTY_PENDING",
      GAME_SERVER_PENDING = "GAME_SERVER_PENDING",
      SUCCEED = "SUCCEED",
      ORDER_NOT_EXIST = "ORDER_NOT_EXIST",
    }
    export enum PayResultStatus {
      SUCCEED = "SUCCEED",
      PENDING = "PENDING",
    }
    export enum PayFailStatus {
      UNKNOWN = "UNKNOWN",
      CANCELED = "CANCELED",
      ERROR = "ERROR",
      HALT = "HALT",
    }
    export enum U8ConfirmOrderStatus {
      NONE = "NONE",
      INTERNAL_ERROR = "INTERNAL_ERROR",
      TIMEOUT = "TIMEOUT",
      INVALID_ORDER = "INVALID_ORDER",
      SUCCEED = "SUCCEED",
    }
    export interface U8ConfirmOrderResult {
      status: U8.SDK.U8ConfirmOrderStatus;
      message: System.String;
    }
    export interface U8PayFailMsg {
      EMPTY: U8.SDK.U8PayFailMsg;
      status: U8.SDK.PayFailStatus;
      message: System.String;
      extension: System.String;
    }
    export interface U8PayResult {
      EMPTY: U8.SDK.U8PayResult;
      status: U8.SDK.PayResultStatus;
      outTradeNo: System.String;
      extension: System.String;
    }
    export interface U8GetDataResult {
      EMPTY: U8.SDK.U8GetDataResult;
      code: System.Int32;
      msg: System.String;
    }
    export interface SDKInterfaceAndroid {
      // jo: UnityEngine.AndroidJavaObject;
      packageName: System.String;
      // packageInfo: UnityEngine.AndroidJavaObject;
    }
    export interface SDKInterfaceDefault {
    }
    export interface SDKMeta {
      appID: System.String;
      appKey: System.String;
      channel: System.String;
      token: System.String;
      worldId: System.String;
      extension: System.String;
    }
    export interface ISDKPromise {
    }
    export interface SDKPromise<Param> {
      // onFulfilled: System.Action<Param>;
      // onRejected: System.Action<System.Object>;
    }
    export interface SDKPromiseWrapper {
      // m_promise: U8.SDK.ISDKPromise;
    }
    export interface U8SDKCallback {
      // m_instance: U8.SDK.U8SDKCallback;
      // m_lock: System.Object;
    }
    export namespace U8SDKInterface {
    }
  }
}
